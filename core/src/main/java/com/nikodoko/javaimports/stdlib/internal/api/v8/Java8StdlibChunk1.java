// Code generated by GenerateStdlib.java. DO NOT EDIT.
package com.nikodoko.javaimports.stdlib.internal.api.v8;

import static com.nikodoko.javaimports.stdlib.internal.Stdlib.newImport;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.common.Identifier;
import com.nikodoko.javaimports.common.Import;
import java.util.Map;

public class Java8StdlibChunk1 {
  static final Map<Identifier, Import[]> CLASSES =
      new ImmutableMap.Builder<Identifier, Import[]>()
          .put(
              new Identifier("WEIGHT_BOLD"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.WEIGHT_BOLD", true),
              })
          .put(
              new Identifier("AttributeView"),
              new Import[] {
                newImport("java.nio.file.attribute.AttributeView", false),
              })
          .put(
              new Identifier("EMBEDDED_BY"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRelation.EMBEDDED_BY", true),
              })
          .put(
              new Identifier("INHERIT"),
              new Import[] {
                newImport("java.lang.ProcessBuilder.Redirect.INHERIT", true),
              })
          .put(
              new Identifier("X509CRL"),
              new Import[] {
                newImport("java.security.cert.X509CRL", false),
              })
          .put(
              new Identifier("ValueBase"),
              new Import[] {
                newImport("org.omg.CORBA.portable.ValueBase", false),
              })
          .put(
              new Identifier("ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY"),
              new Import[] {
                newImport(
                    "javax.swing.AbstractButton.ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("Document"),
              new Import[] {
                newImport("javax.swing.text.Document", false),
                newImport("org.w3c.dom.Document", false),
              })
          .put(
              new Identifier("Superscript"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.Superscript", true),
              })
          .put(
              new Identifier("ITALIC_ACTION"),
              new Import[] {
                newImport("javax.swing.text.html.HTMLEditorKit.ITALIC_ACTION", true),
              })
          .put(
              new Identifier("getTreeHardDriveIcon"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalIconFactory.getTreeHardDriveIcon", true),
              })
          .put(
              new Identifier("ServantRetentionPolicyOperations"),
              new Import[] {
                newImport("org.omg.PortableServer.ServantRetentionPolicyOperations", false),
              })
          .put(
              new Identifier("ACCEPT_ALL"),
              new Import[] {
                newImport("java.net.CookiePolicy.ACCEPT_ALL", true),
              })
          .put(
              new Identifier("MimeHeaders"),
              new Import[] {
                newImport("javax.xml.soap.MimeHeaders", false),
              })
          .put(
              new Identifier("LONG_STANDALONE"),
              new Import[] {
                newImport("java.util.Calendar.LONG_STANDALONE", true),
              })
          .put(
              new Identifier("isLeap"),
              new Import[] {
                newImport("java.time.Year.isLeap", true),
              })
          .put(
              new Identifier("UnknownException"),
              new Import[] {
                newImport("org.omg.CORBA.portable.UnknownException", false),
              })
          .put(
              new Identifier("MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS"),
              new Import[] {
                newImport(
                    "java.lang.Character.UnicodeBlock.MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS", true),
              })
          .put(
              new Identifier("BlockingQueue"),
              new Import[] {
                newImport("java.util.concurrent.BlockingQueue", false),
              })
          .put(
              new Identifier("SUB"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.SUB", true),
              })
          .put(
              new Identifier("IRObjectOperations"),
              new Import[] {
                newImport("org.omg.CORBA.IRObjectOperations", false),
              })
          .put(
              new Identifier("KEY_ANTIALIASING"),
              new Import[] {
                newImport("java.awt.RenderingHints.KEY_ANTIALIASING", true),
              })
          .put(
              new Identifier("SO_REUSEADDR"),
              new Import[] {
                newImport("java.net.SocketOptions.SO_REUSEADDR", true),
                newImport("java.net.StandardSocketOptions.SO_REUSEADDR", true),
              })
          .put(
              new Identifier("setFailureHandler"),
              new Import[] {
                newImport("java.rmi.server.RMISocketFactory.setFailureHandler", true),
              })
          .put(
              new Identifier("getFileChooserUpFolderIcon"),
              new Import[] {
                newImport(
                    "javax.swing.plaf.metal.MetalIconFactory.getFileChooserUpFolderIcon", true),
              })
          .put(
              new Identifier("SUP"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.SUP", true),
              })
          .put(
              new Identifier("PooledConnection"),
              new Import[] {
                newImport("javax.sql.PooledConnection", false),
              })
          .put(
              new Identifier("BACKGROUND_ATTACHMENT"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.BACKGROUND_ATTACHMENT", true),
              })
          .put(
              new Identifier("MOUSE_ENTER"),
              new Import[] {
                newImport("java.awt.Event.MOUSE_ENTER", true),
              })
          .put(
              new Identifier("ACCESSIBLE_CARET_PROPERTY"),
              new Import[] {
                newImport("javax.accessibility.AccessibleContext.ACCESSIBLE_CARET_PROPERTY", true),
              })
          .put(
              new Identifier("VARCHAR"),
              new Import[] {
                newImport("java.sql.Types.VARCHAR", true),
              })
          .put(
              new Identifier("VMID"),
              new Import[] {
                newImport("java.rmi.dgc.VMID", false),
              })
          .put(
              new Identifier("ServantObject"),
              new Import[] {
                newImport("org.omg.CORBA.portable.ServantObject", false),
              })
          .put(
              new Identifier("VK_COLON"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_COLON", true),
              })
          .put(
              new Identifier("isParityAdjusted"),
              new Import[] {
                newImport("javax.crypto.spec.DESKeySpec.isParityAdjusted", true),
                newImport("javax.crypto.spec.DESedeKeySpec.isParityAdjusted", true),
              })
          .put(
              new Identifier("Group"),
              new Import[] {
                newImport("java.security.acl.Group", false),
              })
          .put(
              new Identifier("GRAY"),
              new Import[] {
                newImport("java.awt.Color.GRAY", true),
              })
          .put(
              new Identifier("Instrumentation"),
              new Import[] {
                newImport("java.lang.instrument.Instrumentation", false),
              })
          .put(
              new Identifier("CellEditorListener"),
              new Import[] {
                newImport("javax.swing.event.CellEditorListener", false),
              })
          .put(
              new Identifier("VariableElement"),
              new Import[] {
                newImport("javax.lang.model.element.VariableElement", false),
              })
          .put(
              new Identifier("JobKOctetsSupported"),
              new Import[] {
                newImport("javax.print.attribute.standard.JobKOctetsSupported", false),
              })
          .put(
              new Identifier("DragSourceContext"),
              new Import[] {
                newImport("java.awt.dnd.DragSourceContext", false),
              })
          .put(
              new Identifier("printShort"),
              new Import[] {
                newImport("javax.xml.bind.DatatypeConverter.printShort", true),
              })
          .put(
              new Identifier("InvalidObjectException"),
              new Import[] {
                newImport("java.io.InvalidObjectException", false),
              })
          .put(
              new Identifier("SQLInvalidAuthorizationSpecException"),
              new Import[] {
                newImport("java.sql.SQLInvalidAuthorizationSpecException", false),
              })
          .put(
              new Identifier("DstIn"),
              new Import[] {
                newImport("java.awt.AlphaComposite.DstIn", true),
              })
          .put(
              new Identifier("isUnicodeIdentifierStart"),
              new Import[] {
                newImport("java.lang.Character.isUnicodeIdentifierStart", true),
              })
          .put(
              new Identifier("INITIAL_CONTEXT_FACTORY"),
              new Import[] {
                newImport("javax.naming.Context.INITIAL_CONTEXT_FACTORY", true),
              })
          .put(
              new Identifier("PRINTABLE"),
              new Import[] {
                newImport("java.awt.PageAttributes.OriginType.PRINTABLE", true),
                newImport("javax.print.DocFlavor.SERVICE_FORMATTED.PRINTABLE", true),
              })
          .put(
              new Identifier("DRAFT"),
              new Import[] {
                newImport("java.awt.PageAttributes.PrintQualityType.DRAFT", true),
                newImport("javax.print.attribute.standard.PrintQuality.DRAFT", true),
              })
          .put(
              new Identifier("isWeak"),
              new Import[] {
                newImport("javax.crypto.spec.DESKeySpec.isWeak", true),
              })
          .put(
              new Identifier("FREE_MEM"),
              new Import[] {
                newImport("org.omg.CORBA.FREE_MEM", false),
              })
          .put(
              new Identifier("dk_Alias"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind.dk_Alias", true),
              })
          .put(
              new Identifier("getInvocationHandler"),
              new Import[] {
                newImport("java.lang.reflect.Proxy.getInvocationHandler", true),
              })
          .put(
              new Identifier("ISO_B5_ENVELOPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_B5_ENVELOPE", true),
              })
          .put(
              new Identifier("functionNullable"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.functionNullable", true),
              })
          .put(
              new Identifier("OTHER"),
              new Import[] {
                newImport("java.sql.Types.OTHER", true),
                newImport("javax.print.attribute.standard.PrinterStateReason.OTHER", true),
              })
          .put(
              new Identifier("ALTERNATE"),
              new Import[] {
                newImport("java.util.FormattableFlags.ALTERNATE", true),
              })
          .put(
              new Identifier("FLOWS_TO_PROPERTY"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRelation.FLOWS_TO_PROPERTY", true),
              })
          .put(
              new Identifier("Runnable"),
              new Import[] {
                newImport("java.lang.Runnable", false),
              })
          .put(
              new Identifier("columnNullableUnknown"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.columnNullableUnknown", true),
                newImport("java.sql.ResultSetMetaData.columnNullableUnknown", true),
              })
          .put(
              new Identifier("BasicSplitPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicSplitPaneUI", false),
              })
          .put(
              new Identifier("getBlack"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalLookAndFeel.getBlack", true),
              })
          .put(
              new Identifier("EXCLUSIVE_WITH_COMMENTS"),
              new Import[] {
                newImport(
                    "javax.xml.crypto.dsig.CanonicalizationMethod.EXCLUSIVE_WITH_COMMENTS", true),
              })
          .put(
              new Identifier("DynAnyFactoryOperations"),
              new Import[] {
                newImport("org.omg.DynamicAny.DynAnyFactoryOperations", false),
              })
          .put(
              new Identifier("IdUniquenessPolicy"),
              new Import[] {
                newImport("org.omg.PortableServer.IdUniquenessPolicy", false),
              })
          .put(
              new Identifier("POAHelper"),
              new Import[] {
                newImport("org.omg.PortableServer.POAHelper", false),
              })
          .put(
              new Identifier("Exchanger"),
              new Import[] {
                newImport("java.util.concurrent.Exchanger", false),
              })
          .put(
              new Identifier("JarURLConnection"),
              new Import[] {
                newImport("java.net.JarURLConnection", false),
              })
          .put(
              new Identifier("LEPCHA"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.LEPCHA", true),
              })
          .put(
              new Identifier("KRB_NT_PRINCIPAL"),
              new Import[] {
                newImport("javax.security.auth.kerberos.KerberosPrincipal.KRB_NT_PRINCIPAL", true),
              })
          .put(
              new Identifier("RemarshalException"),
              new Import[] {
                newImport("org.omg.CORBA.portable.RemarshalException", false),
              })
          .put(
              new Identifier("TAG_GLYF"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_GLYF", true),
              })
          .put(
              new Identifier("icSigCmykData"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigCmykData", true),
              })
          .put(
              new Identifier("IdUniquenessPolicyValue"),
              new Import[] {
                newImport("org.omg.PortableServer.IdUniquenessPolicyValue", false),
              })
          .put(
              new Identifier("TAG_VHEA"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_VHEA", true),
              })
          .put(
              new Identifier("dropArguments"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandles.dropArguments", true),
              })
          .put(
              new Identifier("ReadWriteLock"),
              new Import[] {
                newImport("java.util.concurrent.locks.ReadWriteLock", false),
              })
          .put(
              new Identifier("LABEL"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.LABEL", true),
                newImport("javax.swing.plaf.synth.Region.LABEL", true),
              })
          .put(
              new Identifier("AtomicMoveNotSupportedException"),
              new Import[] {
                newImport("java.nio.file.AtomicMoveNotSupportedException", false),
              })
          .put(
              new Identifier("NamingExceptionEvent"),
              new Import[] {
                newImport("javax.naming.event.NamingExceptionEvent", false),
              })
          .put(
              new Identifier("parseTime"),
              new Import[] {
                newImport("javax.xml.bind.DatatypeConverter.parseTime", true),
              })
          .put(
              new Identifier("unmodifiableNavigableSet"),
              new Import[] {
                newImport("java.util.Collections.unmodifiableNavigableSet", true),
              })
          .put(
              new Identifier("POLICY_FORWARD_SECRECY"),
              new Import[] {
                newImport("javax.security.sasl.Sasl.POLICY_FORWARD_SECRECY", true),
              })
          .put(
              new Identifier("ECFieldFp"),
              new Import[] {
                newImport("java.security.spec.ECFieldFp", false),
              })
          .put(
              new Identifier("PublicKey"),
              new Import[] {
                newImport("java.security.PublicKey", false),
              })
          .put(
              new Identifier("NO_FIELDS"),
              new Import[] {
                newImport("java.io.ObjectStreamClass.NO_FIELDS", true),
              })
          .put(
              new Identifier("ObjectInstance"),
              new Import[] {
                newImport("javax.management.ObjectInstance", false),
              })
          .put(
              new Identifier("HTTP_NOT_AUTHORITATIVE"),
              new Import[] {
                newImport("java.net.HttpURLConnection.HTTP_NOT_AUTHORITATIVE", true),
              })
          .put(
              new Identifier("JRadioButtonMenuItem"),
              new Import[] {
                newImport("javax.swing.JRadioButtonMenuItem", false),
              })
          .put(
              new Identifier("isWhitespace"),
              new Import[] {
                newImport("java.lang.Character.isWhitespace", true),
              })
          .put(
              new Identifier("DEFAULT_KEYMAP"),
              new Import[] {
                newImport("javax.swing.text.JTextComponent.DEFAULT_KEYMAP", true),
              })
          .put(
              new Identifier("AtomicReferenceFieldUpdater"),
              new Import[] {
                newImport("java.util.concurrent.atomic.AtomicReferenceFieldUpdater", false),
              })
          .put(
              new Identifier("POSITIVE_INFINITY"),
              new Import[] {
                newImport("java.lang.Double.POSITIVE_INFINITY", true),
                newImport("java.lang.Float.POSITIVE_INFINITY", true),
              })
          .put(
              new Identifier("YEARS"),
              new Import[] {
                newImport("javax.xml.datatype.DatatypeConstants.YEARS", true),
              })
          .put(
              new Identifier("TRANSPORT_AND_MAP_SYMBOLS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.TRANSPORT_AND_MAP_SYMBOLS", true),
              })
          .put(
              new Identifier("Renderer"),
              new Import[] {
                newImport("javax.swing.Renderer", false),
              })
          .put(
              new Identifier("ofMonths"),
              new Import[] {
                newImport("java.time.Period.ofMonths", true),
              })
          .put(
              new Identifier("Region"),
              new Import[] {
                newImport("javax.swing.plaf.synth.Region", false),
              })
          .put(
              new Identifier("AlgorithmMethod"),
              new Import[] {
                newImport("javax.xml.crypto.AlgorithmMethod", false),
              })
          .put(
              new Identifier("ServerRequest"),
              new Import[] {
                newImport("org.omg.CORBA.ServerRequest", false),
              })
          .put(
              new Identifier("LDAPCertStoreParameters"),
              new Import[] {
                newImport("java.security.cert.LDAPCertStoreParameters", false),
              })
          .put(
              new Identifier("getInactiveSystemTextColor"),
              new Import[] {
                newImport(
                    "javax.swing.plaf.metal.MetalLookAndFeel.getInactiveSystemTextColor", true),
              })
          .put(
              new Identifier("AbstractExecutorService"),
              new Import[] {
                newImport("java.util.concurrent.AbstractExecutorService", false),
              })
          .put(
              new Identifier("ENTERED"),
              new Import[] {
                newImport("javax.swing.event.HyperlinkEvent.EventType.ENTERED", true),
              })
          .put(
              new Identifier("GeneralPath"),
              new Import[] {
                newImport("java.awt.geom.GeneralPath", false),
              })
          .put(
              new Identifier("SQLException"),
              new Import[] {
                newImport("java.sql.SQLException", false),
              })
          .put(
              new Identifier("IntSupplier"),
              new Import[] {
                newImport("java.util.function.IntSupplier", false),
              })
          .put(
              new Identifier("GradientPaint"),
              new Import[] {
                newImport("java.awt.GradientPaint", false),
              })
          .put(
              new Identifier("SDATA"),
              new Import[] {
                newImport("javax.swing.text.html.parser.DTDConstants.SDATA", true),
              })
          .put(
              new Identifier("XA_HEURMIX"),
              new Import[] {
                newImport("javax.transaction.xa.XAException.XA_HEURMIX", true),
              })
          .put(
              new Identifier("getNextWord"),
              new Import[] {
                newImport("javax.swing.text.Utilities.getNextWord", true),
              })
          .put(
              new Identifier("negateExact"),
              new Import[] {
                newImport("java.lang.Math.negateExact", true),
              })
          .put(
              new Identifier("NEXT"),
              new Import[] {
                newImport("javax.swing.SwingConstants.NEXT", true),
              })
          .put(
              new Identifier("COMPONENT_ADDED"),
              new Import[] {
                newImport("java.awt.event.ContainerEvent.COMPONENT_ADDED", true),
              })
          .put(
              new Identifier("_USE_SERVANT_MANAGER"),
              new Import[] {
                newImport(
                    "org.omg.PortableServer.RequestProcessingPolicyValue._USE_SERVANT_MANAGER",
                    true),
              })
          .put(
              new Identifier("isDesktopSupported"),
              new Import[] {
                newImport("java.awt.Desktop.isDesktopSupported", true),
              })
          .put(
              new Identifier("AbstractCellEditor"),
              new Import[] {
                newImport("javax.swing.AbstractCellEditor", false),
              })
          .put(
              new Identifier("LOG_OPTION"),
              new Import[] {
                newImport("javax.swing.DebugGraphics.LOG_OPTION", true),
              })
          .put(
              new Identifier("ColorChooserUI"),
              new Import[] {
                newImport("javax.swing.plaf.ColorChooserUI", false),
              })
          .put(
              new Identifier("DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE"),
              new Import[] {
                newImport("java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE", true),
              })
          .put(
              new Identifier("StubDelegate"),
              new Import[] {
                newImport("javax.rmi.CORBA.StubDelegate", false),
              })
          .put(
              new Identifier("DayOfWeek"),
              new Import[] {
                newImport("java.time.DayOfWeek", false),
              })
          .put(
              new Identifier("JMXPrincipal"),
              new Import[] {
                newImport("javax.management.remote.JMXPrincipal", false),
              })
          .put(
              new Identifier("Purpose"),
              new Import[] {
                newImport("javax.xml.crypto.KeySelector.Purpose", false),
              })
          .put(
              new Identifier("SUPERSCRIPT_SUB"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.SUPERSCRIPT_SUB", true),
              })
          .put(
              new Identifier("getDefaultProviderInstance"),
              new Import[] {
                newImport("java.rmi.server.RMIClassLoader.getDefaultProviderInstance", true),
              })
          .put(
              new Identifier("getValue"),
              new Import[] {
                newImport("javax.xml.bind.JAXBIntrospector.getValue", true),
              })
          .put(
              new Identifier("WINDOW_DEACTIVATED"),
              new Import[] {
                newImport("java.awt.event.WindowEvent.WINDOW_DEACTIVATED", true),
              })
          .put(
              new Identifier("RSAMultiPrimePrivateCrtKey"),
              new Import[] {
                newImport("java.security.interfaces.RSAMultiPrimePrivateCrtKey", false),
              })
          .put(
              new Identifier("ENDTAG"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.ENDTAG", true),
                newImport("javax.swing.text.html.parser.DTDConstants.ENDTAG", true),
              })
          .put(
              new Identifier("ACTION_PERFORMED"),
              new Import[] {
                newImport("java.awt.event.ActionEvent.ACTION_PERFORMED", true),
              })
          .put(
              new Identifier("INPUT_TRAY_MISSING"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.PrinterStateReason.INPUT_TRAY_MISSING", true),
              })
          .put(
              new Identifier("NEWS"),
              new Import[] {
                newImport("javax.print.attribute.standard.ReferenceUriSchemesSupported.NEWS", true),
              })
          .put(
              new Identifier("DHPublicKeySpec"),
              new Import[] {
                newImport("javax.crypto.spec.DHPublicKeySpec", false),
              })
          .put(
              new Identifier("PrintServiceAttributeEvent"),
              new Import[] {
                newImport("javax.print.event.PrintServiceAttributeEvent", false),
              })
          .put(
              new Identifier("MINUTES"),
              new Import[] {
                newImport("javax.xml.datatype.DatatypeConstants.MINUTES", true),
              })
          .put(
              new Identifier("reducing"),
              new Import[] {
                newImport("java.util.stream.Collectors.reducing", true),
              })
          .put(
              new Identifier("XMLInputFactory"),
              new Import[] {
                newImport("javax.xml.stream.XMLInputFactory", false),
              })
          .put(
              new Identifier("ObjectStreamConstants"),
              new Import[] {
                newImport("java.io.ObjectStreamConstants", false),
              })
          .put(
              new Identifier("TreeExpansionListener"),
              new Import[] {
                newImport("javax.swing.event.TreeExpansionListener", false),
              })
          .put(
              new Identifier("LinkController"),
              new Import[] {
                newImport("javax.swing.text.html.HTMLEditorKit.LinkController", false),
              })
          .put(
              new Identifier("PARAGRAPH"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.PARAGRAPH", true),
              })
          .put(
              new Identifier("NoSuchAlgorithmException"),
              new Import[] {
                newImport("java.security.NoSuchAlgorithmException", false),
              })
          .put(
              new Identifier("FONT_CHOOSER"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.FONT_CHOOSER", true),
              })
          .put(
              new Identifier("DECIMAL_SEPARATOR"),
              new Import[] {
                newImport("java.text.NumberFormat.Field.DECIMAL_SEPARATOR", true),
              })
          .put(
              new Identifier("Locator"),
              new Import[] {
                newImport("org.xml.sax.Locator", false),
              })
          .put(
              new Identifier("DEFAULT_NS_PREFIX"),
              new Import[] {
                newImport("javax.xml.XMLConstants.DEFAULT_NS_PREFIX", true),
              })
          .put(
              new Identifier("ProgressBarUI"),
              new Import[] {
                newImport("javax.swing.plaf.ProgressBarUI", false),
              })
          .put(
              new Identifier("SplitPaneBorder"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicBorders.SplitPaneBorder", false),
              })
          .put(
              new Identifier("READER"),
              new Import[] {
                newImport("javax.print.DocFlavor.READER", false),
              })
          .put(
              new Identifier("VK_NUM_LOCK"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_NUM_LOCK", true),
              })
          .put(
              new Identifier("UIDefaults"),
              new Import[] {
                newImport("javax.swing.UIDefaults", false),
              })
          .put(
              new Identifier("AbstractPreferences"),
              new Import[] {
                newImport("java.util.prefs.AbstractPreferences", false),
              })
          .put(
              new Identifier("MBeanPermission"),
              new Import[] {
                newImport("javax.management.MBeanPermission", false),
              })
          .put(
              new Identifier("HORIZONTAL_ALIGNMENT_CHANGED_PROPERTY"),
              new Import[] {
                newImport("javax.swing.AbstractButton.HORIZONTAL_ALIGNMENT_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("AccessibleSelection"),
              new Import[] {
                newImport("javax.accessibility.AccessibleSelection", false),
              })
          .put(
              new Identifier("LongSummaryStatistics"),
              new Import[] {
                newImport("java.util.LongSummaryStatistics", false),
              })
          .put(
              new Identifier("NodeSetData"),
              new Import[] {
                newImport("javax.xml.crypto.NodeSetData", false),
              })
          .put(
              new Identifier("NotSerializableException"),
              new Import[] {
                newImport("java.io.NotSerializableException", false),
              })
          .put(
              new Identifier("AccessibleAction"),
              new Import[] {
                newImport("javax.accessibility.AccessibleAction", false),
              })
          .put(
              new Identifier("parseString"),
              new Import[] {
                newImport("javax.xml.bind.DatatypeConverter.parseString", true),
              })
          .put(
              new Identifier("StateValue"),
              new Import[] {
                newImport("javax.swing.SwingWorker.StateValue", false),
              })
          .put(
              new Identifier("Externalizable"),
              new Import[] {
                newImport("java.io.Externalizable", false),
              })
          .put(
              new Identifier("Object"),
              new Import[] {
                newImport("java.lang.Object", false), newImport("org.omg.CORBA.Object", false),
              })
          .put(
              new Identifier("setItalic"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.setItalic", true),
              })
          .put(
              new Identifier("SERVICE_OFF_LINE"),
              new Import[] {
                newImport("javax.print.attribute.standard.JobStateReason.SERVICE_OFF_LINE", true),
              })
          .put(
              new Identifier("ENV_10X15"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ENV_10X15", true),
              })
          .put(
              new Identifier("ENV_10X14"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ENV_10X14", true),
              })
          .put(
              new Identifier("ENV_10X13"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ENV_10X13", true),
              })
          .put(
              new Identifier("DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING"),
              new Import[] {
                newImport("java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING", true),
              })
          .put(
              new Identifier("ViewFactory"),
              new Import[] {
                newImport("javax.swing.text.ViewFactory", false),
              })
          .put(
              new Identifier("OK_CANCEL_OPTION"),
              new Import[] {
                newImport(
                    "javax.security.auth.callback.ConfirmationCallback.OK_CANCEL_OPTION", true),
                newImport("javax.swing.JOptionPane.OK_CANCEL_OPTION", true),
              })
          .put(
              new Identifier("METHOD_ATTRIBUTE_PFX"),
              new Import[] {
                newImport("java.util.jar.Pack200.Packer.METHOD_ATTRIBUTE_PFX", true),
              })
          .put(
              new Identifier("ClassDefinition"),
              new Import[] {
                newImport("java.lang.instrument.ClassDefinition", false),
              })
          .put(
              new Identifier("EDGE_STITCH_BOTTOM"),
              new Import[] {
                newImport("javax.print.attribute.standard.Finishings.EDGE_STITCH_BOTTOM", true),
              })
          .put(
              new Identifier("BufferedWriter"),
              new Import[] {
                newImport("java.io.BufferedWriter", false),
              })
          .put(
              new Identifier("getAudioInputStream"),
              new Import[] {
                newImport("javax.sound.sampled.AudioSystem.getAudioInputStream", true),
              })
          .put(
              new Identifier("setPosixFilePermissions"),
              new Import[] {
                newImport("java.nio.file.Files.setPosixFilePermissions", true),
              })
          .put(
              new Identifier("fromMillis"),
              new Import[] {
                newImport("java.nio.file.attribute.FileTime.fromMillis", true),
              })
          .put(
              new Identifier("SimpleTimeZone"),
              new Import[] {
                newImport("java.util.SimpleTimeZone", false),
              })
          .put(
              new Identifier("AudioFileWriter"),
              new Import[] {
                newImport("javax.sound.sampled.spi.AudioFileWriter", false),
              })
          .put(
              new Identifier("ParseConversionEventImpl"),
              new Import[] {
                newImport("javax.xml.bind.helpers.ParseConversionEventImpl", false),
              })
          .put(
              new Identifier("SpinnerUI"),
              new Import[] {
                newImport("javax.swing.plaf.SpinnerUI", false),
              })
          .put(
              new Identifier("ThreadGroup"),
              new Import[] {
                newImport("java.lang.ThreadGroup", false),
              })
          .put(
              new Identifier("DomHandler"),
              new Import[] {
                newImport("javax.xml.bind.annotation.DomHandler", false),
              })
          .put(
              new Identifier("CertPath"),
              new Import[] {
                newImport("java.security.cert.CertPath", false),
              })
          .put(
              new Identifier("X509CRLSelector"),
              new Import[] {
                newImport("java.security.cert.X509CRLSelector", false),
              })
          .put(
              new Identifier("XmlAdapter"),
              new Import[] {
                newImport("javax.xml.bind.annotation.adapters.XmlAdapter", false),
              })
          .put(
              new Identifier("ADJUSTMENT_FIRST"),
              new Import[] {
                newImport("java.awt.event.AdjustmentEvent.ADJUSTMENT_FIRST", true),
              })
          .put(
              new Identifier("EventException"),
              new Import[] {
                newImport("org.w3c.dom.events.EventException", false),
              })
          .put(
              new Identifier("_tk_octet"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind._tk_octet", true),
              })
          .put(
              new Identifier("PSource"),
              new Import[] {
                newImport("javax.crypto.spec.PSource", false),
              })
          .put(
              new Identifier("NORM_PRIORITY"),
              new Import[] {
                newImport("java.lang.Thread.NORM_PRIORITY", true),
              })
          .put(
              new Identifier("MAX_NAME_LENGTH"),
              new Import[] {
                newImport("java.util.prefs.Preferences.MAX_NAME_LENGTH", true),
              })
          .put(
              new Identifier("KeyAlreadyExistsException"),
              new Import[] {
                newImport("javax.management.openmbean.KeyAlreadyExistsException", false),
              })
          .put(
              new Identifier("SESSION_MAINTAIN_PROPERTY"),
              new Import[] {
                newImport("javax.xml.ws.BindingProvider.SESSION_MAINTAIN_PROPERTY", true),
              })
          .put(
              new Identifier("HINTS_OBSERVED"),
              new Import[] {
                newImport("java.awt.image.renderable.RenderableImage.HINTS_OBSERVED", true),
              })
          .put(
              new Identifier("checkedList"),
              new Import[] {
                newImport("java.util.Collections.checkedList", true),
              })
          .put(
              new Identifier("Type"),
              new Import[] {
                newImport("java.awt.Window.Type", false),
                newImport("java.lang.ProcessBuilder.Redirect.Type", false),
                newImport("java.lang.reflect.Type", false),
                newImport("java.net.Proxy.Type", false),
                newImport("java.security.KeyRep.Type", false),
                newImport("javax.sound.sampled.AudioFileFormat.Type", false),
                newImport("javax.sound.sampled.BooleanControl.Type", false),
                newImport("javax.sound.sampled.CompoundControl.Type", false),
                newImport("javax.sound.sampled.Control.Type", false),
                newImport("javax.sound.sampled.EnumControl.Type", false),
                newImport("javax.sound.sampled.FloatControl.Type", false),
                newImport("javax.sound.sampled.LineEvent.Type", false),
                newImport("javax.swing.event.RowSorterEvent.Type", false),
              })
          .put(
              new Identifier("TAB"),
              new Import[] {
                newImport("java.awt.Event.TAB", true),
              })
          .put(
              new Identifier("Characteristics"),
              new Import[] {
                newImport("java.util.stream.Collector.Characteristics", false),
              })
          .put(
              new Identifier("SignatureProperties"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.SignatureProperties", false),
              })
          .put(
              new Identifier("icSigSpace3CLR"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigSpace3CLR", true),
              })
          .put(
              new Identifier("IntToLongFunction"),
              new Import[] {
                newImport("java.util.function.IntToLongFunction", false),
              })
          .put(
              new Identifier("MissingFormatWidthException"),
              new Import[] {
                newImport("java.util.MissingFormatWidthException", false),
              })
          .put(
              new Identifier("OpenMBeanAttributeInfoSupport"),
              new Import[] {
                newImport("javax.management.openmbean.OpenMBeanAttributeInfoSupport", false),
              })
          .put(
              new Identifier("ButtonModel"),
              new Import[] {
                newImport("javax.swing.ButtonModel", false),
              })
          .put(
              new Identifier("NVList"),
              new Import[] {
                newImport("org.omg.CORBA.NVList", false),
              })
          .put(
              new Identifier("KHMER"),
              new Import[] {
                newImport("java.awt.font.NumericShaper.KHMER", true),
                newImport("java.lang.Character.UnicodeBlock.KHMER", true),
              })
          .put(
              new Identifier("MultiTableUI"),
              new Import[] {
                newImport("javax.swing.plaf.multi.MultiTableUI", false),
              })
          .put(
              new Identifier("UNDERLINE_LOW_GRAY"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.UNDERLINE_LOW_GRAY", true),
              })
          .put(
              new Identifier("PagedResultsResponseControl"),
              new Import[] {
                newImport("javax.naming.ldap.PagedResultsResponseControl", false),
              })
          .put(
              new Identifier("RoundingMode"),
              new Import[] {
                newImport("java.math.RoundingMode", false),
              })
          .put(
              new Identifier("SELECTION_MODE_PROPERTY"),
              new Import[] {
                newImport(
                    "javax.swing.tree.DefaultTreeSelectionModel.SELECTION_MODE_PROPERTY", true),
              })
          .put(
              new Identifier("NODE_IMPORTED"),
              new Import[] {
                newImport("org.w3c.dom.UserDataHandler.NODE_IMPORTED", true),
              })
          .put(
              new Identifier("DIALOG_TITLE_CHANGED_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JFileChooser.DIALOG_TITLE_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("NamingContextExt"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextExt", false),
              })
          .put(
              new Identifier("DoubleToLongFunction"),
              new Import[] {
                newImport("java.util.function.DoubleToLongFunction", false),
              })
          .put(
              new Identifier("PagesPerMinute"),
              new Import[] {
                newImport("javax.print.attribute.standard.PagesPerMinute", false),
              })
          .put(
              new Identifier("DSAKeyPairGenerator"),
              new Import[] {
                newImport("java.security.interfaces.DSAKeyPairGenerator", false),
              })
          .put(
              new Identifier("LOCSIZ"),
              new Import[] {
                newImport("java.util.jar.JarEntry.LOCSIZ", true),
                newImport("java.util.jar.JarFile.LOCSIZ", true),
                newImport("java.util.jar.JarInputStream.LOCSIZ", true),
                newImport("java.util.jar.JarOutputStream.LOCSIZ", true),
                newImport("java.util.zip.ZipEntry.LOCSIZ", true),
                newImport("java.util.zip.ZipFile.LOCSIZ", true),
                newImport("java.util.zip.ZipInputStream.LOCSIZ", true),
                newImport("java.util.zip.ZipOutputStream.LOCSIZ", true),
              })
          .put(
              new Identifier("MULTIPLE"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.MULTIPLE", true),
              })
          .put(
              new Identifier("clearProperty"),
              new Import[] {
                newImport("java.lang.System.clearProperty", true),
              })
          .put(
              new Identifier("DOCUMENT_POSITION_CONTAINED_BY"),
              new Import[] {
                newImport("org.w3c.dom.Node.DOCUMENT_POSITION_CONTAINED_BY", true),
              })
          .put(
              new Identifier("RESERVED_ID_MAX"),
              new Import[] {
                newImport("java.awt.AWTEvent.RESERVED_ID_MAX", true),
              })
          .put(
              new Identifier("SUPERSCRIPTS_AND_SUBSCRIPTS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.SUPERSCRIPTS_AND_SUBSCRIPTS", true),
              })
          .put(
              new Identifier("MalformedLinkException"),
              new Import[] {
                newImport("javax.naming.MalformedLinkException", false),
              })
          .put(
              new Identifier("getProvider"),
              new Import[] {
                newImport("java.security.Security.getProvider", true),
              })
          .put(
              new Identifier("OctetSeqHelper"),
              new Import[] {
                newImport("org.omg.CORBA.OctetSeqHelper", false),
              })
          .put(
              new Identifier("activeCaptionBorder"),
              new Import[] {
                newImport("java.awt.SystemColor.activeCaptionBorder", true),
              })
          .put(
              new Identifier("createGroup"),
              new Import[] {
                newImport("java.rmi.activation.ActivationGroup.createGroup", true),
              })
          .put(
              new Identifier("SQLRecoverableException"),
              new Import[] {
                newImport("java.sql.SQLRecoverableException", false),
              })
          .put(
              new Identifier("PRIVATE_MEMBER"),
              new Import[] {
                newImport("org.omg.CORBA.PRIVATE_MEMBER", false),
              })
          .put(
              new Identifier("getDefaultToolkit"),
              new Import[] {
                newImport("java.awt.Toolkit.getDefaultToolkit", true),
              })
          .put(
              new Identifier("probeContentType"),
              new Import[] {
                newImport("java.nio.file.Files.probeContentType", true),
              })
          .put(
              new Identifier("InvalidValueHelper"),
              new Import[] {
                newImport("org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper", false),
              })
          .put(
              new Identifier("format"),
              new Import[] {
                newImport("java.lang.String.format", true),
                newImport("java.text.MessageFormat.format", true),
              })
          .put(
              new Identifier("X509EncodedKeySpec"),
              new Import[] {
                newImport("java.security.spec.X509EncodedKeySpec", false),
              })
          .put(
              new Identifier("InvalidOpenTypeException"),
              new Import[] {
                newImport("javax.management.openmbean.InvalidOpenTypeException", false),
              })
          .put(
              new Identifier("ProcessingEnvironment"),
              new Import[] {
                newImport("javax.annotation.processing.ProcessingEnvironment", false),
              })
          .put(
              new Identifier("setLong"),
              new Import[] {
                newImport("java.lang.reflect.Array.setLong", true),
              })
          .put(
              new Identifier("ENCLOSING_MARK"),
              new Import[] {
                newImport("java.lang.Character.ENCLOSING_MARK", true),
              })
          .put(
              new Identifier("AlreadyBoundException"),
              new Import[] {
                newImport("java.nio.channels.AlreadyBoundException", false),
                newImport("java.rmi.AlreadyBoundException", false),
              })
          .put(
              new Identifier("LOCSIG"),
              new Import[] {
                newImport("java.util.jar.JarEntry.LOCSIG", true),
                newImport("java.util.jar.JarFile.LOCSIG", true),
                newImport("java.util.jar.JarInputStream.LOCSIG", true),
                newImport("java.util.jar.JarOutputStream.LOCSIG", true),
                newImport("java.util.zip.ZipEntry.LOCSIG", true),
                newImport("java.util.zip.ZipFile.LOCSIG", true),
                newImport("java.util.zip.ZipInputStream.LOCSIG", true),
                newImport("java.util.zip.ZipOutputStream.LOCSIG", true),
              })
          .put(
              new Identifier("METHOD"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.METHOD", true),
                newImport("javax.xml.transform.OutputKeys.METHOD", true),
              })
          .put(
              new Identifier("MemoryManagerMXBean"),
              new Import[] {
                newImport("java.lang.management.MemoryManagerMXBean", false),
              })
          .put(
              new Identifier("URLDecoder"),
              new Import[] {
                newImport("java.net.URLDecoder", false),
              })
          .put(
              new Identifier("TABLE_HEADER"),
              new Import[] {
                newImport("javax.swing.plaf.synth.Region.TABLE_HEADER", true),
              })
          .put(
              new Identifier("YELLOW"),
              new Import[] {
                newImport("java.awt.Color.YELLOW", true),
              })
          .put(
              new Identifier("NullType"),
              new Import[] {
                newImport("javax.lang.model.type.NullType", false),
              })
          .put(
              new Identifier("WrongPolicyHelper"),
              new Import[] {
                newImport("org.omg.PortableServer.POAPackage.WrongPolicyHelper", false),
              })
          .put(
              new Identifier("WEIGHT_DEMILIGHT"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.WEIGHT_DEMILIGHT", true),
              })
          .put(
              new Identifier("getSecurityContext"),
              new Import[] {
                newImport("java.rmi.server.RMIClassLoader.getSecurityContext", true),
              })
          .put(
              new Identifier("PortUnreachableException"),
              new Import[] {
                newImport("java.net.PortUnreachableException", false),
              })
          .put(
              new Identifier("LAST_DIVIDER_LOCATION_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JSplitPane.LAST_DIVIDER_LOCATION_PROPERTY", true),
              })
          .put(
              new Identifier("CopyOnWriteArraySet"),
              new Import[] {
                newImport("java.util.concurrent.CopyOnWriteArraySet", false),
              })
          .put(
              new Identifier("ValueMemberHelper"),
              new Import[] {
                newImport("org.omg.CORBA.ValueMemberHelper", false),
              })
          .put(
              new Identifier("X509ExtendedKeyManager"),
              new Import[] {
                newImport("javax.net.ssl.X509ExtendedKeyManager", false),
              })
          .put(
              new Identifier("RenderingHints"),
              new Import[] {
                newImport("java.awt.RenderingHints", false),
              })
          .put(
              new Identifier("createMBeanServer"),
              new Import[] {
                newImport("javax.management.MBeanServerFactory.createMBeanServer", true),
              })
          .put(
              new Identifier("AdditionalComments"),
              new Import[] {
                newImport("javax.swing.text.html.HTMLDocument.AdditionalComments", true),
              })
          .put(
              new Identifier("PortInfo"),
              new Import[] {
                newImport("javax.xml.ws.handler.PortInfo", false),
              })
          .put(
              new Identifier("SW_RESIZE_CURSOR"),
              new Import[] {
                newImport("java.awt.Cursor.SW_RESIZE_CURSOR", true),
                newImport("java.awt.Frame.SW_RESIZE_CURSOR", true),
              })
          .put(
              new Identifier("OBJ_ADAPTER"),
              new Import[] {
                newImport("org.omg.CORBA.OBJ_ADAPTER", false),
              })
          .put(
              new Identifier("getImageReadersBySuffix"),
              new Import[] {
                newImport("javax.imageio.ImageIO.getImageReadersBySuffix", true),
              })
          .put(
              new Identifier("dk_Union"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind.dk_Union", true),
              })
          .put(
              new Identifier("lowestOneBit"),
              new Import[] {
                newImport("java.lang.Integer.lowestOneBit", true),
                newImport("java.lang.Long.lowestOneBit", true),
              })
          .put(
              new Identifier("MidiDeviceTransmitter"),
              new Import[] {
                newImport("javax.sound.midi.MidiDeviceTransmitter", false),
              })
          .put(
              new Identifier("LinkRef"),
              new Import[] {
                newImport("javax.naming.LinkRef", false),
              })
          .put(
              new Identifier("COLOR_ACTION"),
              new Import[] {
                newImport("javax.swing.text.html.HTMLEditorKit.COLOR_ACTION", true),
              })
          .put(
              new Identifier("PERSISTENT"),
              new Import[] {
                newImport("org.omg.PortableServer.LifespanPolicyValue.PERSISTENT", true),
              })
          .put(
              new Identifier("STATUS_BAR"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.STATUS_BAR", true),
              })
          .put(
              new Identifier("DIRECTORY_PANE"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.DIRECTORY_PANE", true),
              })
          .put(
              new Identifier("ZoneId"),
              new Import[] {
                newImport("java.time.ZoneId", false),
              })
          .put(
              new Identifier("getInternalFrameMinimizeIcon"),
              new Import[] {
                newImport(
                    "javax.swing.plaf.metal.MetalIconFactory.getInternalFrameMinimizeIcon", true),
              })
          .put(
              new Identifier("MASTER_GAIN"),
              new Import[] {
                newImport("javax.sound.sampled.FloatControl.Type.MASTER_GAIN", true),
              })
          .put(
              new Identifier("DNS_URL"),
              new Import[] {
                newImport("javax.naming.Context.DNS_URL", true),
              })
          .put(
              new Identifier("deleteIfExists"),
              new Import[] {
                newImport("java.nio.file.Files.deleteIfExists", true),
              })
          .put(
              new Identifier("LAYOUT_NO_LIMIT_CONTEXT"),
              new Import[] {
                newImport("java.awt.Font.LAYOUT_NO_LIMIT_CONTEXT", true),
              })
          .put(
              new Identifier("PRIMARY"),
              new Import[] {
                newImport("java.text.Collator.PRIMARY", true),
              })
          .put(
              new Identifier("DefaultRowSorter"),
              new Import[] {
                newImport("javax.swing.DefaultRowSorter", false),
              })
          .put(
              new Identifier("XSLT"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.Transform.XSLT", true),
              })
          .put(
              new Identifier("VK_INSERT"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_INSERT", true),
              })
          .put(
              new Identifier("PROGRAM_CHANGE"),
              new Import[] {
                newImport("javax.sound.midi.ShortMessage.PROGRAM_CHANGE", true),
              })
          .put(
              new Identifier("SortResponseControl"),
              new Import[] {
                newImport("javax.naming.ldap.SortResponseControl", false),
              })
          .put(
              new Identifier("FileHandler"),
              new Import[] {
                newImport("java.util.logging.FileHandler", false),
              })
          .put(
              new Identifier("Array"),
              new Import[] {
                newImport("java.lang.reflect.Array", false), newImport("java.sql.Array", false),
              })
          .put(
              new Identifier("VK_ALT"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_ALT", true),
              })
          .put(
              new Identifier("GMONTH"),
              new Import[] {
                newImport("javax.xml.datatype.DatatypeConstants.GMONTH", true),
              })
          .put(
              new Identifier("walkFileTree"),
              new Import[] {
                newImport("java.nio.file.Files.walkFileTree", true),
              })
          .put(
              new Identifier("Joinable"),
              new Import[] {
                newImport("javax.sql.rowset.Joinable", false),
              })
          .put(
              new Identifier("ISO_LOCAL_DATE"),
              new Import[] {
                newImport("java.time.format.DateTimeFormatter.ISO_LOCAL_DATE", true),
              })
          .put(
              new Identifier("OverlayLayout"),
              new Import[] {
                newImport("javax.swing.OverlayLayout", false),
              })
          .put(
              new Identifier("PRIORITY_INTERCHAR"),
              new Import[] {
                newImport("java.awt.font.GlyphJustificationInfo.PRIORITY_INTERCHAR", true),
              })
          .put(
              new Identifier("TEN"),
              new Import[] {
                newImport("java.math.BigDecimal.TEN", true),
                newImport("java.math.BigInteger.TEN", true),
              })
          .put(
              new Identifier("BAD_MECH"),
              new Import[] {
                newImport("org.ietf.jgss.GSSException.BAD_MECH", true),
              })
          .put(
              new Identifier("getUserTextColor"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalLookAndFeel.getUserTextColor", true),
              })
          .put(
              new Identifier("ClientInfoStatus"),
              new Import[] {
                newImport("java.sql.ClientInfoStatus", false),
              })
          .put(
              new Identifier("BasicMenuBarUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicMenuBarUI", false),
              })
          .build();
}
