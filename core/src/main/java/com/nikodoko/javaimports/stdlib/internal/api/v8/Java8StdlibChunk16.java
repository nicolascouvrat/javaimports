// Code generated by GenerateStdlib.java. DO NOT EDIT.
package com.nikodoko.javaimports.stdlib.internal.api.v8;

import static com.nikodoko.javaimports.stdlib.internal.Stdlib.newImport;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.common.Identifier;
import com.nikodoko.javaimports.common.Import;
import java.util.Map;

public class Java8StdlibChunk16 {
  static final Map<Identifier, Import[]> CLASSES =
      new ImmutableMap.Builder<Identifier, Import[]>()
          .put(
              new Identifier("ScrollPaneAdjustable"),
              new Import[] {
                newImport("java.awt.ScrollPaneAdjustable", false),
              })
          .put(
              new Identifier("Node"),
              new Import[] {
                newImport("javax.xml.soap.Node", false), newImport("org.w3c.dom.Node", false),
              })
          .put(
              new Identifier("RowSet"),
              new Import[] {
                newImport("javax.sql.RowSet", false),
              })
          .put(
              new Identifier("BasicSliderUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicSliderUI", false),
              })
          .put(
              new Identifier("ResponseWrapper"),
              new Import[] {
                newImport("javax.xml.ws.ResponseWrapper", false),
              })
          .put(
              new Identifier("MenuShortcut"),
              new Import[] {
                newImport("java.awt.MenuShortcut", false),
              })
          .put(
              new Identifier("INVITE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.INVITE", true),
              })
          .put(
              new Identifier("getFailureHandler"),
              new Import[] {
                newImport("java.rmi.server.RMISocketFactory.getFailureHandler", true),
              })
          .put(
              new Identifier("DOCUMENT_FORMAT_ERROR"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.JobStateReason.DOCUMENT_FORMAT_ERROR", true),
              })
          .put(
              new Identifier("AtomicReferenceArray"),
              new Import[] {
                newImport("java.util.concurrent.atomic.AtomicReferenceArray", false),
              })
          .put(
              new Identifier("leq"),
              new Import[] {
                newImport("javax.management.Query.leq", true),
              })
          .put(
              new Identifier("NO_DECOMPOSITION"),
              new Import[] {
                newImport("java.text.Collator.NO_DECOMPOSITION", true),
              })
          .put(
              new Identifier("ImplicitActivationPolicy"),
              new Import[] {
                newImport("org.omg.PortableServer.ImplicitActivationPolicy", false),
              })
          .put(
              new Identifier("TYPE1_FONT"),
              new Import[] {
                newImport("java.awt.Font.TYPE1_FONT", true),
              })
          .put(
              new Identifier("URI_NS_SOAP_1_2_ENCODING"),
              new Import[] {
                newImport("javax.xml.soap.SOAPConstants.URI_NS_SOAP_1_2_ENCODING", true),
              })
          .put(
              new Identifier("IncompatibleClassChangeError"),
              new Import[] {
                newImport("java.lang.IncompatibleClassChangeError", false),
              })
          .put(
              new Identifier("getSeparatorForeground"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalLookAndFeel.getSeparatorForeground", true),
              })
          .put(
              new Identifier("_tk_abstract_interface"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind._tk_abstract_interface", true),
              })
          .put(
              new Identifier("PITCH_BEND"),
              new Import[] {
                newImport("javax.sound.midi.ShortMessage.PITCH_BEND", true),
              })
          .put(
              new Identifier("INITIAL_VALUE_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JOptionPane.INITIAL_VALUE_PROPERTY", true),
              })
          .put(
              new Identifier("PARAM_INOUT"),
              new Import[] {
                newImport("org.omg.CORBA.ParameterMode.PARAM_INOUT", true),
              })
          .put(
              new Identifier("ORBInitInfo"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.ORBInitInfo", false),
              })
          .put(
              new Identifier("ListSelectionListener"),
              new Import[] {
                newImport("javax.swing.event.ListSelectionListener", false),
              })
          .put(
              new Identifier("selectionForwardAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.selectionForwardAction", true),
              })
          .put(
              new Identifier("getQueuedTaskCount"),
              new Import[] {
                newImport("java.util.concurrent.ForkJoinTask.getQueuedTaskCount", true),
              })
          .put(
              new Identifier("EXPANDS_SELECTED_PATHS_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JTree.EXPANDS_SELECTED_PATHS_PROPERTY", true),
              })
          .put(
              new Identifier("BASELINE_TRAILING"),
              new Import[] {
                newImport("java.awt.GridBagConstraints.BASELINE_TRAILING", true),
              })
          .put(
              new Identifier("KATAKANA"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.KATAKANA", true),
              })
          .put(
              new Identifier("icSigCopyrightTag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigCopyrightTag", true),
              })
          .put(
              new Identifier("XAER_NOTA"),
              new Import[] {
                newImport("javax.transaction.xa.XAException.XAER_NOTA", true),
              })
          .put(
              new Identifier("ISO_C3_ENVELOPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_C3_ENVELOPE", true),
              })
          .put(
              new Identifier("InternalError"),
              new Import[] {
                newImport("java.lang.InternalError", false),
              })
          .put(
              new Identifier("getGrooveInsets"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicGraphicsUtils.getGrooveInsets", true),
              })
          .put(
              new Identifier("MethodHandle"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandle", false),
              })
          .put(
              new Identifier("getFileStore"),
              new Import[] {
                newImport("java.nio.file.Files.getFileStore", true),
              })
          .put(
              new Identifier("FONT_CHANGE_SMALLER"),
              new Import[] {
                newImport("javax.swing.text.html.HTMLEditorKit.FONT_CHANGE_SMALLER", true),
              })
          .put(
              new Identifier("INVALID_STATE_ERR"),
              new Import[] {
                newImport("org.w3c.dom.DOMException.INVALID_STATE_ERR", true),
              })
          .put(
              new Identifier("SynthSplitPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthSplitPaneUI", false),
              })
          .put(
              new Identifier("Highlight"),
              new Import[] {
                newImport("javax.swing.text.Highlighter.Highlight", false),
              })
          .put(
              new Identifier("JAXB"),
              new Import[] {
                newImport("javax.xml.bind.JAXB", false),
              })
          .put(
              new Identifier("createEtchedBorder"),
              new Import[] {
                newImport("javax.swing.BorderFactory.createEtchedBorder", true),
              })
          .put(
              new Identifier("XMLEventFactory"),
              new Import[] {
                newImport("javax.xml.stream.XMLEventFactory", false),
              })
          .put(
              new Identifier("getAllTags"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.getAllTags", true),
              })
          .put(
              new Identifier("TransformService"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.TransformService", false),
              })
          .put(
              new Identifier("USERNAME_PROPERTY"),
              new Import[] {
                newImport("javax.xml.ws.BindingProvider.USERNAME_PROPERTY", true),
              })
          .put(
              new Identifier("AncestorEvent"),
              new Import[] {
                newImport("javax.swing.event.AncestorEvent", false),
              })
          .put(
              new Identifier("isFinite"),
              new Import[] {
                newImport("java.lang.Double.isFinite", true),
                newImport("java.lang.Float.isFinite", true),
              })
          .put(
              new Identifier("JobStateReasons"),
              new Import[] {
                newImport("javax.print.attribute.standard.JobStateReasons", false),
              })
          .put(
              new Identifier("TRACKING_LOOSE"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.TRACKING_LOOSE", true),
              })
          .put(
              new Identifier("SQLDataException"),
              new Import[] {
                newImport("java.sql.SQLDataException", false),
              })
          .put(
              new Identifier("CallableStatement"),
              new Import[] {
                newImport("java.sql.CallableStatement", false),
              })
          .put(
              new Identifier("builder"),
              new Import[] {
                newImport("java.util.stream.DoubleStream.builder", true),
                newImport("java.util.stream.IntStream.builder", true),
                newImport("java.util.stream.LongStream.builder", true),
                newImport("java.util.stream.Stream.builder", true),
              })
          .put(
              new Identifier("COPTIC"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.COPTIC", true),
              })
          .put(
              new Identifier("CLOSE_CURRENT_RESULT"),
              new Import[] {
                newImport("java.sql.Statement.CLOSE_CURRENT_RESULT", true),
              })
          .put(
              new Identifier("DefaultValidationEventHandler"),
              new Import[] {
                newImport("javax.xml.bind.helpers.DefaultValidationEventHandler", false),
              })
          .put(
              new Identifier("DateTimeAtProcessing"),
              new Import[] {
                newImport("javax.print.attribute.standard.DateTimeAtProcessing", false),
              })
          .put(
              new Identifier("drawLoweredBezel"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicGraphicsUtils.drawLoweredBezel", true),
              })
          .put(
              new Identifier("Repeatable"),
              new Import[] {
                newImport("java.lang.annotation.Repeatable", false),
              })
          .put(
              new Identifier("VALUE_RENDER_SPEED"),
              new Import[] {
                newImport("java.awt.RenderingHints.VALUE_RENDER_SPEED", true),
              })
          .put(
              new Identifier("DINGBATS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.DINGBATS", true),
              })
          .put(
              new Identifier("BasicToggleButtonUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicToggleButtonUI", false),
              })
          .put(
              new Identifier("newDirectoryStream"),
              new Import[] {
                newImport("java.nio.file.Files.newDirectoryStream", true),
              })
          .put(
              new Identifier("DocPrintJob"),
              new Import[] {
                newImport("javax.print.DocPrintJob", false),
              })
          .put(
              new Identifier("SCROLL_BAR_TRACK"),
              new Import[] {
                newImport("javax.swing.plaf.synth.Region.SCROLL_BAR_TRACK", true),
              })
          .put(
              new Identifier("SELECTABLE"),
              new Import[] {
                newImport("javax.accessibility.AccessibleState.SELECTABLE", true),
              })
          .put(
              new Identifier("NA_9x11_ENVELOPE"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSize.NA.NA_9x11_ENVELOPE", true),
              })
          .put(
              new Identifier("MathContext"),
              new Import[] {
                newImport("java.math.MathContext", false),
              })
          .put(
              new Identifier("ALIGN_DECIMAL"),
              new Import[] {
                newImport("javax.swing.text.TabStop.ALIGN_DECIMAL", true),
              })
          .put(
              new Identifier("KAITHI"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.KAITHI", true),
              })
          .put(
              new Identifier("RequestProcessingPolicyValue"),
              new Import[] {
                newImport("org.omg.PortableServer.RequestProcessingPolicyValue", false),
              })
          .put(
              new Identifier("RIGHT_TO_LEFT"),
              new Import[] {
                newImport("java.awt.ComponentOrientation.RIGHT_TO_LEFT", true),
              })
          .put(
              new Identifier("ICON_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JOptionPane.ICON_PROPERTY", true),
              })
          .put(
              new Identifier("MULTI_LINE"),
              new Import[] {
                newImport("javax.accessibility.AccessibleState.MULTI_LINE", true),
              })
          .put(
              new Identifier("TreeSelectionModel"),
              new Import[] {
                newImport("javax.swing.tree.TreeSelectionModel", false),
              })
          .put(
              new Identifier("InterruptedByTimeoutException"),
              new Import[] {
                newImport("java.nio.channels.InterruptedByTimeoutException", false),
              })
          .put(
              new Identifier("ACTION_LAST"),
              new Import[] {
                newImport("java.awt.event.ActionEvent.ACTION_LAST", true),
              })
          .put(
              new Identifier("AnnotatedElement"),
              new Import[] {
                newImport("java.lang.reflect.AnnotatedElement", false),
              })
          .put(
              new Identifier("TAKRI"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.TAKRI", true),
              })
          .put(
              new Identifier("AbstractWriter"),
              new Import[] {
                newImport("javax.swing.text.AbstractWriter", false),
              })
          .put(
              new Identifier("FormSubmitEvent"),
              new Import[] {
                newImport("javax.swing.text.html.FormSubmitEvent", false),
              })
          .put(
              new Identifier("CONCUR_READ_ONLY"),
              new Import[] {
                newImport("java.sql.ResultSet.CONCUR_READ_ONLY", true),
              })
          .put(
              new Identifier("getInternalFrameAltMaximizeIcon"),
              new Import[] {
                newImport(
                    "javax.swing.plaf.metal.MetalIconFactory.getInternalFrameAltMaximizeIcon",
                    true),
              })
          .put(
              new Identifier("RMIFailureHandler"),
              new Import[] {
                newImport("java.rmi.server.RMIFailureHandler", false),
              })
          .put(
              new Identifier("ofDefaultLocale"),
              new Import[] {
                newImport("java.time.format.DecimalStyle.ofDefaultLocale", true),
              })
          .put(
              new Identifier("ProxySelector"),
              new Import[] {
                newImport("java.net.ProxySelector", false),
              })
          .put(
              new Identifier("ISO_LOCAL_TIME"),
              new Import[] {
                newImport("java.time.format.DateTimeFormatter.ISO_LOCAL_TIME", true),
              })
          .put(
              new Identifier("ECField"),
              new Import[] {
                newImport("java.security.spec.ECField", false),
              })
          .put(
              new Identifier("TEXT_DECORATION"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.TEXT_DECORATION", true),
              })
          .put(
              new Identifier("ServantLocatorOperations"),
              new Import[] {
                newImport("org.omg.PortableServer.ServantLocatorOperations", false),
              })
          .put(
              new Identifier("XMLReporter"),
              new Import[] {
                newImport("javax.xml.stream.XMLReporter", false),
              })
          .put(
              new Identifier("compile"),
              new Import[] {
                newImport("java.util.regex.Pattern.compile", true),
              })
          .put(
              new Identifier("UnknownUserExceptionHolder"),
              new Import[] {
                newImport("org.omg.CORBA.UnknownUserExceptionHolder", false),
              })
          .put(
              new Identifier("AccessibleRelation"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRelation", false),
              })
          .put(
              new Identifier("VK_UNDO"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_UNDO", true),
              })
          .put(
              new Identifier("BasicIconFactory"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicIconFactory", false),
              })
          .put(
              new Identifier("OP_WRITE"),
              new Import[] {
                newImport("java.nio.channels.SelectionKey.OP_WRITE", true),
              })
          .put(
              new Identifier("HTTP_NO_CONTENT"),
              new Import[] {
                newImport("java.net.HttpURLConnection.HTTP_NO_CONTENT", true),
              })
          .put(
              new Identifier("ofSeconds"),
              new Import[] {
                newImport("java.time.Duration.ofSeconds", true),
              })
          .put(
              new Identifier("LongLongSeqHelper"),
              new Import[] {
                newImport("org.omg.CORBA.LongLongSeqHelper", false),
              })
          .put(
              new Identifier("TYPE_3BYTE_BGR"),
              new Import[] {
                newImport("java.awt.image.BufferedImage.TYPE_3BYTE_BGR", true),
              })
          .put(
              new Identifier("HierarchyBoundsListener"),
              new Import[] {
                newImport("java.awt.event.HierarchyBoundsListener", false),
              })
          .put(
              new Identifier("BIG_ENDIAN"),
              new Import[] {
                newImport("java.nio.ByteOrder.BIG_ENDIAN", true),
              })
          .put(
              new Identifier("CompositeDataSupport"),
              new Import[] {
                newImport("javax.management.openmbean.CompositeDataSupport", false),
              })
          .put(
              new Identifier("ACCESSIBLE_SELECTION_PROPERTY"),
              new Import[] {
                newImport(
                    "javax.accessibility.AccessibleContext.ACCESSIBLE_SELECTION_PROPERTY", true),
              })
          .put(
              new Identifier("AccessControlException"),
              new Import[] {
                newImport("java.security.AccessControlException", false),
              })
          .put(
              new Identifier("getPolicy"),
              new Import[] {
                newImport("java.security.Policy.getPolicy", true),
                newImport("javax.security.auth.Policy.getPolicy", true),
              })
          .put(
              new Identifier("unmodifiableMap"),
              new Import[] {
                newImport("java.util.Collections.unmodifiableMap", true),
              })
          .put(
              new Identifier("XmlEnum"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlEnum", false),
              })
          .put(
              new Identifier("CacheResponse"),
              new Import[] {
                newImport("java.net.CacheResponse", false),
              })
          .put(
              new Identifier("KerberosKey"),
              new Import[] {
                newImport("javax.security.auth.kerberos.KerberosKey", false),
              })
          .put(
              new Identifier("endAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.endAction", true),
              })
          .put(
              new Identifier("FRACTION_FIELD"),
              new Import[] {
                newImport("java.text.NumberFormat.FRACTION_FIELD", true),
              })
          .put(
              new Identifier("fixed"),
              new Import[] {
                newImport("java.time.Clock.fixed", true),
              })
          .put(
              new Identifier("START_DOCUMENT"),
              new Import[] {
                newImport("javax.xml.stream.XMLStreamConstants.START_DOCUMENT", true),
              })
          .put(
              new Identifier("CENHOW"),
              new Import[] {
                newImport("java.util.jar.JarEntry.CENHOW", true),
                newImport("java.util.jar.JarFile.CENHOW", true),
                newImport("java.util.jar.JarInputStream.CENHOW", true),
                newImport("java.util.jar.JarOutputStream.CENHOW", true),
                newImport("java.util.zip.ZipEntry.CENHOW", true),
                newImport("java.util.zip.ZipFile.CENHOW", true),
                newImport("java.util.zip.ZipInputStream.CENHOW", true),
                newImport("java.util.zip.ZipOutputStream.CENHOW", true),
              })
          .put(
              new Identifier("XmlAccessorOrder"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlAccessorOrder", false),
              })
          .put(
              new Identifier("_dk_Wstring"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind._dk_Wstring", true),
              })
          .put(
              new Identifier("Iterable"),
              new Import[] {
                newImport("java.lang.Iterable", false),
              })
          .put(
              new Identifier("getParagraphElement"),
              new Import[] {
                newImport("javax.swing.text.Utilities.getParagraphElement", true),
              })
          .put(
              new Identifier("CertPathBuilderResult"),
              new Import[] {
                newImport("java.security.cert.CertPathBuilderResult", false),
              })
          .put(
              new Identifier("VK_SUBTRACT"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_SUBTRACT", true),
              })
          .put(
              new Identifier("setDataContentHandlerFactory"),
              new Import[] {
                newImport("javax.activation.DataHandler.setDataContentHandlerFactory", true),
              })
          .put(
              new Identifier("ExecutorCompletionService"),
              new Import[] {
                newImport("java.util.concurrent.ExecutorCompletionService", false),
              })
          .put(
              new Identifier("RolloverButtonBorder"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicBorders.RolloverButtonBorder", false),
                newImport("javax.swing.plaf.metal.MetalBorders.RolloverButtonBorder", false),
              })
          .put(
              new Identifier("toOctalString"),
              new Import[] {
                newImport("java.lang.Integer.toOctalString", true),
                newImport("java.lang.Long.toOctalString", true),
              })
          .put(
              new Identifier("MAXGTRIDSIZE"),
              new Import[] {
                newImport("javax.transaction.xa.Xid.MAXGTRIDSIZE", true),
              })
          .put(
              new Identifier("WEIGHT_EXTRA_LIGHT"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.WEIGHT_EXTRA_LIGHT", true),
              })
          .put(
              new Identifier("ReferenceUriSchemesSupported"),
              new Import[] {
                newImport("javax.print.attribute.standard.ReferenceUriSchemesSupported", false),
              })
          .put(
              new Identifier("documentBaseKey"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicHTML.documentBaseKey", true),
              })
          .put(
              new Identifier("PUBLIC_MEMBER"),
              new Import[] {
                newImport("org.omg.CORBA.PUBLIC_MEMBER", false),
              })
          .put(
              new Identifier("HijrahEra"),
              new Import[] {
                newImport("java.time.chrono.HijrahEra", false),
              })
          .put(
              new Identifier("CardLayout"),
              new Import[] {
                newImport("java.awt.CardLayout", false),
              })
          .put(
              new Identifier("getUnboundInstance"),
              new Import[] {
                newImport("javax.security.auth.kerberos.KeyTab.getUnboundInstance", true),
              })
          .put(
              new Identifier("UnsolicitedNotificationEvent"),
              new Import[] {
                newImport("javax.naming.ldap.UnsolicitedNotificationEvent", false),
              })
          .put(
              new Identifier("JobPriority"),
              new Import[] {
                newImport("javax.print.attribute.standard.JobPriority", false),
              })
          .put(
              new Identifier("Provider"),
              new Import[] {
                newImport("java.security.Provider", false),
                newImport("javax.xml.ws.Provider", false),
                newImport("javax.xml.ws.spi.Provider", false),
              })
          .put(
              new Identifier("DOCUMENT_POSITION_DISCONNECTED"),
              new Import[] {
                newImport("org.w3c.dom.Node.DOCUMENT_POSITION_DISCONNECTED", true),
              })
          .put(
              new Identifier("parseInt"),
              new Import[] {
                newImport("java.lang.Integer.parseInt", true),
                newImport("javax.xml.bind.DatatypeConverter.parseInt", true),
              })
          .put(
              new Identifier("MONDAY"),
              new Import[] {
                newImport("java.util.Calendar.MONDAY", true),
              })
          .put(
              new Identifier("downAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.downAction", true),
              })
          .put(
              new Identifier("SELECTED_CONVERTED_TEXT_HIGHLIGHT"),
              new Import[] {
                newImport(
                    "java.awt.im.InputMethodHighlight.SELECTED_CONVERTED_TEXT_HIGHLIGHT", true),
              })
          .put(
              new Identifier("maxBy"),
              new Import[] {
                newImport("java.util.function.BinaryOperator.maxBy", true),
                newImport("java.util.stream.Collectors.maxBy", true),
              })
          .put(
              new Identifier("InputMapUIResource"),
              new Import[] {
                newImport("javax.swing.plaf.InputMapUIResource", false),
              })
          .put(
              new Identifier("ABOVE_BASELINE_LEADING"),
              new Import[] {
                newImport("java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING", true),
              })
          .put(
              new Identifier("MalformedInputException"),
              new Import[] {
                newImport("java.nio.charset.MalformedInputException", false),
              })
          .put(
              new Identifier("FALSE"),
              new Import[] {
                newImport("java.lang.Boolean.FALSE", true),
                newImport("java.util.jar.Pack200.Packer.FALSE", true),
                newImport("java.util.jar.Pack200.Unpacker.FALSE", true),
              })
          .put(
              new Identifier("HTTP_FORBIDDEN"),
              new Import[] {
                newImport("java.net.HttpURLConnection.HTTP_FORBIDDEN", true),
              })
          .put(
              new Identifier("DoubleStream"),
              new Import[] {
                newImport("java.util.stream.DoubleStream", false),
              })
          .put(
              new Identifier("TAGBANWA"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.TAGBANWA", true),
              })
          .put(
              new Identifier("REGISTRY_PORT"),
              new Import[] {
                newImport("java.rmi.registry.Registry.REGISTRY_PORT", true),
              })
          .put(
              new Identifier("UnknownObjectException"),
              new Import[] {
                newImport("java.rmi.activation.UnknownObjectException", false),
              })
          .put(
              new Identifier("StringValueHelper"),
              new Import[] {
                newImport("org.omg.CORBA.StringValueHelper", false),
              })
          .put(
              new Identifier("SYSTEM_RESET"),
              new Import[] {
                newImport("javax.sound.midi.ShortMessage.SYSTEM_RESET", true),
              })
          .put(
              new Identifier("RUN_DIRECTION"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.RUN_DIRECTION", true),
              })
          .put(
              new Identifier("TWO_SIDED_SHORT_EDGE"),
              new Import[] {
                newImport("java.awt.JobAttributes.SidesType.TWO_SIDED_SHORT_EDGE", true),
                newImport("javax.print.attribute.standard.Sides.TWO_SIDED_SHORT_EDGE", true),
              })
          .put(
              new Identifier("BASE64"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.Transform.BASE64", true),
              })
          .put(
              new Identifier("TEXT_PLAIN_UTF_16LE"),
              new Import[] {
                newImport("javax.print.DocFlavor.BYTE_ARRAY.TEXT_PLAIN_UTF_16LE", true),
                newImport("javax.print.DocFlavor.INPUT_STREAM.TEXT_PLAIN_UTF_16LE", true),
                newImport("javax.print.DocFlavor.URL.TEXT_PLAIN_UTF_16LE", true),
              })
          .put(
              new Identifier("INPUT_METHOD_HIGHLIGHT"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.INPUT_METHOD_HIGHLIGHT", true),
              })
          .put(
              new Identifier("AdapterAlreadyExists"),
              new Import[] {
                newImport("org.omg.PortableServer.POAPackage.AdapterAlreadyExists", false),
              })
          .put(
              new Identifier("FileLock"),
              new Import[] {
                newImport("java.nio.channels.FileLock", false),
              })
          .put(
              new Identifier("DigestException"),
              new Import[] {
                newImport("java.security.DigestException", false),
              })
          .put(
              new Identifier("Boolean"),
              new Import[] {
                newImport("java.lang.Boolean", false),
              })
          .put(
              new Identifier("DUPLEX"),
              new Import[] {
                newImport("javax.print.attribute.standard.Sides.DUPLEX", true),
              })
          .put(
              new Identifier("ValidationEventCollector"),
              new Import[] {
                newImport("javax.xml.bind.util.ValidationEventCollector", false),
              })
          .put(
              new Identifier("LdapContext"),
              new Import[] {
                newImport("javax.naming.ldap.LdapContext", false),
              })
          .put(
              new Identifier("TYPE_INT"),
              new Import[] {
                newImport("java.awt.image.DataBuffer.TYPE_INT", true),
              })
          .put(
              new Identifier("URIReference"),
              new Import[] {
                newImport("javax.xml.crypto.URIReference", false),
              })
          .put(
              new Identifier("DES_KEY_LEN"),
              new Import[] {
                newImport("javax.crypto.spec.DESKeySpec.DES_KEY_LEN", true),
              })
          .put(
              new Identifier("EmptySelectionModel"),
              new Import[] {
                newImport("javax.swing.JTree.EmptySelectionModel", false),
              })
          .put(
              new Identifier("RetrievalMethod"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.keyinfo.RetrievalMethod", false),
              })
          .put(
              new Identifier("javaRemoteObjectMimeType"),
              new Import[] {
                newImport("java.awt.datatransfer.DataFlavor.javaRemoteObjectMimeType", true),
              })
          .put(
              new Identifier("DISTINCT"),
              new Import[] {
                newImport("java.sql.Types.DISTINCT", true),
                newImport("java.util.Spliterator.DISTINCT", true),
              })
          .put(
              new Identifier("printDate"),
              new Import[] {
                newImport("javax.xml.bind.DatatypeConverter.printDate", true),
              })
          .put(
              new Identifier("NodeList"),
              new Import[] {
                newImport("org.w3c.dom.NodeList", false),
              })
          .put(
              new Identifier("STYLE"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.STYLE", true),
                newImport("javax.swing.text.html.HTML.Tag.STYLE", true),
              })
          .put(
              new Identifier("NEW_TAI_LUE"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.NEW_TAI_LUE", true),
              })
          .put(
              new Identifier("InputMethodEvent"),
              new Import[] {
                newImport("java.awt.event.InputMethodEvent", false),
              })
          .put(
              new Identifier("DynEnum"),
              new Import[] {
                newImport("org.omg.CORBA.DynEnum", false),
                newImport("org.omg.DynamicAny.DynEnum", false),
              })
          .put(
              new Identifier("CELLSPACING"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.CELLSPACING", true),
              })
          .put(
              new Identifier("CannotProceedHolder"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextPackage.CannotProceedHolder", false),
              })
          .put(
              new Identifier("FULL_FLUSH"),
              new Import[] {
                newImport("java.util.zip.Deflater.FULL_FLUSH", true),
              })
          .put(
              new Identifier("StringMonitor"),
              new Import[] {
                newImport("javax.management.monitor.StringMonitor", false),
              })
          .put(
              new Identifier("Applet"),
              new Import[] {
                newImport("java.applet.Applet", false),
              })
          .put(
              new Identifier("getByAddress"),
              new Import[] {
                newImport("java.net.Inet6Address.getByAddress", true),
                newImport("java.net.InetAddress.getByAddress", true),
              })
          .put(
              new Identifier("TEXT_PANE"),
              new Import[] {
                newImport("javax.swing.plaf.synth.Region.TEXT_PANE", true),
              })
          .put(
              new Identifier("HttpsURLConnection"),
              new Import[] {
                newImport("javax.net.ssl.HttpsURLConnection", false),
              })
          .put(
              new Identifier("ProcessingInstruction"),
              new Import[] {
                newImport("javax.xml.stream.events.ProcessingInstruction", false),
                newImport("org.w3c.dom.ProcessingInstruction", false),
              })
          .put(
              new Identifier("comparingByKey"),
              new Import[] {
                newImport("java.util.Map.Entry.comparingByKey", true),
              })
          .put(
              new Identifier("getBlocker"),
              new Import[] {
                newImport("java.util.concurrent.locks.LockSupport.getBlocker", true),
              })
          .put(
              new Identifier("LARGE_ICON_KEY"),
              new Import[] {
                newImport("javax.swing.Action.LARGE_ICON_KEY", true),
              })
          .put(
              new Identifier("OPC_NEAR_EOL"),
              new Import[] {
                newImport("javax.print.attribute.standard.PrinterStateReason.OPC_NEAR_EOL", true),
              })
          .put(
              new Identifier("NAME_NOT_MN"),
              new Import[] {
                newImport("org.ietf.jgss.GSSException.NAME_NOT_MN", true),
              })
          .put(
              new Identifier("DoubleAccumulator"),
              new Import[] {
                newImport("java.util.concurrent.atomic.DoubleAccumulator", false),
              })
          .put(
              new Identifier("getInstanceOf"),
              new Import[] {
                newImport("java.beans.Beans.getInstanceOf", true),
              })
          .put(
              new Identifier("KEY_ACTION"),
              new Import[] {
                newImport("java.awt.Event.KEY_ACTION", true),
              })
          .put(
              new Identifier("SHIFT_MASK"),
              new Import[] {
                newImport("java.awt.Event.SHIFT_MASK", true),
                newImport("java.awt.event.ActionEvent.SHIFT_MASK", true),
                newImport("java.awt.event.InputEvent.SHIFT_MASK", true),
              })
          .put(
              new Identifier("MetalScrollPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalScrollPaneUI", false),
              })
          .put(
              new Identifier("StackTraceElement"),
              new Import[] {
                newImport("java.lang.StackTraceElement", false),
              })
          .put(
              new Identifier("FEBRUARY"),
              new Import[] {
                newImport("java.util.Calendar.FEBRUARY", true),
                newImport("javax.xml.datatype.DatatypeConstants.FEBRUARY", true),
              })
          .put(
              new Identifier("NamespaceSupport"),
              new Import[] {
                newImport("org.xml.sax.helpers.NamespaceSupport", false),
              })
          .put(
              new Identifier("EventSetDescriptor"),
              new Import[] {
                newImport("java.beans.EventSetDescriptor", false),
              })
          .put(
              new Identifier("BACKINGSTORE_SCROLL_MODE"),
              new Import[] {
                newImport("javax.swing.JViewport.BACKINGSTORE_SCROLL_MODE", true),
              })
          .put(
              new Identifier("MimeType"),
              new Import[] {
                newImport("javax.activation.MimeType", false),
              })
          .put(
              new Identifier("MenuDragMouseEvent"),
              new Import[] {
                newImport("javax.swing.event.MenuDragMouseEvent", false),
              })
          .put(
              new Identifier("XPathFactory"),
              new Import[] {
                newImport("javax.xml.xpath.XPathFactory", false),
              })
          .put(
              new Identifier("tk_except"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind.tk_except", true),
              })
          .put(
              new Identifier("Executor"),
              new Import[] {
                newImport("java.util.concurrent.Executor", false),
              })
          .put(
              new Identifier("StringWriter"),
              new Import[] {
                newImport("java.io.StringWriter", false),
              })
          .put(
              new Identifier("ForkJoinWorkerThread"),
              new Import[] {
                newImport("java.util.concurrent.ForkJoinWorkerThread", false),
              })
          .put(
              new Identifier("BIGINTEGER"),
              new Import[] {
                newImport("javax.management.openmbean.SimpleType.BIGINTEGER", true),
              })
          .put(
              new Identifier("RefreshFailedException"),
              new Import[] {
                newImport("javax.security.auth.RefreshFailedException", false),
              })
          .put(
              new Identifier("TAG_LTSH"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_LTSH", true),
              })
          .put(
              new Identifier("N_RESIZE_CURSOR"),
              new Import[] {
                newImport("java.awt.Cursor.N_RESIZE_CURSOR", true),
                newImport("java.awt.Frame.N_RESIZE_CURSOR", true),
              })
          .put(
              new Identifier("firstDayOfNextMonth"),
              new Import[] {
                newImport("java.time.temporal.TemporalAdjusters.firstDayOfNextMonth", true),
              })
          .put(
              new Identifier("SSLSession"),
              new Import[] {
                newImport("javax.net.ssl.SSLSession", false),
              })
          .put(
              new Identifier("selectionUpAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.selectionUpAction", true),
              })
          .put(
              new Identifier("globalHierarchyLock"),
              new Import[] {
                newImport("java.beans.beancontext.BeanContext.globalHierarchyLock", true),
              })
          .put(
              new Identifier("MimeTypeParameterList"),
              new Import[] {
                newImport("javax.activation.MimeTypeParameterList", false),
              })
          .put(
              new Identifier("BELOW_TOP"),
              new Import[] {
                newImport("javax.swing.border.TitledBorder.BELOW_TOP", true),
              })
          .put(
              new Identifier("getLayeredPaneAbove"),
              new Import[] {
                newImport("javax.swing.JLayeredPane.getLayeredPaneAbove", true),
              })
          .put(
              new Identifier("isTitleCase"),
              new Import[] {
                newImport("java.lang.Character.isTitleCase", true),
              })
          .put(
              new Identifier("MultiListUI"),
              new Import[] {
                newImport("javax.swing.plaf.multi.MultiListUI", false),
              })
          .put(
              new Identifier("ACTION_EVENT"),
              new Import[] {
                newImport("java.awt.Event.ACTION_EVENT", true),
              })
          .put(
              new Identifier("hasInitialContextFactoryBuilder"),
              new Import[] {
                newImport("javax.naming.spi.NamingManager.hasInitialContextFactoryBuilder", true),
              })
          .put(
              new Identifier("ServerIdHelper"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.ServerIdHelper", false),
              })
          .put(
              new Identifier("GZIP"),
              new Import[] {
                newImport("javax.print.attribute.standard.Compression.GZIP", true),
              })
          .put(
              new Identifier("DynUnionOperations"),
              new Import[] {
                newImport("org.omg.DynamicAny.DynUnionOperations", false),
              })
          .put(
              new Identifier("augmentList"),
              new Import[] {
                newImport("javax.swing.text.TextAction.augmentList", true),
              })
          .put(
              new Identifier("_PARAM_INOUT"),
              new Import[] {
                newImport("org.omg.CORBA.ParameterMode._PARAM_INOUT", true),
              })
          .put(
              new Identifier("MediaTracker"),
              new Import[] {
                newImport("java.awt.MediaTracker", false),
              })
          .put(
              new Identifier("URI_NS_SOAP_1_2_ENVELOPE"),
              new Import[] {
                newImport("javax.xml.soap.SOAPConstants.URI_NS_SOAP_1_2_ENVELOPE", true),
              })
          .put(
              new Identifier("RMIServerImpl"),
              new Import[] {
                newImport("javax.management.remote.rmi.RMIServerImpl", false),
              })
          .put(
              new Identifier("getLog"),
              new Import[] {
                newImport("java.rmi.server.RemoteServer.getLog", true),
              })
          .put(
              new Identifier("WIDTH_REGULAR"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.WIDTH_REGULAR", true),
              })
          .put(
              new Identifier("RESET"),
              new Import[] {
                newImport("javax.swing.text.html.FormView.RESET", true),
              })
          .put(
              new Identifier("decode"),
              new Import[] {
                newImport("java.awt.Color.decode", true),
                newImport("java.awt.Font.decode", true),
                newImport("java.lang.Byte.decode", true),
                newImport("java.lang.Integer.decode", true),
                newImport("java.lang.Long.decode", true),
                newImport("java.lang.Short.decode", true),
                newImport("java.net.URLDecoder.decode", true),
              })
          .put(
              new Identifier("setPolicy"),
              new Import[] {
                newImport("java.security.Policy.setPolicy", true),
                newImport("javax.security.auth.Policy.setPolicy", true),
              })
          .put(
              new Identifier("AbstractSequentialList"),
              new Import[] {
                newImport("java.util.AbstractSequentialList", false),
              })
          .put(
              new Identifier("MAIN_CLASS"),
              new Import[] {
                newImport("java.util.jar.Attributes.Name.MAIN_CLASS", true),
              })
          .put(
              new Identifier("tk_objref"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind.tk_objref", true),
              })
          .put(
              new Identifier("RoleInfo"),
              new Import[] {
                newImport("javax.management.relation.RoleInfo", false),
              })
          .put(
              new Identifier("IntHolder"),
              new Import[] {
                newImport("org.omg.CORBA.IntHolder", false),
              })
          .put(
              new Identifier("TAG_HHEA"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_HHEA", true),
              })
          .put(
              new Identifier("RSAPrivateCrtKeySpec"),
              new Import[] {
                newImport("java.security.spec.RSAPrivateCrtKeySpec", false),
              })
          .put(
              new Identifier("BasicViewportUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicViewportUI", false),
              })
          .put(
              new Identifier("toLowerCase"),
              new Import[] {
                newImport("java.lang.Character.toLowerCase", true),
              })
          .put(
              new Identifier("ConnectionPendingException"),
              new Import[] {
                newImport("java.nio.channels.ConnectionPendingException", false),
              })
          .put(
              new Identifier("STAPLE"),
              new Import[] {
                newImport("javax.print.attribute.standard.Finishings.STAPLE", true),
              })
          .put(
              new Identifier("KEY_RENDERING"),
              new Import[] {
                newImport("java.awt.RenderingHints.KEY_RENDERING", true),
              })
          .put(
              new Identifier("ISO_DATE_TIME"),
              new Import[] {
                newImport("java.time.format.DateTimeFormatter.ISO_DATE_TIME", true),
              })
          .put(
              new Identifier("KeyPairGeneratorSpi"),
              new Import[] {
                newImport("java.security.KeyPairGeneratorSpi", false),
              })
          .put(
              new Identifier("NAMESPACE_ERR"),
              new Import[] {
                newImport("org.w3c.dom.DOMException.NAMESPACE_ERR", true),
              })
          .put(
              new Identifier("getImageWritersByMIMEType"),
              new Import[] {
                newImport("javax.imageio.ImageIO.getImageWritersByMIMEType", true),
              })
          .put(
              new Identifier("NameDynAnyPairSeqHelper"),
              new Import[] {
                newImport("org.omg.DynamicAny.NameDynAnyPairSeqHelper", false),
              })
          .put(
              new Identifier("COMBINING_HALF_MARKS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.COMBINING_HALF_MARKS", true),
              })
          .put(
              new Identifier("LoggingMXBean"),
              new Import[] {
                newImport("java.util.logging.LoggingMXBean", false),
              })
          .put(
              new Identifier("_dk_Attribute"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind._dk_Attribute", true),
              })
          .put(
              new Identifier("RectangularShape"),
              new Import[] {
                newImport("java.awt.geom.RectangularShape", false),
              })
          .put(
              new Identifier("SourceDataLine"),
              new Import[] {
                newImport("javax.sound.sampled.SourceDataLine", false),
              })
          .put(
              new Identifier("ActivationGroup_Stub"),
              new Import[] {
                newImport("java.rmi.activation.ActivationGroup_Stub", false),
              })
          .put(
              new Identifier("ParagraphConstants"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.ParagraphConstants", false),
              })
          .put(
              new Identifier("SynthToggleButtonUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthToggleButtonUI", false),
              })
          .put(
              new Identifier("NO_IMPLEMENT"),
              new Import[] {
                newImport("org.omg.CORBA.NO_IMPLEMENT", false),
              })
          .put(
              new Identifier("BOTTOM_ALIGNMENT"),
              new Import[] {
                newImport("java.awt.Component.BOTTOM_ALIGNMENT", true),
                newImport("java.awt.font.GraphicAttribute.BOTTOM_ALIGNMENT", true),
              })
          .put(
              new Identifier("WINDOW_BORDER"),
              new Import[] {
                newImport("java.awt.SystemColor.WINDOW_BORDER", true),
              })
          .put(
              new Identifier("WEEK_BASED_YEAR"),
              new Import[] {
                newImport("java.time.temporal.IsoFields.WEEK_BASED_YEAR", true),
              })
          .put(
              new Identifier("ReentrantReadWriteLock"),
              new Import[] {
                newImport("java.util.concurrent.locks.ReentrantReadWriteLock", false),
              })
          .put(
              new Identifier("KBD"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.KBD", true),
              })
          .put(
              new Identifier("tk_wstring"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind.tk_wstring", true),
              })
          .put(
              new Identifier("Notation"),
              new Import[] {
                newImport("org.w3c.dom.Notation", false),
              })
          .put(
              new Identifier("AttributedString"),
              new Import[] {
                newImport("java.text.AttributedString", false),
              })
          .put(
              new Identifier("EndDocument"),
              new Import[] {
                newImport("javax.xml.stream.events.EndDocument", false),
              })
          .put(
              new Identifier("TAG_ACNT"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_ACNT", true),
              })
          .put(
              new Identifier("toCollection"),
              new Import[] {
                newImport("java.util.stream.Collectors.toCollection", true),
              })
          .put(
              new Identifier("AVESTAN"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.AVESTAN", true),
              })
          .put(
              new Identifier("TAG_GVAR"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_GVAR", true),
              })
          .put(
              new Identifier("TOBOTTOM_TORIGHT"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.PresentationDirection.TOBOTTOM_TORIGHT", true),
              })
          .put(
              new Identifier("floor"),
              new Import[] {
                newImport("java.lang.Math.floor", true),
                newImport("java.lang.StrictMath.floor", true),
              })
          .put(
              new Identifier("VM_NONE"),
              new Import[] {
                newImport("org.omg.CORBA.VM_NONE", false),
              })
          .put(
              new Identifier("KeyFactory"),
              new Import[] {
                newImport("java.security.KeyFactory", false),
              })
          .put(
              new Identifier("INACTIVE_CAPTION_TEXT"),
              new Import[] {
                newImport("java.awt.SystemColor.INACTIVE_CAPTION_TEXT", true),
              })
          .put(
              new Identifier("ToolBarBorder"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalBorders.ToolBarBorder", false),
              })
          .put(
              new Identifier("AtomicIntegerArray"),
              new Import[] {
                newImport("java.util.concurrent.atomic.AtomicIntegerArray", false),
              })
          .put(
              new Identifier("VALUE_TEXT_ANTIALIAS_GASP"),
              new Import[] {
                newImport("java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_GASP", true),
              })
          .put(
              new Identifier("SAMARITAN"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.SAMARITAN", true),
              })
          .put(
              new Identifier("getColor"),
              new Import[] {
                newImport("java.awt.Color.getColor", true),
                newImport("javax.swing.UIManager.getColor", true),
              })
          .put(
              new Identifier("SortOrder"),
              new Import[] {
                newImport("javax.swing.SortOrder", false),
              })
          .put(
              new Identifier("Point"),
              new Import[] {
                newImport("java.awt.Point", false),
              })
          .put(
              new Identifier("KeySelectorResult"),
              new Import[] {
                newImport("javax.xml.crypto.KeySelectorResult", false),
              })
          .put(
              new Identifier("VALUE_INTERPOLATION_BILINEAR"),
              new Import[] {
                newImport("java.awt.RenderingHints.VALUE_INTERPOLATION_BILINEAR", true),
              })
          .put(
              new Identifier("StandardCopyOption"),
              new Import[] {
                newImport("java.nio.file.StandardCopyOption", false),
              })
          .put(
              new Identifier("PasteAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.PasteAction", false),
              })
          .put(
              new Identifier("SAXSource"),
              new Import[] {
                newImport("javax.xml.transform.sax.SAXSource", false),
              })
          .put(
              new Identifier("END_OF_EXCLUSIVE"),
              new Import[] {
                newImport("javax.sound.midi.ShortMessage.END_OF_EXCLUSIVE", true),
              })
          .put(
              new Identifier("ofLocalizedTime"),
              new Import[] {
                newImport("java.time.format.DateTimeFormatter.ofLocalizedTime", true),
              })
          .put(
              new Identifier("WARNING_MESSAGE"),
              new Import[] {
                newImport("javax.swing.JOptionPane.WARNING_MESSAGE", true),
              })
          .put(
              new Identifier("ExtendedRequest"),
              new Import[] {
                newImport("javax.naming.ldap.ExtendedRequest", false),
              })
          .put(
              new Identifier("AnnotationValue"),
              new Import[] {
                newImport("javax.lang.model.element.AnnotationValue", false),
              })
          .put(
              new Identifier("UNKNOWN"),
              new Import[] {
                newImport("java.awt.ComponentOrientation.UNKNOWN", true),
                newImport("javax.accessibility.AccessibleRole.UNKNOWN", true),
                newImport("javax.management.MBeanOperationInfo.UNKNOWN", true),
                newImport("javax.print.attribute.standard.JobState.UNKNOWN", true),
                newImport("javax.print.attribute.standard.PrinterState.UNKNOWN", true),
                newImport("org.omg.CORBA.UNKNOWN", false),
                newImport("org.omg.PortableInterceptor.UNKNOWN", false),
              })
          .put(
              new Identifier("BidiElementName"),
              new Import[] {
                newImport("javax.swing.text.AbstractDocument.BidiElementName", true),
              })
          .build();
}
