// Code generated by GenerateStdlib.java. DO NOT EDIT.
package com.nikodoko.javaimports.stdlib.internal.api.v8;

import static com.nikodoko.javaimports.stdlib.internal.Stdlib.newImport;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.common.Identifier;
import com.nikodoko.javaimports.common.Import;
import java.util.Map;

public class Java8StdlibChunk28 {
  static final Map<Identifier, Import[]> CLASSES =
      new ImmutableMap.Builder<Identifier, Import[]>()
          .put(
              new Identifier("STATICIMAGEDONE"),
              new Import[] {
                newImport("java.awt.image.ImageConsumer.STATICIMAGEDONE", true),
              })
          .put(
              new Identifier("TYPE_FCLR"),
              new Import[] {
                newImport("java.awt.color.ColorSpace.TYPE_FCLR", true),
              })
          .put(
              new Identifier("YES_OPTION"),
              new Import[] {
                newImport("javax.swing.JOptionPane.YES_OPTION", true),
              })
          .put(
              new Identifier("Refreshable"),
              new Import[] {
                newImport("javax.security.auth.Refreshable", false),
              })
          .put(
              new Identifier("Spring"),
              new Import[] {
                newImport("javax.swing.Spring", false),
              })
          .put(
              new Identifier("SUPPLEMENTAL_MATHEMATICAL_OPERATORS"),
              new Import[] {
                newImport(
                    "java.lang.Character.UnicodeBlock.SUPPLEMENTAL_MATHEMATICAL_OPERATORS", true),
              })
          .put(
              new Identifier("BooleanControl"),
              new Import[] {
                newImport("javax.sound.sampled.BooleanControl", false),
              })
          .put(
              new Identifier("setInt"),
              new Import[] {
                newImport("java.lang.reflect.Array.setInt", true),
              })
          .put(
              new Identifier("DataSource"),
              new Import[] {
                newImport("javax.activation.DataSource", false),
                newImport("javax.sql.DataSource", false),
              })
          .put(
              new Identifier("selectionBackwardAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.selectionBackwardAction", true),
              })
          .put(
              new Identifier("DOM_OBJECT_MODEL"),
              new Import[] {
                newImport("javax.xml.xpath.XPathConstants.DOM_OBJECT_MODEL", true),
              })
          .put(
              new Identifier("LIGHT_GRAY"),
              new Import[] {
                newImport("java.awt.Color.LIGHT_GRAY", true),
              })
          .put(
              new Identifier("X509TrustManager"),
              new Import[] {
                newImport("javax.net.ssl.X509TrustManager", false),
              })
          .put(
              new Identifier("MultiMenuItemUI"),
              new Import[] {
                newImport("javax.swing.plaf.multi.MultiMenuItemUI", false),
              })
          .put(
              new Identifier("NotEmpty"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextPackage.NotEmpty", false),
              })
          .put(
              new Identifier("procedureReturnsResult"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.procedureReturnsResult", true),
              })
          .put(
              new Identifier("TEXT_PLAIN"),
              new Import[] {
                newImport("javax.print.DocFlavor.CHAR_ARRAY.TEXT_PLAIN", true),
                newImport("javax.print.DocFlavor.READER.TEXT_PLAIN", true),
                newImport("javax.print.DocFlavor.STRING.TEXT_PLAIN", true),
              })
          .put(
              new Identifier("FileAlreadyExistsException"),
              new Import[] {
                newImport("java.nio.file.FileAlreadyExistsException", false),
              })
          .put(
              new Identifier("setDefaultLookAndFeelDecorated"),
              new Import[] {
                newImport("javax.swing.JDialog.setDefaultLookAndFeelDecorated", true),
                newImport("javax.swing.JFrame.setDefaultLookAndFeelDecorated", true),
              })
          .put(
              new Identifier("LEFT_OUTER_JOIN"),
              new Import[] {
                newImport("javax.sql.rowset.JoinRowSet.LEFT_OUTER_JOIN", true),
              })
          .put(
              new Identifier("SECRET_KEY"),
              new Import[] {
                newImport("javax.crypto.Cipher.SECRET_KEY", true),
              })
          .put(
              new Identifier("CacheMode"),
              new Import[] {
                newImport(
                    "javax.swing.plaf.nimbus.AbstractRegionPainter.PaintContext.CacheMode", false),
              })
          .put(
              new Identifier("ValueHandler"),
              new Import[] {
                newImport("javax.rmi.CORBA.ValueHandler", false),
              })
          .put(
              new Identifier("newMBeanServer"),
              new Import[] {
                newImport("javax.management.MBeanServerFactory.newMBeanServer", true),
              })
          .put(
              new Identifier("VK_LESS"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_LESS", true),
              })
          .put(
              new Identifier("REFERENCE_PARAMETERS"),
              new Import[] {
                newImport("javax.xml.ws.handler.MessageContext.REFERENCE_PARAMETERS", true),
              })
          .put(
              new Identifier("ErrorType"),
              new Import[] {
                newImport("javax.lang.model.type.ErrorType", false),
              })
          .put(
              new Identifier("hypot"),
              new Import[] {
                newImport("java.lang.Math.hypot", true),
                newImport("java.lang.StrictMath.hypot", true),
              })
          .put(
              new Identifier("DigestOutputStream"),
              new Import[] {
                newImport("java.security.DigestOutputStream", false),
              })
          .put(
              new Identifier("VALUE_RANGE_MAX_INCLUSIVE_MASK"),
              new Import[] {
                newImport(
                    "javax.imageio.metadata.IIOMetadataFormat.VALUE_RANGE_MAX_INCLUSIVE_MASK",
                    true),
              })
          .put(
              new Identifier("DIRECTION_RIGHT_TO_LEFT"),
              new Import[] {
                newImport("java.text.Bidi.DIRECTION_RIGHT_TO_LEFT", true),
              })
          .put(
              new Identifier("XmlID"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlID", false),
              })
          .put(
              new Identifier("getCrossPlatformLookAndFeelClassName"),
              new Import[] {
                newImport("javax.swing.UIManager.getCrossPlatformLookAndFeelClassName", true),
              })
          .put(
              new Identifier("BACKGROUND_IMAGE"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.BACKGROUND_IMAGE", true),
              })
          .put(
              new Identifier("PROTECTED"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandles.Lookup.PROTECTED", true),
                newImport("java.lang.reflect.Modifier.PROTECTED", true),
              })
          .put(
              new Identifier("NA_NUMBER_10_ENVELOPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.NA_NUMBER_10_ENVELOPE", true),
                newImport(
                    "javax.print.attribute.standard.MediaSizeName.NA_NUMBER_10_ENVELOPE", true),
                newImport(
                    "javax.print.attribute.standard.MediaSize.NA.NA_NUMBER_10_ENVELOPE", true),
              })
          .put(
              new Identifier("LinkageError"),
              new Import[] {
                newImport("java.lang.LinkageError", false),
              })
          .put(
              new Identifier("BAD_TYPECODE"),
              new Import[] {
                newImport("org.omg.CORBA.BAD_TYPECODE", false),
              })
          .put(
              new Identifier("XMLStreamConstants"),
              new Import[] {
                newImport("javax.xml.stream.XMLStreamConstants", false),
              })
          .put(
              new Identifier("getRegisteredProviders"),
              new Import[] {
                newImport("javax.sql.rowset.spi.SyncFactory.getRegisteredProviders", true),
              })
          .put(
              new Identifier("BELOW_BOTTOM"),
              new Import[] {
                newImport("javax.swing.border.TitledBorder.BELOW_BOTTOM", true),
              })
          .put(
              new Identifier("CLOSE_FAILURE"),
              new Import[] {
                newImport("java.util.logging.ErrorManager.CLOSE_FAILURE", true),
              })
          .put(
              new Identifier("holdsLock"),
              new Import[] {
                newImport("java.lang.Thread.holdsLock", true),
              })
          .put(
              new Identifier("SPLIT_PANE_DIVIDER"),
              new Import[] {
                newImport("javax.swing.plaf.synth.Region.SPLIT_PANE_DIVIDER", true),
              })
          .put(
              new Identifier("ROUND_HALF_DOWN"),
              new Import[] {
                newImport("java.math.BigDecimal.ROUND_HALF_DOWN", true),
              })
          .put(
              new Identifier("withFixedThreadPool"),
              new Import[] {
                newImport("java.nio.channels.AsynchronousChannelGroup.withFixedThreadPool", true),
              })
          .put(
              new Identifier("OutputStreamWriter"),
              new Import[] {
                newImport("java.io.OutputStreamWriter", false),
              })
          .put(
              new Identifier("ShortSeqHelper"),
              new Import[] {
                newImport("org.omg.CORBA.ShortSeqHelper", false),
              })
          .put(
              new Identifier("ServiceInformationHolder"),
              new Import[] {
                newImport("org.omg.CORBA.ServiceInformationHolder", false),
              })
          .put(
              new Identifier("emptyNavigableSet"),
              new Import[] {
                newImport("java.util.Collections.emptyNavigableSet", true),
              })
          .put(
              new Identifier("BindingIterator"),
              new Import[] {
                newImport("org.omg.CosNaming.BindingIterator", false),
              })
          .put(
              new Identifier("AudioClip"),
              new Import[] {
                newImport("java.applet.AudioClip", false),
              })
          .put(
              new Identifier("NotationDeclaration"),
              new Import[] {
                newImport("javax.xml.stream.events.NotationDeclaration", false),
              })
          .put(
              new Identifier("SaslException"),
              new Import[] {
                newImport("javax.security.sasl.SaslException", false),
              })
          .put(
              new Identifier("_tk_ushort"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind._tk_ushort", true),
              })
          .put(
              new Identifier("WStringSeqHolder"),
              new Import[] {
                newImport("org.omg.CORBA.WStringSeqHolder", false),
              })
          .put(
              new Identifier("TreeCellRenderer"),
              new Import[] {
                newImport("javax.swing.tree.TreeCellRenderer", false),
              })
          .put(
              new Identifier("parseHexBinary"),
              new Import[] {
                newImport("javax.xml.bind.DatatypeConverter.parseHexBinary", true),
              })
          .put(
              new Identifier("quoteReplacement"),
              new Import[] {
                newImport("java.util.regex.Matcher.quoteReplacement", true),
              })
          .put(
              new Identifier("PACKAGE"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandles.Lookup.PACKAGE", true),
              })
          .put(
              new Identifier("NODE_RENAMED"),
              new Import[] {
                newImport("org.w3c.dom.UserDataHandler.NODE_RENAMED", true),
              })
          .put(
              new Identifier("toUpperCase"),
              new Import[] {
                newImport("java.lang.Character.toUpperCase", true),
              })
          .put(
              new Identifier("Permissions"),
              new Import[] {
                newImport("java.security.Permissions", false),
              })
          .put(
              new Identifier("ISO_DESIGNATED_LONG"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_DESIGNATED_LONG", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ISO_DESIGNATED_LONG", true),
              })
          .put(
              new Identifier("HYPERLINK"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.HYPERLINK", true),
              })
          .put(
              new Identifier("_dk_Array"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind._dk_Array", true),
              })
          .put(
              new Identifier("EMBEDS"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRelation.EMBEDS", true),
              })
          .put(
              new Identifier("XmlRootElement"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlRootElement", false),
              })
          .put(
              new Identifier("activeCaption"),
              new Import[] {
                newImport("java.awt.SystemColor.activeCaption", true),
              })
          .put(
              new Identifier("setStyleFactory"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthLookAndFeel.setStyleFactory", true),
              })
          .put(
              new Identifier("addProvider"),
              new Import[] {
                newImport("java.security.Security.addProvider", true),
              })
          .put(
              new Identifier("ACCESSIBLE_INVALIDATE_CHILDREN"),
              new Import[] {
                newImport(
                    "javax.accessibility.AccessibleContext.ACCESSIBLE_INVALIDATE_CHILDREN", true),
              })
          .put(
              new Identifier("AccessibleValue"),
              new Import[] {
                newImport("javax.accessibility.AccessibleValue", false),
              })
          .put(
              new Identifier("SerialException"),
              new Import[] {
                newImport("javax.sql.rowset.serial.SerialException", false),
              })
          .put(
              new Identifier("SAXTransformerFactory"),
              new Import[] {
                newImport("javax.xml.transform.sax.SAXTransformerFactory", false),
              })
          .put(
              new Identifier("TAG_CODE_SETS"),
              new Import[] {
                newImport("org.omg.IOP.TAG_CODE_SETS", false),
              })
          .put(
              new Identifier("CYPRIOT_SYLLABARY"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.CYPRIOT_SYLLABARY", true),
              })
          .put(
              new Identifier("ServerNotActiveException"),
              new Import[] {
                newImport("java.rmi.server.ServerNotActiveException", false),
              })
          .put(
              new Identifier("HandlerResolver"),
              new Import[] {
                newImport("javax.xml.ws.handler.HandlerResolver", false),
              })
          .put(
              new Identifier("BASEFONT"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.BASEFONT", true),
              })
          .put(
              new Identifier("BasicComboBoxUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicComboBoxUI", false),
              })
          .put(
              new Identifier("Long"),
              new Import[] {
                newImport("java.lang.Long", false),
              })
          .put(
              new Identifier("Class"),
              new Import[] {
                newImport("java.lang.Class", false),
              })
          .put(
              new Identifier("CipherSpi"),
              new Import[] {
                newImport("javax.crypto.CipherSpi", false),
              })
          .put(
              new Identifier("pasteAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.pasteAction", true),
              })
          .put(
              new Identifier("MultiComboBoxUI"),
              new Import[] {
                newImport("javax.swing.plaf.multi.MultiComboBoxUI", false),
              })
          .put(
              new Identifier("CopyOnWriteArrayList"),
              new Import[] {
                newImport("java.util.concurrent.CopyOnWriteArrayList", false),
              })
          .put(
              new Identifier("YES_NO_OPTION"),
              new Import[] {
                newImport("javax.security.auth.callback.ConfirmationCallback.YES_NO_OPTION", true),
                newImport("javax.swing.JOptionPane.YES_NO_OPTION", true),
              })
          .put(
              new Identifier("NODE_ADOPTED"),
              new Import[] {
                newImport("org.w3c.dom.UserDataHandler.NODE_ADOPTED", true),
              })
          .put(
              new Identifier("DataBufferByte"),
              new Import[] {
                newImport("java.awt.image.DataBufferByte", false),
              })
          .put(
              new Identifier("getInactiveControlTextColor"),
              new Import[] {
                newImport(
                    "javax.swing.plaf.metal.MetalLookAndFeel.getInactiveControlTextColor", true),
              })
          .put(
              new Identifier("VISIBLE"),
              new Import[] {
                newImport("javax.accessibility.AccessibleState.VISIBLE", true),
              })
          .put(
              new Identifier("createImageInputStream"),
              new Import[] {
                newImport("javax.imageio.ImageIO.createImageInputStream", true),
              })
          .put(
              new Identifier("BIGDECIMAL"),
              new Import[] {
                newImport("javax.management.openmbean.SimpleType.BIGDECIMAL", true),
              })
          .put(
              new Identifier("CENFLG"),
              new Import[] {
                newImport("java.util.jar.JarEntry.CENFLG", true),
                newImport("java.util.jar.JarFile.CENFLG", true),
                newImport("java.util.jar.JarInputStream.CENFLG", true),
                newImport("java.util.jar.JarOutputStream.CENFLG", true),
                newImport("java.util.zip.ZipEntry.CENFLG", true),
                newImport("java.util.zip.ZipFile.CENFLG", true),
                newImport("java.util.zip.ZipInputStream.CENFLG", true),
                newImport("java.util.zip.ZipOutputStream.CENFLG", true),
              })
          .put(
              new Identifier("SELECTION_VALUES_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JOptionPane.SELECTION_VALUES_PROPERTY", true),
              })
          .put(
              new Identifier("MODE_SYNCHRONOUS"),
              new Import[] {
                newImport("org.w3c.dom.ls.DOMImplementationLS.MODE_SYNCHRONOUS", true),
              })
          .put(
              new Identifier("Invoker"),
              new Import[] {
                newImport("javax.xml.ws.spi.Invoker", false),
              })
          .put(
              new Identifier("getUseCache"),
              new Import[] {
                newImport("javax.imageio.ImageIO.getUseCache", true),
              })
          .put(
              new Identifier("UndefinedProperty"),
              new Import[] {
                newImport("java.awt.Image.UndefinedProperty", true),
              })
          .put(
              new Identifier("VERBOSE"),
              new Import[] {
                newImport("java.rmi.server.LogStream.VERBOSE", true),
              })
          .put(
              new Identifier("MidiDeviceReceiver"),
              new Import[] {
                newImport("javax.sound.midi.MidiDeviceReceiver", false),
              })
          .put(
              new Identifier("Interceptor"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.Interceptor", false),
              })
          .put(
              new Identifier("PrinterMoreInfoManufacturer"),
              new Import[] {
                newImport("javax.print.attribute.standard.PrinterMoreInfoManufacturer", false),
              })
          .put(
              new Identifier("NodeChangeEvent"),
              new Import[] {
                newImport("java.util.prefs.NodeChangeEvent", false),
              })
          .put(
              new Identifier("ThreadPolicyValue"),
              new Import[] {
                newImport("org.omg.PortableServer.ThreadPolicyValue", false),
              })
          .put(
              new Identifier("columnNoNulls"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.columnNoNulls", true),
                newImport("java.sql.ResultSetMetaData.columnNoNulls", true),
              })
          .put(
              new Identifier("MultiLookAndFeel"),
              new Import[] {
                newImport("javax.swing.plaf.multi.MultiLookAndFeel", false),
              })
          .put(
              new Identifier("DataContentHandler"),
              new Import[] {
                newImport("javax.activation.DataContentHandler", false),
              })
          .put(
              new Identifier("CommunicationException"),
              new Import[] {
                newImport("javax.naming.CommunicationException", false),
              })
          .put(
              new Identifier("DIRECTORY_CHANGED_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JFileChooser.DIRECTORY_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("SynthScrollBarUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthScrollBarUI", false),
              })
          .put(
              new Identifier("icSigViewingConditionsTag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigViewingConditionsTag", true),
              })
          .put(
              new Identifier("Dimension2D"),
              new Import[] {
                newImport("java.awt.geom.Dimension2D", false),
              })
          .put(
              new Identifier("VALUE_STROKE_PURE"),
              new Import[] {
                newImport("java.awt.RenderingHints.VALUE_STROKE_PURE", true),
              })
          .put(
              new Identifier("StringContent"),
              new Import[] {
                newImport("javax.swing.text.StringContent", false),
              })
          .put(
              new Identifier("ALIGN_JUSTIFIED"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.ALIGN_JUSTIFIED", true),
              })
          .put(
              new Identifier("GAP_TOKEN"),
              new Import[] {
                newImport("org.ietf.jgss.GSSException.GAP_TOKEN", true),
              })
          .put(
              new Identifier("ImageWriteParam"),
              new Import[] {
                newImport("javax.imageio.ImageWriteParam", false),
              })
          .put(
              new Identifier("ArrayDeque"),
              new Import[] {
                newImport("java.util.ArrayDeque", false),
              })
          .put(
              new Identifier("ExemptionMechanism"),
              new Import[] {
                newImport("javax.crypto.ExemptionMechanism", false),
              })
          .put(
              new Identifier("FRAMEBORDER"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.FRAMEBORDER", true),
              })
          .put(
              new Identifier("OfInt"),
              new Import[] {
                newImport("java.util.PrimitiveIterator.OfInt", false),
                newImport("java.util.Spliterator.OfInt", false),
              })
          .put(
              new Identifier("setObjectFactoryBuilder"),
              new Import[] {
                newImport("javax.naming.spi.NamingManager.setObjectFactoryBuilder", true),
              })
          .put(
              new Identifier("OPEN_FAILURE"),
              new Import[] {
                newImport("java.util.logging.ErrorManager.OPEN_FAILURE", true),
              })
          .put(
              new Identifier("RMISecurityException"),
              new Import[] {
                newImport("java.rmi.RMISecurityException", false),
              })
          .put(
              new Identifier("unmarshal"),
              new Import[] {
                newImport("javax.xml.bind.JAXB.unmarshal", true),
              })
          .put(
              new Identifier("TRANSACTION_MODE"),
              new Import[] {
                newImport("org.omg.CORBA.TRANSACTION_MODE", false),
              })
          .put(
              new Identifier("getPackages"),
              new Import[] {
                newImport("java.lang.Package.getPackages", true),
              })
          .put(
              new Identifier("IS_COALESCING"),
              new Import[] {
                newImport("javax.xml.stream.XMLInputFactory.IS_COALESCING", true),
              })
          .put(
              new Identifier("Y_AXIS"),
              new Import[] {
                newImport("javax.swing.BoxLayout.Y_AXIS", true),
                newImport("javax.swing.text.View.Y_AXIS", true),
              })
          .put(
              new Identifier("ISO_B0"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_B0", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ISO_B0", true),
              })
          .put(
              new Identifier("ISO_B1"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_B1", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ISO_B1", true),
              })
          .put(
              new Identifier("ISO_B2"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_B2", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ISO_B2", true),
              })
          .put(
              new Identifier("ISO_B3"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_B3", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ISO_B3", true),
              })
          .put(
              new Identifier("ofNullable"),
              new Import[] {
                newImport("java.util.Optional.ofNullable", true),
              })
          .put(
              new Identifier("ISO_B4"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_B4", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ISO_B4", true),
              })
          .put(
              new Identifier("forLanguageTag"),
              new Import[] {
                newImport("java.util.Locale.forLanguageTag", true),
              })
          .put(
              new Identifier("ISO_B5"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_B5", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ISO_B5", true),
              })
          .put(
              new Identifier("TypeKindVisitor8"),
              new Import[] {
                newImport("javax.lang.model.util.TypeKindVisitor8", false),
              })
          .put(
              new Identifier("ISO_B6"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_B6", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ISO_B6", true),
              })
          .put(
              new Identifier("ISO_B7"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_B7", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ISO_B7", true),
              })
          .put(
              new Identifier("WStringSeqHelper"),
              new Import[] {
                newImport("org.omg.CORBA.WStringSeqHelper", false),
              })
          .put(
              new Identifier("LSParser"),
              new Import[] {
                newImport("org.w3c.dom.ls.LSParser", false),
              })
          .put(
              new Identifier("VK_DEAD_DOUBLEACUTE"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_DEAD_DOUBLEACUTE", true),
              })
          .put(
              new Identifier("URIResolver"),
              new Import[] {
                newImport("javax.xml.transform.URIResolver", false),
              })
          .put(
              new Identifier("TWO_SIDED_LONG_EDGE"),
              new Import[] {
                newImport("java.awt.JobAttributes.SidesType.TWO_SIDED_LONG_EDGE", true),
                newImport("javax.print.attribute.standard.Sides.TWO_SIDED_LONG_EDGE", true),
              })
          .put(
              new Identifier("TypeKindVisitor7"),
              new Import[] {
                newImport("javax.lang.model.util.TypeKindVisitor7", false),
              })
          .put(
              new Identifier("TypeKindVisitor6"),
              new Import[] {
                newImport("javax.lang.model.util.TypeKindVisitor6", false),
              })
          .put(
              new Identifier("BOTTOM"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaTray.BOTTOM", true),
                newImport("javax.swing.JSplitPane.BOTTOM", true),
                newImport("javax.swing.SwingConstants.BOTTOM", true),
                newImport("javax.swing.border.TitledBorder.BOTTOM", true),
              })
          .put(
              new Identifier("Math"),
              new Import[] {
                newImport("java.lang.Math", false),
              })
          .put(
              new Identifier("requestPasswordAuthentication"),
              new Import[] {
                newImport("java.net.Authenticator.requestPasswordAuthentication", true),
              })
          .put(
              new Identifier("Decoder"),
              new Import[] {
                newImport("java.util.Base64.Decoder", false),
              })
          .put(
              new Identifier("SignatureProperty"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.SignatureProperty", false),
              })
          .put(
              new Identifier("JIS_B9"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.JIS_B9", true),
                newImport("javax.print.attribute.standard.MediaSizeName.JIS_B9", true),
              })
          .put(
              new Identifier("AsynchronousFileChannel"),
              new Import[] {
                newImport("java.nio.channels.AsynchronousFileChannel", false),
              })
          .put(
              new Identifier("JIS_B7"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.JIS_B7", true),
                newImport("javax.print.attribute.standard.MediaSizeName.JIS_B7", true),
              })
          .put(
              new Identifier("JIS_B8"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.JIS_B8", true),
                newImport("javax.print.attribute.standard.MediaSizeName.JIS_B8", true),
              })
          .put(
              new Identifier("getPool"),
              new Import[] {
                newImport("java.util.concurrent.ForkJoinTask.getPool", true),
              })
          .put(
              new Identifier("ISO_B8"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_B8", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ISO_B8", true),
              })
          .put(
              new Identifier("ISO_B9"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_B9", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ISO_B9", true),
              })
          .put(
              new Identifier("CollatorProvider"),
              new Import[] {
                newImport("java.text.spi.CollatorProvider", false),
              })
          .put(
              new Identifier("getSourceDataLine"),
              new Import[] {
                newImport("javax.sound.sampled.AudioSystem.getSourceDataLine", true),
              })
          .put(
              new Identifier("ISO_C1"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_C1", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ISO_C1", true),
              })
          .put(
              new Identifier("signum"),
              new Import[] {
                newImport("java.lang.Integer.signum", true),
                newImport("java.lang.Long.signum", true),
                newImport("java.lang.Math.signum", true),
                newImport("java.lang.StrictMath.signum", true),
              })
          .put(
              new Identifier("ISO_C2"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_C2", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ISO_C2", true),
              })
          .put(
              new Identifier("ISO_C3"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_C3", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ISO_C3", true),
              })
          .put(
              new Identifier("HTMLFactory"),
              new Import[] {
                newImport("javax.swing.text.html.HTMLEditorKit.HTMLFactory", false),
              })
          .put(
              new Identifier("ISO_C4"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_C4", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ISO_C4", true),
              })
          .put(
              new Identifier("ISO_C5"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_C5", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ISO_C5", true),
              })
          .put(
              new Identifier("ISO_C6"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_C6", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ISO_C6", true),
              })
          .put(
              new Identifier("ISO_C7"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_C7", true),
              })
          .put(
              new Identifier("ISO_C8"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_C8", true),
              })
          .put(
              new Identifier("InstanceAlreadyExistsException"),
              new Import[] {
                newImport("javax.management.InstanceAlreadyExistsException", false),
              })
          .put(
              new Identifier("JIS_B1"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.JIS_B1", true),
                newImport("javax.print.attribute.standard.MediaSizeName.JIS_B1", true),
              })
          .put(
              new Identifier("JIS_B2"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.JIS_B2", true),
                newImport("javax.print.attribute.standard.MediaSizeName.JIS_B2", true),
              })
          .put(
              new Identifier("getLogger"),
              new Import[] {
                newImport("java.util.logging.Logger.getLogger", true),
                newImport("javax.sql.rowset.spi.SyncFactory.getLogger", true),
              })
          .put(
              new Identifier("JIS_B0"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.JIS_B0", true),
                newImport("javax.print.attribute.standard.MediaSizeName.JIS_B0", true),
              })
          .put(
              new Identifier("ProfileIdHelper"),
              new Import[] {
                newImport("org.omg.IOP.ProfileIdHelper", false),
              })
          .put(
              new Identifier("JIS_B5"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.JIS_B5", true),
                newImport("javax.print.attribute.standard.MediaSizeName.JIS_B5", true),
              })
          .put(
              new Identifier("AWTEventListenerProxy"),
              new Import[] {
                newImport("java.awt.event.AWTEventListenerProxy", false),
              })
          .put(
              new Identifier("JIS_B6"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.JIS_B6", true),
                newImport("javax.print.attribute.standard.MediaSizeName.JIS_B6", true),
              })
          .put(
              new Identifier("matches"),
              new Import[] {
                newImport("java.util.regex.Pattern.matches", true),
              })
          .put(
              new Identifier("ImageTranscoderSpi"),
              new Import[] {
                newImport("javax.imageio.spi.ImageTranscoderSpi", false),
              })
          .put(
              new Identifier("REQUEST_CIPHER_SUITE"),
              new Import[] {
                newImport("javax.xml.ws.spi.http.HttpExchange.REQUEST_CIPHER_SUITE", true),
              })
          .put(
              new Identifier("JIS_B3"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.JIS_B3", true),
                newImport("javax.print.attribute.standard.MediaSizeName.JIS_B3", true),
              })
          .put(
              new Identifier("PriorityBlockingQueue"),
              new Import[] {
                newImport("java.util.concurrent.PriorityBlockingQueue", false),
              })
          .put(
              new Identifier("toConcurrentMap"),
              new Import[] {
                newImport("java.util.stream.Collectors.toConcurrentMap", true),
              })
          .put(
              new Identifier("ISO_C0"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_C0", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ISO_C0", true),
              })
          .put(
              new Identifier("JIS_B4"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.JIS_B4", true),
                newImport("javax.print.attribute.standard.MediaSizeName.JIS_B4", true),
              })
          .put(
              new Identifier("HTTP_CONFLICT"),
              new Import[] {
                newImport("java.net.HttpURLConnection.HTTP_CONFLICT", true),
              })
          .put(
              new Identifier("SHORT_DESCRIPTION"),
              new Import[] {
                newImport("javax.swing.Action.SHORT_DESCRIPTION", true),
              })
          .put(
              new Identifier("InputMethod"),
              new Import[] {
                newImport("java.awt.im.spi.InputMethod", false),
              })
          .put(
              new Identifier("ServiceNotFoundException"),
              new Import[] {
                newImport("javax.management.ServiceNotFoundException", false),
              })
          .put(
              new Identifier("ISO_C9"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_C9", true),
              })
          .put(
              new Identifier("InvalidPolicyHelper"),
              new Import[] {
                newImport("org.omg.PortableServer.POAPackage.InvalidPolicyHelper", false),
              })
          .put(
              new Identifier("Unreferenced"),
              new Import[] {
                newImport("java.rmi.server.Unreferenced", false),
              })
          .put(
              new Identifier("newByteChannel"),
              new Import[] {
                newImport("java.nio.file.Files.newByteChannel", true),
              })
          .put(
              new Identifier("NO_CRED"),
              new Import[] {
                newImport("org.ietf.jgss.GSSException.NO_CRED", true),
              })
          .put(
              new Identifier("SINHALA"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.SINHALA", true),
              })
          .put(
              new Identifier("reverseOrder"),
              new Import[] {
                newImport("java.util.Collections.reverseOrder", true),
                newImport("java.util.Comparator.reverseOrder", true),
              })
          .put(
              new Identifier("FILES_AND_DIRECTORIES"),
              new Import[] {
                newImport("javax.swing.JFileChooser.FILES_AND_DIRECTORIES", true),
              })
          .put(
              new Identifier("CELL_EDITOR_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JTree.CELL_EDITOR_PROPERTY", true),
              })
          .put(
              new Identifier("StyleContext"),
              new Import[] {
                newImport("javax.swing.text.StyleContext", false),
              })
          .put(
              new Identifier("ModelMBeanNotificationBroadcaster"),
              new Import[] {
                newImport("javax.management.modelmbean.ModelMBeanNotificationBroadcaster", false),
              })
          .put(
              new Identifier("EventReaderDelegate"),
              new Import[] {
                newImport("javax.xml.stream.util.EventReaderDelegate", false),
              })
          .put(
              new Identifier("XPathFunctionException"),
              new Import[] {
                newImport("javax.xml.xpath.XPathFunctionException", false),
              })
          .put(
              new Identifier("UnaryOperator"),
              new Import[] {
                newImport("java.util.function.UnaryOperator", false),
              })
          .put(
              new Identifier("ObjectStreamClass"),
              new Import[] {
                newImport("java.io.ObjectStreamClass", false),
              })
          .put(
              new Identifier("CompletionStage"),
              new Import[] {
                newImport("java.util.concurrent.CompletionStage", false),
              })
          .put(
              new Identifier("ISO_A0"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_A0", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ISO_A0", true),
              })
          .put(
              new Identifier("ISO_A1"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_A1", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ISO_A1", true),
              })
          .put(
              new Identifier("BeanContextServiceProvider"),
              new Import[] {
                newImport("java.beans.beancontext.BeanContextServiceProvider", false),
              })
          .put(
              new Identifier("ISO_A2"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_A2", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ISO_A2", true),
              })
          .put(
              new Identifier("ISO_A3"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_A3", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ISO_A3", true),
              })
          .put(
              new Identifier("ISO_A4"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_A4", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ISO_A4", true),
              })
          .put(
              new Identifier("isJavaIdentifierStart"),
              new Import[] {
                newImport("java.lang.Character.isJavaIdentifierStart", true),
              })
          .put(
              new Identifier("ISO_A5"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_A5", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ISO_A5", true),
              })
          .put(
              new Identifier("Constructor"),
              new Import[] {
                newImport("java.lang.reflect.Constructor", false),
              })
          .put(
              new Identifier("ISO_A6"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_A6", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ISO_A6", true),
              })
          .put(
              new Identifier("DEFAULT_SOAP_PROTOCOL"),
              new Import[] {
                newImport("javax.xml.soap.SOAPConstants.DEFAULT_SOAP_PROTOCOL", true),
              })
          .put(
              new Identifier("WatchKey"),
              new Import[] {
                newImport("java.nio.file.WatchKey", false),
              })
          .put(
              new Identifier("isUpperCase"),
              new Import[] {
                newImport("java.lang.Character.isUpperCase", true),
              })
          .put(
              new Identifier("Dimension"),
              new Import[] {
                newImport("java.awt.Dimension", false),
              })
          .put(
              new Identifier("ROLE_NOT_WRITABLE"),
              new Import[] {
                newImport("javax.management.relation.RoleStatus.ROLE_NOT_WRITABLE", true),
              })
          .put(
              new Identifier("getInsets"),
              new Import[] {
                newImport("javax.swing.UIManager.getInsets", true),
              })
          .put(
              new Identifier("UNIX_LINES"),
              new Import[] {
                newImport("java.util.regex.Pattern.UNIX_LINES", true),
              })
          .put(
              new Identifier("calculateAlignedPositions"),
              new Import[] {
                newImport("javax.swing.SizeRequirements.calculateAlignedPositions", true),
              })
          .put(
              new Identifier("getLocalHost"),
              new Import[] {
                newImport("java.net.InetAddress.getLocalHost", true),
              })
          .put(
              new Identifier("PrintConversionEvent"),
              new Import[] {
                newImport("javax.xml.bind.PrintConversionEvent", false),
              })
          .put(
              new Identifier("SCROLL_BAR"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.SCROLL_BAR", true),
                newImport("javax.swing.plaf.synth.Region.SCROLL_BAR", true),
              })
          .put(
              new Identifier("SchemaFactoryConfigurationError"),
              new Import[] {
                newImport("javax.xml.validation.SchemaFactoryConfigurationError", false),
              })
          .put(
              new Identifier("SynthTextPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthTextPaneUI", false),
              })
          .put(
              new Identifier("getInternalFrameBorder"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicBorders.getInternalFrameBorder", true),
              })
          .put(
              new Identifier("ISO_A7"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_A7", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ISO_A7", true),
              })
          .put(
              new Identifier("DynStructHelper"),
              new Import[] {
                newImport("org.omg.DynamicAny.DynStructHelper", false),
              })
          .put(
              new Identifier("ISO_A8"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_A8", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ISO_A8", true),
              })
          .put(
              new Identifier("Family"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.Family", true),
              })
          .put(
              new Identifier("ISO_A9"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_A9", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ISO_A9", true),
              })
          .put(
              new Identifier("tk_array"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind.tk_array", true),
              })
          .put(
              new Identifier("ProtectionDomain"),
              new Import[] {
                newImport("java.security.ProtectionDomain", false),
              })
          .put(
              new Identifier("ACCEPT_NONE"),
              new Import[] {
                newImport("java.net.CookiePolicy.ACCEPT_NONE", true),
              })
          .put(
              new Identifier("firstDayOfYear"),
              new Import[] {
                newImport("java.time.temporal.TemporalAdjusters.firstDayOfYear", true),
              })
          .put(
              new Identifier("DefaultListSelectionModel"),
              new Import[] {
                newImport("javax.swing.DefaultListSelectionModel", false),
              })
          .put(
              new Identifier("VALUE_INTERPOLATION_BICUBIC"),
              new Import[] {
                newImport("java.awt.RenderingHints.VALUE_INTERPOLATION_BICUBIC", true),
              })
          .put(
              new Identifier("getCodebase"),
              new Import[] {
                newImport("javax.rmi.CORBA.Util.getCodebase", true),
              })
          .put(
              new Identifier("WIDTH_EXTENDED"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.WIDTH_EXTENDED", true),
              })
          .put(
              new Identifier("BasicLabelUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicLabelUI", false),
              })
          .put(
              new Identifier("PKIXCertPathBuilderResult"),
              new Import[] {
                newImport("java.security.cert.PKIXCertPathBuilderResult", false),
              })
          .put(
              new Identifier("XMLDecoder"),
              new Import[] {
                newImport("java.beans.XMLDecoder", false),
              })
          .put(
              new Identifier("EOFException"),
              new Import[] {
                newImport("java.io.EOFException", false),
              })
          .put(
              new Identifier("HORIZONTAL_WRAP"),
              new Import[] {
                newImport("javax.swing.JList.HORIZONTAL_WRAP", true),
              })
          .put(
              new Identifier("TAG_BLOC"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_BLOC", true),
              })
          .put(
              new Identifier("TimeDefinition"),
              new Import[] {
                newImport("java.time.zone.ZoneOffsetTransitionRule.TimeDefinition", false),
              })
          .put(
              new Identifier("ISO_WEEK_DATE"),
              new Import[] {
                newImport("java.time.format.DateTimeFormatter.ISO_WEEK_DATE", true),
              })
          .put(
              new Identifier("COMPLETED_YES"),
              new Import[] {
                newImport("org.omg.CORBA.CompletionStatus.COMPLETED_YES", true),
              })
          .put(
              new Identifier("ISO_4A0"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_4A0", true),
              })
          .put(
              new Identifier("SOAP_SENDER_FAULT"),
              new Import[] {
                newImport("javax.xml.soap.SOAPConstants.SOAP_SENDER_FAULT", true),
              })
          .put(
              new Identifier("Media"),
              new Import[] {
                newImport("javax.print.attribute.standard.Media", false),
              })
          .put(
              new Identifier("NumberFormatException"),
              new Import[] {
                newImport("java.lang.NumberFormatException", false),
              })
          .put(
              new Identifier("nameUUIDFromBytes"),
              new Import[] {
                newImport("java.util.UUID.nameUUIDFromBytes", true),
              })
          .put(
              new Identifier("HIERARCHY_REQUEST_ERR"),
              new Import[] {
                newImport("org.w3c.dom.DOMException.HIERARCHY_REQUEST_ERR", true),
              })
          .put(
              new Identifier("getWriterMIMETypes"),
              new Import[] {
                newImport("javax.imageio.ImageIO.getWriterMIMETypes", true),
              })
          .put(
              new Identifier("LanguageCallback"),
              new Import[] {
                newImport("javax.security.auth.callback.LanguageCallback", false),
              })
          .put(
              new Identifier("BCSSServiceProvider"),
              new Import[] {
                newImport(
                    "java.beans.beancontext.BeanContextServicesSupport.BCSSServiceProvider", false),
              })
          .put(
              new Identifier("ROMAN_BASELINE"),
              new Import[] {
                newImport("java.awt.Font.ROMAN_BASELINE", true),
                newImport("java.awt.font.GraphicAttribute.ROMAN_BASELINE", true),
              })
          .put(
              new Identifier("LongFunction"),
              new Import[] {
                newImport("java.util.function.LongFunction", false),
              })
          .put(
              new Identifier("JFileChooser"),
              new Import[] {
                newImport("javax.swing.JFileChooser", false),
              })
          .put(
              new Identifier("FLOWS_TO"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRelation.FLOWS_TO", true),
              })
          .put(
              new Identifier("functionNoTable"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.functionNoTable", true),
              })
          .put(
              new Identifier("SwingPropertyChangeSupport"),
              new Import[] {
                newImport("javax.swing.event.SwingPropertyChangeSupport", false),
              })
          .put(
              new Identifier("BasicDirectoryModel"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicDirectoryModel", false),
              })
          .put(
              new Identifier("BaseStream"),
              new Import[] {
                newImport("java.util.stream.BaseStream", false),
              })
          .put(
              new Identifier("TemporalField"),
              new Import[] {
                newImport("java.time.temporal.TemporalField", false),
              })
          .put(
              new Identifier("CertificateExpiredException"),
              new Import[] {
                newImport("java.security.cert.CertificateExpiredException", false),
                newImport("javax.security.cert.CertificateExpiredException", false),
              })
          .put(
              new Identifier("DefaultListModel"),
              new Import[] {
                newImport("javax.swing.DefaultListModel", false),
              })
          .put(
              new Identifier("insert"),
              new Import[] {
                newImport("org.omg.CORBA.AnySeqHelper.insert", true),
                newImport("org.omg.CORBA.BooleanSeqHelper.insert", true),
                newImport("org.omg.CORBA.CharSeqHelper.insert", true),
                newImport("org.omg.CORBA.CompletionStatusHelper.insert", true),
                newImport("org.omg.CORBA.CurrentHelper.insert", true),
                newImport("org.omg.CORBA.DefinitionKindHelper.insert", true),
                newImport("org.omg.CORBA.DoubleSeqHelper.insert", true),
                newImport("org.omg.CORBA.FieldNameHelper.insert", true),
                newImport("org.omg.CORBA.FloatSeqHelper.insert", true),
                newImport("org.omg.CORBA.IDLTypeHelper.insert", true),
                newImport("org.omg.CORBA.IdentifierHelper.insert", true),
                newImport("org.omg.CORBA.LongLongSeqHelper.insert", true),
                newImport("org.omg.CORBA.LongSeqHelper.insert", true),
                newImport("org.omg.CORBA.NameValuePairHelper.insert", true),
                newImport("org.omg.CORBA.ObjectHelper.insert", true),
                newImport("org.omg.CORBA.OctetSeqHelper.insert", true),
                newImport("org.omg.CORBA.ParameterModeHelper.insert", true),
                newImport("org.omg.CORBA.PolicyErrorCodeHelper.insert", true),
                newImport("org.omg.CORBA.PolicyErrorHelper.insert", true),
                newImport("org.omg.CORBA.PolicyHelper.insert", true),
                newImport("org.omg.CORBA.PolicyListHelper.insert", true),
                newImport("org.omg.CORBA.PolicyTypeHelper.insert", true),
                newImport("org.omg.CORBA.RepositoryIdHelper.insert", true),
                newImport("org.omg.CORBA.ServiceDetailHelper.insert", true),
                newImport("org.omg.CORBA.ServiceInformationHelper.insert", true),
                newImport("org.omg.CORBA.SetOverrideTypeHelper.insert", true),
                newImport("org.omg.CORBA.ShortSeqHelper.insert", true),
                newImport("org.omg.CORBA.StringSeqHelper.insert", true),
                newImport("org.omg.CORBA.StringValueHelper.insert", true),
                newImport("org.omg.CORBA.StructMemberHelper.insert", true),
                newImport("org.omg.CORBA.ULongLongSeqHelper.insert", true),
                newImport("org.omg.CORBA.ULongSeqHelper.insert", true),
                newImport("org.omg.CORBA.UShortSeqHelper.insert", true),
                newImport("org.omg.CORBA.UnionMemberHelper.insert", true),
                newImport("org.omg.CORBA.UnknownUserExceptionHelper.insert", true),
                newImport("org.omg.CORBA.ValueBaseHelper.insert", true),
                newImport("org.omg.CORBA.ValueMemberHelper.insert", true),
                newImport("org.omg.CORBA.VersionSpecHelper.insert", true),
                newImport("org.omg.CORBA.VisibilityHelper.insert", true),
                newImport("org.omg.CORBA.WCharSeqHelper.insert", true),
                newImport("org.omg.CORBA.WStringSeqHelper.insert", true),
                newImport("org.omg.CORBA.WStringValueHelper.insert", true),
                newImport("org.omg.CORBA.WrongTransactionHelper.insert", true),
                newImport("org.omg.CosNaming.BindingHelper.insert", true),
                newImport("org.omg.CosNaming.BindingIteratorHelper.insert", true),
                newImport("org.omg.CosNaming.BindingListHelper.insert", true),
                newImport("org.omg.CosNaming.BindingTypeHelper.insert", true),
                newImport("org.omg.CosNaming.IstringHelper.insert", true),
                newImport("org.omg.CosNaming.NameComponentHelper.insert", true),
                newImport("org.omg.CosNaming.NameHelper.insert", true),
                newImport("org.omg.CosNaming.NamingContextExtHelper.insert", true),
                newImport("org.omg.CosNaming.NamingContextHelper.insert", true),
                newImport("org.omg.CosNaming.NamingContextExtPackage.AddressHelper.insert", true),
                newImport(
                    "org.omg.CosNaming.NamingContextExtPackage.InvalidAddressHelper.insert", true),
                newImport(
                    "org.omg.CosNaming.NamingContextExtPackage.StringNameHelper.insert", true),
                newImport("org.omg.CosNaming.NamingContextExtPackage.URLStringHelper.insert", true),
                newImport("org.omg.CosNaming.NamingContextPackage.AlreadyBoundHelper.insert", true),
                newImport(
                    "org.omg.CosNaming.NamingContextPackage.CannotProceedHelper.insert", true),
                newImport("org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.insert", true),
                newImport("org.omg.CosNaming.NamingContextPackage.NotEmptyHelper.insert", true),
                newImport("org.omg.CosNaming.NamingContextPackage.NotFoundHelper.insert", true),
                newImport(
                    "org.omg.CosNaming.NamingContextPackage.NotFoundReasonHelper.insert", true),
                newImport("org.omg.DynamicAny.AnySeqHelper.insert", true),
                newImport("org.omg.DynamicAny.DynAnyFactoryHelper.insert", true),
                newImport("org.omg.DynamicAny.DynAnyHelper.insert", true),
                newImport("org.omg.DynamicAny.DynAnySeqHelper.insert", true),
                newImport("org.omg.DynamicAny.DynArrayHelper.insert", true),
                newImport("org.omg.DynamicAny.DynEnumHelper.insert", true),
                newImport("org.omg.DynamicAny.DynFixedHelper.insert", true),
                newImport("org.omg.DynamicAny.DynSequenceHelper.insert", true),
                newImport("org.omg.DynamicAny.DynStructHelper.insert", true),
                newImport("org.omg.DynamicAny.DynUnionHelper.insert", true),
                newImport("org.omg.DynamicAny.DynValueHelper.insert", true),
                newImport("org.omg.DynamicAny.FieldNameHelper.insert", true),
                newImport("org.omg.DynamicAny.NameDynAnyPairHelper.insert", true),
                newImport("org.omg.DynamicAny.NameDynAnyPairSeqHelper.insert", true),
                newImport("org.omg.DynamicAny.NameValuePairHelper.insert", true),
                newImport("org.omg.DynamicAny.NameValuePairSeqHelper.insert", true),
                newImport(
                    "org.omg.DynamicAny.DynAnyFactoryPackage.InconsistentTypeCodeHelper.insert",
                    true),
                newImport("org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.insert", true),
                newImport("org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.insert", true),
                newImport("org.omg.IOP.CodecFactoryHelper.insert", true),
                newImport("org.omg.IOP.ComponentIdHelper.insert", true),
                newImport("org.omg.IOP.IORHelper.insert", true),
                newImport("org.omg.IOP.MultipleComponentProfileHelper.insert", true),
                newImport("org.omg.IOP.ProfileIdHelper.insert", true),
                newImport("org.omg.IOP.ServiceContextHelper.insert", true),
                newImport("org.omg.IOP.ServiceContextListHelper.insert", true),
                newImport("org.omg.IOP.ServiceIdHelper.insert", true),
                newImport("org.omg.IOP.TaggedComponentHelper.insert", true),
                newImport("org.omg.IOP.TaggedProfileHelper.insert", true),
                newImport("org.omg.IOP.CodecFactoryPackage.UnknownEncodingHelper.insert", true),
                newImport("org.omg.IOP.CodecPackage.FormatMismatchHelper.insert", true),
                newImport("org.omg.IOP.CodecPackage.InvalidTypeForEncodingHelper.insert", true),
                newImport("org.omg.IOP.CodecPackage.TypeMismatchHelper.insert", true),
                newImport("org.omg.Messaging.SyncScopeHelper.insert", true),
                newImport("org.omg.PortableInterceptor.AdapterManagerIdHelper.insert", true),
                newImport("org.omg.PortableInterceptor.AdapterNameHelper.insert", true),
                newImport("org.omg.PortableInterceptor.AdapterStateHelper.insert", true),
                newImport("org.omg.PortableInterceptor.CurrentHelper.insert", true),
                newImport("org.omg.PortableInterceptor.ForwardRequestHelper.insert", true),
                newImport("org.omg.PortableInterceptor.IORInterceptor_3_0Helper.insert", true),
                newImport("org.omg.PortableInterceptor.InvalidSlotHelper.insert", true),
                newImport("org.omg.PortableInterceptor.ORBIdHelper.insert", true),
                newImport("org.omg.PortableInterceptor.ObjectIdHelper.insert", true),
                newImport("org.omg.PortableInterceptor.ObjectReferenceFactoryHelper.insert", true),
                newImport("org.omg.PortableInterceptor.ObjectReferenceTemplateHelper.insert", true),
                newImport(
                    "org.omg.PortableInterceptor.ObjectReferenceTemplateSeqHelper.insert", true),
                newImport("org.omg.PortableInterceptor.ServerIdHelper.insert", true),
                newImport(
                    "org.omg.PortableInterceptor.ORBInitInfoPackage.DuplicateNameHelper.insert",
                    true),
                newImport(
                    "org.omg.PortableInterceptor.ORBInitInfoPackage.InvalidNameHelper.insert",
                    true),
                newImport(
                    "org.omg.PortableInterceptor.ORBInitInfoPackage.ObjectIdHelper.insert", true),
                newImport("org.omg.PortableServer.CurrentHelper.insert", true),
                newImport("org.omg.PortableServer.ForwardRequestHelper.insert", true),
                newImport("org.omg.PortableServer.POAHelper.insert", true),
                newImport("org.omg.PortableServer.ServantActivatorHelper.insert", true),
                newImport("org.omg.PortableServer.ServantLocatorHelper.insert", true),
                newImport("org.omg.PortableServer.CurrentPackage.NoContextHelper.insert", true),
                newImport(
                    "org.omg.PortableServer.POAManagerPackage.AdapterInactiveHelper.insert", true),
                newImport(
                    "org.omg.PortableServer.POAPackage.AdapterAlreadyExistsHelper.insert", true),
                newImport(
                    "org.omg.PortableServer.POAPackage.AdapterNonExistentHelper.insert", true),
                newImport("org.omg.PortableServer.POAPackage.InvalidPolicyHelper.insert", true),
                newImport("org.omg.PortableServer.POAPackage.NoServantHelper.insert", true),
                newImport(
                    "org.omg.PortableServer.POAPackage.ObjectAlreadyActiveHelper.insert", true),
                newImport("org.omg.PortableServer.POAPackage.ObjectNotActiveHelper.insert", true),
                newImport(
                    "org.omg.PortableServer.POAPackage.ServantAlreadyActiveHelper.insert", true),
                newImport("org.omg.PortableServer.POAPackage.ServantNotActiveHelper.insert", true),
                newImport("org.omg.PortableServer.POAPackage.WrongAdapterHelper.insert", true),
                newImport("org.omg.PortableServer.POAPackage.WrongPolicyHelper.insert", true),
              })
          .put(
              new Identifier("BadPaddingException"),
              new Import[] {
                newImport("javax.crypto.BadPaddingException", false),
              })
          .put(
              new Identifier("BasicFileAttributeView"),
              new Import[] {
                newImport("java.nio.file.attribute.BasicFileAttributeView", false),
              })
          .put(
              new Identifier("SHA384"),
              new Import[] {
                newImport("java.security.spec.MGF1ParameterSpec.SHA384", true),
              })
          .put(
              new Identifier("unmodifiableSet"),
              new Import[] {
                newImport("java.util.Collections.unmodifiableSet", true),
              })
          .put(
              new Identifier("JAPANESE_DOUBLE_POSTCARD"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.MediaSizeName.JAPANESE_DOUBLE_POSTCARD", true),
                newImport(
                    "javax.print.attribute.standard.MediaSize.Other.JAPANESE_DOUBLE_POSTCARD",
                    true),
              })
          .put(
              new Identifier("TMONEPHASE"),
              new Import[] {
                newImport("javax.transaction.xa.XAResource.TMONEPHASE", true),
              })
          .put(
              new Identifier("DynValue"),
              new Import[] {
                newImport("org.omg.CORBA.DynValue", false),
                newImport("org.omg.DynamicAny.DynValue", false),
              })
          .put(
              new Identifier("ENCLOSED_IDEOGRAPHIC_SUPPLEMENT"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.ENCLOSED_IDEOGRAPHIC_SUPPLEMENT", true),
              })
          .put(
              new Identifier("tk_longlong"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind.tk_longlong", true),
              })
          .put(
              new Identifier("RIGHT_OUTER_JOIN"),
              new Import[] {
                newImport("javax.sql.rowset.JoinRowSet.RIGHT_OUTER_JOIN", true),
              })
          .put(
              new Identifier("getAlignment"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.getAlignment", true),
              })
          .put(
              new Identifier("ExcC14NParameterSpec"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.spec.ExcC14NParameterSpec", false),
              })
          .put(
              new Identifier("move"),
              new Import[] {
                newImport("java.nio.file.Files.move", true),
              })
          .put(
              new Identifier("rotateRight"),
              new Import[] {
                newImport("java.lang.Integer.rotateRight", true),
                newImport("java.lang.Long.rotateRight", true),
              })
          .put(
              new Identifier("CipherInputStream"),
              new Import[] {
                newImport("javax.crypto.CipherInputStream", false),
              })
          .put(
              new Identifier("NA_10X15_ENVELOPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.NA_10X15_ENVELOPE", true),
                newImport("javax.print.attribute.standard.MediaSizeName.NA_10X15_ENVELOPE", true),
                newImport("javax.print.attribute.standard.MediaSize.NA.NA_10X15_ENVELOPE", true),
              })
          .put(
              new Identifier("TC_ENUM"),
              new Import[] {
                newImport("java.io.ObjectStreamConstants.TC_ENUM", true),
              })
          .put(
              new Identifier("HEIGHT"),
              new Import[] {
                newImport("java.awt.image.ImageObserver.HEIGHT", true),
                newImport("javax.swing.SpringLayout.HEIGHT", true),
                newImport("javax.swing.text.html.CSS.Attribute.HEIGHT", true),
                newImport("javax.swing.text.html.HTML.Attribute.HEIGHT", true),
              })
          .put(
              new Identifier("ETHIOPIC_EXTENDED_A"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.ETHIOPIC_EXTENDED_A", true),
              })
          .put(
              new Identifier("throwException"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandles.throwException", true),
              })
          .put(
              new Identifier("DOMCryptoContext"),
              new Import[] {
                newImport("javax.xml.crypto.dom.DOMCryptoContext", false),
              })
          .put(
              new Identifier("ShortSeqHolder"),
              new Import[] {
                newImport("org.omg.CORBA.ShortSeqHolder", false),
              })
          .put(
              new Identifier("DEFAULT_LAYER"),
              new Import[] {
                newImport("javax.swing.JLayeredPane.DEFAULT_LAYER", true),
              })
          .build();
}
