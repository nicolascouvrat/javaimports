// Code generated by GenerateStdlib.java. DO NOT EDIT.
package com.nikodoko.javaimports.stdlib.internal.api.v8;

import static com.nikodoko.javaimports.stdlib.internal.Stdlib.newImport;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.common.Identifier;
import com.nikodoko.javaimports.common.Import;
import java.util.Map;

public class Java8StdlibChunk9 {
  static final Map<Identifier, Import[]> CLASSES =
      new ImmutableMap.Builder<Identifier, Import[]>()
          .put(
              new Identifier("CONTROL_DK_SHADOW"),
              new Import[] {
                newImport("java.awt.SystemColor.CONTROL_DK_SHADOW", true),
              })
          .put(
              new Identifier("SocketChannel"),
              new Import[] {
                newImport("java.nio.channels.SocketChannel", false),
              })
          .put(
              new Identifier("KeyFactorySpi"),
              new Import[] {
                newImport("java.security.KeyFactorySpi", false),
              })
          .put(
              new Identifier("DHPublicKey"),
              new Import[] {
                newImport("javax.crypto.interfaces.DHPublicKey", false),
              })
          .put(
              new Identifier("Size"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.Size", true),
              })
          .put(
              new Identifier("IMAGE_OK"),
              new Import[] {
                newImport("java.awt.image.VolatileImage.IMAGE_OK", true),
              })
          .put(
              new Identifier("CENLEN"),
              new Import[] {
                newImport("java.util.jar.JarEntry.CENLEN", true),
                newImport("java.util.jar.JarFile.CENLEN", true),
                newImport("java.util.jar.JarInputStream.CENLEN", true),
                newImport("java.util.jar.JarOutputStream.CENLEN", true),
                newImport("java.util.zip.ZipEntry.CENLEN", true),
                newImport("java.util.zip.ZipFile.CENLEN", true),
                newImport("java.util.zip.ZipInputStream.CENLEN", true),
                newImport("java.util.zip.ZipOutputStream.CENLEN", true),
              })
          .put(
              new Identifier("TRUETYPE_FONT"),
              new Import[] {
                newImport("java.awt.Font.TRUETYPE_FONT", true),
              })
          .put(
              new Identifier("getUrlEncoder"),
              new Import[] {
                newImport("java.util.Base64.getUrlEncoder", true),
              })
          .put(
              new Identifier("XmlElements"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlElements", false),
              })
          .put(
              new Identifier("DropTargetListener"),
              new Import[] {
                newImport("java.awt.dnd.DropTargetListener", false),
              })
          .put(
              new Identifier("inactiveCaption"),
              new Import[] {
                newImport("java.awt.SystemColor.inactiveCaption", true),
              })
          .put(
              new Identifier("MAX_LOW_SURROGATE"),
              new Import[] {
                newImport("java.lang.Character.MAX_LOW_SURROGATE", true),
              })
          .put(
              new Identifier("LeftIndent"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.LeftIndent", true),
              })
          .put(
              new Identifier("BLACK"),
              new Import[] {
                newImport("java.awt.Color.BLACK", true),
              })
          .put(
              new Identifier("SynthInternalFrameUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthInternalFrameUI", false),
              })
          .put(
              new Identifier("RenderContext"),
              new Import[] {
                newImport("java.awt.image.renderable.RenderContext", false),
              })
          .put(
              new Identifier("VK_HELP"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_HELP", true),
              })
          .put(
              new Identifier("UnicodeScript"),
              new Import[] {
                newImport("java.lang.Character.UnicodeScript", false),
              })
          .put(
              new Identifier("CDATA_SECTION_NODE"),
              new Import[] {
                newImport("org.w3c.dom.Node.CDATA_SECTION_NODE", true),
              })
          .put(
              new Identifier("isUnicodeIdentifierPart"),
              new Import[] {
                newImport("java.lang.Character.isUnicodeIdentifierPart", true),
              })
          .put(
              new Identifier("ValueMember"),
              new Import[] {
                newImport("org.omg.CORBA.ValueMember", false),
              })
          .put(
              new Identifier("Bounds"),
              new Import[] {
                newImport("org.omg.CORBA.Bounds", false),
                newImport("org.omg.CORBA.TypeCodePackage.Bounds", false),
              })
          .put(
              new Identifier("EDGE_STITCH_LEFT"),
              new Import[] {
                newImport("javax.print.attribute.standard.Finishings.EDGE_STITCH_LEFT", true),
              })
          .put(
              new Identifier("DOMSTRING_SIZE_ERR"),
              new Import[] {
                newImport("org.w3c.dom.DOMException.DOMSTRING_SIZE_ERR", true),
              })
          .put(
              new Identifier("TableModelListener"),
              new Import[] {
                newImport("javax.swing.event.TableModelListener", false),
              })
          .put(
              new Identifier("dk_Enum"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind.dk_Enum", true),
              })
          .put(
              new Identifier("CHECK_BOX"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.CHECK_BOX", true),
                newImport("javax.swing.plaf.synth.Region.CHECK_BOX", true),
              })
          .put(
              new Identifier("XOR"),
              new Import[] {
                newImport("java.awt.AlphaComposite.XOR", true),
              })
          .put(
              new Identifier("MidiDeviceProvider"),
              new Import[] {
                newImport("javax.sound.midi.spi.MidiDeviceProvider", false),
              })
          .put(
              new Identifier("XmlIDREF"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlIDREF", false),
              })
          .put(
              new Identifier("_NON_RETAIN"),
              new Import[] {
                newImport("org.omg.PortableServer.ServantRetentionPolicyValue._NON_RETAIN", true),
              })
          .put(
              new Identifier("DAY_OF_YEAR"),
              new Import[] {
                newImport("java.text.DateFormat.Field.DAY_OF_YEAR", true),
                newImport("java.util.Calendar.DAY_OF_YEAR", true),
              })
          .put(
              new Identifier("HTTPException"),
              new Import[] {
                newImport("javax.xml.ws.http.HTTPException", false),
              })
          .put(
              new Identifier("isLowerCase"),
              new Import[] {
                newImport("java.lang.Character.isLowerCase", true),
              })
          .put(
              new Identifier("OPERATING_SYSTEM_MXBEAN_NAME"),
              new Import[] {
                newImport(
                    "java.lang.management.ManagementFactory.OPERATING_SYSTEM_MXBEAN_NAME", true),
              })
          .put(
              new Identifier("MESSAGE_OUTBOUND_PROPERTY"),
              new Import[] {
                newImport("javax.xml.ws.handler.MessageContext.MESSAGE_OUTBOUND_PROPERTY", true),
              })
          .put(
              new Identifier("setTabSet"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.setTabSet", true),
              })
          .put(
              new Identifier("CMMException"),
              new Import[] {
                newImport("java.awt.color.CMMException", false),
              })
          .put(
              new Identifier("SerialStruct"),
              new Import[] {
                newImport("javax.sql.rowset.serial.SerialStruct", false),
              })
          .put(
              new Identifier("ExpandVetoException"),
              new Import[] {
                newImport("javax.swing.tree.ExpandVetoException", false),
              })
          .put(
              new Identifier("COMPLETED"),
              new Import[] {
                newImport("javax.print.attribute.standard.JobState.COMPLETED", true),
              })
          .put(
              new Identifier("QUARTER_YEARS"),
              new Import[] {
                newImport("java.time.temporal.IsoFields.QUARTER_YEARS", true),
              })
          .put(
              new Identifier("XML_DTD_NS_URI"),
              new Import[] {
                newImport("javax.xml.XMLConstants.XML_DTD_NS_URI", true),
              })
          .put(
              new Identifier("Deprecated"),
              new Import[] {
                newImport("java.lang.Deprecated", false),
              })
          .put(
              new Identifier("INPUT_VALUE_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JOptionPane.INPUT_VALUE_PROPERTY", true),
              })
          .put(
              new Identifier("SCROLLBARS_ALWAYS"),
              new Import[] {
                newImport("java.awt.ScrollPane.SCROLLBARS_ALWAYS", true),
              })
          .put(
              new Identifier("DOCUMENT_POSITION_FOLLOWING"),
              new Import[] {
                newImport("org.w3c.dom.Node.DOCUMENT_POSITION_FOLLOWING", true),
              })
          .put(
              new Identifier("VK_WINDOWS"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_WINDOWS", true),
              })
          .put(
              new Identifier("ModelMBeanInfoSupport"),
              new Import[] {
                newImport("javax.management.modelmbean.ModelMBeanInfoSupport", false),
              })
          .put(
              new Identifier("SRC_OUT"),
              new Import[] {
                newImport("java.awt.AlphaComposite.SRC_OUT", true),
              })
          .put(
              new Identifier("getSurplusQueuedTaskCount"),
              new Import[] {
                newImport("java.util.concurrent.ForkJoinTask.getSurplusQueuedTaskCount", true),
              })
          .put(
              new Identifier("PersistentMBean"),
              new Import[] {
                newImport("javax.management.PersistentMBean", false),
              })
          .put(
              new Identifier("CODETYPE"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.CODETYPE", true),
              })
          .put(
              new Identifier("Window"),
              new Import[] {
                newImport("java.awt.Window", false),
              })
          .put(
              new Identifier("PHAGS_PA"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.PHAGS_PA", true),
              })
          .put(
              new Identifier("FLOWS_FROM_PROPERTY"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRelation.FLOWS_FROM_PROPERTY", true),
              })
          .put(
              new Identifier("OBSERVED_ATTRIBUTE_TYPE_ERROR"),
              new Import[] {
                newImport(
                    "javax.management.monitor.MonitorNotification.OBSERVED_ATTRIBUTE_TYPE_ERROR",
                    true),
              })
          .put(
              new Identifier("MAIN_UIROLE"),
              new Import[] {
                newImport("javax.print.ServiceUIFactory.MAIN_UIROLE", true),
              })
          .put(
              new Identifier("TYPE_BILINEAR"),
              new Import[] {
                newImport("java.awt.image.AffineTransformOp.TYPE_BILINEAR", true),
              })
          .put(
              new Identifier("invokeAll"),
              new Import[] {
                newImport("java.util.concurrent.ForkJoinTask.invokeAll", true),
              })
          .put(
              new Identifier("DoubleSeqHolder"),
              new Import[] {
                newImport("org.omg.CORBA.DoubleSeqHolder", false),
              })
          .put(
              new Identifier("_tk_float"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind._tk_float", true),
              })
          .put(
              new Identifier("Connection"),
              new Import[] {
                newImport("java.sql.Connection", false),
              })
          .put(
              new Identifier("ENGINE"),
              new Import[] {
                newImport("javax.script.ScriptEngine.ENGINE", true),
              })
          .put(
              new Identifier("refresh"),
              new Import[] {
                newImport("java.time.zone.ZoneRulesProvider.refresh", true),
              })
          .put(
              new Identifier("FOOTER"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.FOOTER", true),
              })
          .put(
              new Identifier("ZipException"),
              new Import[] {
                newImport("java.util.zip.ZipException", false),
              })
          .put(
              new Identifier("INTERVAL_REMOVED"),
              new Import[] {
                newImport("javax.swing.event.ListDataEvent.INTERVAL_REMOVED", true),
              })
          .put(
              new Identifier("USE_DEFAULT_SERVANT"),
              new Import[] {
                newImport(
                    "org.omg.PortableServer.RequestProcessingPolicyValue.USE_DEFAULT_SERVANT",
                    true),
              })
          .put(
              new Identifier("ModelMBeanConstructorInfo"),
              new Import[] {
                newImport("javax.management.modelmbean.ModelMBeanConstructorInfo", false),
              })
          .put(
              new Identifier("ScheduledFuture"),
              new Import[] {
                newImport("java.util.concurrent.ScheduledFuture", false),
              })
          .put(
              new Identifier("RFC1779"),
              new Import[] {
                newImport("javax.security.auth.x500.X500Principal.RFC1779", true),
              })
          .put(
              new Identifier("MODE_DISABLED"),
              new Import[] {
                newImport("javax.imageio.ImageWriteParam.MODE_DISABLED", true),
              })
          .put(
              new Identifier("TEXT_CURSOR"),
              new Import[] {
                newImport("java.awt.Cursor.TEXT_CURSOR", true),
                newImport("java.awt.Frame.TEXT_CURSOR", true),
              })
          .put(
              new Identifier("SafeVarargs"),
              new Import[] {
                newImport("java.lang.SafeVarargs", false),
              })
          .put(
              new Identifier("setRightIndent"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.setRightIndent", true),
              })
          .put(
              new Identifier("W_RESIZE_CURSOR"),
              new Import[] {
                newImport("java.awt.Cursor.W_RESIZE_CURSOR", true),
                newImport("java.awt.Frame.W_RESIZE_CURSOR", true),
              })
          .put(
              new Identifier("StringBuffer"),
              new Import[] {
                newImport("java.lang.StringBuffer", false),
              })
          .put(
              new Identifier("SynthGraphicsUtils"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthGraphicsUtils", false),
              })
          .put(
              new Identifier("DoubleConsumer"),
              new Import[] {
                newImport("java.util.function.DoubleConsumer", false),
              })
          .put(
              new Identifier("XA_RBROLLBACK"),
              new Import[] {
                newImport("javax.transaction.xa.XAException.XA_RBROLLBACK", true),
              })
          .put(
              new Identifier("CharArrayReader"),
              new Import[] {
                newImport("java.io.CharArrayReader", false),
              })
          .put(
              new Identifier("isIdeographic"),
              new Import[] {
                newImport("java.lang.Character.isIdeographic", true),
              })
          .put(
              new Identifier("NoClassDefFoundError"),
              new Import[] {
                newImport("java.lang.NoClassDefFoundError", false),
              })
          .put(
              new Identifier("addAll"),
              new Import[] {
                newImport("java.util.Collections.addAll", true),
              })
          .put(
              new Identifier("REQUISITE"),
              new Import[] {
                newImport(
                    "javax.security.auth.login.AppConfigurationEntry.LoginModuleControlFlag.REQUISITE",
                    true),
              })
          .put(
              new Identifier("CANCEL"),
              new Import[] {
                newImport("javax.security.auth.callback.ConfirmationCallback.CANCEL", true),
              })
          .put(
              new Identifier("HANJA"),
              new Import[] {
                newImport("java.awt.im.InputSubset.HANJA", true),
              })
          .put(
              new Identifier("ANCESTOR_MOVED"),
              new Import[] {
                newImport("java.awt.event.HierarchyEvent.ANCESTOR_MOVED", true),
                newImport("javax.swing.event.AncestorEvent.ANCESTOR_MOVED", true),
              })
          .put(
              new Identifier("RULER"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.RULER", true),
              })
          .put(
              new Identifier("TT_EOL"),
              new Import[] {
                newImport("java.io.StreamTokenizer.TT_EOL", true),
              })
          .put(
              new Identifier("CustomMarshal"),
              new Import[] {
                newImport("org.omg.CORBA.CustomMarshal", false),
              })
          .put(
              new Identifier("INV_POLICY"),
              new Import[] {
                newImport("org.omg.CORBA.INV_POLICY", false),
              })
          .put(
              new Identifier("NOTATION_NODE"),
              new Import[] {
                newImport("org.w3c.dom.Node.NOTATION_NODE", true),
              })
          .put(
              new Identifier("CONTROL_FACTORIES"),
              new Import[] {
                newImport("javax.naming.ldap.LdapContext.CONTROL_FACTORIES", true),
              })
          .put(
              new Identifier("LEAD_THICKLINE"),
              new Import[] {
                newImport("javax.swing.text.TabStop.LEAD_THICKLINE", true),
              })
          .put(
              new Identifier("FileSystemView"),
              new Import[] {
                newImport("javax.swing.filechooser.FileSystemView", false),
              })
          .put(
              new Identifier("VERTICAL_SCROLLBAR_POLICY"),
              new Import[] {
                newImport("javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_POLICY", true),
              })
          .put(
              new Identifier("FileVisitOption"),
              new Import[] {
                newImport("java.nio.file.FileVisitOption", false),
              })
          .put(
              new Identifier("TAG_GASP"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_GASP", true),
              })
          .put(
              new Identifier("ALERT"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.ALERT", true),
              })
          .put(
              new Identifier("icSigInputClass"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigInputClass", true),
              })
          .put(
              new Identifier("TRADITIONAL_CHINESE"),
              new Import[] {
                newImport("java.util.Locale.TRADITIONAL_CHINESE", true),
              })
          .put(
              new Identifier("PrintException"),
              new Import[] {
                newImport("javax.print.PrintException", false),
              })
          .put(
              new Identifier("OPTIONAL"),
              new Import[] {
                newImport(
                    "javax.security.auth.login.AppConfigurationEntry.LoginModuleControlFlag.OPTIONAL",
                    true),
              })
          .put(
              new Identifier("REF_putStatic"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandleInfo.REF_putStatic", true),
              })
          .put(
              new Identifier("getModifiersExText"),
              new Import[] {
                newImport("java.awt.event.InputEvent.getModifiersExText", true),
              })
          .put(
              new Identifier("PrinterAbortException"),
              new Import[] {
                newImport("java.awt.print.PrinterAbortException", false),
              })
          .put(
              new Identifier("summingDouble"),
              new Import[] {
                newImport("java.util.stream.Collectors.summingDouble", true),
              })
          .put(
              new Identifier("createSaslClient"),
              new Import[] {
                newImport("javax.security.sasl.Sasl.createSaslClient", true),
              })
          .put(
              new Identifier("ARCHIVE"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.ARCHIVE", true),
              })
          .put(
              new Identifier("TYPE_UNDEFINED"),
              new Import[] {
                newImport("java.awt.image.DataBuffer.TYPE_UNDEFINED", true),
              })
          .put(
              new Identifier("FilterBypass"),
              new Import[] {
                newImport("javax.swing.text.DocumentFilter.FilterBypass", false),
                newImport("javax.swing.text.NavigationFilter.FilterBypass", false),
              })
          .put(
              new Identifier("CS_sRGB"),
              new Import[] {
                newImport("java.awt.color.ColorSpace.CS_sRGB", true),
              })
          .put(
              new Identifier("BasicColorChooserUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicColorChooserUI", false),
              })
          .put(
              new Identifier("REPLACE"),
              new Import[] {
                newImport("java.nio.charset.CodingErrorAction.REPLACE", true),
              })
          .put(
              new Identifier("TYPE_FLOAT"),
              new Import[] {
                newImport("java.awt.image.DataBuffer.TYPE_FLOAT", true),
              })
          .put(
              new Identifier("INTEGER"),
              new Import[] {
                newImport("java.sql.Types.INTEGER", true),
                newImport("java.text.NumberFormat.Field.INTEGER", true),
                newImport("javax.management.openmbean.SimpleType.INTEGER", true),
              })
          .put(
              new Identifier("AbstractUnmarshallerImpl"),
              new Import[] {
                newImport("javax.xml.bind.helpers.AbstractUnmarshallerImpl", false),
              })
          .put(
              new Identifier("adapt"),
              new Import[] {
                newImport("java.util.concurrent.ForkJoinTask.adapt", true),
              })
          .put(
              new Identifier("XSLTTransformParameterSpec"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.spec.XSLTTransformParameterSpec", false),
              })
          .put(
              new Identifier("getCacheDirectory"),
              new Import[] {
                newImport("javax.imageio.ImageIO.getCacheDirectory", true),
              })
          .put(
              new Identifier("XmlReader"),
              new Import[] {
                newImport("javax.sql.rowset.spi.XmlReader", false),
              })
          .put(
              new Identifier("setCacheDirectory"),
              new Import[] {
                newImport("javax.imageio.ImageIO.setCacheDirectory", true),
              })
          .put(
              new Identifier("TAG_BASE"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_BASE", true),
              })
          .put(
              new Identifier("URISyntax"),
              new Import[] {
                newImport("javax.print.attribute.URISyntax", false),
              })
          .put(
              new Identifier("ClosedDirectoryStreamException"),
              new Import[] {
                newImport("java.nio.file.ClosedDirectoryStreamException", false),
              })
          .put(
              new Identifier("DUPLICATE_TOKEN"),
              new Import[] {
                newImport("org.ietf.jgss.GSSException.DUPLICATE_TOKEN", true),
              })
          .put(
              new Identifier("URI_SOAP_ACTOR_NEXT"),
              new Import[] {
                newImport("javax.xml.soap.SOAPConstants.URI_SOAP_ACTOR_NEXT", true),
              })
          .put(
              new Identifier("TT_EOF"),
              new Import[] {
                newImport("java.io.StreamTokenizer.TT_EOF", true),
              })
          .put(
              new Identifier("CONTROL"),
              new Import[] {
                newImport("java.awt.SystemColor.CONTROL", true),
                newImport("java.lang.Character.CONTROL", true),
              })
          .put(
              new Identifier("CAP_BUTT"),
              new Import[] {
                newImport("java.awt.BasicStroke.CAP_BUTT", true),
              })
          .put(
              new Identifier("URLStringHelper"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextExtPackage.URLStringHelper", false),
              })
          .put(
              new Identifier("ACCESSIBLE_COMPONENT_BOUNDS_CHANGED"),
              new Import[] {
                newImport(
                    "javax.accessibility.AccessibleContext.ACCESSIBLE_COMPONENT_BOUNDS_CHANGED",
                    true),
              })
          .put(
              new Identifier("versionColumnUnknown"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.versionColumnUnknown", true),
              })
          .put(
              new Identifier("MidiChannel"),
              new Import[] {
                newImport("javax.sound.midi.MidiChannel", false),
              })
          .put(
              new Identifier("multiplyExact"),
              new Import[] {
                newImport("java.lang.Math.multiplyExact", true),
                newImport("java.lang.StrictMath.multiplyExact", true),
              })
          .put(
              new Identifier("_dk_Exception"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind._dk_Exception", true),
              })
          .put(
              new Identifier("SEALED"),
              new Import[] {
                newImport("java.util.jar.Attributes.Name.SEALED", true),
              })
          .put(
              new Identifier("DefaultMoveNoDrop"),
              new Import[] {
                newImport("java.awt.dnd.DragSource.DefaultMoveNoDrop", true),
              })
          .put(
              new Identifier("RELATION_BASIC_CREATION"),
              new Import[] {
                newImport(
                    "javax.management.relation.RelationNotification.RELATION_BASIC_CREATION", true),
              })
          .put(
              new Identifier("_tk_double"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind._tk_double", true),
              })
          .put(
              new Identifier("beginAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.beginAction", true),
              })
          .put(
              new Identifier("TYPE_9CLR"),
              new Import[] {
                newImport("java.awt.color.ColorSpace.TYPE_9CLR", true),
              })
          .put(
              new Identifier("RMIConnection"),
              new Import[] {
                newImport("javax.management.remote.rmi.RMIConnection", false),
              })
          .put(
              new Identifier("ThreadLocalRandom"),
              new Import[] {
                newImport("java.util.concurrent.ThreadLocalRandom", false),
              })
          .put(
              new Identifier("emptyDoubleSpliterator"),
              new Import[] {
                newImport("java.util.Spliterators.emptyDoubleSpliterator", true),
              })
          .put(
              new Identifier("copyObject"),
              new Import[] {
                newImport("javax.rmi.CORBA.Util.copyObject", true),
              })
          .put(
              new Identifier("SHUTDOWN"),
              new Import[] {
                newImport("javax.print.attribute.standard.PrinterStateReason.SHUTDOWN", true),
              })
          .put(
              new Identifier("ALLOCATOR"),
              new Import[] {
                newImport("javax.xml.stream.XMLInputFactory.ALLOCATOR", true),
              })
          .put(
              new Identifier("getRoot"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.getRoot", true),
              })
          .put(
              new Identifier("WindowFocusListener"),
              new Import[] {
                newImport("java.awt.event.WindowFocusListener", false),
              })
          .put(
              new Identifier("TYPE_DCLR"),
              new Import[] {
                newImport("java.awt.color.ColorSpace.TYPE_DCLR", true),
              })
          .put(
              new Identifier("OLD_ITALIC"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.OLD_ITALIC", true),
              })
          .put(
              new Identifier("AsynchronousCompletionTask"),
              new Import[] {
                newImport(
                    "java.util.concurrent.CompletableFuture.AsynchronousCompletionTask", false),
              })
          .put(
              new Identifier("DEFAULT_POSITION"),
              new Import[] {
                newImport("javax.swing.border.TitledBorder.DEFAULT_POSITION", true),
              })
          .put(
              new Identifier("ETHIOPIC"),
              new Import[] {
                newImport("java.awt.font.NumericShaper.ETHIOPIC", true),
                newImport("java.lang.Character.UnicodeBlock.ETHIOPIC", true),
              })
          .put(
              new Identifier("DocumentType"),
              new Import[] {
                newImport("org.w3c.dom.DocumentType", false),
              })
          .put(
              new Identifier("CLASS_NAMEDCOLOR"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.CLASS_NAMEDCOLOR", true),
              })
          .put(
              new Identifier("CONTROLLED_BY"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRelation.CONTROLLED_BY", true),
              })
          .put(
              new Identifier("GREEN"),
              new Import[] {
                newImport("java.awt.Color.GREEN", true),
              })
          .put(
              new Identifier("UnsupportedFlavorException"),
              new Import[] {
                newImport("java.awt.datatransfer.UnsupportedFlavorException", false),
              })
          .put(
              new Identifier("HttpRetryException"),
              new Import[] {
                newImport("java.net.HttpRetryException", false),
              })
          .put(
              new Identifier("GREEK"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.GREEK", true),
              })
          .put(
              new Identifier("MIN_SURROGATE"),
              new Import[] {
                newImport("java.lang.Character.MIN_SURROGATE", true),
              })
          .put(
              new Identifier("TitledBorderUIResource"),
              new Import[] {
                newImport("javax.swing.plaf.BorderUIResource.TitledBorderUIResource", false),
              })
          .put(
              new Identifier("BeanContextMembershipEvent"),
              new Import[] {
                newImport("java.beans.beancontext.BeanContextMembershipEvent", false),
              })
          .put(
              new Identifier("KHMER_SYMBOLS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.KHMER_SYMBOLS", true),
              })
          .put(
              new Identifier("updateRenderer"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicHTML.updateRenderer", true),
              })
          .put(
              new Identifier("createFont"),
              new Import[] {
                newImport("java.awt.Font.createFont", true),
              })
          .put(
              new Identifier("DateFormatProvider"),
              new Import[] {
                newImport("java.text.spi.DateFormatProvider", false),
              })
          .put(
              new Identifier("MBeanServerConnection"),
              new Import[] {
                newImport("javax.management.MBeanServerConnection", false),
              })
          .put(
              new Identifier("CertificateRep"),
              new Import[] {
                newImport("java.security.cert.Certificate.CertificateRep", false),
              })
          .put(
              new Identifier("previousOrSame"),
              new Import[] {
                newImport("java.time.temporal.TemporalAdjusters.previousOrSame", true),
              })
          .put(
              new Identifier("ElementKind"),
              new Import[] {
                newImport("javax.lang.model.element.ElementKind", false),
              })
          .put(
              new Identifier("DefaultCopyNoDrop"),
              new Import[] {
                newImport("java.awt.dnd.DragSource.DefaultCopyNoDrop", true),
              })
          .put(
              new Identifier("getPositionAbove"),
              new Import[] {
                newImport("javax.swing.text.Utilities.getPositionAbove", true),
              })
          .put(
              new Identifier("STREAM_VERSION"),
              new Import[] {
                newImport("java.io.ObjectStreamConstants.STREAM_VERSION", true),
              })
          .put(
              new Identifier("IP_TOS"),
              new Import[] {
                newImport("java.net.SocketOptions.IP_TOS", true),
                newImport("java.net.StandardSocketOptions.IP_TOS", true),
              })
          .put(
              new Identifier("DSA_TYPE"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.keyinfo.KeyValue.DSA_TYPE", true),
              })
          .put(
              new Identifier("CompositeData"),
              new Import[] {
                newImport("javax.management.openmbean.CompositeData", false),
              })
          .put(
              new Identifier("LOCFLG"),
              new Import[] {
                newImport("java.util.jar.JarEntry.LOCFLG", true),
                newImport("java.util.jar.JarFile.LOCFLG", true),
                newImport("java.util.jar.JarInputStream.LOCFLG", true),
                newImport("java.util.jar.JarOutputStream.LOCFLG", true),
                newImport("java.util.zip.ZipEntry.LOCFLG", true),
                newImport("java.util.zip.ZipFile.LOCFLG", true),
                newImport("java.util.zip.ZipInputStream.LOCFLG", true),
                newImport("java.util.zip.ZipOutputStream.LOCFLG", true),
              })
          .put(
              new Identifier("GCMParameterSpec"),
              new Import[] {
                newImport("javax.crypto.spec.GCMParameterSpec", false),
              })
          .put(
              new Identifier("Scrollable"),
              new Import[] {
                newImport("javax.swing.Scrollable", false),
              })
          .put(
              new Identifier("cyan"),
              new Import[] {
                newImport("java.awt.Color.cyan", true),
              })
          .put(
              new Identifier("FilePermission"),
              new Import[] {
                newImport("java.io.FilePermission", false),
              })
          .put(
              new Identifier("FILES_ONLY"),
              new Import[] {
                newImport("javax.swing.JFileChooser.FILES_ONLY", true),
              })
          .put(
              new Identifier("DatagramPacket"),
              new Import[] {
                newImport("java.net.DatagramPacket", false),
              })
          .put(
              new Identifier("XmlValue"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlValue", false),
              })
          .put(
              new Identifier("XMLReaderAdapter"),
              new Import[] {
                newImport("org.xml.sax.helpers.XMLReaderAdapter", false),
              })
          .put(
              new Identifier("EmptyBorder"),
              new Import[] {
                newImport("javax.swing.border.EmptyBorder", false),
              })
          .put(
              new Identifier("USE_ACTIVE_OBJECT_MAP_ONLY"),
              new Import[] {
                newImport(
                    "org.omg.PortableServer.RequestProcessingPolicyValue.USE_ACTIVE_OBJECT_MAP_ONLY",
                    true),
              })
          .put(
              new Identifier("GetField"),
              new Import[] {
                newImport("java.io.ObjectInputStream.GetField", false),
              })
          .put(
              new Identifier("HSBtoRGB"),
              new Import[] {
                newImport("java.awt.Color.HSBtoRGB", true),
              })
          .put(
              new Identifier("DefaultLinkNoDrop"),
              new Import[] {
                newImport("java.awt.dnd.DragSource.DefaultLinkNoDrop", true),
              })
          .put(
              new Identifier("DEFAULT_VALUE_FIELD"),
              new Import[] {
                newImport("javax.management.JMX.DEFAULT_VALUE_FIELD", true),
              })
          .put(
              new Identifier("IIOMetadata"),
              new Import[] {
                newImport("javax.imageio.metadata.IIOMetadata", false),
              })
          .put(
              new Identifier("SHAPE"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.SHAPE", true),
              })
          .put(
              new Identifier("ComponentEvent"),
              new Import[] {
                newImport("java.awt.event.ComponentEvent", false),
              })
          .put(
              new Identifier("getMixerInfo"),
              new Import[] {
                newImport("javax.sound.sampled.AudioSystem.getMixerInfo", true),
              })
          .put(
              new Identifier("KAKU_1"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSize.JIS.KAKU_1", true),
              })
          .put(
              new Identifier("KAKU_2"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSize.JIS.KAKU_2", true),
              })
          .put(
              new Identifier("KAKU_0"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSize.JIS.KAKU_0", true),
              })
          .put(
              new Identifier("KAKU_5"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSize.JIS.KAKU_5", true),
              })
          .put(
              new Identifier("KerberosTicket"),
              new Import[] {
                newImport("javax.security.auth.kerberos.KerberosTicket", false),
              })
          .put(
              new Identifier("KAKU_6"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSize.JIS.KAKU_6", true),
              })
          .put(
              new Identifier("KAKU_3"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSize.JIS.KAKU_3", true),
              })
          .put(
              new Identifier("HONOR_DISPLAY_PROPERTIES"),
              new Import[] {
                newImport("javax.swing.JEditorPane.HONOR_DISPLAY_PROPERTIES", true),
              })
          .put(
              new Identifier("KAKU_4"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSize.JIS.KAKU_4", true),
              })
          .put(
              new Identifier("JobMediaSheetsSupported"),
              new Import[] {
                newImport("javax.print.attribute.standard.JobMediaSheetsSupported", false),
              })
          .put(
              new Identifier("KAKU_7"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSize.JIS.KAKU_7", true),
              })
          .put(
              new Identifier("KAKU_8"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSize.JIS.KAKU_8", true),
              })
          .put(
              new Identifier("OptionalDataException"),
              new Import[] {
                newImport("java.io.OptionalDataException", false),
              })
          .put(
              new Identifier("ManagementFactory"),
              new Import[] {
                newImport("java.lang.management.ManagementFactory", false),
              })
          .put(
              new Identifier("ZONE_OFFSET"),
              new Import[] {
                newImport("java.util.Calendar.ZONE_OFFSET", true),
              })
          .put(
              new Identifier("TAG_CVAR"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_CVAR", true),
              })
          .put(
              new Identifier("CompletionStatus"),
              new Import[] {
                newImport("org.omg.CORBA.CompletionStatus", false),
              })
          .put(
              new Identifier("InputSubset"),
              new Import[] {
                newImport("java.awt.im.InputSubset", false),
              })
          .put(
              new Identifier("JScrollPane"),
              new Import[] {
                newImport("javax.swing.JScrollPane", false),
              })
          .put(
              new Identifier("BasicComboBoxEditor"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicComboBoxEditor", false),
              })
          .put(
              new Identifier("createXMLReader"),
              new Import[] {
                newImport("org.xml.sax.helpers.XMLReaderFactory.createXMLReader", true),
              })
          .put(
              new Identifier("reverse"),
              new Import[] {
                newImport("java.lang.Integer.reverse", true),
                newImport("java.lang.Long.reverse", true),
                newImport("java.util.Collections.reverse", true),
              })
          .put(
              new Identifier("getPercentInstance"),
              new Import[] {
                newImport("java.text.NumberFormat.getPercentInstance", true),
              })
          .put(
              new Identifier("IORInterceptor_3_0Helper"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.IORInterceptor_3_0Helper", false),
              })
          .put(
              new Identifier("OptionalDouble"),
              new Import[] {
                newImport("java.util.OptionalDouble", false),
              })
          .put(
              new Identifier("getTranslateInstance"),
              new Import[] {
                newImport("java.awt.geom.AffineTransform.getTranslateInstance", true),
              })
          .put(
              new Identifier("KEY_LOCATION_RIGHT"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.KEY_LOCATION_RIGHT", true),
              })
          .put(
              new Identifier("COMPLETED_MAYBE"),
              new Import[] {
                newImport("org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE", true),
              })
          .put(
              new Identifier("_RETAIN"),
              new Import[] {
                newImport("org.omg.PortableServer.ServantRetentionPolicyValue._RETAIN", true),
              })
          .put(
              new Identifier("LongUnaryOperator"),
              new Import[] {
                newImport("java.util.function.LongUnaryOperator", false),
              })
          .put(
              new Identifier("NotFoundHolder"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextPackage.NotFoundHolder", false),
              })
          .put(
              new Identifier("CLASS_DEVICELINK"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.CLASS_DEVICELINK", true),
              })
          .put(
              new Identifier("VK_QUOTE"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_QUOTE", true),
              })
          .put(
              new Identifier("VOLATILE"),
              new Import[] {
                newImport("java.lang.reflect.Modifier.VOLATILE", true),
              })
          .put(
              new Identifier("ForwardRequest"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.ForwardRequest", false),
                newImport("org.omg.PortableServer.ForwardRequest", false),
              })
          .put(
              new Identifier("CLASS_LOADING_MXBEAN_NAME"),
              new Import[] {
                newImport("java.lang.management.ManagementFactory.CLASS_LOADING_MXBEAN_NAME", true),
              })
          .put(
              new Identifier("StyledDocument"),
              new Import[] {
                newImport("javax.swing.text.StyledDocument", false),
              })
          .put(
              new Identifier("SUBTREE_SCOPE"),
              new Import[] {
                newImport("javax.naming.directory.SearchControls.SUBTREE_SCOPE", true),
                newImport("javax.naming.event.EventContext.SUBTREE_SCOPE", true),
              })
          .put(
              new Identifier("XPathVariableResolver"),
              new Import[] {
                newImport("javax.xml.xpath.XPathVariableResolver", false),
              })
          .put(
              new Identifier("AbstractColorChooserPanel"),
              new Import[] {
                newImport("javax.swing.colorchooser.AbstractColorChooserPanel", false),
              })
          .put(
              new Identifier("CredentialException"),
              new Import[] {
                newImport("javax.security.auth.login.CredentialException", false),
              })
          .put(
              new Identifier("TEXT_LAST"),
              new Import[] {
                newImport("java.awt.event.TextEvent.TEXT_LAST", true),
              })
          .put(
              new Identifier("controlHighlight"),
              new Import[] {
                newImport("java.awt.SystemColor.controlHighlight", true),
              })
          .put(
              new Identifier("PasswordView"),
              new Import[] {
                newImport("javax.swing.text.PasswordView", false),
              })
          .put(
              new Identifier("TagElement"),
              new Import[] {
                newImport("javax.swing.text.html.parser.TagElement", false),
              })
          .put(
              new Identifier("KeySelectorException"),
              new Import[] {
                newImport("javax.xml.crypto.KeySelectorException", false),
              })
          .put(
              new Identifier("KerberosPrincipal"),
              new Import[] {
                newImport("javax.security.auth.kerberos.KerberosPrincipal", false),
              })
          .put(
              new Identifier("XMLNS_ATTRIBUTE_NS_URI"),
              new Import[] {
                newImport("javax.xml.XMLConstants.XMLNS_ATTRIBUTE_NS_URI", true),
              })
          .put(
              new Identifier("GIF"),
              new Import[] {
                newImport("javax.print.DocFlavor.BYTE_ARRAY.GIF", true),
                newImport("javax.print.DocFlavor.INPUT_STREAM.GIF", true),
                newImport("javax.print.DocFlavor.URL.GIF", true),
              })
          .put(
              new Identifier("INTERFACE_CLASS_NAME_FIELD"),
              new Import[] {
                newImport("javax.management.JMX.INTERFACE_CLASS_NAME_FIELD", true),
              })
          .put(
              new Identifier("isSupported"),
              new Import[] {
                newImport("java.awt.SystemTray.isSupported", true),
                newImport("java.nio.charset.Charset.isSupported", true),
              })
          .put(
              new Identifier("_dk_String"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind._dk_String", true),
              })
          .put(
              new Identifier("nullsLast"),
              new Import[] {
                newImport("java.util.Comparator.nullsLast", true),
              })
          .put(
              new Identifier("MemoryPoolMXBean"),
              new Import[] {
                newImport("java.lang.management.MemoryPoolMXBean", false),
              })
          .put(
              new Identifier("JobImpressionsCompleted"),
              new Import[] {
                newImport("javax.print.attribute.standard.JobImpressionsCompleted", false),
              })
          .put(
              new Identifier("IDLTypeOperations"),
              new Import[] {
                newImport("org.omg.CORBA.IDLTypeOperations", false),
              })
          .put(
              new Identifier("AEGEAN_NUMBERS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.AEGEAN_NUMBERS", true),
              })
          .put(
              new Identifier("ACTION_APPEND_AS_CHILDREN"),
              new Import[] {
                newImport("org.w3c.dom.ls.LSParser.ACTION_APPEND_AS_CHILDREN", true),
              })
          .put(
              new Identifier("LOADING"),
              new Import[] {
                newImport("java.awt.MediaTracker.LOADING", true),
              })
          .put(
              new Identifier("getSentenceInstance"),
              new Import[] {
                newImport("java.text.BreakIterator.getSentenceInstance", true),
              })
          .put(
              new Identifier("TransformerHandler"),
              new Import[] {
                newImport("javax.xml.transform.sax.TransformerHandler", false),
              })
          .put(
              new Identifier("JRadioButton"),
              new Import[] {
                newImport("javax.swing.JRadioButton", false),
              })
          .put(
              new Identifier("FORWARD_TRAVERSAL_KEYS"),
              new Import[] {
                newImport("java.awt.KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS", true),
              })
          .put(
              new Identifier("values"),
              new Import[] {
                newImport("java.awt.Component.BaselineResizeBehavior.values", true),
                newImport("java.awt.Desktop.Action.values", true),
                newImport("java.awt.Dialog.ModalExclusionType.values", true),
                newImport("java.awt.Dialog.ModalityType.values", true),
                newImport("java.awt.GraphicsDevice.WindowTranslucency.values", true),
                newImport("java.awt.MultipleGradientPaint.ColorSpaceType.values", true),
                newImport("java.awt.MultipleGradientPaint.CycleMethod.values", true),
                newImport("java.awt.TrayIcon.MessageType.values", true),
                newImport("java.awt.Window.Type.values", true),
                newImport("java.awt.font.NumericShaper.Range.values", true),
                newImport("java.lang.Character.UnicodeScript.values", true),
                newImport("java.lang.ProcessBuilder.Redirect.Type.values", true),
                newImport("java.lang.Thread.State.values", true),
                newImport("java.lang.annotation.ElementType.values", true),
                newImport("java.lang.annotation.RetentionPolicy.values", true),
                newImport("java.lang.management.MemoryType.values", true),
                newImport("java.math.RoundingMode.values", true),
                newImport("java.net.StandardProtocolFamily.values", true),
                newImport("java.net.Authenticator.RequestorType.values", true),
                newImport("java.net.Proxy.Type.values", true),
                newImport("java.nio.file.AccessMode.values", true),
                newImport("java.nio.file.FileVisitOption.values", true),
                newImport("java.nio.file.FileVisitResult.values", true),
                newImport("java.nio.file.LinkOption.values", true),
                newImport("java.nio.file.StandardCopyOption.values", true),
                newImport("java.nio.file.StandardOpenOption.values", true),
                newImport("java.nio.file.attribute.AclEntryFlag.values", true),
                newImport("java.nio.file.attribute.AclEntryPermission.values", true),
                newImport("java.nio.file.attribute.AclEntryType.values", true),
                newImport("java.nio.file.attribute.PosixFilePermission.values", true),
                newImport("java.security.CryptoPrimitive.values", true),
                newImport("java.security.KeyRep.Type.values", true),
                newImport("java.security.cert.CRLReason.values", true),
                newImport("java.security.cert.PKIXReason.values", true),
                newImport("java.security.cert.CertPathValidatorException.BasicReason.values", true),
                newImport("java.security.cert.PKIXRevocationChecker.Option.values", true),
                newImport("java.sql.ClientInfoStatus.values", true),
                newImport("java.sql.JDBCType.values", true),
                newImport("java.sql.PseudoColumnUsage.values", true),
                newImport("java.sql.RowIdLifetime.values", true),
                newImport("java.text.Normalizer.Form.values", true),
                newImport("java.time.DayOfWeek.values", true),
                newImport("java.time.Month.values", true),
                newImport("java.time.chrono.HijrahEra.values", true),
                newImport("java.time.chrono.IsoEra.values", true),
                newImport("java.time.chrono.JapaneseEra.values", true),
                newImport("java.time.chrono.MinguoEra.values", true),
                newImport("java.time.chrono.ThaiBuddhistEra.values", true),
                newImport("java.time.format.FormatStyle.values", true),
                newImport("java.time.format.ResolverStyle.values", true),
                newImport("java.time.format.SignStyle.values", true),
                newImport("java.time.format.TextStyle.values", true),
                newImport("java.time.temporal.ChronoField.values", true),
                newImport("java.time.temporal.ChronoUnit.values", true),
                newImport("java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.values", true),
                newImport("java.util.Formatter.BigDecimalLayoutForm.values", true),
                newImport("java.util.Locale.Category.values", true),
                newImport("java.util.Locale.FilteringMode.values", true),
                newImport("java.util.concurrent.TimeUnit.values", true),
                newImport("java.util.stream.Collector.Characteristics.values", true),
                newImport("javax.annotation.Resource.AuthenticationType.values", true),
                newImport("javax.jws.WebParam.Mode.values", true),
                newImport("javax.jws.soap.SOAPBinding.ParameterStyle.values", true),
                newImport("javax.jws.soap.SOAPBinding.Style.values", true),
                newImport("javax.jws.soap.SOAPBinding.Use.values", true),
                newImport("javax.lang.model.SourceVersion.values", true),
                newImport("javax.lang.model.element.ElementKind.values", true),
                newImport("javax.lang.model.element.Modifier.values", true),
                newImport("javax.lang.model.element.NestingKind.values", true),
                newImport("javax.lang.model.type.TypeKind.values", true),
                newImport("javax.net.ssl.SSLEngineResult.HandshakeStatus.values", true),
                newImport("javax.net.ssl.SSLEngineResult.Status.values", true),
                newImport("javax.swing.DropMode.values", true),
                newImport("javax.swing.SortOrder.values", true),
                newImport("javax.swing.GroupLayout.Alignment.values", true),
                newImport("javax.swing.JTable.PrintMode.values", true),
                newImport("javax.swing.LayoutStyle.ComponentPlacement.values", true),
                newImport("javax.swing.RowFilter.ComparisonType.values", true),
                newImport("javax.swing.SwingWorker.StateValue.values", true),
                newImport("javax.swing.event.RowSorterEvent.Type.values", true),
                newImport(
                    "javax.swing.plaf.nimbus.AbstractRegionPainter.PaintContext.CacheMode.values",
                    true),
                newImport("javax.swing.text.html.FormSubmitEvent.MethodType.values", true),
                newImport("javax.tools.StandardLocation.values", true),
                newImport("javax.tools.Diagnostic.Kind.values", true),
                newImport("javax.tools.DocumentationTool.Location.values", true),
                newImport("javax.tools.JavaFileObject.Kind.values", true),
                newImport("javax.xml.bind.annotation.XmlAccessOrder.values", true),
                newImport("javax.xml.bind.annotation.XmlAccessType.values", true),
                newImport("javax.xml.bind.annotation.XmlNsForm.values", true),
                newImport("javax.xml.ws.Service.Mode.values", true),
                newImport("javax.xml.ws.handler.MessageContext.Scope.values", true),
                newImport("javax.xml.ws.soap.AddressingFeature.Responses.values", true),
              })
          .put(
              new Identifier("POLICY_PASS_CREDENTIALS"),
              new Import[] {
                newImport("javax.security.sasl.Sasl.POLICY_PASS_CREDENTIALS", true),
              })
          .put(
              new Identifier("LATIN_EXTENDED_ADDITIONAL"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.LATIN_EXTENDED_ADDITIONAL", true),
              })
          .put(
              new Identifier("MultiScrollPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.multi.MultiScrollPaneUI", false),
              })
          .put(
              new Identifier("VALUE_TEXT_ANTIALIAS_OFF"),
              new Import[] {
                newImport("java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_OFF", true),
              })
          .put(
              new Identifier("DestinationType"),
              new Import[] {
                newImport("java.awt.JobAttributes.DestinationType", false),
              })
          .put(
              new Identifier("HOUR_OF_DAY"),
              new Import[] {
                newImport("java.util.Calendar.HOUR_OF_DAY", true),
              })
          .put(
              new Identifier("CANCELED"),
              new Import[] {
                newImport("javax.print.attribute.standard.JobState.CANCELED", true),
              })
          .put(
              new Identifier("SQLTimeoutException"),
              new Import[] {
                newImport("java.sql.SQLTimeoutException", false),
              })
          .put(
              new Identifier("ENV_MONARCH"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ENV_MONARCH", true),
              })
          .put(
              new Identifier("UnsupportedCallbackException"),
              new Import[] {
                newImport("javax.security.auth.callback.UnsupportedCallbackException", false),
              })
          .put(
              new Identifier("VK_NUMPAD7"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_NUMPAD7", true),
              })
          .put(
              new Identifier("DefaultPainter"),
              new Import[] {
                newImport("javax.swing.text.DefaultHighlighter.DefaultPainter", true),
              })
          .put(
              new Identifier("VK_NUMPAD8"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_NUMPAD8", true),
              })
          .put(
              new Identifier("singletonKeySelector"),
              new Import[] {
                newImport("javax.xml.crypto.KeySelector.singletonKeySelector", true),
              })
          .put(
              new Identifier("VK_NUMPAD9"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_NUMPAD9", true),
              })
          .put(
              new Identifier("Highlighter"),
              new Import[] {
                newImport("javax.swing.text.Highlighter", false),
              })
          .put(
              new Identifier("REF_getField"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandleInfo.REF_getField", true),
              })
          .put(
              new Identifier("CompoundName"),
              new Import[] {
                newImport("javax.naming.CompoundName", false),
              })
          .put(
              new Identifier("getPrinterJob"),
              new Import[] {
                newImport("java.awt.print.PrinterJob.getPrinterJob", true),
              })
          .put(
              new Identifier("icHdrCmmId"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icHdrCmmId", true),
              })
          .put(
              new Identifier("VetoableChangeListener"),
              new Import[] {
                newImport("java.beans.VetoableChangeListener", false),
              })
          .put(
              new Identifier("XA_RBTIMEOUT"),
              new Import[] {
                newImport("javax.transaction.xa.XAException.XA_RBTIMEOUT", true),
              })
          .put(
              new Identifier("MODE_ASYNCHRONOUS"),
              new Import[] {
                newImport("org.w3c.dom.ls.DOMImplementationLS.MODE_ASYNCHRONOUS", true),
              })
          .put(
              new Identifier("CS_GRAY"),
              new Import[] {
                newImport("java.awt.color.ColorSpace.CS_GRAY", true),
              })
          .put(
              new Identifier("TAG_MAXP"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_MAXP", true),
              })
          .put(
              new Identifier("OpenOption"),
              new Import[] {
                newImport("java.nio.file.OpenOption", false),
              })
          .put(
              new Identifier("StringCharacterIterator"),
              new Import[] {
                newImport("java.text.StringCharacterIterator", false),
              })
          .put(
              new Identifier("FRAME_CONTENT_LAYER"),
              new Import[] {
                newImport("javax.swing.JLayeredPane.FRAME_CONTENT_LAYER", true),
              })
          .put(
              new Identifier("invalidateAll"),
              new Import[] {
                newImport("java.lang.invoke.SwitchPoint.invalidateAll", true),
              })
          .put(
              new Identifier("Timer"),
              new Import[] {
                newImport("java.util.Timer", false),
                newImport("javax.management.timer.Timer", false),
                newImport("javax.swing.Timer", false),
              })
          .put(
              new Identifier("PKCS8EncodedKeySpec"),
              new Import[] {
                newImport("java.security.spec.PKCS8EncodedKeySpec", false),
              })
          .put(
              new Identifier("VARIATION_SELECTORS_SUPPLEMENT"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.VARIATION_SELECTORS_SUPPLEMENT", true),
              })
          .put(
              new Identifier("setFileNameMap"),
              new Import[] {
                newImport("java.net.URLConnection.setFileNameMap", true),
              })
          .put(
              new Identifier("ISMAP"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.ISMAP", true),
              })
          .put(
              new Identifier("getBackground"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.getBackground", true),
              })
          .build();
}
