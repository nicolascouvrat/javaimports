// Code generated by GenerateStdlib.java. DO NOT EDIT.
package com.nikodoko.javaimports.stdlib.internal.api.v8;

import static com.nikodoko.javaimports.stdlib.internal.Stdlib.newImport;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.common.Identifier;
import com.nikodoko.javaimports.common.Import;
import java.util.Map;

public class Java8StdlibChunk19 {
  static final Map<Identifier, Import[]> CLASSES =
      new ImmutableMap.Builder<Identifier, Import[]>()
          .put(
              new Identifier("InitialContextFactoryBuilder"),
              new Import[] {
                newImport("javax.naming.spi.InitialContextFactoryBuilder", false),
              })
          .put(
              new Identifier("PARA_INDENT_LEFT"),
              new Import[] {
                newImport("javax.swing.text.html.HTMLEditorKit.PARA_INDENT_LEFT", true),
              })
          .put(
              new Identifier("WIDTH_SEMI_CONDENSED"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.WIDTH_SEMI_CONDENSED", true),
              })
          .put(
              new Identifier("leading"),
              new Import[] {
                newImport("java.awt.font.TextHitInfo.leading", true),
              })
          .put(
              new Identifier("_dk_Operation"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind._dk_Operation", true),
              })
          .put(
              new Identifier("KeySpec"),
              new Import[] {
                newImport("java.security.spec.KeySpec", false),
              })
          .put(
              new Identifier("COLLATED"),
              new Import[] {
                newImport("javax.print.attribute.standard.SheetCollate.COLLATED", true),
              })
          .put(
              new Identifier("REFERRAL"),
              new Import[] {
                newImport("javax.naming.Context.REFERRAL", true),
              })
          .put(
              new Identifier("Clock"),
              new Import[] {
                newImport("java.time.Clock", false),
              })
          .put(
              new Identifier("OUTPUT_TRAY_MISSING"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.PrinterStateReason.OUTPUT_TRAY_MISSING", true),
              })
          .put(
              new Identifier("ErrorListener"),
              new Import[] {
                newImport("javax.xml.transform.ErrorListener", false),
              })
          .put(
              new Identifier("ImageReadParam"),
              new Import[] {
                newImport("javax.imageio.ImageReadParam", false),
              })
          .put(
              new Identifier("Referenceable"),
              new Import[] {
                newImport("javax.naming.Referenceable", false),
              })
          .put(
              new Identifier("VALUE_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JOptionPane.VALUE_PROPERTY", true),
              })
          .put(
              new Identifier("getDesktopColor"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalLookAndFeel.getDesktopColor", true),
              })
          .put(
              new Identifier("CheckboxMenuItem"),
              new Import[] {
                newImport("java.awt.CheckboxMenuItem", false),
              })
          .put(
              new Identifier("BasicToolBarUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicToolBarUI", false),
              })
          .put(
              new Identifier("TAMIL"),
              new Import[] {
                newImport("java.awt.font.NumericShaper.TAMIL", true),
                newImport("java.lang.Character.UnicodeBlock.TAMIL", true),
              })
          .put(
              new Identifier("getAvailableCurrencies"),
              new Import[] {
                newImport("java.util.Currency.getAvailableCurrencies", true),
              })
          .put(
              new Identifier("StringJoiner"),
              new Import[] {
                newImport("java.util.StringJoiner", false),
              })
          .put(
              new Identifier("Status"),
              new Import[] {
                newImport("javax.net.ssl.SSLEngineResult.Status", false),
              })
          .put(
              new Identifier("tk_any"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind.tk_any", true),
              })
          .put(
              new Identifier("HTTP_MOVED_TEMP"),
              new Import[] {
                newImport("java.net.HttpURLConnection.HTTP_MOVED_TEMP", true),
              })
          .put(
              new Identifier("WINDOW_TEXT"),
              new Import[] {
                newImport("java.awt.SystemColor.WINDOW_TEXT", true),
              })
          .put(
              new Identifier("RUN_DIRECTION_LTR"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.RUN_DIRECTION_LTR", true),
              })
          .put(
              new Identifier("getDefaultType"),
              new Import[] {
                newImport("java.security.KeyStore.getDefaultType", true),
                newImport("java.security.cert.CertPathBuilder.getDefaultType", true),
                newImport("java.security.cert.CertPathValidator.getDefaultType", true),
                newImport("java.security.cert.CertStore.getDefaultType", true),
              })
          .put(
              new Identifier("InterceptorOperations"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.InterceptorOperations", false),
              })
          .put(
              new Identifier("contains"),
              new Import[] {
                newImport("java.awt.geom.Path2D.contains", true),
              })
          .put(
              new Identifier("TimeZone"),
              new Import[] {
                newImport("java.util.TimeZone", false),
              })
          .put(
              new Identifier("SynthRadioButtonMenuItemUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthRadioButtonMenuItemUI", false),
              })
          .put(
              new Identifier("TransformParameterSpec"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.spec.TransformParameterSpec", false),
              })
          .put(
              new Identifier("ENV_9X11"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ENV_9X11", true),
              })
          .put(
              new Identifier("icSigAToB1Tag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigAToB1Tag", true),
              })
          .put(
              new Identifier("MIDI_TIME_CODE"),
              new Import[] {
                newImport("javax.sound.midi.ShortMessage.MIDI_TIME_CODE", true),
                newImport("javax.sound.midi.Sequencer.SyncMode.MIDI_TIME_CODE", true),
              })
          .put(
              new Identifier("ENV_9X12"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ENV_9X12", true),
              })
          .put(
              new Identifier("PixelInterleavedSampleModel"),
              new Import[] {
                newImport("java.awt.image.PixelInterleavedSampleModel", false),
              })
          .put(
              new Identifier("StandardSocketOptions"),
              new Import[] {
                newImport("java.net.StandardSocketOptions", false),
              })
          .put(
              new Identifier("PBEKeySpec"),
              new Import[] {
                newImport("javax.crypto.spec.PBEKeySpec", false),
              })
          .put(
              new Identifier("TYPE_TRANSLATION"),
              new Import[] {
                newImport("java.awt.geom.AffineTransform.TYPE_TRANSLATION", true),
              })
          .put(
              new Identifier("BLUE"),
              new Import[] {
                newImport("java.awt.Color.BLUE", true),
              })
          .put(
              new Identifier("FormatterClosedException"),
              new Import[] {
                newImport("java.util.FormatterClosedException", false),
              })
          .put(
              new Identifier("CONTAINER_FIRST"),
              new Import[] {
                newImport("java.awt.event.ContainerEvent.CONTAINER_FIRST", true),
              })
          .put(
              new Identifier("DAYS"),
              new Import[] {
                newImport("javax.xml.datatype.DatatypeConstants.DAYS", true),
              })
          .put(
              new Identifier("HEADER"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.HEADER", true),
              })
          .put(
              new Identifier("LOCATION_FORWARD"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.LOCATION_FORWARD", false),
              })
          .put(
              new Identifier("sleep"),
              new Import[] {
                newImport("java.lang.Thread.sleep", true),
              })
          .put(
              new Identifier("LoggingPermission"),
              new Import[] {
                newImport("java.util.logging.LoggingPermission", false),
              })
          .put(
              new Identifier("MONOCHROME"),
              new Import[] {
                newImport("java.awt.PageAttributes.ColorType.MONOCHROME", true),
                newImport("javax.print.attribute.standard.Chromaticity.MONOCHROME", true),
              })
          .put(
              new Identifier("COPY_OR_MOVE"),
              new Import[] {
                newImport("javax.swing.TransferHandler.COPY_OR_MOVE", true),
              })
          .put(
              new Identifier("nanoTime"),
              new Import[] {
                newImport("java.lang.System.nanoTime", true),
              })
          .put(
              new Identifier("readAllBytes"),
              new Import[] {
                newImport("java.nio.file.Files.readAllBytes", true),
              })
          .put(
              new Identifier("StringIndexOutOfBoundsException"),
              new Import[] {
                newImport("java.lang.StringIndexOutOfBoundsException", false),
              })
          .put(
              new Identifier("getAuxiliaryLookAndFeels"),
              new Import[] {
                newImport("javax.swing.UIManager.getAuxiliaryLookAndFeels", true),
              })
          .put(
              new Identifier("JOIN_ROUND"),
              new Import[] {
                newImport("java.awt.BasicStroke.JOIN_ROUND", true),
              })
          .put(
              new Identifier("XPath"),
              new Import[] {
                newImport("javax.xml.xpath.XPath", false),
              })
          .put(
              new Identifier("TableColumnModelEvent"),
              new Import[] {
                newImport("javax.swing.event.TableColumnModelEvent", false),
              })
          .put(
              new Identifier("ConstructorProperties"),
              new Import[] {
                newImport("java.beans.ConstructorProperties", false),
              })
          .put(
              new Identifier("newFixedThreadPool"),
              new Import[] {
                newImport("java.util.concurrent.Executors.newFixedThreadPool", true),
              })
          .put(
              new Identifier("KRB_NT_UNKNOWN"),
              new Import[] {
                newImport("javax.security.auth.kerberos.KerberosPrincipal.KRB_NT_UNKNOWN", true),
              })
          .put(
              new Identifier("icSigDeviceSettingsTag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigDeviceSettingsTag", true),
              })
          .put(
              new Identifier("ISO_C1_ENVELOPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_C1_ENVELOPE", true),
              })
          .put(
              new Identifier("doubleToRawLongBits"),
              new Import[] {
                newImport("java.lang.Double.doubleToRawLongBits", true),
              })
          .put(
              new Identifier("LOOP_CONTINUOUSLY"),
              new Import[] {
                newImport("javax.sound.midi.Sequencer.LOOP_CONTINUOUSLY", true),
                newImport("javax.sound.sampled.Clip.LOOP_CONTINUOUSLY", true),
              })
          .put(
              new Identifier("BiFunction"),
              new Import[] {
                newImport("java.util.function.BiFunction", false),
              })
          .put(
              new Identifier("windowBorder"),
              new Import[] {
                newImport("java.awt.SystemColor.windowBorder", true),
              })
          .put(
              new Identifier("ISO_C6_ENVELOPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_C6_ENVELOPE", true),
              })
          .put(
              new Identifier("printInt"),
              new Import[] {
                newImport("javax.xml.bind.DatatypeConverter.printInt", true),
              })
          .put(
              new Identifier("Foreground"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.Foreground", true),
              })
          .put(
              new Identifier("toUnsignedString"),
              new Import[] {
                newImport("java.lang.Integer.toUnsignedString", true),
                newImport("java.lang.Long.toUnsignedString", true),
              })
          .put(
              new Identifier("emptyIntSpliterator"),
              new Import[] {
                newImport("java.util.Spliterators.emptyIntSpliterator", true),
              })
          .put(
              new Identifier("W3C_XML_SCHEMA_NS_URI"),
              new Import[] {
                newImport("javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI", true),
              })
          .put(
              new Identifier("ObjectImpl"),
              new Import[] {
                newImport("org.omg.CORBA.portable.ObjectImpl", false),
                newImport("org.omg.CORBA_2_3.portable.ObjectImpl", false),
              })
          .put(
              new Identifier("LinkedHashSet"),
              new Import[] {
                newImport("java.util.LinkedHashSet", false),
              })
          .put(
              new Identifier("getTextPlainUnicodeFlavor"),
              new Import[] {
                newImport("java.awt.datatransfer.DataFlavor.getTextPlainUnicodeFlavor", true),
              })
          .put(
              new Identifier("isHeadless"),
              new Import[] {
                newImport("java.awt.GraphicsEnvironment.isHeadless", true),
              })
          .put(
              new Identifier("SUBMISSION_INTERRUPTED"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.JobStateReason.SUBMISSION_INTERRUPTED", true),
              })
          .put(
              new Identifier("VK_PROPS"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_PROPS", true),
              })
          .put(
              new Identifier("KeyAdapter"),
              new Import[] {
                newImport("java.awt.event.KeyAdapter", false),
              })
          .put(
              new Identifier("SerialJavaObject"),
              new Import[] {
                newImport("javax.sql.rowset.serial.SerialJavaObject", false),
              })
          .put(
              new Identifier("VALUETYPE"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.VALUETYPE", true),
              })
          .put(
              new Identifier("printBoolean"),
              new Import[] {
                newImport("javax.xml.bind.DatatypeConverter.printBoolean", true),
              })
          .put(
              new Identifier("GlyphPainter"),
              new Import[] {
                newImport("javax.swing.text.GlyphView.GlyphPainter", false),
              })
          .put(
              new Identifier("isNative"),
              new Import[] {
                newImport("java.lang.reflect.Modifier.isNative", true),
              })
          .put(
              new Identifier("ExportException"),
              new Import[] {
                newImport("java.rmi.server.ExportException", false),
              })
          .put(
              new Identifier("insertBreakAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.insertBreakAction", true),
              })
          .put(
              new Identifier("TAISHO"),
              new Import[] {
                newImport("java.time.chrono.JapaneseEra.TAISHO", true),
              })
          .put(
              new Identifier("TMJOIN"),
              new Import[] {
                newImport("javax.transaction.xa.XAResource.TMJOIN", true),
              })
          .put(
              new Identifier("JOIN_BEVEL"),
              new Import[] {
                newImport("java.awt.BasicStroke.JOIN_BEVEL", true),
              })
          .put(
              new Identifier("NamingContextExtHolder"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextExtHolder", false),
              })
          .put(
              new Identifier("parameterNullableUnknown"),
              new Import[] {
                newImport("java.sql.ParameterMetaData.parameterNullableUnknown", true),
              })
          .put(
              new Identifier("createFromRenderedImage"),
              new Import[] {
                newImport("javax.imageio.ImageTypeSpecifier.createFromRenderedImage", true),
              })
          .put(
              new Identifier("LifespanPolicy"),
              new Import[] {
                newImport("org.omg.PortableServer.LifespanPolicy", false),
              })
          .put(
              new Identifier("ABORT"),
              new Import[] {
                newImport("java.awt.image.ImageObserver.ABORT", true),
              })
          .put(
              new Identifier("InvalidPreferencesFormatException"),
              new Import[] {
                newImport("java.util.prefs.InvalidPreferencesFormatException", false),
              })
          .put(
              new Identifier("W3C_LENGTH_UNITS"),
              new Import[] {
                newImport("javax.swing.JEditorPane.W3C_LENGTH_UNITS", true),
              })
          .put(
              new Identifier("IllegalSelectorException"),
              new Import[] {
                newImport("java.nio.channels.IllegalSelectorException", false),
              })
          .put(
              new Identifier("setLeftIndent"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.setLeftIndent", true),
              })
          .put(
              new Identifier("CANADA_FRENCH"),
              new Import[] {
                newImport("java.util.Locale.CANADA_FRENCH", true),
              })
          .put(
              new Identifier("rebind"),
              new Import[] {
                newImport("java.rmi.Naming.rebind", true),
              })
          .put(
              new Identifier("GRADE_LOCK_WHEN_MODIFIED"),
              new Import[] {
                newImport("javax.sql.rowset.spi.SyncProvider.GRADE_LOCK_WHEN_MODIFIED", true),
              })
          .put(
              new Identifier("VK_UP"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_UP", true),
              })
          .put(
              new Identifier("LISU"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.LISU", true),
              })
          .put(
              new Identifier("LIST"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.LIST", true),
                newImport("javax.swing.plaf.synth.Region.LIST", true),
              })
          .put(
              new Identifier("FixedHeightLayoutCache"),
              new Import[] {
                newImport("javax.swing.tree.FixedHeightLayoutCache", false),
              })
          .put(
              new Identifier("AUTHENTICATOR"),
              new Import[] {
                newImport("javax.management.remote.JMXConnectorServer.AUTHENTICATOR", true),
              })
          .put(
              new Identifier("charCount"),
              new Import[] {
                newImport("java.lang.Character.charCount", true),
              })
          .put(
              new Identifier("StringSeqHolder"),
              new Import[] {
                newImport("org.omg.CORBA.StringSeqHolder", false),
              })
          .put(
              new Identifier("ISO_B10"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_B10", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ISO_B10", true),
              })
          .put(
              new Identifier("SCROLLBARS_NEVER"),
              new Import[] {
                newImport("java.awt.ScrollPane.SCROLLBARS_NEVER", true),
              })
          .put(
              new Identifier("VK_CODE_INPUT"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_CODE_INPUT", true),
              })
          .put(
              new Identifier("Subscript"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.Subscript", true),
              })
          .put(
              new Identifier("SAXNotRecognizedException"),
              new Import[] {
                newImport("org.xml.sax.SAXNotRecognizedException", false),
              })
          .put(
              new Identifier("getProgressBarBorder"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicBorders.getProgressBarBorder", true),
              })
          .put(
              new Identifier("BeanContextChildComponentProxy"),
              new Import[] {
                newImport("java.beans.beancontext.BeanContextChildComponentProxy", false),
              })
          .put(
              new Identifier("InvalidPropertiesFormatException"),
              new Import[] {
                newImport("java.util.InvalidPropertiesFormatException", false),
              })
          .put(
              new Identifier("DATATYPE_FLOAT"),
              new Import[] {
                newImport("javax.imageio.metadata.IIOMetadataFormat.DATATYPE_FLOAT", true),
              })
          .put(
              new Identifier("getShaper"),
              new Import[] {
                newImport("java.awt.font.NumericShaper.getShaper", true),
              })
          .put(
              new Identifier("PosixFilePermissions"),
              new Import[] {
                newImport("java.nio.file.attribute.PosixFilePermissions", false),
              })
          .put(
              new Identifier("PreferenceChangeEvent"),
              new Import[] {
                newImport("java.util.prefs.PreferenceChangeEvent", false),
              })
          .put(
              new Identifier("getFollowRedirects"),
              new Import[] {
                newImport("java.net.HttpURLConnection.getFollowRedirects", true),
              })
          .put(
              new Identifier("WrappedPlainView"),
              new Import[] {
                newImport("javax.swing.text.WrappedPlainView", false),
              })
          .put(
              new Identifier("GLASS_PANE_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JInternalFrame.GLASS_PANE_PROPERTY", true),
              })
          .put(
              new Identifier("BackingStoreException"),
              new Import[] {
                newImport("java.util.prefs.BackingStoreException", false),
              })
          .put(
              new Identifier("SUBWINDOW_OF_PROPERTY"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRelation.SUBWINDOW_OF_PROPERTY", true),
              })
          .put(
              new Identifier("doubleStream"),
              new Import[] {
                newImport("java.util.stream.StreamSupport.doubleStream", true),
              })
          .put(
              new Identifier("icMediaRelativeColorimetric"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icMediaRelativeColorimetric", true),
              })
          .put(
              new Identifier("XmlType"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlType", false),
              })
          .put(
              new Identifier("FileStore"),
              new Import[] {
                newImport("java.nio.file.FileStore", false),
              })
          .put(
              new Identifier("LIST_ITEM"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.LIST_ITEM", true),
              })
          .put(
              new Identifier("IORInterceptor"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.IORInterceptor", false),
              })
          .put(
              new Identifier("BufferCapabilities"),
              new Import[] {
                newImport("java.awt.BufferCapabilities", false),
              })
          .put(
              new Identifier("previousDouble"),
              new Import[] {
                newImport("java.text.ChoiceFormat.previousDouble", true),
              })
          .put(
              new Identifier("SCROLLBAR"),
              new Import[] {
                newImport("java.awt.SystemColor.SCROLLBAR", true),
              })
          .put(
              new Identifier("PrintServiceAttribute"),
              new Import[] {
                newImport("javax.print.attribute.PrintServiceAttribute", false),
              })
          .put(
              new Identifier("ParameterMetaData"),
              new Import[] {
                newImport("java.sql.ParameterMetaData", false),
              })
          .put(
              new Identifier("NoSuchElementException"),
              new Import[] {
                newImport("java.util.NoSuchElementException", false),
              })
          .put(
              new Identifier("MetalDesktopIconUI"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalDesktopIconUI", false),
              })
          .put(
              new Identifier("deleteNextWordAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.deleteNextWordAction", true),
              })
          .put(
              new Identifier("XAER_DUPID"),
              new Import[] {
                newImport("javax.transaction.xa.XAException.XAER_DUPID", true),
              })
          .put(
              new Identifier("UnionType"),
              new Import[] {
                newImport("javax.lang.model.type.UnionType", false),
              })
          .put(
              new Identifier("copyOfRange"),
              new Import[] {
                newImport("java.util.Arrays.copyOfRange", true),
              })
          .put(
              new Identifier("BasicTextAreaUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicTextAreaUI", false),
              })
          .put(
              new Identifier("AccessibleText"),
              new Import[] {
                newImport("javax.accessibility.AccessibleText", false),
              })
          .put(
              new Identifier("XPathExpressionException"),
              new Import[] {
                newImport("javax.xml.xpath.XPathExpressionException", false),
              })
          .put(
              new Identifier("NamingEnumeration"),
              new Import[] {
                newImport("javax.naming.NamingEnumeration", false),
              })
          .put(
              new Identifier("CONTIGUOUS_TREE_SELECTION"),
              new Import[] {
                newImport("javax.swing.tree.TreeSelectionModel.CONTIGUOUS_TREE_SELECTION", true),
              })
          .put(
              new Identifier("icSigPreview0Tag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigPreview0Tag", true),
              })
          .put(
              new Identifier("CLASS_ATTRIBUTE_PFX"),
              new Import[] {
                newImport("java.util.jar.Pack200.Packer.CLASS_ATTRIBUTE_PFX", true),
              })
          .put(
              new Identifier("VALUE_NONE"),
              new Import[] {
                newImport("javax.imageio.metadata.IIOMetadataFormat.VALUE_NONE", true),
              })
          .put(
              new Identifier("OBJECT_REMOVED"),
              new Import[] {
                newImport("javax.naming.event.NamingEvent.OBJECT_REMOVED", true),
              })
          .put(
              new Identifier("newFactory"),
              new Import[] {
                newImport("javax.sql.rowset.RowSetProvider.newFactory", true),
                newImport("javax.xml.stream.XMLEventFactory.newFactory", true),
                newImport("javax.xml.stream.XMLInputFactory.newFactory", true),
                newImport("javax.xml.stream.XMLOutputFactory.newFactory", true),
              })
          .put(
              new Identifier("ofStrict"),
              new Import[] {
                newImport("java.time.ZonedDateTime.ofStrict", true),
              })
          .put(
              new Identifier("icSigRedColorantTag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigRedColorantTag", true),
              })
          .put(
              new Identifier("mapping"),
              new Import[] {
                newImport("java.util.stream.Collectors.mapping", true),
              })
          .put(
              new Identifier("BLUECOMPONENT"),
              new Import[] {
                newImport("java.awt.color.ICC_ProfileRGB.BLUECOMPONENT", true),
              })
          .put(
              new Identifier("ProfileDataException"),
              new Import[] {
                newImport("java.awt.color.ProfileDataException", false),
              })
          .put(
              new Identifier("VSPACE"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.VSPACE", true),
              })
          .put(
              new Identifier("FileIcon16"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalIconFactory.FileIcon16", false),
              })
          .put(
              new Identifier("AWT_COMPONENT"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.AWT_COMPONENT", true),
              })
          .put(
              new Identifier("THAANA"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.THAANA", true),
              })
          .put(
              new Identifier("InitialContextFactory"),
              new Import[] {
                newImport("javax.naming.spi.InitialContextFactory", false),
              })
          .put(
              new Identifier("SecureDirectoryStream"),
              new Import[] {
                newImport("java.nio.file.SecureDirectoryStream", false),
              })
          .put(
              new Identifier("OutOfMemoryError"),
              new Import[] {
                newImport("java.lang.OutOfMemoryError", false),
              })
          .put(
              new Identifier("TAG_PREP"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_PREP", true),
              })
          .put(
              new Identifier("mapLibraryName"),
              new Import[] {
                newImport("java.lang.System.mapLibraryName", true),
              })
          .put(
              new Identifier("PKCS12Attribute"),
              new Import[] {
                newImport("java.security.PKCS12Attribute", false),
              })
          .put(
              new Identifier("MONARCH"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.MONARCH", true),
              })
          .put(
              new Identifier("ServiceRegistry"),
              new Import[] {
                newImport("javax.imageio.spi.ServiceRegistry", false),
              })
          .put(
              new Identifier("MAP"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.MAP", true),
              })
          .put(
              new Identifier("fragmentHtmlFlavor"),
              new Import[] {
                newImport("java.awt.datatransfer.DataFlavor.fragmentHtmlFlavor", true),
              })
          .put(
              new Identifier("KEY_LOCATION_LEFT"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.KEY_LOCATION_LEFT", true),
              })
          .put(
              new Identifier("RESERVED_UIROLE"),
              new Import[] {
                newImport("javax.print.ServiceUIFactory.RESERVED_UIROLE", true),
              })
          .put(
              new Identifier("MAY"),
              new Import[] {
                newImport("java.util.Calendar.MAY", true),
                newImport("javax.xml.datatype.DatatypeConstants.MAY", true),
              })
          .put(
              new Identifier("HUFFMAN_ONLY"),
              new Import[] {
                newImport("java.util.zip.Deflater.HUFFMAN_ONLY", true),
              })
          .put(
              new Identifier("MAX"),
              new Import[] {
                newImport("java.time.Instant.MAX", true),
                newImport("java.time.LocalDate.MAX", true),
                newImport("java.time.LocalDateTime.MAX", true),
                newImport("java.time.LocalTime.MAX", true),
                newImport("java.time.OffsetDateTime.MAX", true),
                newImport("java.time.OffsetTime.MAX", true),
                newImport("java.time.ZoneOffset.MAX", true),
              })
          .put(
              new Identifier("WebService"),
              new Import[] {
                newImport("javax.jws.WebService", false),
              })
          .put(
              new Identifier("NO_ORIENTATION"),
              new Import[] {
                newImport("java.awt.Adjustable.NO_ORIENTATION", true),
              })
          .put(
              new Identifier("MulticastChannel"),
              new Import[] {
                newImport("java.nio.channels.MulticastChannel", false),
              })
          .put(
              new Identifier("BindingHolder"),
              new Import[] {
                newImport("org.omg.CosNaming.BindingHolder", false),
              })
          .put(
              new Identifier("BeanContextMembershipListener"),
              new Import[] {
                newImport("java.beans.beancontext.BeanContextMembershipListener", false),
              })
          .put(
              new Identifier("CHILD_POLICY_REPEAT"),
              new Import[] {
                newImport("javax.imageio.metadata.IIOMetadataFormat.CHILD_POLICY_REPEAT", true),
              })
          .put(
              new Identifier("ISO_DATE"),
              new Import[] {
                newImport("java.time.format.DateTimeFormatter.ISO_DATE", true),
              })
          .put(
              new Identifier("ULongSeqHolder"),
              new Import[] {
                newImport("org.omg.CORBA.ULongSeqHolder", false),
              })
          .put(
              new Identifier("PAUSE"),
              new Import[] {
                newImport("java.awt.Event.PAUSE", true),
              })
          .put(
              new Identifier("FORMAT_FAILURE"),
              new Import[] {
                newImport("java.util.logging.ErrorManager.FORMAT_FAILURE", true),
              })
          .put(
              new Identifier("RELATIVE"),
              new Import[] {
                newImport("java.awt.GridBagConstraints.RELATIVE", true),
              })
          .put(
              new Identifier("Activator"),
              new Import[] {
                newImport("java.rmi.activation.Activator", false),
              })
          .put(
              new Identifier("InconsistentTypeCodeHelper"),
              new Import[] {
                newImport(
                    "org.omg.DynamicAny.DynAnyFactoryPackage.InconsistentTypeCodeHelper", false),
              })
          .put(
              new Identifier("ResolverStyle"),
              new Import[] {
                newImport("java.time.format.ResolverStyle", false),
              })
          .put(
              new Identifier("Style"),
              new Import[] {
                newImport("javax.jws.soap.SOAPBinding.Style", false),
                newImport("javax.swing.text.Style", false),
              })
          .put(
              new Identifier("INFO_TEXT"),
              new Import[] {
                newImport("java.awt.SystemColor.INFO_TEXT", true),
              })
          .put(
              new Identifier("ATTRIBUTE_RUN"),
              new Import[] {
                newImport("javax.accessibility.AccessibleExtendedText.ATTRIBUTE_RUN", true),
              })
          .put(
              new Identifier("ROWSET_SYNC_PROVIDER_VERSION"),
              new Import[] {
                newImport("javax.sql.rowset.spi.SyncFactory.ROWSET_SYNC_PROVIDER_VERSION", true),
              })
          .put(
              new Identifier("getWindowTitleBackground"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleBackground", true),
              })
          .put(
              new Identifier("XMLParseException"),
              new Import[] {
                newImport("javax.management.modelmbean.XMLParseException", false),
              })
          .put(
              new Identifier("dk_all"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind.dk_all", true),
              })
          .put(
              new Identifier("TimerMBean"),
              new Import[] {
                newImport("javax.management.timer.TimerMBean", false),
              })
          .put(
              new Identifier("SPECIALS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.SPECIALS", true),
              })
          .put(
              new Identifier("MEMBER_OF_PROPERTY"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRelation.MEMBER_OF_PROPERTY", true),
              })
          .put(
              new Identifier("getDirectionality"),
              new Import[] {
                newImport("java.lang.Character.getDirectionality", true),
              })
          .put(
              new Identifier("FormatMismatch"),
              new Import[] {
                newImport("org.omg.IOP.CodecPackage.FormatMismatch", false),
              })
          .put(
              new Identifier("TextEvent"),
              new Import[] {
                newImport("java.awt.event.TextEvent", false),
              })
          .put(
              new Identifier("SELECTED_FILES_CHANGED_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JFileChooser.SELECTED_FILES_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("INACTIVE_CAPTION_BORDER"),
              new Import[] {
                newImport("java.awt.SystemColor.INACTIVE_CAPTION_BORDER", true),
              })
          .put(
              new Identifier("NotEmptyHolder"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextPackage.NotEmptyHolder", false),
              })
          .put(
              new Identifier("JAXB_SCHEMA_LOCATION"),
              new Import[] {
                newImport("javax.xml.bind.Marshaller.JAXB_SCHEMA_LOCATION", true),
              })
          .put(
              new Identifier("CodecFactoryHelper"),
              new Import[] {
                newImport("org.omg.IOP.CodecFactoryHelper", false),
              })
          .put(
              new Identifier("ImageConsumer"),
              new Import[] {
                newImport("java.awt.image.ImageConsumer", false),
              })
          .put(
              new Identifier("getContinuationDirContext"),
              new Import[] {
                newImport("javax.naming.spi.DirectoryManager.getContinuationDirContext", true),
              })
          .put(
              new Identifier("DARK"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalIconFactory.DARK", true),
              })
          .put(
              new Identifier("COPY"),
              new Import[] {
                newImport("javax.swing.TransferHandler.COPY", true),
              })
          .put(
              new Identifier("PENDING_HELD"),
              new Import[] {
                newImport("javax.print.attribute.standard.JobState.PENDING_HELD", true),
              })
          .put(
              new Identifier("TreeMap"),
              new Import[] {
                newImport("java.util.TreeMap", false),
              })
          .put(
              new Identifier("icXYZNumberX"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icXYZNumberX", true),
              })
          .put(
              new Identifier("FontFormatException"),
              new Import[] {
                newImport("java.awt.FontFormatException", false),
              })
          .put(
              new Identifier("COLOR_CHOOSER_DIALOG"),
              new Import[] {
                newImport("javax.swing.JRootPane.COLOR_CHOOSER_DIALOG", true),
              })
          .put(
              new Identifier("TreePath"),
              new Import[] {
                newImport("javax.swing.tree.TreePath", false),
              })
          .put(
              new Identifier("TAG_CFF"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_CFF", true),
              })
          .put(
              new Identifier("DefaultColorSelectionModel"),
              new Import[] {
                newImport("javax.swing.colorchooser.DefaultColorSelectionModel", false),
              })
          .put(
              new Identifier("ICC_ProfileGray"),
              new Import[] {
                newImport("java.awt.color.ICC_ProfileGray", false),
              })
          .put(
              new Identifier("MOUSE_DRAGGED"),
              new Import[] {
                newImport("java.awt.event.MouseEvent.MOUSE_DRAGGED", true),
              })
          .put(
              new Identifier("Keymap"),
              new Import[] {
                newImport("javax.swing.text.Keymap", false),
              })
          .put(
              new Identifier("BLOB"),
              new Import[] {
                newImport("java.sql.Types.BLOB", true),
              })
          .put(
              new Identifier("DefaultTableColumnModel"),
              new Import[] {
                newImport("javax.swing.table.DefaultTableColumnModel", false),
              })
          .put(
              new Identifier("PHONETIC_EXTENSIONS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.PHONETIC_EXTENSIONS", true),
              })
          .put(
              new Identifier("MODEL_CHANGED_PROPERTY"),
              new Import[] {
                newImport("javax.swing.AbstractButton.MODEL_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("_UNIQUE_ID"),
              new Import[] {
                newImport("org.omg.PortableServer.IdUniquenessPolicyValue._UNIQUE_ID", true),
              })
          .put(
              new Identifier("DES_EDE_KEY_LEN"),
              new Import[] {
                newImport("javax.crypto.spec.DESedeKeySpec.DES_EDE_KEY_LEN", true),
              })
          .put(
              new Identifier("SMALL_KEY"),
              new Import[] {
                newImport("javax.swing.plaf.nimbus.NimbusStyle.SMALL_KEY", true),
              })
          .put(
              new Identifier("FocusEvent"),
              new Import[] {
                newImport("java.awt.event.FocusEvent", false),
              })
          .put(
              new Identifier("DropTargetAutoScroller"),
              new Import[] {
                newImport("java.awt.dnd.DropTarget.DropTargetAutoScroller", false),
              })
          .put(
              new Identifier("JAXWSPROVIDER_PROPERTY"),
              new Import[] {
                newImport("javax.xml.ws.spi.Provider.JAXWSPROVIDER_PROPERTY", true),
              })
          .put(
              new Identifier("BINARY_STREAM_PARAM"),
              new Import[] {
                newImport("javax.sql.rowset.BaseRowSet.BINARY_STREAM_PARAM", true),
              })
          .put(
              new Identifier("LEAD_HYPHENS"),
              new Import[] {
                newImport("javax.swing.text.TabStop.LEAD_HYPHENS", true),
              })
          .put(
              new Identifier("SkeletonMismatchException"),
              new Import[] {
                newImport("java.rmi.server.SkeletonMismatchException", false),
              })
          .put(
              new Identifier("EPOCH"),
              new Import[] {
                newImport("java.time.Instant.EPOCH", true),
              })
          .put(
              new Identifier("DAY_OF_QUARTER"),
              new Import[] {
                newImport("java.time.temporal.IsoFields.DAY_OF_QUARTER", true),
              })
          .put(
              new Identifier("zoneId"),
              new Import[] {
                newImport("java.time.temporal.TemporalQueries.zoneId", true),
              })
          .put(
              new Identifier("isIdentifierIgnorable"),
              new Import[] {
                newImport("java.lang.Character.isIdentifierIgnorable", true),
              })
          .put(
              new Identifier("ElementType"),
              new Import[] {
                newImport("java.lang.annotation.ElementType", false),
              })
          .put(
              new Identifier("JMXConnectorProvider"),
              new Import[] {
                newImport("javax.management.remote.JMXConnectorProvider", false),
              })
          .put(
              new Identifier("SOMEBITS"),
              new Import[] {
                newImport("java.awt.image.ImageObserver.SOMEBITS", true),
              })
          .put(
              new Identifier("offset"),
              new Import[] {
                newImport("java.time.Clock.offset", true),
                newImport("java.time.temporal.TemporalQueries.offset", true),
              })
          .put(
              new Identifier("_opsClass"),
              new Import[] {
                newImport("org.omg.DynamicAny._DynAnyFactoryStub._opsClass", true),
                newImport("org.omg.DynamicAny._DynAnyStub._opsClass", true),
                newImport("org.omg.DynamicAny._DynArrayStub._opsClass", true),
                newImport("org.omg.DynamicAny._DynEnumStub._opsClass", true),
                newImport("org.omg.DynamicAny._DynFixedStub._opsClass", true),
                newImport("org.omg.DynamicAny._DynSequenceStub._opsClass", true),
                newImport("org.omg.DynamicAny._DynStructStub._opsClass", true),
                newImport("org.omg.DynamicAny._DynUnionStub._opsClass", true),
                newImport("org.omg.DynamicAny._DynValueStub._opsClass", true),
                newImport("org.omg.PortableServer._ServantActivatorStub._opsClass", true),
                newImport("org.omg.PortableServer._ServantLocatorStub._opsClass", true),
              })
          .put(
              new Identifier("BasicPasswordFieldUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicPasswordFieldUI", false),
              })
          .put(
              new Identifier("CharSequence"),
              new Import[] {
                newImport("java.lang.CharSequence", false),
              })
          .put(
              new Identifier("EXPANDED"),
              new Import[] {
                newImport("javax.accessibility.AccessibleState.EXPANDED", true),
              })
          .put(
              new Identifier("MemoryCacheImageInputStream"),
              new Import[] {
                newImport("javax.imageio.stream.MemoryCacheImageInputStream", false),
              })
          .put(
              new Identifier("DATE"),
              new Import[] {
                newImport("java.sql.Types.DATE", true),
                newImport("java.util.Calendar.DATE", true),
                newImport("javax.management.openmbean.SimpleType.DATE", true),
                newImport("javax.xml.datatype.DatatypeConstants.DATE", true),
              })
          .put(
              new Identifier("unmodifiableList"),
              new Import[] {
                newImport("java.util.Collections.unmodifiableList", true),
              })
          .put(
              new Identifier("STAPLE_DUAL_RIGHT"),
              new Import[] {
                newImport("javax.print.attribute.standard.Finishings.STAPLE_DUAL_RIGHT", true),
              })
          .put(
              new Identifier("MAX_TIMEZONE_OFFSET"),
              new Import[] {
                newImport("javax.xml.datatype.DatatypeConstants.MAX_TIMEZONE_OFFSET", true),
              })
          .put(
              new Identifier("STANDARD_TIME"),
              new Import[] {
                newImport("java.util.SimpleTimeZone.STANDARD_TIME", true),
              })
          .put(
              new Identifier("SoundbankResource"),
              new Import[] {
                newImport("javax.sound.midi.SoundbankResource", false),
              })
          .put(
              new Identifier("DATA"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.DATA", true),
              })
          .put(
              new Identifier("SUCCESSFUL"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.SUCCESSFUL", false),
              })
          .put(
              new Identifier("PKIXCertPathValidatorResult"),
              new Import[] {
                newImport("java.security.cert.PKIXCertPathValidatorResult", false),
              })
          .put(
              new Identifier("PrintRequestAttribute"),
              new Import[] {
                newImport("javax.print.attribute.PrintRequestAttribute", false),
              })
          .put(
              new Identifier("POLICY_NOACTIVE"),
              new Import[] {
                newImport("javax.security.sasl.Sasl.POLICY_NOACTIVE", true),
              })
          .put(
              new Identifier("MultipleComponentProfileHolder"),
              new Import[] {
                newImport("org.omg.IOP.MultipleComponentProfileHolder", false),
              })
          .put(
              new Identifier("getUrlDecoder"),
              new Import[] {
                newImport("java.util.Base64.getUrlDecoder", true),
              })
          .put(
              new Identifier("PASSWORD_TEXT"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.PASSWORD_TEXT", true),
              })
          .put(
              new Identifier("SynthTextFieldUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthTextFieldUI", false),
              })
          .put(
              new Identifier("TAGALOG"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.TAGALOG", true),
              })
          .put(
              new Identifier("Category"),
              new Import[] {
                newImport("java.util.Locale.Category", false),
              })
          .put(
              new Identifier("MONOSPACED"),
              new Import[] {
                newImport("java.awt.Font.MONOSPACED", true),
              })
          .put(
              new Identifier("Pack200"),
              new Import[] {
                newImport("java.util.jar.Pack200", false),
              })
          .put(
              new Identifier("setFlashTime"),
              new Import[] {
                newImport("javax.swing.DebugGraphics.setFlashTime", true),
              })
          .put(
              new Identifier("BasicInternalFrameUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicInternalFrameUI", false),
              })
          .put(
              new Identifier("RFC_1123_DATE_TIME"),
              new Import[] {
                newImport("java.time.format.DateTimeFormatter.RFC_1123_DATE_TIME", true),
              })
          .put(
              new Identifier("URISyntaxException"),
              new Import[] {
                newImport("java.net.URISyntaxException", false),
              })
          .put(
              new Identifier("JTextField"),
              new Import[] {
                newImport("javax.swing.JTextField", false),
              })
          .put(
              new Identifier("COLSPAN"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.COLSPAN", true),
              })
          .put(
              new Identifier("distanceSq"),
              new Import[] {
                newImport("java.awt.geom.Point2D.distanceSq", true),
              })
          .put(
              new Identifier("DIRECTORIES_ONLY"),
              new Import[] {
                newImport("javax.swing.JFileChooser.DIRECTORIES_ONLY", true),
              })
          .put(
              new Identifier("foldArguments"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandles.foldArguments", true),
              })
          .put(
              new Identifier("SortControl"),
              new Import[] {
                newImport("javax.naming.ldap.SortControl", false),
              })
          .put(
              new Identifier("POSTURE"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.POSTURE", true),
              })
          .put(
              new Identifier("HEADER_ROW"),
              new Import[] {
                newImport("javax.swing.event.TableModelEvent.HEADER_ROW", true),
              })
          .put(
              new Identifier("XAER_ASYNC"),
              new Import[] {
                newImport("javax.transaction.xa.XAException.XAER_ASYNC", true),
              })
          .put(
              new Identifier("NOTE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.NOTE", true),
              })
          .put(
              new Identifier("STOPPED"),
              new Import[] {
                newImport("javax.print.attribute.standard.PrinterState.STOPPED", true),
              })
          .put(
              new Identifier("LINE"),
              new Import[] {
                newImport("javax.accessibility.AccessibleExtendedText.LINE", true),
              })
          .put(
              new Identifier("BootstrapMethodError"),
              new Import[] {
                newImport("java.lang.BootstrapMethodError", false),
              })
          .put(
              new Identifier("LINK"),
              new Import[] {
                newImport("javax.swing.TransferHandler.LINK", true),
                newImport("javax.swing.text.html.HTML.Attribute.LINK", true),
                newImport("javax.swing.text.html.HTML.Tag.LINK", true),
              })
          .put(
              new Identifier("ColorSelectionModel"),
              new Import[] {
                newImport("javax.swing.colorchooser.ColorSelectionModel", false),
              })
          .put(
              new Identifier("icSigAToB0Tag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigAToB0Tag", true),
              })
          .put(
              new Identifier("LongBuffer"),
              new Import[] {
                newImport("java.nio.LongBuffer", false),
              })
          .put(
              new Identifier("SEVERE"),
              new Import[] {
                newImport("java.util.logging.Level.SEVERE", true),
              })
          .put(
              new Identifier("VERTICAL_SCROLLBAR_ALWAYS"),
              new Import[] {
                newImport("javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS", true),
              })
          .put(
              new Identifier("WINDOW_ICONIFY"),
              new Import[] {
                newImport("java.awt.Event.WINDOW_ICONIFY", true),
              })
          .put(
              new Identifier("ObjectOutput"),
              new Import[] {
                newImport("java.io.ObjectOutput", false),
              })
          .put(
              new Identifier("NamingContextPOA"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextPOA", false),
              })
          .put(
              new Identifier("ReplicateScaleFilter"),
              new Import[] {
                newImport("java.awt.image.ReplicateScaleFilter", false),
              })
          .put(
              new Identifier("command"),
              new Import[] {
                newImport("java.lang.Compiler.command", true),
              })
          .put(
              new Identifier("FILE_FILTER_CHANGED_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JFileChooser.FILE_FILTER_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("Desktop"),
              new Import[] {
                newImport("java.awt.Desktop", false),
              })
          .put(
              new Identifier("TimeLimitExceededException"),
              new Import[] {
                newImport("javax.naming.TimeLimitExceededException", false),
              })
          .put(
              new Identifier("highestOneBit"),
              new Import[] {
                newImport("java.lang.Integer.highestOneBit", true),
                newImport("java.lang.Long.highestOneBit", true),
              })
          .put(
              new Identifier("RowSetMetaDataImpl"),
              new Import[] {
                newImport("javax.sql.rowset.RowSetMetaDataImpl", false),
              })
          .build();
}
