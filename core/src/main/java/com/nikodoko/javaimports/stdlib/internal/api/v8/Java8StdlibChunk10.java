// Code generated by GenerateStdlib.java. DO NOT EDIT.
package com.nikodoko.javaimports.stdlib.internal.api.v8;

import static com.nikodoko.javaimports.stdlib.internal.Stdlib.newImport;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.common.Identifier;
import com.nikodoko.javaimports.common.Import;
import java.util.Map;

public class Java8StdlibChunk10 {
  static final Map<Identifier, Import[]> CLASSES =
      new ImmutableMap.Builder<Identifier, Import[]>()
          .put(
              new Identifier("TAG_OS2"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_OS2", true),
              })
          .put(
              new Identifier("PrintJobAttribute"),
              new Import[] {
                newImport("javax.print.attribute.PrintJobAttribute", false),
              })
          .put(
              new Identifier("DOMSource"),
              new Import[] {
                newImport("javax.xml.transform.dom.DOMSource", false),
              })
          .put(
              new Identifier("Subset"),
              new Import[] {
                newImport("java.lang.Character.Subset", false),
              })
          .put(
              new Identifier("BORDER_COLOR"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.BORDER_COLOR", true),
              })
          .put(
              new Identifier("MIDNIGHT"),
              new Import[] {
                newImport("java.time.LocalTime.MIDNIGHT", true),
              })
          .put(
              new Identifier("DynAnyHelper"),
              new Import[] {
                newImport("org.omg.DynamicAny.DynAnyHelper", false),
              })
          .put(
              new Identifier("CertSelector"),
              new Import[] {
                newImport("java.security.cert.CertSelector", false),
              })
          .put(
              new Identifier("NT_MACHINE_UID_NAME"),
              new Import[] {
                newImport("org.ietf.jgss.GSSName.NT_MACHINE_UID_NAME", true),
              })
          .put(
              new Identifier("DocAttributeSet"),
              new Import[] {
                newImport("javax.print.attribute.DocAttributeSet", false),
              })
          .put(
              new Identifier("MARGIN_BOTTOM"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.MARGIN_BOTTOM", true),
              })
          .put(
              new Identifier("RenderableImage"),
              new Import[] {
                newImport("java.awt.image.renderable.RenderableImage", false),
              })
          .put(
              new Identifier("UnknownGroupException"),
              new Import[] {
                newImport("java.rmi.activation.UnknownGroupException", false),
              })
          .put(
              new Identifier("tk_null"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind.tk_null", true),
              })
          .put(
              new Identifier("DIRECTIONALITY_BOUNDARY_NEUTRAL"),
              new Import[] {
                newImport("java.lang.Character.DIRECTIONALITY_BOUNDARY_NEUTRAL", true),
              })
          .put(
              new Identifier("Background"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.Background", true),
              })
          .put(
              new Identifier("IIOReadWarningListener"),
              new Import[] {
                newImport("javax.imageio.event.IIOReadWarningListener", false),
              })
          .put(
              new Identifier("getByIndex"),
              new Import[] {
                newImport("java.net.NetworkInterface.getByIndex", true),
              })
          .put(
              new Identifier("newScheduledThreadPool"),
              new Import[] {
                newImport("java.util.concurrent.Executors.newScheduledThreadPool", true),
              })
          .put(
              new Identifier("INTERPRETER_RESOURCE_UNAVAILABLE"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.PrinterStateReason.INTERPRETER_RESOURCE_UNAVAILABLE",
                    true),
              })
          .put(
              new Identifier("CRLSelector"),
              new Import[] {
                newImport("java.security.cert.CRLSelector", false),
              })
          .put(
              new Identifier("SocketTimeoutException"),
              new Import[] {
                newImport("java.net.SocketTimeoutException", false),
              })
          .put(
              new Identifier("CertPathRep"),
              new Import[] {
                newImport("java.security.cert.CertPath.CertPathRep", false),
              })
          .put(
              new Identifier("_tk_wstring"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind._tk_wstring", true),
              })
          .put(
              new Identifier("URISchemeNotSupported"),
              new Import[] {
                newImport("javax.print.URIException.URISchemeNotSupported", true),
              })
          .put(
              new Identifier("PAGE_START"),
              new Import[] {
                newImport("java.awt.BorderLayout.PAGE_START", true),
                newImport("java.awt.GridBagConstraints.PAGE_START", true),
              })
          .put(
              new Identifier("ZoneRules"),
              new Import[] {
                newImport("java.time.zone.ZoneRules", false),
              })
          .put(
              new Identifier("EndOfLineStringProperty"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.EndOfLineStringProperty", true),
              })
          .put(
              new Identifier("_tk_char"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind._tk_char", true),
              })
          .put(
              new Identifier("IMAGE_INCOMPATIBLE"),
              new Import[] {
                newImport("java.awt.image.VolatileImage.IMAGE_INCOMPATIBLE", true),
              })
          .put(
              new Identifier("REJANG"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.REJANG", true),
              })
          .put(
              new Identifier("LongSeqHolder"),
              new Import[] {
                newImport("org.omg.CORBA.LongSeqHolder", false),
              })
          .put(
              new Identifier("ElementIterator"),
              new Import[] {
                newImport("javax.swing.text.ElementIterator", false),
              })
          .put(
              new Identifier("solveCubic"),
              new Import[] {
                newImport("java.awt.geom.CubicCurve2D.solveCubic", true),
              })
          .put(
              new Identifier("LITTLE_ENDIAN"),
              new Import[] {
                newImport("java.nio.ByteOrder.LITTLE_ENDIAN", true),
              })
          .put(
              new Identifier("createUIs"),
              new Import[] {
                newImport("javax.swing.plaf.multi.MultiLookAndFeel.createUIs", true),
              })
          .put(
              new Identifier("LOCVER"),
              new Import[] {
                newImport("java.util.jar.JarEntry.LOCVER", true),
                newImport("java.util.jar.JarFile.LOCVER", true),
                newImport("java.util.jar.JarInputStream.LOCVER", true),
                newImport("java.util.jar.JarOutputStream.LOCVER", true),
                newImport("java.util.zip.ZipEntry.LOCVER", true),
                newImport("java.util.zip.ZipFile.LOCVER", true),
                newImport("java.util.zip.ZipInputStream.LOCVER", true),
                newImport("java.util.zip.ZipOutputStream.LOCVER", true),
              })
          .put(
              new Identifier("UNIQUE_ID"),
              new Import[] {
                newImport("org.omg.PortableServer.IdUniquenessPolicyValue.UNIQUE_ID", true),
              })
          .put(
              new Identifier("VK_ALL_CANDIDATES"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_ALL_CANDIDATES", true),
              })
          .put(
              new Identifier("AEADBadTagException"),
              new Import[] {
                newImport("javax.crypto.AEADBadTagException", false),
              })
          .put(
              new Identifier("HashPrintServiceAttributeSet"),
              new Import[] {
                newImport("javax.print.attribute.HashPrintServiceAttributeSet", false),
              })
          .put(
              new Identifier("LINE_HEIGHT"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.LINE_HEIGHT", true),
              })
          .put(
              new Identifier("getSyncFactory"),
              new Import[] {
                newImport("javax.sql.rowset.spi.SyncFactory.getSyncFactory", true),
              })
          .put(
              new Identifier("tk_short"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind.tk_short", true),
              })
          .put(
              new Identifier("URI_SOAP_1_2_ROLE_NEXT"),
              new Import[] {
                newImport("javax.xml.soap.SOAPConstants.URI_SOAP_1_2_ROLE_NEXT", true),
              })
          .put(
              new Identifier("PrinterResolution"),
              new Import[] {
                newImport("javax.print.attribute.standard.PrinterResolution", false),
              })
          .put(
              new Identifier("RSAPrivateKeySpec"),
              new Import[] {
                newImport("java.security.spec.RSAPrivateKeySpec", false),
              })
          .put(
              new Identifier("VK_PLUS"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_PLUS", true),
              })
          .put(
              new Identifier("requireNonNull"),
              new Import[] {
                newImport("java.util.Objects.requireNonNull", true),
              })
          .put(
              new Identifier("TT_NUMBER"),
              new Import[] {
                newImport("java.io.StreamTokenizer.TT_NUMBER", true),
              })
          .put(
              new Identifier("synchronizedList"),
              new Import[] {
                newImport("java.util.Collections.synchronizedList", true),
              })
          .put(
              new Identifier("SchemaViolationException"),
              new Import[] {
                newImport("javax.naming.directory.SchemaViolationException", false),
              })
          .put(
              new Identifier("TableRowSorter"),
              new Import[] {
                newImport("javax.swing.table.TableRowSorter", false),
              })
          .put(
              new Identifier("FileCacheImageOutputStream"),
              new Import[] {
                newImport("javax.imageio.stream.FileCacheImageOutputStream", false),
              })
          .put(
              new Identifier("HTTP_RESPONSE_CODE"),
              new Import[] {
                newImport("javax.xml.ws.handler.MessageContext.HTTP_RESPONSE_CODE", true),
              })
          .put(
              new Identifier("Context"),
              new Import[] {
                newImport("javax.naming.Context", false), newImport("org.omg.CORBA.Context", false),
              })
          .put(
              new Identifier("SOAP_1_2_CONTENT_TYPE"),
              new Import[] {
                newImport("javax.xml.soap.SOAPConstants.SOAP_1_2_CONTENT_TYPE", true),
              })
          .put(
              new Identifier("getLastModifiedTime"),
              new Import[] {
                newImport("java.nio.file.Files.getLastModifiedTime", true),
              })
          .put(
              new Identifier("PrinterLocation"),
              new Import[] {
                newImport("javax.print.attribute.standard.PrinterLocation", false),
              })
          .put(
              new Identifier("QueuedJobCount"),
              new Import[] {
                newImport("javax.print.attribute.standard.QueuedJobCount", false),
              })
          .put(
              new Identifier("DynFixedOperations"),
              new Import[] {
                newImport("org.omg.DynamicAny.DynFixedOperations", false),
              })
          .put(
              new Identifier("defaultThreadFactory"),
              new Import[] {
                newImport("java.util.concurrent.Executors.defaultThreadFactory", true),
              })
          .put(
              new Identifier("TreeSelectionEvent"),
              new Import[] {
                newImport("javax.swing.event.TreeSelectionEvent", false),
              })
          .put(
              new Identifier("JOB_TRANSFORMING"),
              new Import[] {
                newImport("javax.print.attribute.standard.JobStateReason.JOB_TRANSFORMING", true),
              })
          .put(
              new Identifier("CLASS_ABSTRACT"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.CLASS_ABSTRACT", true),
              })
          .put(
              new Identifier("getCommonPoolParallelism"),
              new Import[] {
                newImport("java.util.concurrent.ForkJoinPool.getCommonPoolParallelism", true),
              })
          .put(
              new Identifier("setAlignment"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.setAlignment", true),
              })
          .put(
              new Identifier("SingleSelectionModel"),
              new Import[] {
                newImport("javax.swing.SingleSelectionModel", false),
              })
          .put(
              new Identifier("InvalidSlotHelper"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.InvalidSlotHelper", false),
              })
          .put(
              new Identifier("ComponentColorModel"),
              new Import[] {
                newImport("java.awt.image.ComponentColorModel", false),
              })
          .put(
              new Identifier("functionColumnIn"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.functionColumnIn", true),
              })
          .put(
              new Identifier("JOB_QUEUED"),
              new Import[] {
                newImport("javax.print.attribute.standard.JobStateReason.JOB_QUEUED", true),
              })
          .put(
              new Identifier("DATA_CONVERSION"),
              new Import[] {
                newImport("org.omg.CORBA.DATA_CONVERSION", false),
              })
          .put(
              new Identifier("setShort"),
              new Import[] {
                newImport("java.lang.reflect.Array.setShort", true),
              })
          .put(
              new Identifier("getTimeInstance"),
              new Import[] {
                newImport("java.text.DateFormat.getTimeInstance", true),
              })
          .put(
              new Identifier("TitledBorder"),
              new Import[] {
                newImport("javax.swing.border.TitledBorder", false),
              })
          .put(
              new Identifier("DelayQueue"),
              new Import[] {
                newImport("java.util.concurrent.DelayQueue", false),
              })
          .put(
              new Identifier("DateTimeAtCompleted"),
              new Import[] {
                newImport("javax.print.attribute.standard.DateTimeAtCompleted", false),
              })
          .put(
              new Identifier("Ellipse2D"),
              new Import[] {
                newImport("java.awt.geom.Ellipse2D", false),
              })
          .put(
              new Identifier("IGNORE_ALL_BEANINFO"),
              new Import[] {
                newImport("java.beans.Introspector.IGNORE_ALL_BEANINFO", true),
              })
          .put(
              new Identifier("SaslClient"),
              new Import[] {
                newImport("javax.security.sasl.SaslClient", false),
              })
          .put(
              new Identifier("DEFECTIVE_TOKEN"),
              new Import[] {
                newImport("org.ietf.jgss.GSSException.DEFECTIVE_TOKEN", true),
              })
          .put(
              new Identifier("DynValueCommonOperations"),
              new Import[] {
                newImport("org.omg.DynamicAny.DynValueCommonOperations", false),
              })
          .put(
              new Identifier("PageFormat"),
              new Import[] {
                newImport("java.awt.print.PageFormat", false),
              })
          .put(
              new Identifier("LIMBU"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.LIMBU", true),
              })
          .put(
              new Identifier("BasicToolTipUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicToolTipUI", false),
              })
          .put(
              new Identifier("JToggleButton"),
              new Import[] {
                newImport("javax.swing.JToggleButton", false),
              })
          .put(
              new Identifier("DefaultCaret"),
              new Import[] {
                newImport("javax.swing.text.DefaultCaret", false),
              })
          .put(
              new Identifier("NORTH"),
              new Import[] {
                newImport("java.awt.BorderLayout.NORTH", true),
                newImport("java.awt.GridBagConstraints.NORTH", true),
                newImport("javax.swing.SpringLayout.NORTH", true),
                newImport("javax.swing.SwingConstants.NORTH", true),
              })
          .put(
              new Identifier("JobImpressions"),
              new Import[] {
                newImport("javax.print.attribute.standard.JobImpressions", false),
              })
          .put(
              new Identifier("singletonMap"),
              new Import[] {
                newImport("java.util.Collections.singletonMap", true),
              })
          .put(
              new Identifier("XMLFilterImpl"),
              new Import[] {
                newImport("org.xml.sax.helpers.XMLFilterImpl", false),
              })
          .put(
              new Identifier("DynAnyOperations"),
              new Import[] {
                newImport("org.omg.DynamicAny.DynAnyOperations", false),
              })
          .put(
              new Identifier("VALUE_ANTIALIAS_DEFAULT"),
              new Import[] {
                newImport("java.awt.RenderingHints.VALUE_ANTIALIAS_DEFAULT", true),
              })
          .put(
              new Identifier("AsynchronousChannel"),
              new Import[] {
                newImport("java.nio.channels.AsynchronousChannel", false),
              })
          .put(
              new Identifier("XmlElementWrapper"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlElementWrapper", false),
              })
          .put(
              new Identifier("HashSet"),
              new Import[] {
                newImport("java.util.HashSet", false),
              })
          .put(
              new Identifier("SORTED"),
              new Import[] {
                newImport("java.util.Spliterator.SORTED", true),
              })
          .put(
              new Identifier("AbstractList"),
              new Import[] {
                newImport("java.util.AbstractList", false),
              })
          .put(
              new Identifier("RESIZE_WEIGHT_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JSplitPane.RESIZE_WEIGHT_PROPERTY", true),
              })
          .put(
              new Identifier("SURROGATE"),
              new Import[] {
                newImport("java.lang.Character.SURROGATE", true),
              })
          .put(
              new Identifier("EMPTY_MAP"),
              new Import[] {
                newImport("java.util.Collections.EMPTY_MAP", true),
              })
          .put(
              new Identifier("synchronizedNavigableMap"),
              new Import[] {
                newImport("java.util.Collections.synchronizedNavigableMap", true),
              })
          .put(
              new Identifier("GRADE_CHECK_MODIFIED_AT_COMMIT"),
              new Import[] {
                newImport("javax.sql.rowset.spi.SyncProvider.GRADE_CHECK_MODIFIED_AT_COMMIT", true),
              })
          .put(
              new Identifier("parameterModeUnknown"),
              new Import[] {
                newImport("java.sql.ParameterMetaData.parameterModeUnknown", true),
              })
          .put(
              new Identifier("RequestProcessingPolicy"),
              new Import[] {
                newImport("org.omg.PortableServer.RequestProcessingPolicy", false),
              })
          .put(
              new Identifier("ICON_MONO_32x32"),
              new Import[] {
                newImport("java.beans.BeanInfo.ICON_MONO_32x32", true),
              })
          .put(
              new Identifier("X_AXIS"),
              new Import[] {
                newImport("javax.swing.BoxLayout.X_AXIS", true),
                newImport("javax.swing.text.View.X_AXIS", true),
              })
          .put(
              new Identifier("SynthPanelUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthPanelUI", false),
              })
          .put(
              new Identifier("DISABLED"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthConstants.DISABLED", true),
              })
          .put(
              new Identifier("RGBImageFilter"),
              new Import[] {
                newImport("java.awt.image.RGBImageFilter", false),
              })
          .put(
              new Identifier("BasicTableUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicTableUI", false),
              })
          .put(
              new Identifier("CopiesSupported"),
              new Import[] {
                newImport("javax.print.attribute.standard.CopiesSupported", false),
              })
          .put(
              new Identifier("HORIZONTAL_SCROLLBAR"),
              new Import[] {
                newImport("javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR", true),
              })
          .put(
              new Identifier("DynValueBox"),
              new Import[] {
                newImport("org.omg.DynamicAny.DynValueBox", false),
              })
          .put(
              new Identifier("LONGVARBINARY"),
              new Import[] {
                newImport("java.sql.Types.LONGVARBINARY", true),
              })
          .put(
              new Identifier("BYTE_ARRAY"),
              new Import[] {
                newImport("javax.print.DocFlavor.BYTE_ARRAY", false),
              })
          .put(
              new Identifier("bestRowTemporary"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.bestRowTemporary", true),
              })
          .put(
              new Identifier("AuthenticationNotSupportedException"),
              new Import[] {
                newImport("javax.naming.AuthenticationNotSupportedException", false),
              })
          .put(
              new Identifier("EndpointContext"),
              new Import[] {
                newImport("javax.xml.ws.EndpointContext", false),
              })
          .put(
              new Identifier("BELOW_BASELINE_LEADING"),
              new Import[] {
                newImport("java.awt.GridBagConstraints.BELOW_BASELINE_LEADING", true),
              })
          .put(
              new Identifier("Appendable"),
              new Import[] {
                newImport("java.lang.Appendable", false),
              })
          .put(
              new Identifier("LOCEXT"),
              new Import[] {
                newImport("java.util.jar.JarEntry.LOCEXT", true),
                newImport("java.util.jar.JarFile.LOCEXT", true),
                newImport("java.util.jar.JarInputStream.LOCEXT", true),
                newImport("java.util.jar.JarOutputStream.LOCEXT", true),
                newImport("java.util.zip.ZipEntry.LOCEXT", true),
                newImport("java.util.zip.ZipFile.LOCEXT", true),
                newImport("java.util.zip.ZipInputStream.LOCEXT", true),
                newImport("java.util.zip.ZipOutputStream.LOCEXT", true),
              })
          .put(
              new Identifier("HTTP_LENGTH_REQUIRED"),
              new Import[] {
                newImport("java.net.HttpURLConnection.HTTP_LENGTH_REQUIRED", true),
              })
          .put(
              new Identifier("CookiePolicy"),
              new Import[] {
                newImport("java.net.CookiePolicy", false),
              })
          .put(
              new Identifier("PRIORITY_KASHIDA"),
              new Import[] {
                newImport("java.awt.font.GlyphJustificationInfo.PRIORITY_KASHIDA", true),
              })
          .put(
              new Identifier("TCP_NODELAY"),
              new Import[] {
                newImport("java.net.SocketOptions.TCP_NODELAY", true),
                newImport("java.net.StandardSocketOptions.TCP_NODELAY", true),
              })
          .put(
              new Identifier("replaceAll"),
              new Import[] {
                newImport("java.util.Collections.replaceAll", true),
              })
          .put(
              new Identifier("typePredNone"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.typePredNone", true),
              })
          .put(
              new Identifier("VK_EURO_SIGN"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_EURO_SIGN", true),
              })
          .put(
              new Identifier("MIN_NORMAL"),
              new Import[] {
                newImport("java.lang.Double.MIN_NORMAL", true),
                newImport("java.lang.Float.MIN_NORMAL", true),
              })
          .put(
              new Identifier("PrivilegedAction"),
              new Import[] {
                newImport("java.security.PrivilegedAction", false),
              })
          .put(
              new Identifier("HTTPS"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.ReferenceUriSchemesSupported.HTTPS", true),
              })
          .put(
              new Identifier("WritableRaster"),
              new Import[] {
                newImport("java.awt.image.WritableRaster", false),
              })
          .put(
              new Identifier("imageFlavor"),
              new Import[] {
                newImport("java.awt.datatransfer.DataFlavor.imageFlavor", true),
              })
          .put(
              new Identifier("CTRL_MASK"),
              new Import[] {
                newImport("java.awt.Event.CTRL_MASK", true),
                newImport("java.awt.event.ActionEvent.CTRL_MASK", true),
                newImport("java.awt.event.InputEvent.CTRL_MASK", true),
              })
          .put(
              new Identifier("PixelGrabber"),
              new Import[] {
                newImport("java.awt.image.PixelGrabber", false),
              })
          .put(
              new Identifier("isFinal"),
              new Import[] {
                newImport("java.lang.reflect.Modifier.isFinal", true),
              })
          .put(
              new Identifier("NotIdentifiableEventImpl"),
              new Import[] {
                newImport("javax.xml.bind.helpers.NotIdentifiableEventImpl", false),
              })
          .put(
              new Identifier("ZoneOffsetTransition"),
              new Import[] {
                newImport("java.time.zone.ZoneOffsetTransition", false),
              })
          .put(
              new Identifier("filterTags"),
              new Import[] {
                newImport("java.util.Locale.filterTags", true),
              })
          .put(
              new Identifier("setConfiguration"),
              new Import[] {
                newImport("javax.security.auth.login.Configuration.setConfiguration", true),
              })
          .put(
              new Identifier("MenuDragMouseListener"),
              new Import[] {
                newImport("javax.swing.event.MenuDragMouseListener", false),
              })
          .put(
              new Identifier("SerialArray"),
              new Import[] {
                newImport("javax.sql.rowset.serial.SerialArray", false),
              })
          .put(
              new Identifier("TransformerFactoryConfigurationError"),
              new Import[] {
                newImport("javax.xml.transform.TransformerFactoryConfigurationError", false),
              })
          .put(
              new Identifier("BasicOptionPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicOptionPaneUI", false),
              })
          .put(
              new Identifier("STAPLE_DUAL_TOP"),
              new Import[] {
                newImport("javax.print.attribute.standard.Finishings.STAPLE_DUAL_TOP", true),
              })
          .put(
              new Identifier("createHorizontalGlue"),
              new Import[] {
                newImport("javax.swing.Box.createHorizontalGlue", true),
              })
          .put(
              new Identifier("StreamReaderDelegate"),
              new Import[] {
                newImport("javax.xml.stream.util.StreamReaderDelegate", false),
              })
          .put(
              new Identifier("ExecutorService"),
              new Import[] {
                newImport("java.util.concurrent.ExecutorService", false),
              })
          .put(
              new Identifier("asin"),
              new Import[] {
                newImport("java.lang.Math.asin", true),
                newImport("java.lang.StrictMath.asin", true),
              })
          .put(
              new Identifier("TableStringConverter"),
              new Import[] {
                newImport("javax.swing.table.TableStringConverter", false),
              })
          .put(
              new Identifier("OpenMBeanOperationInfo"),
              new Import[] {
                newImport("javax.management.openmbean.OpenMBeanOperationInfo", false),
              })
          .put(
              new Identifier("XmlAccessType"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlAccessType", false),
              })
          .put(
              new Identifier("PAGE_EXISTS"),
              new Import[] {
                newImport("java.awt.print.Printable.PAGE_EXISTS", true),
              })
          .put(
              new Identifier("icSigProfileDescriptionTag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigProfileDescriptionTag", true),
              })
          .put(
              new Identifier("MalformedURLException"),
              new Import[] {
                newImport("java.net.MalformedURLException", false),
              })
          .put(
              new Identifier("BasicButtonListener"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicButtonListener", false),
              })
          .put(
              new Identifier("CONREF"),
              new Import[] {
                newImport("javax.swing.text.html.parser.DTDConstants.CONREF", true),
              })
          .put(
              new Identifier("MatteBorderUIResource"),
              new Import[] {
                newImport("javax.swing.plaf.BorderUIResource.MatteBorderUIResource", false),
              })
          .put(
              new Identifier("FILE_HIDING_CHANGED_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JFileChooser.FILE_HIDING_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("JFrame"),
              new Import[] {
                newImport("javax.swing.JFrame", false),
              })
          .put(
              new Identifier("getAWTKeyStrokeForEvent"),
              new Import[] {
                newImport("java.awt.AWTKeyStroke.getAWTKeyStrokeForEvent", true),
              })
          .put(
              new Identifier("SOUTH"),
              new Import[] {
                newImport("java.awt.BorderLayout.SOUTH", true),
                newImport("java.awt.GridBagConstraints.SOUTH", true),
                newImport("javax.swing.SpringLayout.SOUTH", true),
                newImport("javax.swing.SwingConstants.SOUTH", true),
              })
          .put(
              new Identifier("Vector"),
              new Import[] {
                newImport("java.util.Vector", false),
              })
          .put(
              new Identifier("PREFERRED_SIZE"),
              new Import[] {
                newImport("javax.swing.GroupLayout.PREFERRED_SIZE", true),
              })
          .put(
              new Identifier("TYPE_SCROLL_SENSITIVE"),
              new Import[] {
                newImport("java.sql.ResultSet.TYPE_SCROLL_SENSITIVE", true),
              })
          .put(
              new Identifier("TreeExpansionEvent"),
              new Import[] {
                newImport("javax.swing.event.TreeExpansionEvent", false),
              })
          .put(
              new Identifier("createDirectories"),
              new Import[] {
                newImport("java.nio.file.Files.createDirectories", true),
              })
          .put(
              new Identifier("typeNullableUnknown"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.typeNullableUnknown", true),
              })
          .put(
              new Identifier("ReflectionException"),
              new Import[] {
                newImport("javax.management.ReflectionException", false),
              })
          .put(
              new Identifier("getDataTypeSize"),
              new Import[] {
                newImport("java.awt.image.DataBuffer.getDataTypeSize", true),
              })
          .put(
              new Identifier("VK_KP_DOWN"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_KP_DOWN", true),
              })
          .put(
              new Identifier("Unpacker"),
              new Import[] {
                newImport("java.util.jar.Pack200.Unpacker", false),
              })
          .put(
              new Identifier("X509Certificate"),
              new Import[] {
                newImport("java.security.cert.X509Certificate", false),
                newImport("javax.security.cert.X509Certificate", false),
              })
          .put(
              new Identifier("completedFuture"),
              new Import[] {
                newImport("java.util.concurrent.CompletableFuture.completedFuture", true),
              })
          .put(
              new Identifier("LETTERLIKE_SYMBOLS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.LETTERLIKE_SYMBOLS", true),
              })
          .put(
              new Identifier("ECParameterSpec"),
              new Import[] {
                newImport("java.security.spec.ECParameterSpec", false),
              })
          .put(
              new Identifier("Byte"),
              new Import[] {
                newImport("java.lang.Byte", false),
              })
          .put(
              new Identifier("AUTO_RESIZE_SUBSEQUENT_COLUMNS"),
              new Import[] {
                newImport("javax.swing.JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS", true),
              })
          .put(
              new Identifier("DataOutput"),
              new Import[] {
                newImport("java.io.DataOutput", false),
              })
          .put(
              new Identifier("TMSTARTRSCAN"),
              new Import[] {
                newImport("javax.transaction.xa.XAResource.TMSTARTRSCAN", true),
              })
          .put(
              new Identifier("typeNullable"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.typeNullable", true),
              })
          .put(
              new Identifier("NOSHADE"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.NOSHADE", true),
              })
          .put(
              new Identifier("DetailEntry"),
              new Import[] {
                newImport("javax.xml.soap.DetailEntry", false),
              })
          .put(
              new Identifier("PopupMenuListener"),
              new Import[] {
                newImport("javax.swing.event.PopupMenuListener", false),
              })
          .put(
              new Identifier("Reader"),
              new Import[] {
                newImport("java.io.Reader", false),
              })
          .put(
              new Identifier("getMidiDeviceInfo"),
              new Import[] {
                newImport("javax.sound.midi.MidiSystem.getMidiDeviceInfo", true),
              })
          .put(
              new Identifier("StreamSupport"),
              new Import[] {
                newImport("java.util.stream.StreamSupport", false),
              })
          .put(
              new Identifier("DragSourceListener"),
              new Import[] {
                newImport("java.awt.dnd.DragSourceListener", false),
              })
          .put(
              new Identifier("DynStruct"),
              new Import[] {
                newImport("org.omg.CORBA.DynStruct", false),
                newImport("org.omg.DynamicAny.DynStruct", false),
              })
          .put(
              new Identifier("LAST_LINE_END"),
              new Import[] {
                newImport("java.awt.GridBagConstraints.LAST_LINE_END", true),
              })
          .put(
              new Identifier("DragSourceEvent"),
              new Import[] {
                newImport("java.awt.dnd.DragSourceEvent", false),
              })
          .put(
              new Identifier("SYRIAC"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.SYRIAC", true),
              })
          .put(
              new Identifier("TOPDOWNLEFTRIGHT"),
              new Import[] {
                newImport("java.awt.image.ImageConsumer.TOPDOWNLEFTRIGHT", true),
              })
          .put(
              new Identifier("UnknownEncoding"),
              new Import[] {
                newImport("org.omg.IOP.CodecFactoryPackage.UnknownEncoding", false),
              })
          .put(
              new Identifier("RELAXNG_NS_URI"),
              new Import[] {
                newImport("javax.xml.XMLConstants.RELAXNG_NS_URI", true),
              })
          .put(
              new Identifier("CHEROKEE"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.CHEROKEE", true),
              })
          .put(
              new Identifier("MISCELLANEOUS_SYMBOLS_AND_ARROWS"),
              new Import[] {
                newImport(
                    "java.lang.Character.UnicodeBlock.MISCELLANEOUS_SYMBOLS_AND_ARROWS", true),
              })
          .put(
              new Identifier("PopupMenuBorder"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalBorders.PopupMenuBorder", false),
              })
          .put(
              new Identifier("TAG_HEAD"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_HEAD", true),
              })
          .put(
              new Identifier("ROUND_FLOOR"),
              new Import[] {
                newImport("java.math.BigDecimal.ROUND_FLOOR", true),
              })
          .put(
              new Identifier("PlatformLoggingMXBean"),
              new Import[] {
                newImport("java.lang.management.PlatformLoggingMXBean", false),
              })
          .put(
              new Identifier("SecretKeyFactory"),
              new Import[] {
                newImport("javax.crypto.SecretKeyFactory", false),
              })
          .put(
              new Identifier("CONCURRENT"),
              new Import[] {
                newImport("java.util.Spliterator.CONCURRENT", true),
              })
          .put(
              new Identifier("FontFamily"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.FontFamily", true),
              })
          .put(
              new Identifier("NUMERIC"),
              new Import[] {
                newImport("java.sql.Types.NUMERIC", true),
              })
          .put(
              new Identifier("PANEL"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.PANEL", true),
                newImport("javax.swing.plaf.synth.Region.PANEL", true),
              })
          .put(
              new Identifier("JavaFileManager"),
              new Import[] {
                newImport("javax.tools.JavaFileManager", false),
              })
          .put(
              new Identifier("LIGATURE"),
              new Import[] {
                newImport("java.awt.font.GlyphMetrics.LIGATURE", true),
              })
          .put(
              new Identifier("menu"),
              new Import[] {
                newImport("java.awt.SystemColor.menu", true),
              })
          .put(
              new Identifier("ANCIENT_GREEK_MUSICAL_NOTATION"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.ANCIENT_GREEK_MUSICAL_NOTATION", true),
              })
          .put(
              new Identifier("attributeNullable"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.attributeNullable", true),
              })
          .put(
              new Identifier("RequiredModelMBean"),
              new Import[] {
                newImport("javax.management.modelmbean.RequiredModelMBean", false),
              })
          .put(
              new Identifier("getLong"),
              new Import[] {
                newImport("java.lang.Long.getLong", true),
                newImport("java.lang.reflect.Array.getLong", true),
              })
          .put(
              new Identifier("EventContext"),
              new Import[] {
                newImport("javax.naming.event.EventContext", false),
              })
          .put(
              new Identifier("SIDE"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaTray.SIDE", true),
              })
          .put(
              new Identifier("XAER_RMFAIL"),
              new Import[] {
                newImport("javax.transaction.xa.XAException.XAER_RMFAIL", true),
              })
          .put(
              new Identifier("JOB_CANCELED"),
              new Import[] {
                newImport("javax.print.event.PrintJobEvent.JOB_CANCELED", true),
              })
          .put(
              new Identifier("AttributeSet"),
              new Import[] {
                newImport("javax.print.attribute.AttributeSet", false),
                newImport("javax.swing.text.AttributeSet", false),
              })
          .put(
              new Identifier("RADIO_BUTTON"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.RADIO_BUTTON", true),
                newImport("javax.swing.plaf.synth.Region.RADIO_BUTTON", true),
              })
          .put(
              new Identifier("NameClassPair"),
              new Import[] {
                newImport("javax.naming.NameClassPair", false),
              })
          .put(
              new Identifier("PrintServiceAttributeListener"),
              new Import[] {
                newImport("javax.print.event.PrintServiceAttributeListener", false),
              })
          .put(
              new Identifier("OctetStreamData"),
              new Import[] {
                newImport("javax.xml.crypto.OctetStreamData", false),
              })
          .put(
              new Identifier("VALUE_COLOR_RENDER_SPEED"),
              new Import[] {
                newImport("java.awt.RenderingHints.VALUE_COLOR_RENDER_SPEED", true),
              })
          .put(
              new Identifier("InstantiationException"),
              new Import[] {
                newImport("java.lang.InstantiationException", false),
              })
          .put(
              new Identifier("icSigMediaWhitePointTag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigMediaWhitePointTag", true),
              })
          .put(
              new Identifier("NAMESPACE"),
              new Import[] {
                newImport("javax.xml.stream.XMLStreamConstants.NAMESPACE", true),
              })
          .put(
              new Identifier("SRC_ATOP"),
              new Import[] {
                newImport("java.awt.AlphaComposite.SRC_ATOP", true),
              })
          .put(
              new Identifier("rotate"),
              new Import[] {
                newImport("java.util.Collections.rotate", true),
              })
          .put(
              new Identifier("HIGH"),
              new Import[] {
                newImport("java.awt.PageAttributes.PrintQualityType.HIGH", true),
                newImport("javax.print.attribute.standard.PrintQuality.HIGH", true),
              })
          .put(
              new Identifier("DESELECTED"),
              new Import[] {
                newImport("java.awt.event.ItemEvent.DESELECTED", true),
              })
          .put(
              new Identifier("THURSDAY"),
              new Import[] {
                newImport("java.util.Calendar.THURSDAY", true),
              })
          .put(
              new Identifier("MOUSE_PRESSED"),
              new Import[] {
                newImport("java.awt.event.MouseEvent.MOUSE_PRESSED", true),
              })
          .put(
              new Identifier("XMLFormatter"),
              new Import[] {
                newImport("java.util.logging.XMLFormatter", false),
              })
          .put(
              new Identifier("getSystemScope"),
              new Import[] {
                newImport("java.security.IdentityScope.getSystemScope", true),
              })
          .put(
              new Identifier("BasicScrollPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicScrollPaneUI", false),
              })
          .put(
              new Identifier("DECREMENT"),
              new Import[] {
                newImport("javax.accessibility.AccessibleAction.DECREMENT", true),
              })
          .put(
              new Identifier("IndirectionException"),
              new Import[] {
                newImport("org.omg.CORBA.portable.IndirectionException", false),
              })
          .put(
              new Identifier("CDATASection"),
              new Import[] {
                newImport("org.w3c.dom.CDATASection", false),
              })
          .put(
              new Identifier("BufferedInputStream"),
              new Import[] {
                newImport("java.io.BufferedInputStream", false),
              })
          .put(
              new Identifier("_dk_ValueBox"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind._dk_ValueBox", true),
              })
          .put(
              new Identifier("SIGN"),
              new Import[] {
                newImport("java.text.NumberFormat.Field.SIGN", true),
                newImport("javax.xml.crypto.KeySelector.Purpose.SIGN", true),
              })
          .put(
              new Identifier("createHandler"),
              new Import[] {
                newImport("java.beans.XMLDecoder.createHandler", true),
              })
          .put(
              new Identifier("UserPrincipalLookupService"),
              new Import[] {
                newImport("java.nio.file.attribute.UserPrincipalLookupService", false),
              })
          .put(
              new Identifier("Sequencer"),
              new Import[] {
                newImport("javax.sound.midi.Sequencer", false),
              })
          .put(
              new Identifier("NO_MODIFICATION_ALLOWED_ERR"),
              new Import[] {
                newImport("org.w3c.dom.DOMException.NO_MODIFICATION_ALLOWED_ERR", true),
              })
          .put(
              new Identifier("PosixFilePermission"),
              new Import[] {
                newImport("java.nio.file.attribute.PosixFilePermission", false),
              })
          .put(
              new Identifier("IDREFS"),
              new Import[] {
                newImport("javax.swing.text.html.parser.DTDConstants.IDREFS", true),
              })
          .put(
              new Identifier("ScriptEngine"),
              new Import[] {
                newImport("javax.script.ScriptEngine", false),
              })
          .put(
              new Identifier("DynUnionHelper"),
              new Import[] {
                newImport("org.omg.DynamicAny.DynUnionHelper", false),
              })
          .put(
              new Identifier("SOAP_RECEIVER_FAULT"),
              new Import[] {
                newImport("javax.xml.soap.SOAPConstants.SOAP_RECEIVER_FAULT", true),
              })
          .put(
              new Identifier("MouseMotionAdapter"),
              new Import[] {
                newImport("java.awt.event.MouseMotionAdapter", false),
              })
          .put(
              new Identifier("getKeyModifiersText"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.getKeyModifiersText", true),
              })
          .put(
              new Identifier("SCRIPT"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.SCRIPT", true),
              })
          .put(
              new Identifier("_DynAnyStub"),
              new Import[] {
                newImport("org.omg.DynamicAny._DynAnyStub", false),
              })
          .put(
              new Identifier("ByteArrayInputStream"),
              new Import[] {
                newImport("java.io.ByteArrayInputStream", false),
              })
          .put(
              new Identifier("CancellationException"),
              new Import[] {
                newImport("java.util.concurrent.CancellationException", false),
              })
          .put(
              new Identifier("ForkJoinWorkerThreadFactory"),
              new Import[] {
                newImport("java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory", false),
              })
          .put(
              new Identifier("getAcceleratorSelectedForeground"),
              new Import[] {
                newImport(
                    "javax.swing.plaf.metal.MetalLookAndFeel.getAcceleratorSelectedForeground",
                    true),
              })
          .put(
              new Identifier("DateFormatter"),
              new Import[] {
                newImport("javax.swing.text.DateFormatter", false),
              })
          .put(
              new Identifier("Throwable"),
              new Import[] {
                newImport("java.lang.Throwable", false),
              })
          .put(
              new Identifier("Visibility"),
              new Import[] {
                newImport("java.beans.Visibility", false),
              })
          .put(
              new Identifier("LIFESPAN_POLICY_ID"),
              new Import[] {
                newImport("org.omg.PortableServer.LIFESPAN_POLICY_ID", false),
              })
          .put(
              new Identifier("newJMXConnectorServer"),
              new Import[] {
                newImport(
                    "javax.management.remote.JMXConnectorServerFactory.newJMXConnectorServer",
                    true),
              })
          .put(
              new Identifier("UnsupportedClassVersionError"),
              new Import[] {
                newImport("java.lang.UnsupportedClassVersionError", false),
              })
          .put(
              new Identifier("IP_MULTICAST_IF"),
              new Import[] {
                newImport("java.net.SocketOptions.IP_MULTICAST_IF", true),
                newImport("java.net.StandardSocketOptions.IP_MULTICAST_IF", true),
              })
          .put(
              new Identifier("SignatureMethodParameterSpec"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec", false),
              })
          .put(
              new Identifier("isSurrogatePair"),
              new Import[] {
                newImport("java.lang.Character.isSurrogatePair", true),
              })
          .put(
              new Identifier("CHILD_POLICY_SEQUENCE"),
              new Import[] {
                newImport("javax.imageio.metadata.IIOMetadataFormat.CHILD_POLICY_SEQUENCE", true),
              })
          .put(
              new Identifier("installColorsAndFont"),
              new Import[] {
                newImport("javax.swing.LookAndFeel.installColorsAndFont", true),
              })
          .put(
              new Identifier("RelationException"),
              new Import[] {
                newImport("javax.management.relation.RelationException", false),
              })
          .put(
              new Identifier("IMP_LIMIT"),
              new Import[] {
                newImport("org.omg.CORBA.IMP_LIMIT", false),
              })
          .put(
              new Identifier("KeyGenerator"),
              new Import[] {
                newImport("javax.crypto.KeyGenerator", false),
              })
          .put(
              new Identifier("StyledTextAction"),
              new Import[] {
                newImport("javax.swing.text.StyledEditorKit.StyledTextAction", false),
              })
          .put(
              new Identifier("AnySeqHelper"),
              new Import[] {
                newImport("org.omg.CORBA.AnySeqHelper", false),
                newImport("org.omg.DynamicAny.AnySeqHelper", false),
              })
          .put(
              new Identifier("ToDoubleFunction"),
              new Import[] {
                newImport("java.util.function.ToDoubleFunction", false),
              })
          .put(
              new Identifier("MultiProgressBarUI"),
              new Import[] {
                newImport("javax.swing.plaf.multi.MultiProgressBarUI", false),
              })
          .put(
              new Identifier("POAManagerOperations"),
              new Import[] {
                newImport("org.omg.PortableServer.POAManagerOperations", false),
              })
          .put(
              new Identifier("PaintEvent"),
              new Import[] {
                newImport("java.awt.event.PaintEvent", false),
              })
          .put(
              new Identifier("TEXTAREA"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.TEXTAREA", true),
              })
          .put(
              new Identifier("initialSubString"),
              new Import[] {
                newImport("javax.management.Query.initialSubString", true),
              })
          .put(
              new Identifier("createMatteBorder"),
              new Import[] {
                newImport("javax.swing.BorderFactory.createMatteBorder", true),
              })
          .put(
              new Identifier("JViewport"),
              new Import[] {
                newImport("javax.swing.JViewport", false),
              })
          .put(
              new Identifier("notExists"),
              new Import[] {
                newImport("java.nio.file.Files.notExists", true),
              })
          .put(
              new Identifier("PUBLIC_KEY"),
              new Import[] {
                newImport("javax.crypto.Cipher.PUBLIC_KEY", true),
              })
          .put(
              new Identifier("VK_CLOSE_BRACKET"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_CLOSE_BRACKET", true),
              })
          .put(
              new Identifier("writeAttributeSet"),
              new Import[] {
                newImport("javax.swing.text.StyleContext.writeAttributeSet", true),
              })
          .put(
              new Identifier("S_RESIZE_CURSOR"),
              new Import[] {
                newImport("java.awt.Cursor.S_RESIZE_CURSOR", true),
                newImport("java.awt.Frame.S_RESIZE_CURSOR", true),
              })
          .put(
              new Identifier("COUNTING_ROD_NUMERALS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.COUNTING_ROD_NUMERALS", true),
              })
          .put(
              new Identifier("createIndexed"),
              new Import[] {
                newImport("javax.imageio.ImageTypeSpecifier.createIndexed", true),
              })
          .put(
              new Identifier("ConcurrentLinkedDeque"),
              new Import[] {
                newImport("java.util.concurrent.ConcurrentLinkedDeque", false),
              })
          .put(
              new Identifier("POLICY_NOANONYMOUS"),
              new Import[] {
                newImport("javax.security.sasl.Sasl.POLICY_NOANONYMOUS", true),
              })
          .put(
              new Identifier("UNWRAP_MODE"),
              new Import[] {
                newImport("javax.crypto.Cipher.UNWRAP_MODE", true),
              })
          .put(
              new Identifier("_tk_void"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind._tk_void", true),
              })
          .put(
              new Identifier("DefaultFocusManager"),
              new Import[] {
                newImport("javax.swing.DefaultFocusManager", false),
              })
          .put(
              new Identifier("ConvolveOp"),
              new Import[] {
                newImport("java.awt.image.ConvolveOp", false),
              })
          .put(
              new Identifier("getSeparatorBackground"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalLookAndFeel.getSeparatorBackground", true),
              })
          .put(
              new Identifier("SynthDesktopIconUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthDesktopIconUI", false),
              })
          .put(
              new Identifier("NotificationListener"),
              new Import[] {
                newImport("javax.management.NotificationListener", false),
              })
          .build();
}
