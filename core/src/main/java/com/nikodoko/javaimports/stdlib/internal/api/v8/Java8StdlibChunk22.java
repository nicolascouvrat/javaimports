// Code generated by GenerateStdlib.java. DO NOT EDIT.
package com.nikodoko.javaimports.stdlib.internal.api.v8;

import static com.nikodoko.javaimports.stdlib.internal.Stdlib.newImport;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.common.Identifier;
import com.nikodoko.javaimports.common.Import;
import java.util.Map;

public class Java8StdlibChunk22 {
  static final Map<Identifier, Import[]> CLASSES =
      new ImmutableMap.Builder<Identifier, Import[]>()
          .put(
              new Identifier("getDefaultStream"),
              new Import[] {
                newImport("java.rmi.server.LogStream.getDefaultStream", true),
              })
          .put(
              new Identifier("NA_10X13_ENVELOPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.NA_10X13_ENVELOPE", true),
                newImport("javax.print.attribute.standard.MediaSizeName.NA_10X13_ENVELOPE", true),
              })
          .put(
              new Identifier("MONTH"),
              new Import[] {
                newImport("java.text.DateFormat.Field.MONTH", true),
                newImport("java.util.Calendar.MONTH", true),
              })
          .put(
              new Identifier("INACTIVE_CAPTION"),
              new Import[] {
                newImport("java.awt.SystemColor.INACTIVE_CAPTION", true),
              })
          .put(
              new Identifier("CONTENT_AREA_FILLED_CHANGED_PROPERTY"),
              new Import[] {
                newImport("javax.swing.AbstractButton.CONTENT_AREA_FILLED_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("COMPLETESCANLINES"),
              new Import[] {
                newImport("java.awt.image.ImageConsumer.COMPLETESCANLINES", true),
              })
          .put(
              new Identifier("ManagementPermission"),
              new Import[] {
                newImport("java.lang.management.ManagementPermission", false),
              })
          .put(
              new Identifier("TabExpander"),
              new Import[] {
                newImport("javax.swing.text.TabExpander", false),
              })
          .put(
              new Identifier("ScrollPaneBorder"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalBorders.ScrollPaneBorder", false),
              })
          .put(
              new Identifier("VALUE_COLOR_RENDER_DEFAULT"),
              new Import[] {
                newImport("java.awt.RenderingHints.VALUE_COLOR_RENDER_DEFAULT", true),
              })
          .put(
              new Identifier("interfaceModifiers"),
              new Import[] {
                newImport("java.lang.reflect.Modifier.interfaceModifiers", true),
              })
          .put(
              new Identifier("ToIntBiFunction"),
              new Import[] {
                newImport("java.util.function.ToIntBiFunction", false),
              })
          .put(
              new Identifier("WEIGHT"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.WEIGHT", true),
              })
          .put(
              new Identifier("PrintJobEvent"),
              new Import[] {
                newImport("javax.print.event.PrintJobEvent", false),
              })
          .put(
              new Identifier("StringNameHelper"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextExtPackage.StringNameHelper", false),
              })
          .put(
              new Identifier("ObjectHelper"),
              new Import[] {
                newImport("org.omg.CORBA.ObjectHelper", false),
              })
          .put(
              new Identifier("MATHEMATICAL_ALPHANUMERIC_SYMBOLS"),
              new Import[] {
                newImport(
                    "java.lang.Character.UnicodeBlock.MATHEMATICAL_ALPHANUMERIC_SYMBOLS", true),
              })
          .put(
              new Identifier("GregorianCalendar"),
              new Import[] {
                newImport("java.util.GregorianCalendar", false),
              })
          .put(
              new Identifier("installColors"),
              new Import[] {
                newImport("javax.swing.LookAndFeel.installColors", true),
              })
          .put(
              new Identifier("BadAttributeValueExpException"),
              new Import[] {
                newImport("javax.management.BadAttributeValueExpException", false),
              })
          .put(
              new Identifier("MBeanAttributeInfo"),
              new Import[] {
                newImport("javax.management.MBeanAttributeInfo", false),
              })
          .put(
              new Identifier("SYNC_WITH_TRANSPORT"),
              new Import[] {
                newImport("org.omg.Messaging.SYNC_WITH_TRANSPORT", false),
              })
          .put(
              new Identifier("PathMatcher"),
              new Import[] {
                newImport("java.nio.file.PathMatcher", false),
              })
          .put(
              new Identifier("NKO"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.NKO", true),
              })
          .put(
              new Identifier("RequestingUserName"),
              new Import[] {
                newImport("javax.print.attribute.standard.RequestingUserName", false),
              })
          .put(
              new Identifier("TYPE_BYTE_GRAY"),
              new Import[] {
                newImport("java.awt.image.BufferedImage.TYPE_BYTE_GRAY", true),
              })
          .put(
              new Identifier("XMLSignatureException"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.XMLSignatureException", false),
              })
          .put(
              new Identifier("CompiledScript"),
              new Import[] {
                newImport("javax.script.CompiledScript", false),
              })
          .put(
              new Identifier("minus"),
              new Import[] {
                newImport("javax.management.Query.minus", true),
                newImport("javax.swing.Spring.minus", true),
              })
          .put(
              new Identifier("INVALID_MODIFICATION_ERR"),
              new Import[] {
                newImport("org.w3c.dom.DOMException.INVALID_MODIFICATION_ERR", true),
              })
          .put(
              new Identifier("log10"),
              new Import[] {
                newImport("java.lang.Math.log10", true),
                newImport("java.lang.StrictMath.log10", true),
              })
          .put(
              new Identifier("BUTTON"),
              new Import[] {
                newImport("javax.swing.plaf.synth.Region.BUTTON", true),
              })
          .put(
              new Identifier("AccessibleRole"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole", false),
              })
          .put(
              new Identifier("InitialDirContext"),
              new Import[] {
                newImport("javax.naming.directory.InitialDirContext", false),
              })
          .put(
              new Identifier("removeAuxiliaryLookAndFeel"),
              new Import[] {
                newImport("javax.swing.UIManager.removeAuxiliaryLookAndFeel", true),
              })
          .put(
              new Identifier("BasicTabbedPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicTabbedPaneUI", false),
              })
          .put(
              new Identifier("MODIFIER_TONE_LETTERS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.MODIFIER_TONE_LETTERS", true),
              })
          .put(
              new Identifier("PARAM_IN"),
              new Import[] {
                newImport("org.omg.CORBA.ParameterMode.PARAM_IN", true),
              })
          .put(
              new Identifier("parseUnsignedInt"),
              new Import[] {
                newImport("java.lang.Integer.parseUnsignedInt", true),
                newImport("javax.xml.bind.DatatypeConverter.parseUnsignedInt", true),
              })
          .put(
              new Identifier("getRaisedBevelBorderUIResource"),
              new Import[] {
                newImport("javax.swing.plaf.BorderUIResource.getRaisedBevelBorderUIResource", true),
              })
          .put(
              new Identifier("exactInvoker"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandles.exactInvoker", true),
              })
          .put(
              new Identifier("newBufferedWriter"),
              new Import[] {
                newImport("java.nio.file.Files.newBufferedWriter", true),
              })
          .put(
              new Identifier("Observer"),
              new Import[] {
                newImport("java.util.Observer", false),
              })
          .put(
              new Identifier("_tk_short"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind._tk_short", true),
              })
          .put(
              new Identifier("OMIT_XML_DECLARATION"),
              new Import[] {
                newImport("javax.xml.transform.OutputKeys.OMIT_XML_DECLARATION", true),
              })
          .put(
              new Identifier("getTextHighlightColor"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalLookAndFeel.getTextHighlightColor", true),
              })
          .put(
              new Identifier("_tk_ulong"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind._tk_ulong", true),
              })
          .put(
              new Identifier("FLAG_COMPLEX_GLYPHS"),
              new Import[] {
                newImport("java.awt.font.GlyphVector.FLAG_COMPLEX_GLYPHS", true),
              })
          .put(
              new Identifier("ConstantCallSite"),
              new Import[] {
                newImport("java.lang.invoke.ConstantCallSite", false),
              })
          .put(
              new Identifier("JLabel"),
              new Import[] {
                newImport("javax.swing.JLabel", false),
              })
          .put(
              new Identifier("InputMethodHighlight"),
              new Import[] {
                newImport("java.awt.im.InputMethodHighlight", false),
              })
          .put(
              new Identifier("JMXConnectorServer"),
              new Import[] {
                newImport("javax.management.remote.JMXConnectorServer", false),
              })
          .put(
              new Identifier("LdapName"),
              new Import[] {
                newImport("javax.naming.ldap.LdapName", false),
              })
          .put(
              new Identifier("newUpdater"),
              new Import[] {
                newImport("java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater", true),
                newImport("java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater", true),
                newImport(
                    "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater", true),
              })
          .put(
              new Identifier("INVALID_ACTIVITY"),
              new Import[] {
                newImport("org.omg.CORBA.INVALID_ACTIVITY", false),
              })
          .put(
              new Identifier("SCROLL_LOCK"),
              new Import[] {
                newImport("java.awt.Event.SCROLL_LOCK", true),
              })
          .put(
              new Identifier("VALUE_ENUMERATION"),
              new Import[] {
                newImport("javax.imageio.metadata.IIOMetadataFormat.VALUE_ENUMERATION", true),
              })
          .put(
              new Identifier("JAPANESE"),
              new Import[] {
                newImport("java.util.Locale.JAPANESE", true),
              })
          .put(
              new Identifier("timeLineOrder"),
              new Import[] {
                newImport("java.time.OffsetDateTime.timeLineOrder", true),
                newImport("java.time.chrono.ChronoLocalDate.timeLineOrder", true),
                newImport("java.time.chrono.ChronoLocalDateTime.timeLineOrder", true),
                newImport("java.time.chrono.ChronoZonedDateTime.timeLineOrder", true),
              })
          .put(
              new Identifier("RemoteException"),
              new Import[] {
                newImport("java.rmi.RemoteException", false),
              })
          .put(
              new Identifier("POSTSCRIPT"),
              new Import[] {
                newImport("javax.print.DocFlavor.BYTE_ARRAY.POSTSCRIPT", true),
                newImport("javax.print.DocFlavor.INPUT_STREAM.POSTSCRIPT", true),
                newImport("javax.print.DocFlavor.URL.POSTSCRIPT", true),
              })
          .put(
              new Identifier("BAD_STATUS"),
              new Import[] {
                newImport("org.ietf.jgss.GSSException.BAD_STATUS", true),
              })
          .put(
              new Identifier("CAPTION"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.CAPTION", true),
              })
          .put(
              new Identifier("AlgorithmParameterGeneratorSpi"),
              new Import[] {
                newImport("java.security.AlgorithmParameterGeneratorSpi", false),
              })
          .put(
              new Identifier("TaggedProfileHolder"),
              new Import[] {
                newImport("org.omg.IOP.TaggedProfileHolder", false),
              })
          .put(
              new Identifier("TYPE_GRAY"),
              new Import[] {
                newImport("java.awt.color.ColorSpace.TYPE_GRAY", true),
              })
          .put(
              new Identifier("log1p"),
              new Import[] {
                newImport("java.lang.Math.log1p", true),
                newImport("java.lang.StrictMath.log1p", true),
              })
          .put(
              new Identifier("getWindowTitleInactiveBackground"),
              new Import[] {
                newImport(
                    "javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleInactiveBackground",
                    true),
              })
          .put(
              new Identifier("isEqual"),
              new Import[] {
                newImport("java.security.MessageDigest.isEqual", true),
                newImport("java.util.function.Predicate.isEqual", true),
              })
          .put(
              new Identifier("Predicate"),
              new Import[] {
                newImport("java.util.function.Predicate", false),
                newImport("javax.sql.rowset.Predicate", false),
              })
          .put(
              new Identifier("Name"),
              new Import[] {
                newImport("java.util.jar.Attributes.Name", false),
                newImport("javax.lang.model.element.Name", false),
                newImport("javax.naming.Name", false),
                newImport("javax.xml.soap.Name", false),
              })
          .put(
              new Identifier("ResultSetMetaData"),
              new Import[] {
                newImport("java.sql.ResultSetMetaData", false),
              })
          .put(
              new Identifier("printUnsignedShort"),
              new Import[] {
                newImport("javax.xml.bind.DatatypeConverter.printUnsignedShort", true),
              })
          .put(
              new Identifier("XA_RBTRANSIENT"),
              new Import[] {
                newImport("javax.transaction.xa.XAException.XA_RBTRANSIENT", true),
              })
          .put(
              new Identifier("CS_LINEAR_RGB"),
              new Import[] {
                newImport("java.awt.color.ColorSpace.CS_LINEAR_RGB", true),
              })
          .put(
              new Identifier("VolatileImage"),
              new Import[] {
                newImport("java.awt.image.VolatileImage", false),
              })
          .put(
              new Identifier("GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE"),
              new Import[] {
                newImport(
                    "java.lang.management.ManagementFactory.GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE",
                    true),
              })
          .put(
              new Identifier("KRB_NT_SRV_XHST"),
              new Import[] {
                newImport("javax.security.auth.kerberos.KerberosPrincipal.KRB_NT_SRV_XHST", true),
              })
          .put(
              new Identifier("DefaultListCellRenderer"),
              new Import[] {
                newImport("javax.swing.DefaultListCellRenderer", false),
              })
          .put(
              new Identifier("PrinterStateReasons"),
              new Import[] {
                newImport("javax.print.attribute.standard.PrinterStateReasons", false),
              })
          .put(
              new Identifier("BindingIteratorOperations"),
              new Import[] {
                newImport("org.omg.CosNaming.BindingIteratorOperations", false),
              })
          .put(
              new Identifier("icSigSpace6CLR"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigSpace6CLR", true),
              })
          .put(
              new Identifier("missing_node"),
              new Import[] {
                newImport(
                    "org.omg.CosNaming.NamingContextPackage.NotFoundReason.missing_node", true),
              })
          .put(
              new Identifier("Collectors"),
              new Import[] {
                newImport("java.util.stream.Collectors", false),
              })
          .put(
              new Identifier("VK_F9"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_F9", true),
              })
          .put(
              new Identifier("VK_F8"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_F8", true),
              })
          .put(
              new Identifier("VK_F7"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_F7", true),
              })
          .put(
              new Identifier("TYPE_IMAGE_BUFFER"),
              new Import[] {
                newImport("java.awt.GraphicsDevice.TYPE_IMAGE_BUFFER", true),
              })
          .put(
              new Identifier("VK_EXCLAMATION_MARK"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_EXCLAMATION_MARK", true),
              })
          .put(
              new Identifier("VK_F6"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_F6", true),
              })
          .put(
              new Identifier("VK_F5"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_F5", true),
              })
          .put(
              new Identifier("REFRESH_RATE_UNKNOWN"),
              new Import[] {
                newImport("java.awt.DisplayMode.REFRESH_RATE_UNKNOWN", true),
              })
          .put(
              new Identifier("AdjustmentEvent"),
              new Import[] {
                newImport("java.awt.event.AdjustmentEvent", false),
              })
          .put(
              new Identifier("VK_F4"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_F4", true),
              })
          .put(
              new Identifier("VK_F3"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_F3", true),
              })
          .put(
              new Identifier("VK_F2"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_F2", true),
              })
          .put(
              new Identifier("VK_F1"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_F1", true),
              })
          .put(
              new Identifier("icSigLabData"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigLabData", true),
              })
          .put(
              new Identifier("extract"),
              new Import[] {
                newImport("org.omg.CORBA.AnySeqHelper.extract", true),
                newImport("org.omg.CORBA.BooleanSeqHelper.extract", true),
                newImport("org.omg.CORBA.CharSeqHelper.extract", true),
                newImport("org.omg.CORBA.CompletionStatusHelper.extract", true),
                newImport("org.omg.CORBA.CurrentHelper.extract", true),
                newImport("org.omg.CORBA.DefinitionKindHelper.extract", true),
                newImport("org.omg.CORBA.DoubleSeqHelper.extract", true),
                newImport("org.omg.CORBA.FieldNameHelper.extract", true),
                newImport("org.omg.CORBA.FloatSeqHelper.extract", true),
                newImport("org.omg.CORBA.IDLTypeHelper.extract", true),
                newImport("org.omg.CORBA.IdentifierHelper.extract", true),
                newImport("org.omg.CORBA.LongLongSeqHelper.extract", true),
                newImport("org.omg.CORBA.LongSeqHelper.extract", true),
                newImport("org.omg.CORBA.NameValuePairHelper.extract", true),
                newImport("org.omg.CORBA.ObjectHelper.extract", true),
                newImport("org.omg.CORBA.OctetSeqHelper.extract", true),
                newImport("org.omg.CORBA.ParameterModeHelper.extract", true),
                newImport("org.omg.CORBA.PolicyErrorCodeHelper.extract", true),
                newImport("org.omg.CORBA.PolicyErrorHelper.extract", true),
                newImport("org.omg.CORBA.PolicyHelper.extract", true),
                newImport("org.omg.CORBA.PolicyListHelper.extract", true),
                newImport("org.omg.CORBA.PolicyTypeHelper.extract", true),
                newImport("org.omg.CORBA.RepositoryIdHelper.extract", true),
                newImport("org.omg.CORBA.ServiceDetailHelper.extract", true),
                newImport("org.omg.CORBA.ServiceInformationHelper.extract", true),
                newImport("org.omg.CORBA.SetOverrideTypeHelper.extract", true),
                newImport("org.omg.CORBA.ShortSeqHelper.extract", true),
                newImport("org.omg.CORBA.StringSeqHelper.extract", true),
                newImport("org.omg.CORBA.StringValueHelper.extract", true),
                newImport("org.omg.CORBA.StructMemberHelper.extract", true),
                newImport("org.omg.CORBA.ULongLongSeqHelper.extract", true),
                newImport("org.omg.CORBA.ULongSeqHelper.extract", true),
                newImport("org.omg.CORBA.UShortSeqHelper.extract", true),
                newImport("org.omg.CORBA.UnionMemberHelper.extract", true),
                newImport("org.omg.CORBA.UnknownUserExceptionHelper.extract", true),
                newImport("org.omg.CORBA.ValueBaseHelper.extract", true),
                newImport("org.omg.CORBA.ValueMemberHelper.extract", true),
                newImport("org.omg.CORBA.VersionSpecHelper.extract", true),
                newImport("org.omg.CORBA.VisibilityHelper.extract", true),
                newImport("org.omg.CORBA.WCharSeqHelper.extract", true),
                newImport("org.omg.CORBA.WStringSeqHelper.extract", true),
                newImport("org.omg.CORBA.WStringValueHelper.extract", true),
                newImport("org.omg.CORBA.WrongTransactionHelper.extract", true),
                newImport("org.omg.CosNaming.BindingHelper.extract", true),
                newImport("org.omg.CosNaming.BindingIteratorHelper.extract", true),
                newImport("org.omg.CosNaming.BindingListHelper.extract", true),
                newImport("org.omg.CosNaming.BindingTypeHelper.extract", true),
                newImport("org.omg.CosNaming.IstringHelper.extract", true),
                newImport("org.omg.CosNaming.NameComponentHelper.extract", true),
                newImport("org.omg.CosNaming.NameHelper.extract", true),
                newImport("org.omg.CosNaming.NamingContextExtHelper.extract", true),
                newImport("org.omg.CosNaming.NamingContextHelper.extract", true),
                newImport("org.omg.CosNaming.NamingContextExtPackage.AddressHelper.extract", true),
                newImport(
                    "org.omg.CosNaming.NamingContextExtPackage.InvalidAddressHelper.extract", true),
                newImport(
                    "org.omg.CosNaming.NamingContextExtPackage.StringNameHelper.extract", true),
                newImport(
                    "org.omg.CosNaming.NamingContextExtPackage.URLStringHelper.extract", true),
                newImport(
                    "org.omg.CosNaming.NamingContextPackage.AlreadyBoundHelper.extract", true),
                newImport(
                    "org.omg.CosNaming.NamingContextPackage.CannotProceedHelper.extract", true),
                newImport("org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.extract", true),
                newImport("org.omg.CosNaming.NamingContextPackage.NotEmptyHelper.extract", true),
                newImport("org.omg.CosNaming.NamingContextPackage.NotFoundHelper.extract", true),
                newImport(
                    "org.omg.CosNaming.NamingContextPackage.NotFoundReasonHelper.extract", true),
                newImport("org.omg.DynamicAny.AnySeqHelper.extract", true),
                newImport("org.omg.DynamicAny.DynAnyFactoryHelper.extract", true),
                newImport("org.omg.DynamicAny.DynAnyHelper.extract", true),
                newImport("org.omg.DynamicAny.DynAnySeqHelper.extract", true),
                newImport("org.omg.DynamicAny.DynArrayHelper.extract", true),
                newImport("org.omg.DynamicAny.DynEnumHelper.extract", true),
                newImport("org.omg.DynamicAny.DynFixedHelper.extract", true),
                newImport("org.omg.DynamicAny.DynSequenceHelper.extract", true),
                newImport("org.omg.DynamicAny.DynStructHelper.extract", true),
                newImport("org.omg.DynamicAny.DynUnionHelper.extract", true),
                newImport("org.omg.DynamicAny.DynValueHelper.extract", true),
                newImport("org.omg.DynamicAny.FieldNameHelper.extract", true),
                newImport("org.omg.DynamicAny.NameDynAnyPairHelper.extract", true),
                newImport("org.omg.DynamicAny.NameDynAnyPairSeqHelper.extract", true),
                newImport("org.omg.DynamicAny.NameValuePairHelper.extract", true),
                newImport("org.omg.DynamicAny.NameValuePairSeqHelper.extract", true),
                newImport(
                    "org.omg.DynamicAny.DynAnyFactoryPackage.InconsistentTypeCodeHelper.extract",
                    true),
                newImport("org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.extract", true),
                newImport("org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.extract", true),
                newImport("org.omg.IOP.CodecFactoryHelper.extract", true),
                newImport("org.omg.IOP.ComponentIdHelper.extract", true),
                newImport("org.omg.IOP.IORHelper.extract", true),
                newImport("org.omg.IOP.MultipleComponentProfileHelper.extract", true),
                newImport("org.omg.IOP.ProfileIdHelper.extract", true),
                newImport("org.omg.IOP.ServiceContextHelper.extract", true),
                newImport("org.omg.IOP.ServiceContextListHelper.extract", true),
                newImport("org.omg.IOP.ServiceIdHelper.extract", true),
                newImport("org.omg.IOP.TaggedComponentHelper.extract", true),
                newImport("org.omg.IOP.TaggedProfileHelper.extract", true),
                newImport("org.omg.IOP.CodecFactoryPackage.UnknownEncodingHelper.extract", true),
                newImport("org.omg.IOP.CodecPackage.FormatMismatchHelper.extract", true),
                newImport("org.omg.IOP.CodecPackage.InvalidTypeForEncodingHelper.extract", true),
                newImport("org.omg.IOP.CodecPackage.TypeMismatchHelper.extract", true),
                newImport("org.omg.Messaging.SyncScopeHelper.extract", true),
                newImport("org.omg.PortableInterceptor.AdapterManagerIdHelper.extract", true),
                newImport("org.omg.PortableInterceptor.AdapterNameHelper.extract", true),
                newImport("org.omg.PortableInterceptor.AdapterStateHelper.extract", true),
                newImport("org.omg.PortableInterceptor.CurrentHelper.extract", true),
                newImport("org.omg.PortableInterceptor.ForwardRequestHelper.extract", true),
                newImport("org.omg.PortableInterceptor.IORInterceptor_3_0Helper.extract", true),
                newImport("org.omg.PortableInterceptor.InvalidSlotHelper.extract", true),
                newImport("org.omg.PortableInterceptor.ORBIdHelper.extract", true),
                newImport("org.omg.PortableInterceptor.ObjectIdHelper.extract", true),
                newImport("org.omg.PortableInterceptor.ObjectReferenceFactoryHelper.extract", true),
                newImport(
                    "org.omg.PortableInterceptor.ObjectReferenceTemplateHelper.extract", true),
                newImport(
                    "org.omg.PortableInterceptor.ObjectReferenceTemplateSeqHelper.extract", true),
                newImport("org.omg.PortableInterceptor.ServerIdHelper.extract", true),
                newImport(
                    "org.omg.PortableInterceptor.ORBInitInfoPackage.DuplicateNameHelper.extract",
                    true),
                newImport(
                    "org.omg.PortableInterceptor.ORBInitInfoPackage.InvalidNameHelper.extract",
                    true),
                newImport(
                    "org.omg.PortableInterceptor.ORBInitInfoPackage.ObjectIdHelper.extract", true),
                newImport("org.omg.PortableServer.CurrentHelper.extract", true),
                newImport("org.omg.PortableServer.ForwardRequestHelper.extract", true),
                newImport("org.omg.PortableServer.POAHelper.extract", true),
                newImport("org.omg.PortableServer.ServantActivatorHelper.extract", true),
                newImport("org.omg.PortableServer.ServantLocatorHelper.extract", true),
                newImport("org.omg.PortableServer.CurrentPackage.NoContextHelper.extract", true),
                newImport(
                    "org.omg.PortableServer.POAManagerPackage.AdapterInactiveHelper.extract", true),
                newImport(
                    "org.omg.PortableServer.POAPackage.AdapterAlreadyExistsHelper.extract", true),
                newImport(
                    "org.omg.PortableServer.POAPackage.AdapterNonExistentHelper.extract", true),
                newImport("org.omg.PortableServer.POAPackage.InvalidPolicyHelper.extract", true),
                newImport("org.omg.PortableServer.POAPackage.NoServantHelper.extract", true),
                newImport(
                    "org.omg.PortableServer.POAPackage.ObjectAlreadyActiveHelper.extract", true),
                newImport("org.omg.PortableServer.POAPackage.ObjectNotActiveHelper.extract", true),
                newImport(
                    "org.omg.PortableServer.POAPackage.ServantAlreadyActiveHelper.extract", true),
                newImport("org.omg.PortableServer.POAPackage.ServantNotActiveHelper.extract", true),
                newImport("org.omg.PortableServer.POAPackage.WrongAdapterHelper.extract", true),
                newImport("org.omg.PortableServer.POAPackage.WrongPolicyHelper.extract", true),
              })
          .put(
              new Identifier("icSigSpaceACLR"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigSpaceACLR", true),
              })
          .put(
              new Identifier("MNEMONIC_CHANGED_PROPERTY"),
              new Import[] {
                newImport("javax.swing.AbstractButton.MNEMONIC_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("DIALOG_TYPE_CHANGED_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JFileChooser.DIALOG_TYPE_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("Bold"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.Bold", true),
              })
          .put(
              new Identifier("OPEN_DELETE"),
              new Import[] {
                newImport("java.util.zip.ZipFile.OPEN_DELETE", true),
              })
          .put(
              new Identifier("NameParser"),
              new Import[] {
                newImport("javax.naming.NameParser", false),
              })
          .put(
              new Identifier("CAPS_LOCK"),
              new Import[] {
                newImport("java.awt.Event.CAPS_LOCK", true),
              })
          .put(
              new Identifier("dk_Interface"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind.dk_Interface", true),
              })
          .put(
              new Identifier("icSigChromaticAdaptationTag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigChromaticAdaptationTag", true),
              })
          .put(
              new Identifier("COORDS"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.COORDS", true),
              })
          .put(
              new Identifier("createScrollPaneForTable"),
              new Import[] {
                newImport("javax.swing.JTable.createScrollPaneForTable", true),
              })
          .put(
              new Identifier("AbstractUndoableEdit"),
              new Import[] {
                newImport("javax.swing.undo.AbstractUndoableEdit", false),
              })
          .put(
              new Identifier("PopupMenuUI"),
              new Import[] {
                newImport("javax.swing.plaf.PopupMenuUI", false),
              })
          .put(
              new Identifier("writeRemoteObject"),
              new Import[] {
                newImport("javax.rmi.CORBA.Util.writeRemoteObject", true),
              })
          .put(
              new Identifier("LEGAL"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.LEGAL", true),
                newImport("javax.print.attribute.standard.MediaSize.NA.LEGAL", true),
              })
          .put(
              new Identifier("ALT_MASK"),
              new Import[] {
                newImport("java.awt.Event.ALT_MASK", true),
                newImport("java.awt.event.ActionEvent.ALT_MASK", true),
                newImport("java.awt.event.InputEvent.ALT_MASK", true),
              })
          .put(
              new Identifier("Parameterizable"),
              new Import[] {
                newImport("javax.lang.model.element.Parameterizable", false),
              })
          .put(
              new Identifier("PrivateCredentialPermission"),
              new Import[] {
                newImport("javax.security.auth.PrivateCredentialPermission", false),
              })
          .put(
              new Identifier("DimensionUIResource"),
              new Import[] {
                newImport("javax.swing.plaf.DimensionUIResource", false),
              })
          .put(
              new Identifier("FOCUS_LOST"),
              new Import[] {
                newImport("java.awt.event.FocusEvent.FOCUS_LOST", true),
              })
          .put(
              new Identifier("bestRowTransaction"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.bestRowTransaction", true),
              })
          .put(
              new Identifier("MultiFileChooserUI"),
              new Import[] {
                newImport("javax.swing.plaf.multi.MultiFileChooserUI", false),
              })
          .put(
              new Identifier("ChangedCharSetException"),
              new Import[] {
                newImport("javax.swing.text.ChangedCharSetException", false),
              })
          .put(
              new Identifier("SEG_CLOSE"),
              new Import[] {
                newImport("java.awt.geom.PathIterator.SEG_CLOSE", true),
              })
          .put(
              new Identifier("DirectoryManager"),
              new Import[] {
                newImport("javax.naming.spi.DirectoryManager", false),
              })
          .put(
              new Identifier("DIALOG_UI"),
              new Import[] {
                newImport("javax.print.ServiceUIFactory.DIALOG_UI", true),
              })
          .put(
              new Identifier("JComponent"),
              new Import[] {
                newImport("javax.swing.JComponent", false),
              })
          .put(
              new Identifier("Request"),
              new Import[] {
                newImport("org.omg.CORBA.Request", false),
              })
          .put(
              new Identifier("procedureNullable"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.procedureNullable", true),
              })
          .put(
              new Identifier("getUnwrappedParent"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.getUnwrappedParent", true),
              })
          .put(
              new Identifier("RowSetFactory"),
              new Import[] {
                newImport("javax.sql.rowset.RowSetFactory", false),
              })
          .put(
              new Identifier("getAudioFileTypes"),
              new Import[] {
                newImport("javax.sound.sampled.AudioSystem.getAudioFileTypes", true),
              })
          .put(
              new Identifier("HEADER_RENDERER_PROPERTY"),
              new Import[] {
                newImport("javax.swing.table.TableColumn.HEADER_RENDERER_PROPERTY", true),
              })
          .put(
              new Identifier("View"),
              new Import[] {
                newImport("javax.swing.text.View", false),
              })
          .put(
              new Identifier("Extension"),
              new Import[] {
                newImport("java.security.cert.Extension", false),
              })
          .put(
              new Identifier("LinkPermission"),
              new Import[] {
                newImport("java.nio.file.LinkPermission", false),
              })
          .put(
              new Identifier("MOUSE_OVER"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthConstants.MOUSE_OVER", true),
              })
          .put(
              new Identifier("DOMSignContext"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.dom.DOMSignContext", false),
              })
          .put(
              new Identifier("checkedQueue"),
              new Import[] {
                newImport("java.util.Collections.checkedQueue", true),
              })
          .put(
              new Identifier("TITLE"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.TITLE", true),
                newImport("javax.swing.text.html.HTML.Tag.TITLE", true),
              })
          .put(
              new Identifier("BasicFormattedTextFieldUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicFormattedTextFieldUI", false),
              })
          .put(
              new Identifier("ADJUSTMENT_EVENT_MASK"),
              new Import[] {
                newImport("java.awt.AWTEvent.ADJUSTMENT_EVENT_MASK", true),
              })
          .put(
              new Identifier("getTiledSizeRequirements"),
              new Import[] {
                newImport("javax.swing.SizeRequirements.getTiledSizeRequirements", true),
              })
          .put(
              new Identifier("registerService"),
              new Import[] {
                newImport("javax.print.PrintServiceLookup.registerService", true),
              })
          .put(
              new Identifier("ProviderException"),
              new Import[] {
                newImport("java.security.ProviderException", false),
              })
          .put(
              new Identifier("showInternalInputDialog"),
              new Import[] {
                newImport("javax.swing.JOptionPane.showInternalInputDialog", true),
              })
          .put(
              new Identifier("FONT_VARIANT"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.FONT_VARIANT", true),
              })
          .put(
              new Identifier("addKeymap"),
              new Import[] {
                newImport("javax.swing.text.JTextComponent.addKeymap", true),
              })
          .put(
              new Identifier("HierarchyBoundsAdapter"),
              new Import[] {
                newImport("java.awt.event.HierarchyBoundsAdapter", false),
              })
          .put(
              new Identifier("ObjDoubleConsumer"),
              new Import[] {
                newImport("java.util.function.ObjDoubleConsumer", false),
              })
          .put(
              new Identifier("GROUPING_SEPARATOR"),
              new Import[] {
                newImport("java.text.NumberFormat.Field.GROUPING_SEPARATOR", true),
              })
          .put(
              new Identifier("getUnwrappedView"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.getUnwrappedView", true),
              })
          .put(
              new Identifier("VERTICAL"),
              new Import[] {
                newImport("java.awt.Adjustable.VERTICAL", true),
                newImport("java.awt.GridBagConstraints.VERTICAL", true),
                newImport("java.awt.Scrollbar.VERTICAL", true),
                newImport("javax.accessibility.AccessibleState.VERTICAL", true),
                newImport("javax.swing.JList.VERTICAL", true),
                newImport("javax.swing.SwingConstants.VERTICAL", true),
              })
          .put(
              new Identifier("MBeanServerBuilder"),
              new Import[] {
                newImport("javax.management.MBeanServerBuilder", false),
              })
          .put(
              new Identifier("WHITESPACE"),
              new Import[] {
                newImport("java.awt.font.GlyphMetrics.WHITESPACE", true),
              })
          .put(
              new Identifier("Book"),
              new Import[] {
                newImport("java.awt.print.Book", false),
              })
          .put(
              new Identifier("CounterMonitorMBean"),
              new Import[] {
                newImport("javax.management.monitor.CounterMonitorMBean", false),
              })
          .put(
              new Identifier("separatorChar"),
              new Import[] {
                newImport("java.io.File.separatorChar", true),
              })
          .put(
              new Identifier("RC2ParameterSpec"),
              new Import[] {
                newImport("javax.crypto.spec.RC2ParameterSpec", false),
              })
          .put(
              new Identifier("Identity"),
              new Import[] {
                newImport("java.security.Identity", false),
              })
          .put(
              new Identifier("TabbedPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.TabbedPaneUI", false),
              })
          .put(
              new Identifier("TreeUI"),
              new Import[] {
                newImport("javax.swing.plaf.TreeUI", false),
              })
          .put(
              new Identifier("PasswordAuthentication"),
              new Import[] {
                newImport("java.net.PasswordAuthentication", false),
              })
          .put(
              new Identifier("MEMORY_MXBEAN_NAME"),
              new Import[] {
                newImport("java.lang.management.ManagementFactory.MEMORY_MXBEAN_NAME", true),
              })
          .put(
              new Identifier("ThreadMXBean"),
              new Import[] {
                newImport("java.lang.management.ThreadMXBean", false),
              })
          .put(
              new Identifier("DUPLICATE_ELEMENT"),
              new Import[] {
                newImport("org.ietf.jgss.GSSException.DUPLICATE_ELEMENT", true),
              })
          .put(
              new Identifier("ofHoursMinutes"),
              new Import[] {
                newImport("java.time.ZoneOffset.ofHoursMinutes", true),
              })
          .put(
              new Identifier("StandardMBean"),
              new Import[] {
                newImport("javax.management.StandardMBean", false),
              })
          .put(
              new Identifier("XAER_PROTO"),
              new Import[] {
                newImport("javax.transaction.xa.XAException.XAER_PROTO", true),
              })
          .put(
              new Identifier("SMALL_ICON"),
              new Import[] {
                newImport("javax.swing.Action.SMALL_ICON", true),
              })
          .put(
              new Identifier("ENV_6X9"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ENV_6X9", true),
              })
          .put(
              new Identifier("TypeMismatchHelper"),
              new Import[] {
                newImport("org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper", false),
                newImport("org.omg.IOP.CodecPackage.TypeMismatchHelper", false),
              })
          .put(
              new Identifier("APPLET"),
              new Import[] {
                newImport("javax.naming.Context.APPLET", true),
                newImport("javax.swing.text.html.HTML.Tag.APPLET", true),
              })
          .put(
              new Identifier("MIN_WEIGHT"),
              new Import[] {
                newImport("java.util.Locale.LanguageRange.MIN_WEIGHT", true),
              })
          .put(
              new Identifier("BasicCheckBoxUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicCheckBoxUI", false),
              })
          .put(
              new Identifier("VisibilityHelper"),
              new Import[] {
                newImport("org.omg.CORBA.VisibilityHelper", false),
              })
          .put(
              new Identifier("KERNING"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.KERNING", true),
              })
          .put(
              new Identifier("NotificationBroadcaster"),
              new Import[] {
                newImport("javax.management.NotificationBroadcaster", false),
              })
          .put(
              new Identifier("Level"),
              new Import[] {
                newImport("java.util.logging.Level", false),
              })
          .put(
              new Identifier("ACCESSIBLE_TEXT_PROPERTY"),
              new Import[] {
                newImport("javax.accessibility.AccessibleContext.ACCESSIBLE_TEXT_PROPERTY", true),
              })
          .put(
              new Identifier("SystemFlavorMap"),
              new Import[] {
                newImport("java.awt.datatransfer.SystemFlavorMap", false),
              })
          .put(
              new Identifier("getMidiFileFormat"),
              new Import[] {
                newImport("javax.sound.midi.MidiSystem.getMidiFileFormat", true),
              })
          .put(
              new Identifier("AddressHelper"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextExtPackage.AddressHelper", false),
              })
          .put(
              new Identifier("Path2D"),
              new Import[] {
                newImport("java.awt.geom.Path2D", false),
              })
          .put(
              new Identifier("HighlightPainter"),
              new Import[] {
                newImport("javax.swing.text.Highlighter.HighlightPainter", false),
              })
          .put(
              new Identifier("StandardEmitterMBean"),
              new Import[] {
                newImport("javax.management.StandardEmitterMBean", false),
              })
          .put(
              new Identifier("PrivateClassLoader"),
              new Import[] {
                newImport("javax.management.loading.PrivateClassLoader", false),
              })
          .put(
              new Identifier("CertificateFactory"),
              new Import[] {
                newImport("java.security.cert.CertificateFactory", false),
              })
          .put(
              new Identifier("out"),
              new Import[] {
                newImport("java.io.FileDescriptor.out", true),
                newImport("java.lang.System.out", true),
              })
          .put(
              new Identifier("MEMORY_THRESHOLD_EXCEEDED"),
              new Import[] {
                newImport(
                    "java.lang.management.MemoryNotificationInfo.MEMORY_THRESHOLD_EXCEEDED", true),
              })
          .put(
              new Identifier("serialVersionUID"),
              new Import[] {
                newImport("java.rmi.server.RemoteRef.serialVersionUID", true),
                newImport("java.rmi.server.ServerRef.serialVersionUID", true),
                newImport("java.security.Key.serialVersionUID", true),
                newImport("java.security.PrivateKey.serialVersionUID", true),
                newImport("java.security.PublicKey.serialVersionUID", true),
                newImport("java.security.interfaces.DSAPrivateKey.serialVersionUID", true),
                newImport("java.security.interfaces.DSAPublicKey.serialVersionUID", true),
                newImport("java.security.interfaces.ECPrivateKey.serialVersionUID", true),
                newImport("java.security.interfaces.ECPublicKey.serialVersionUID", true),
                newImport(
                    "java.security.interfaces.RSAMultiPrimePrivateCrtKey.serialVersionUID", true),
                newImport("java.security.interfaces.RSAPrivateCrtKey.serialVersionUID", true),
                newImport("java.security.interfaces.RSAPrivateKey.serialVersionUID", true),
                newImport("java.security.interfaces.RSAPublicKey.serialVersionUID", true),
                newImport("javax.crypto.SecretKey.serialVersionUID", true),
                newImport("javax.crypto.interfaces.DHPrivateKey.serialVersionUID", true),
                newImport("javax.crypto.interfaces.DHPublicKey.serialVersionUID", true),
                newImport("javax.crypto.interfaces.PBEKey.serialVersionUID", true),
                newImport("javax.naming.Name.serialVersionUID", true),
                newImport("javax.naming.directory.Attribute.serialVersionUID", true),
              })
          .put(
              new Identifier("methodType"),
              new Import[] {
                newImport("java.lang.invoke.MethodType.methodType", true),
              })
          .put(
              new Identifier("Locator2"),
              new Import[] {
                newImport("org.xml.sax.ext.Locator2", false),
              })
          .put(
              new Identifier("copy"),
              new Import[] {
                newImport("java.nio.file.Files.copy", true),
                newImport("java.util.Collections.copy", true),
              })
          .put(
              new Identifier("VALUE_RANGE_MIN_INCLUSIVE"),
              new Import[] {
                newImport(
                    "javax.imageio.metadata.IIOMetadataFormat.VALUE_RANGE_MIN_INCLUSIVE", true),
              })
          .put(
              new Identifier("Streamable"),
              new Import[] {
                newImport("org.omg.CORBA.portable.Streamable", false),
              })
          .put(
              new Identifier("RowSorterListener"),
              new Import[] {
                newImport("javax.swing.event.RowSorterListener", false),
              })
          .put(
              new Identifier("VK_PRINTSCREEN"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_PRINTSCREEN", true),
              })
          .put(
              new Identifier("ITALIC"),
              new Import[] {
                newImport("java.awt.Font.ITALIC", true),
              })
          .put(
              new Identifier("BORDER_TOP"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.BORDER_TOP", true),
              })
          .put(
              new Identifier("DOMErrorHandler"),
              new Import[] {
                newImport("org.w3c.dom.DOMErrorHandler", false),
              })
          .put(
              new Identifier("FontSizeAction"),
              new Import[] {
                newImport("javax.swing.text.StyledEditorKit.FontSizeAction", false),
              })
          .put(
              new Identifier("ISO_LOCAL_DATE_TIME"),
              new Import[] {
                newImport("java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME", true),
              })
          .put(
              new Identifier("StrictMath"),
              new Import[] {
                newImport("java.lang.StrictMath", false),
              })
          .put(
              new Identifier("SPAN"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.SPAN", true),
              })
          .put(
              new Identifier("isAbstract"),
              new Import[] {
                newImport("java.lang.reflect.Modifier.isAbstract", true),
              })
          .put(
              new Identifier("newReader"),
              new Import[] {
                newImport("java.nio.channels.Channels.newReader", true),
              })
          .put(
              new Identifier("APPROVE_BUTTON_TOOL_TIP_TEXT_CHANGED_PROPERTY"),
              new Import[] {
                newImport(
                    "javax.swing.JFileChooser.APPROVE_BUTTON_TOOL_TIP_TEXT_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("isBold"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.isBold", true),
              })
          .put(
              new Identifier("Thread"),
              new Import[] {
                newImport("java.lang.Thread", false),
              })
          .put(
              new Identifier("TexturePaint"),
              new Import[] {
                newImport("java.awt.TexturePaint", false),
              })
          .put(
              new Identifier("KEY_LOCATION_UNKNOWN"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.KEY_LOCATION_UNKNOWN", true),
              })
          .put(
              new Identifier("DoubleFunction"),
              new Import[] {
                newImport("java.util.function.DoubleFunction", false),
              })
          .put(
              new Identifier("REVERSE_PORTRAIT"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.OrientationRequested.REVERSE_PORTRAIT", true),
              })
          .put(
              new Identifier("VK_DEAD_TILDE"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_DEAD_TILDE", true),
              })
          .put(
              new Identifier("isName"),
              new Import[] {
                newImport("javax.lang.model.SourceVersion.isName", true),
              })
          .put(
              new Identifier("KANGXI_RADICALS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.KANGXI_RADICALS", true),
              })
          .put(
              new Identifier("MANIFEST_NAME"),
              new Import[] {
                newImport("java.util.jar.JarFile.MANIFEST_NAME", true),
              })
          .put(
              new Identifier("UnsupportedAddressTypeException"),
              new Import[] {
                newImport("java.nio.channels.UnsupportedAddressTypeException", false),
              })
          .put(
              new Identifier("PLAIN_MESSAGE"),
              new Import[] {
                newImport("javax.swing.JOptionPane.PLAIN_MESSAGE", true),
              })
          .put(
              new Identifier("PolicyErrorHolder"),
              new Import[] {
                newImport("org.omg.CORBA.PolicyErrorHolder", false),
              })
          .put(
              new Identifier("RuntimeErrorException"),
              new Import[] {
                newImport("javax.management.RuntimeErrorException", false),
              })
          .put(
              new Identifier("VK_NUMBER_SIGN"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_NUMBER_SIGN", true),
              })
          .put(
              new Identifier("MailcapCommandMap"),
              new Import[] {
                newImport("javax.activation.MailcapCommandMap", false),
              })
          .put(
              new Identifier("VariableHeightLayoutCache"),
              new Import[] {
                newImport("javax.swing.tree.VariableHeightLayoutCache", false),
              })
          .put(
              new Identifier("checkedSortedMap"),
              new Import[] {
                newImport("java.util.Collections.checkedSortedMap", true),
              })
          .put(
              new Identifier("AUTO_RESIZE_ALL_COLUMNS"),
              new Import[] {
                newImport("javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS", true),
              })
          .put(
              new Identifier("pathSeparator"),
              new Import[] {
                newImport("java.io.File.pathSeparator", true),
              })
          .put(
              new Identifier("VK_DEAD_OGONEK"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_DEAD_OGONEK", true),
              })
          .put(
              new Identifier("Kind"),
              new Import[] {
                newImport("java.nio.file.WatchEvent.Kind", false),
                newImport("javax.tools.Diagnostic.Kind", false),
                newImport("javax.tools.JavaFileObject.Kind", false),
              })
          .put(
              new Identifier("RMIConnectionImpl_Stub"),
              new Import[] {
                newImport("javax.management.remote.rmi.RMIConnectionImpl_Stub", false),
              })
          .put(
              new Identifier("Stream"),
              new Import[] {
                newImport("java.util.stream.Stream", false),
              })
          .put(
              new Identifier("printDecimal"),
              new Import[] {
                newImport("javax.xml.bind.DatatypeConverter.printDecimal", true),
              })
          .put(
              new Identifier("isJavaMIMEType"),
              new Import[] {
                newImport("java.awt.datatransfer.SystemFlavorMap.isJavaMIMEType", true),
              })
          .put(
              new Identifier("DST_OFFSET"),
              new Import[] {
                newImport("java.util.Calendar.DST_OFFSET", true),
              })
          .put(
              new Identifier("RAW_X509_CERTIFICATE_TYPE"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.keyinfo.X509Data.RAW_X509_CERTIFICATE_TYPE", true),
              })
          .put(
              new Identifier("TransformException"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.TransformException", false),
              })
          .put(
              new Identifier("Period"),
              new Import[] {
                newImport("java.time.Period", false),
              })
          .put(
              new Identifier("INTERLOCK_OPEN"),
              new Import[] {
                newImport("javax.print.attribute.standard.PrinterStateReason.INTERLOCK_OPEN", true),
              })
          .put(
              new Identifier("EventObject"),
              new Import[] {
                newImport("java.util.EventObject", false),
              })
          .put(
              new Identifier("LOGGING_MXBEAN_NAME"),
              new Import[] {
                newImport("java.util.logging.LogManager.LOGGING_MXBEAN_NAME", true),
              })
          .put(
              new Identifier("ObjectHolder"),
              new Import[] {
                newImport("org.omg.CORBA.ObjectHolder", false),
              })
          .put(
              new Identifier("SOAPBody"),
              new Import[] {
                newImport("javax.xml.soap.SOAPBody", false),
              })
          .put(
              new Identifier("PrinterName"),
              new Import[] {
                newImport("javax.print.attribute.standard.PrinterName", false),
              })
          .put(
              new Identifier("CannotProceedHelper"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextPackage.CannotProceedHelper", false),
              })
          .put(
              new Identifier("EnumControl"),
              new Import[] {
                newImport("javax.sound.sampled.EnumControl", false),
              })
          .put(
              new Identifier("LAYOUT_LEFT_TO_RIGHT"),
              new Import[] {
                newImport("java.awt.Font.LAYOUT_LEFT_TO_RIGHT", true),
              })
          .put(
              new Identifier("VALUE_FRACTIONALMETRICS_DEFAULT"),
              new Import[] {
                newImport("java.awt.RenderingHints.VALUE_FRACTIONALMETRICS_DEFAULT", true),
              })
          .put(
              new Identifier("AUGUST"),
              new Import[] {
                newImport("java.util.Calendar.AUGUST", true),
                newImport("javax.xml.datatype.DatatypeConstants.AUGUST", true),
              })
          .put(
              new Identifier("logStream"),
              new Import[] {
                newImport("javax.swing.DebugGraphics.logStream", true),
              })
          .put(
              new Identifier("AccessibleHyperlink"),
              new Import[] {
                newImport("javax.accessibility.AccessibleHyperlink", false),
              })
          .put(
              new Identifier("QualifiedNameable"),
              new Import[] {
                newImport("javax.lang.model.element.QualifiedNameable", false),
              })
          .put(
              new Identifier("XmlJavaTypeAdapters"),
              new Import[] {
                newImport("javax.xml.bind.annotation.adapters.XmlJavaTypeAdapters", false),
              })
          .put(
              new Identifier("InvalidAddressHolder"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextExtPackage.InvalidAddressHolder", false),
              })
          .put(
              new Identifier("XmlInlineBinaryData"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlInlineBinaryData", false),
              })
          .put(
              new Identifier("STRUCT"),
              new Import[] {
                newImport("java.sql.Types.STRUCT", true),
              })
          .put(
              new Identifier("dk_Module"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind.dk_Module", true),
              })
          .put(
              new Identifier("getFileChooserNewFolderIcon"),
              new Import[] {
                newImport(
                    "javax.swing.plaf.metal.MetalIconFactory.getFileChooserNewFolderIcon", true),
              })
          .put(
              new Identifier("PolicyNode"),
              new Import[] {
                newImport("java.security.cert.PolicyNode", false),
              })
          .put(
              new Identifier("VK_BACK_SLASH"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_BACK_SLASH", true),
              })
          .put(
              new Identifier("MAX_CODE_POINT"),
              new Import[] {
                newImport("java.lang.Character.MAX_CODE_POINT", true),
              })
          .put(
              new Identifier("icSigBlueTRCTag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigBlueTRCTag", true),
              })
          .put(
              new Identifier("ObjectReferenceFactoryHelper"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.ObjectReferenceFactoryHelper", false),
              })
          .put(
              new Identifier("BlockView"),
              new Import[] {
                newImport("javax.swing.text.html.BlockView", false),
              })
          .put(
              new Identifier("Insets"),
              new Import[] {
                newImport("java.awt.Insets", false),
              })
          .put(
              new Identifier("CodingErrorAction"),
              new Import[] {
                newImport("java.nio.charset.CodingErrorAction", false),
              })
          .put(
              new Identifier("setURLStreamHandlerFactory"),
              new Import[] {
                newImport("java.net.URL.setURLStreamHandlerFactory", true),
              })
          .put(
              new Identifier("HOUR"),
              new Import[] {
                newImport("java.util.Calendar.HOUR", true),
              })
          .put(
              new Identifier("MODIFIED_JULIAN_DAY"),
              new Import[] {
                newImport("java.time.temporal.JulianFields.MODIFIED_JULIAN_DAY", true),
              })
          .put(
              new Identifier("HTMLFrameHyperlinkEvent"),
              new Import[] {
                newImport("javax.swing.text.html.HTMLFrameHyperlinkEvent", false),
              })
          .put(
              new Identifier("XPathFilterParameterSpec"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.spec.XPathFilterParameterSpec", false),
              })
          .put(
              new Identifier("UnknownUserException"),
              new Import[] {
                newImport("org.omg.CORBA.UnknownUserException", false),
              })
          .put(
              new Identifier("URLStreamHandlerFactory"),
              new Import[] {
                newImport("java.net.URLStreamHandlerFactory", false),
              })
          .put(
              new Identifier("getScaleInstance"),
              new Import[] {
                newImport("java.awt.geom.AffineTransform.getScaleInstance", true),
              })
          .put(
              new Identifier("Operation"),
              new Import[] {
                newImport("java.rmi.server.Operation", false),
              })
          .put(
              new Identifier("ENTRY_CREATE"),
              new Import[] {
                newImport("java.nio.file.StandardWatchEventKinds.ENTRY_CREATE", true),
              })
          .put(
              new Identifier("GLOBAL_LOGGER_NAME"),
              new Import[] {
                newImport("java.util.logging.Logger.GLOBAL_LOGGER_NAME", true),
              })
          .put(
              new Identifier("createWritableRaster"),
              new Import[] {
                newImport("java.awt.image.Raster.createWritableRaster", true),
              })
          .put(
              new Identifier("SubjectDomainCombiner"),
              new Import[] {
                newImport("javax.security.auth.SubjectDomainCombiner", false),
              })
          .put(
              new Identifier("selectionEndLineAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.selectionEndLineAction", true),
              })
          .put(
              new Identifier("Reason"),
              new Import[] {
                newImport("java.security.cert.CertPathValidatorException.Reason", false),
              })
          .put(
              new Identifier("ENTITY"),
              new Import[] {
                newImport("javax.swing.text.html.parser.DTDConstants.ENTITY", true),
              })
          .put(
              new Identifier("_DynArrayStub"),
              new Import[] {
                newImport("org.omg.DynamicAny._DynArrayStub", false),
              })
          .put(
              new Identifier("ALWAYS_UPDATE"),
              new Import[] {
                newImport("javax.swing.text.DefaultCaret.ALWAYS_UPDATE", true),
              })
          .put(
              new Identifier("CLOSE_CURSORS_AT_COMMIT"),
              new Import[] {
                newImport("java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT", true),
              })
          .put(
              new Identifier("FormatMismatchHelper"),
              new Import[] {
                newImport("org.omg.IOP.CodecPackage.FormatMismatchHelper", false),
              })
          .put(
              new Identifier("ItemSelectable"),
              new Import[] {
                newImport("java.awt.ItemSelectable", false),
              })
          .put(
              new Identifier("EncodedKeySpec"),
              new Import[] {
                newImport("java.security.spec.EncodedKeySpec", false),
              })
          .put(
              new Identifier("Mode"),
              new Import[] {
                newImport("javax.jws.WebParam.Mode", false),
                newImport("javax.xml.ws.Service.Mode", false),
              })
          .put(
              new Identifier("ToDoubleBiFunction"),
              new Import[] {
                newImport("java.util.function.ToDoubleBiFunction", false),
              })
          .put(
              new Identifier("KRB_NT_UID"),
              new Import[] {
                newImport("javax.security.auth.kerberos.KerberosPrincipal.KRB_NT_UID", true),
              })
          .put(
              new Identifier("ofDays"),
              new Import[] {
                newImport("java.time.Duration.ofDays", true),
                newImport("java.time.Period.ofDays", true),
              })
          .put(
              new Identifier("AbstractElementVisitor6"),
              new Import[] {
                newImport("javax.lang.model.util.AbstractElementVisitor6", false),
              })
          .put(
              new Identifier("AbstractElementVisitor7"),
              new Import[] {
                newImport("javax.lang.model.util.AbstractElementVisitor7", false),
              })
          .put(
              new Identifier("AbstractElementVisitor8"),
              new Import[] {
                newImport("javax.lang.model.util.AbstractElementVisitor8", false),
              })
          .put(
              new Identifier("getSystemToolClassLoader"),
              new Import[] {
                newImport("javax.tools.ToolProvider.getSystemToolClassLoader", true),
              })
          .put(
              new Identifier("ULongLongSeqHolder"),
              new Import[] {
                newImport("org.omg.CORBA.ULongLongSeqHolder", false),
              })
          .put(
              new Identifier("SONG_POSITION_POINTER"),
              new Import[] {
                newImport("javax.sound.midi.ShortMessage.SONG_POSITION_POINTER", true),
              })
          .put(
              new Identifier("KeyBinding"),
              new Import[] {
                newImport("javax.swing.text.JTextComponent.KeyBinding", false),
              })
          .put(
              new Identifier("FORMAT_CLASS"),
              new Import[] {
                newImport("java.util.ResourceBundle.Control.FORMAT_CLASS", true),
              })
          .put(
              new Identifier("ChronoUnit"),
              new Import[] {
                newImport("java.time.temporal.ChronoUnit", false),
              })
          .build();
}
