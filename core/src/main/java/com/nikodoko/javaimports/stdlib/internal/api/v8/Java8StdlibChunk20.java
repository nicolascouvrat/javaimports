// Code generated by GenerateStdlib.java. DO NOT EDIT.
package com.nikodoko.javaimports.stdlib.internal.api.v8;

import static com.nikodoko.javaimports.stdlib.internal.Stdlib.newImport;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.common.Identifier;
import com.nikodoko.javaimports.common.Import;
import java.util.Map;

public class Java8StdlibChunk20 {
  static final Map<Identifier, Import[]> CLASSES =
      new ImmutableMap.Builder<Identifier, Import[]>()
          .put(
              new Identifier("ContainerOrderFocusTraversalPolicy"),
              new Import[] {
                newImport("java.awt.ContainerOrderFocusTraversalPolicy", false),
              })
          .put(
              new Identifier("USE_SERVANT_MANAGER"),
              new Import[] {
                newImport(
                    "org.omg.PortableServer.RequestProcessingPolicyValue.USE_SERVANT_MANAGER",
                    true),
              })
          .put(
              new Identifier("ScheduledThreadPoolExecutor"),
              new Import[] {
                newImport("java.util.concurrent.ScheduledThreadPoolExecutor", false),
              })
          .put(
              new Identifier("BeanInfo"),
              new Import[] {
                newImport("java.beans.BeanInfo", false),
              })
          .put(
              new Identifier("InitParam"),
              new Import[] {
                newImport("javax.jws.soap.InitParam", false),
              })
          .put(
              new Identifier("rint"),
              new Import[] {
                newImport("java.lang.Math.rint", true),
                newImport("java.lang.StrictMath.rint", true),
              })
          .put(
              new Identifier("FloatHolder"),
              new Import[] {
                newImport("org.omg.CORBA.FloatHolder", false),
              })
          .put(
              new Identifier("GROUP_BOX"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.GROUP_BOX", true),
              })
          .put(
              new Identifier("FontConstants"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.FontConstants", false),
              })
          .put(
              new Identifier("verifyAttributeValue"),
              new Import[] {
                newImport("javax.print.attribute.AttributeSetUtilities.verifyAttributeValue", true),
              })
          .put(
              new Identifier("createDashedBorder"),
              new Import[] {
                newImport("javax.swing.BorderFactory.createDashedBorder", true),
              })
          .put(
              new Identifier("MULTIPLE_INTERVAL_SELECTION"),
              new Import[] {
                newImport("javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION", true),
              })
          .put(
              new Identifier("SE_RESIZE_CURSOR"),
              new Import[] {
                newImport("java.awt.Cursor.SE_RESIZE_CURSOR", true),
                newImport("java.awt.Frame.SE_RESIZE_CURSOR", true),
              })
          .put(
              new Identifier("TAG_AVAR"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_AVAR", true),
              })
          .put(
              new Identifier("getMediaSizeForName"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSize.getMediaSizeForName", true),
              })
          .put(
              new Identifier("Endpoint"),
              new Import[] {
                newImport("javax.xml.ws.Endpoint", false),
              })
          .put(
              new Identifier("POAManager"),
              new Import[] {
                newImport("org.omg.PortableServer.POAManager", false),
              })
          .put(
              new Identifier("ThreadLocal"),
              new Import[] {
                newImport("java.lang.ThreadLocal", false),
              })
          .put(
              new Identifier("deepHashCode"),
              new Import[] {
                newImport("java.util.Arrays.deepHashCode", true),
              })
          .put(
              new Identifier("RunnableFuture"),
              new Import[] {
                newImport("java.util.concurrent.RunnableFuture", false),
              })
          .put(
              new Identifier("JMXConnectionNotification"),
              new Import[] {
                newImport("javax.management.remote.JMXConnectionNotification", false),
              })
          .put(
              new Identifier("disableSwingFocusManager"),
              new Import[] {
                newImport("javax.swing.FocusManager.disableSwingFocusManager", true),
              })
          .put(
              new Identifier("tk_double"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind.tk_double", true),
              })
          .put(
              new Identifier("MOUSE_EXIT"),
              new Import[] {
                newImport("java.awt.Event.MOUSE_EXIT", true),
              })
          .put(
              new Identifier("IdAssignmentPolicyOperations"),
              new Import[] {
                newImport("org.omg.PortableServer.IdAssignmentPolicyOperations", false),
              })
          .put(
              new Identifier("IS_REPLACING_ENTITY_REFERENCES"),
              new Import[] {
                newImport("javax.xml.stream.XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES", true),
              })
          .put(
              new Identifier("MINUTE_FIELD"),
              new Import[] {
                newImport("java.text.DateFormat.MINUTE_FIELD", true),
              })
          .put(
              new Identifier("Instant"),
              new Import[] {
                newImport("java.time.Instant", false),
              })
          .put(
              new Identifier("windowForComponent"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.windowForComponent", true),
              })
          .put(
              new Identifier("WritableByteChannel"),
              new Import[] {
                newImport("java.nio.channels.WritableByteChannel", false),
              })
          .put(
              new Identifier("JapaneseChronology"),
              new Import[] {
                newImport("java.time.chrono.JapaneseChronology", false),
              })
          .put(
              new Identifier("VERTICAL_SCROLLBAR"),
              new Import[] {
                newImport("javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR", true),
              })
          .put(
              new Identifier("MIN"),
              new Import[] {
                newImport("java.time.Instant.MIN", true),
                newImport("java.time.LocalDate.MIN", true),
                newImport("java.time.LocalDateTime.MIN", true),
                newImport("java.time.LocalTime.MIN", true),
                newImport("java.time.OffsetDateTime.MIN", true),
                newImport("java.time.OffsetTime.MIN", true),
                newImport("java.time.ZoneOffset.MIN", true),
              })
          .put(
              new Identifier("UNICODE_CASE"),
              new Import[] {
                newImport("java.util.regex.Pattern.UNICODE_CASE", true),
              })
          .put(
              new Identifier("addExact"),
              new Import[] {
                newImport("java.lang.Math.addExact", true),
                newImport("java.lang.StrictMath.addExact", true),
              })
          .put(
              new Identifier("OVERFLOW"),
              new Import[] {
                newImport("java.nio.charset.CoderResult.OVERFLOW", true),
                newImport("java.nio.file.StandardWatchEventKinds.OVERFLOW", true),
              })
          .put(
              new Identifier("SNIHostName"),
              new Import[] {
                newImport("javax.net.ssl.SNIHostName", false),
              })
          .put(
              new Identifier("IS_ICON_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JInternalFrame.IS_ICON_PROPERTY", true),
              })
          .put(
              new Identifier("PHONETIC_EXTENSIONS_SUPPLEMENT"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.PHONETIC_EXTENSIONS_SUPPLEMENT", true),
              })
          .put(
              new Identifier("DATASOURCE_DB_LOCK"),
              new Import[] {
                newImport("javax.sql.rowset.spi.SyncProvider.DATASOURCE_DB_LOCK", true),
              })
          .put(
              new Identifier("InsertTabAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.InsertTabAction", false),
              })
          .put(
              new Identifier("BevelBorder"),
              new Import[] {
                newImport("javax.swing.border.BevelBorder", false),
              })
          .put(
              new Identifier("COMPONENT_HIDDEN"),
              new Import[] {
                newImport("java.awt.event.ComponentEvent.COMPONENT_HIDDEN", true),
              })
          .put(
              new Identifier("VK_CAPS_LOCK"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_CAPS_LOCK", true),
              })
          .put(
              new Identifier("SynthCheckBoxUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthCheckBoxUI", false),
              })
          .put(
              new Identifier("LinkedTransferQueue"),
              new Import[] {
                newImport("java.util.concurrent.LinkedTransferQueue", false),
              })
          .put(
              new Identifier("INVOCATION_LAST"),
              new Import[] {
                newImport("java.awt.event.InvocationEvent.INVOCATION_LAST", true),
              })
          .put(
              new Identifier("DefaultTableCellRenderer"),
              new Import[] {
                newImport("javax.swing.table.DefaultTableCellRenderer", false),
              })
          .put(
              new Identifier("DISCARDING"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.DISCARDING", false),
                newImport("org.omg.PortableServer.POAManagerPackage.State.DISCARDING", true),
              })
          .put(
              new Identifier("INTERNAL_FRAME"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.INTERNAL_FRAME", true),
                newImport("javax.swing.plaf.synth.Region.INTERNAL_FRAME", true),
              })
          .put(
              new Identifier("setSystem"),
              new Import[] {
                newImport("java.rmi.activation.ActivationGroup.setSystem", true),
              })
          .put(
              new Identifier("UNICODE_LOCALE_EXTENSION"),
              new Import[] {
                newImport("java.util.Locale.UNICODE_LOCALE_EXTENSION", true),
              })
          .put(
              new Identifier("typesIn"),
              new Import[] {
                newImport("javax.lang.model.util.ElementFilter.typesIn", true),
              })
          .put(
              new Identifier("CoderMalfunctionError"),
              new Import[] {
                newImport("java.nio.charset.CoderMalfunctionError", false),
              })
          .put(
              new Identifier("activeCount"),
              new Import[] {
                newImport("java.lang.Thread.activeCount", true),
              })
          .put(
              new Identifier("SUPPLEMENTARY_PRIVATE_USE_AREA_B"),
              new Import[] {
                newImport(
                    "java.lang.Character.UnicodeBlock.SUPPLEMENTARY_PRIVATE_USE_AREA_B", true),
              })
          .put(
              new Identifier("InvalidMidiDataException"),
              new Import[] {
                newImport("javax.sound.midi.InvalidMidiDataException", false),
              })
          .put(
              new Identifier("_COMPLETED_NO"),
              new Import[] {
                newImport("org.omg.CORBA.CompletionStatus._COMPLETED_NO", true),
              })
          .put(
              new Identifier("FLAG_HAS_POSITION_ADJUSTMENTS"),
              new Import[] {
                newImport("java.awt.font.GlyphVector.FLAG_HAS_POSITION_ADJUSTMENTS", true),
              })
          .put(
              new Identifier("SerialDatalink"),
              new Import[] {
                newImport("javax.sql.rowset.serial.SerialDatalink", false),
              })
          .put(
              new Identifier("MIN_SCROLL"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicSliderUI.MIN_SCROLL", true),
              })
          .put(
              new Identifier("SUPPLEMENTARY_PRIVATE_USE_AREA_A"),
              new Import[] {
                newImport(
                    "java.lang.Character.UnicodeBlock.SUPPLEMENTARY_PRIVATE_USE_AREA_A", true),
              })
          .put(
              new Identifier("LocalObject"),
              new Import[] {
                newImport("org.omg.CORBA.LocalObject", false),
              })
          .put(
              new Identifier("ISO_OFFSET_DATE_TIME"),
              new Import[] {
                newImport("java.time.format.DateTimeFormatter.ISO_OFFSET_DATE_TIME", true),
              })
          .put(
              new Identifier("nextDouble"),
              new Import[] {
                newImport("java.text.ChoiceFormat.nextDouble", true),
              })
          .put(
              new Identifier("TRUNCATED"),
              new Import[] {
                newImport("javax.accessibility.AccessibleState.TRUNCATED", true),
              })
          .put(
              new Identifier("previousWordAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.previousWordAction", true),
              })
          .put(
              new Identifier("SectionElementName"),
              new Import[] {
                newImport("javax.swing.text.AbstractDocument.SectionElementName", true),
              })
          .put(
              new Identifier("TRANSACTION_READ_UNCOMMITTED"),
              new Import[] {
                newImport("java.sql.Connection.TRANSACTION_READ_UNCOMMITTED", true),
              })
          .put(
              new Identifier("Cipher"),
              new Import[] {
                newImport("javax.crypto.Cipher", false),
              })
          .put(
              new Identifier("UndoableEditSupport"),
              new Import[] {
                newImport("javax.swing.undo.UndoableEditSupport", false),
              })
          .put(
              new Identifier("BAD_OPERATION"),
              new Import[] {
                newImport("org.omg.CORBA.BAD_OPERATION", false),
              })
          .put(
              new Identifier("WARNING_DIALOG"),
              new Import[] {
                newImport("javax.swing.JRootPane.WARNING_DIALOG", true),
              })
          .put(
              new Identifier("TRADITIONAL_HANZI"),
              new Import[] {
                newImport("java.awt.im.InputSubset.TRADITIONAL_HANZI", true),
              })
          .put(
              new Identifier("lookupAny"),
              new Import[] {
                newImport("java.io.ObjectStreamClass.lookupAny", true),
              })
          .put(
              new Identifier("ClassFormatError"),
              new Import[] {
                newImport("java.lang.ClassFormatError", false),
              })
          .put(
              new Identifier("ROLLOVER_ENABLED_CHANGED_PROPERTY"),
              new Import[] {
                newImport("javax.swing.AbstractButton.ROLLOVER_ENABLED_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("OpenMBeanInfoSupport"),
              new Import[] {
                newImport("javax.management.openmbean.OpenMBeanInfoSupport", false),
              })
          .put(
              new Identifier("FolderIcon16"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalIconFactory.FolderIcon16", false),
              })
          .put(
              new Identifier("getTargetFormats"),
              new Import[] {
                newImport("javax.sound.sampled.AudioSystem.getTargetFormats", true),
              })
          .put(
              new Identifier("NARROW_STANDALONE"),
              new Import[] {
                newImport("java.util.Calendar.NARROW_STANDALONE", true),
              })
          .put(
              new Identifier("SynthStyle"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthStyle", false),
              })
          .put(
              new Identifier("showInputDialog"),
              new Import[] {
                newImport("javax.swing.JOptionPane.showInputDialog", true),
              })
          .put(
              new Identifier("SSLContextSpi"),
              new Import[] {
                newImport("javax.net.ssl.SSLContextSpi", false),
              })
          .put(
              new Identifier("UndeclaredThrowableException"),
              new Import[] {
                newImport("java.lang.reflect.UndeclaredThrowableException", false),
              })
          .put(
              new Identifier("StreamHandler"),
              new Import[] {
                newImport("java.util.logging.StreamHandler", false),
              })
          .put(
              new Identifier("URI_SOAP_1_2_ROLE_NONE"),
              new Import[] {
                newImport("javax.xml.soap.SOAPConstants.URI_SOAP_1_2_ROLE_NONE", true),
              })
          .put(
              new Identifier("defaultForkJoinWorkerThreadFactory"),
              new Import[] {
                newImport(
                    "java.util.concurrent.ForkJoinPool.defaultForkJoinWorkerThreadFactory", true),
              })
          .put(
              new Identifier("BasicScrollBarUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicScrollBarUI", false),
              })
          .put(
              new Identifier("Guard"),
              new Import[] {
                newImport("java.security.Guard", false),
              })
          .put(
              new Identifier("icHdrDeviceClass"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icHdrDeviceClass", true),
              })
          .put(
              new Identifier("ClassNotFoundException"),
              new Import[] {
                newImport("java.lang.ClassNotFoundException", false),
              })
          .put(
              new Identifier("AccountLockedException"),
              new Import[] {
                newImport("javax.security.auth.login.AccountLockedException", false),
              })
          .put(
              new Identifier("newMBeanProxy"),
              new Import[] {
                newImport("javax.management.JMX.newMBeanProxy", true),
              })
          .put(
              new Identifier("ServerSocketFactory"),
              new Import[] {
                newImport("javax.net.ServerSocketFactory", false),
              })
          .put(
              new Identifier("icCurveData"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icCurveData", true),
              })
          .put(
              new Identifier("TRAILING"),
              new Import[] {
                newImport("java.awt.FlowLayout.TRAILING", true),
                newImport("javax.swing.SwingConstants.TRAILING", true),
                newImport("javax.swing.border.TitledBorder.TRAILING", true),
              })
          .put(
              new Identifier("XMLEventAllocator"),
              new Import[] {
                newImport("javax.xml.stream.util.XMLEventAllocator", false),
              })
          .put(
              new Identifier("MLet"),
              new Import[] {
                newImport("javax.management.loading.MLet", false),
              })
          .put(
              new Identifier("InvalidTargetObjectTypeException"),
              new Import[] {
                newImport("javax.management.modelmbean.InvalidTargetObjectTypeException", false),
              })
          .put(
              new Identifier("PAINT_FIRST"),
              new Import[] {
                newImport("java.awt.event.PaintEvent.PAINT_FIRST", true),
              })
          .put(
              new Identifier("CyclicBarrier"),
              new Import[] {
                newImport("java.util.concurrent.CyclicBarrier", false),
              })
          .put(
              new Identifier("EndpointReference"),
              new Import[] {
                newImport("javax.xml.ws.EndpointReference", false),
              })
          .put(
              new Identifier("StateEditable"),
              new Import[] {
                newImport("javax.swing.undo.StateEditable", false),
              })
          .put(
              new Identifier("type2name"),
              new Import[] {
                newImport("javax.swing.text.html.parser.AttributeList.type2name", true),
              })
          .put(
              new Identifier("VK_INVERTED_EXCLAMATION_MARK"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_INVERTED_EXCLAMATION_MARK", true),
              })
          .put(
              new Identifier("JTable"),
              new Import[] {
                newImport("javax.swing.JTable", false),
              })
          .put(
              new Identifier("GSSContext"),
              new Import[] {
                newImport("org.ietf.jgss.GSSContext", false),
              })
          .put(
              new Identifier("PreDestroy"),
              new Import[] {
                newImport("javax.annotation.PreDestroy", false),
              })
          .put(
              new Identifier("setSubscript"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.setSubscript", true),
              })
          .put(
              new Identifier("TYPE_MASK_SCALE"),
              new Import[] {
                newImport("java.awt.geom.AffineTransform.TYPE_MASK_SCALE", true),
              })
          .put(
              new Identifier("PERSIST_STORE"),
              new Import[] {
                newImport("org.omg.CORBA.PERSIST_STORE", false),
              })
          .put(
              new Identifier("VALUE_LIST"),
              new Import[] {
                newImport("javax.imageio.metadata.IIOMetadataFormat.VALUE_LIST", true),
              })
          .put(
              new Identifier("NotFoundHelper"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextPackage.NotFoundHelper", false),
              })
          .put(
              new Identifier("IIOInvalidTreeException"),
              new Import[] {
                newImport("javax.imageio.metadata.IIOInvalidTreeException", false),
              })
          .put(
              new Identifier("IMG_ALIGN_TOP"),
              new Import[] {
                newImport("javax.swing.text.html.HTMLEditorKit.IMG_ALIGN_TOP", true),
              })
          .put(
              new Identifier("VERIFY"),
              new Import[] {
                newImport("javax.xml.crypto.KeySelector.Purpose.VERIFY", true),
              })
          .put(
              new Identifier("HTTP_BINDING"),
              new Import[] {
                newImport("javax.xml.ws.http.HTTPBinding.HTTP_BINDING", true),
              })
          .put(
              new Identifier("MemoryHandler"),
              new Import[] {
                newImport("java.util.logging.MemoryHandler", false),
              })
          .put(
              new Identifier("UNSPECIFIED_OPTION"),
              new Import[] {
                newImport(
                    "javax.security.auth.callback.ConfirmationCallback.UNSPECIFIED_OPTION", true),
              })
          .put(
              new Identifier("SrcIn"),
              new Import[] {
                newImport("java.awt.AlphaComposite.SrcIn", true),
              })
          .put(
              new Identifier("guessContentTypeFromStream"),
              new Import[] {
                newImport("java.net.URLConnection.guessContentTypeFromStream", true),
              })
          .put(
              new Identifier("not"),
              new Import[] {
                newImport("javax.management.Query.not", true),
              })
          .put(
              new Identifier("DISPLAY"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.DISPLAY", true),
              })
          .put(
              new Identifier("EDGE_STITCH"),
              new Import[] {
                newImport("javax.print.attribute.standard.Finishings.EDGE_STITCH", true),
              })
          .put(
              new Identifier("attributeNullableUnknown"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.attributeNullableUnknown", true),
              })
          .put(
              new Identifier("functionColumnInOut"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.functionColumnInOut", true),
              })
          .put(
              new Identifier("now"),
              new Import[] {
                newImport("java.time.Instant.now", true),
                newImport("java.time.LocalDate.now", true),
                newImport("java.time.LocalDateTime.now", true),
                newImport("java.time.LocalTime.now", true),
                newImport("java.time.MonthDay.now", true),
                newImport("java.time.OffsetDateTime.now", true),
                newImport("java.time.OffsetTime.now", true),
                newImport("java.time.Year.now", true),
                newImport("java.time.YearMonth.now", true),
                newImport("java.time.ZonedDateTime.now", true),
                newImport("java.time.chrono.HijrahDate.now", true),
                newImport("java.time.chrono.JapaneseDate.now", true),
                newImport("java.time.chrono.MinguoDate.now", true),
                newImport("java.time.chrono.ThaiBuddhistDate.now", true),
              })
          .put(
              new Identifier("BufferedOutputStream"),
              new Import[] {
                newImport("java.io.BufferedOutputStream", false),
              })
          .put(
              new Identifier("BindingHelper"),
              new Import[] {
                newImport("org.omg.CosNaming.BindingHelper", false),
              })
          .put(
              new Identifier("CONNECTING_TO_DEVICE"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.PrinterStateReason.CONNECTING_TO_DEVICE", true),
              })
          .put(
              new Identifier("LAYERED_PANE_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JInternalFrame.LAYERED_PANE_PROPERTY", true),
              })
          .put(
              new Identifier("NameNotFoundException"),
              new Import[] {
                newImport("javax.naming.NameNotFoundException", false),
              })
          .put(
              new Identifier("CopyAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.CopyAction", false),
              })
          .put(
              new Identifier("RETAIN"),
              new Import[] {
                newImport("org.omg.PortableServer.ServantRetentionPolicyValue.RETAIN", true),
              })
          .put(
              new Identifier("InputStream"),
              new Import[] {
                newImport("java.io.InputStream", false),
                newImport("org.omg.CORBA.portable.InputStream", false),
                newImport("org.omg.CORBA_2_3.portable.InputStream", false),
              })
          .put(
              new Identifier("DAY_OF_WEEK_IN_MONTH_FIELD"),
              new Import[] {
                newImport("java.text.DateFormat.DAY_OF_WEEK_IN_MONTH_FIELD", true),
              })
          .put(
              new Identifier("Activatable"),
              new Import[] {
                newImport("java.rmi.activation.Activatable", false),
              })
          .put(
              new Identifier("ENV_7X9"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ENV_7X9", true),
              })
          .put(
              new Identifier("LanguageRange"),
              new Import[] {
                newImport("java.util.Locale.LanguageRange", false),
              })
          .put(
              new Identifier("WEEK_OF_WEEK_BASED_YEAR"),
              new Import[] {
                newImport("java.time.temporal.IsoFields.WEEK_OF_WEEK_BASED_YEAR", true),
              })
          .put(
              new Identifier("UNSUPPORTED_POLICY"),
              new Import[] {
                newImport("org.omg.CORBA.UNSUPPORTED_POLICY", false),
              })
          .put(
              new Identifier("_dk_Enum"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind._dk_Enum", true),
              })
          .put(
              new Identifier("LSProgressEvent"),
              new Import[] {
                newImport("org.w3c.dom.ls.LSProgressEvent", false),
              })
          .put(
              new Identifier("TextLayout"),
              new Import[] {
                newImport("java.awt.font.TextLayout", false),
              })
          .put(
              new Identifier("REUSE"),
              new Import[] {
                newImport("javax.security.sasl.Sasl.REUSE", true),
              })
          .put(
              new Identifier("StartElement"),
              new Import[] {
                newImport("javax.xml.stream.events.StartElement", false),
              })
          .put(
              new Identifier("TransformAttribute"),
              new Import[] {
                newImport("java.awt.font.TransformAttribute", false),
              })
          .put(
              new Identifier("ISO_OFFSET_DATE"),
              new Import[] {
                newImport("java.time.format.DateTimeFormatter.ISO_OFFSET_DATE", true),
              })
          .put(
              new Identifier("PrinterMoreInfo"),
              new Import[] {
                newImport("javax.print.attribute.standard.PrinterMoreInfo", false),
              })
          .put(
              new Identifier("IndexedPropertyChangeEvent"),
              new Import[] {
                newImport("java.beans.IndexedPropertyChangeEvent", false),
              })
          .put(
              new Identifier("genericMethodType"),
              new Import[] {
                newImport("java.lang.invoke.MethodType.genericMethodType", true),
              })
          .put(
              new Identifier("UNDERLINE_LOW_TWO_PIXEL"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.UNDERLINE_LOW_TWO_PIXEL", true),
              })
          .put(
              new Identifier("OptionDialogBorder"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalBorders.OptionDialogBorder", false),
              })
          .put(
              new Identifier("JMXProviderException"),
              new Import[] {
                newImport("javax.management.remote.JMXProviderException", false),
              })
          .put(
              new Identifier("ChronoZonedDateTime"),
              new Import[] {
                newImport("java.time.chrono.ChronoZonedDateTime", false),
              })
          .put(
              new Identifier("LineBorder"),
              new Import[] {
                newImport("javax.swing.border.LineBorder", false),
              })
          .put(
              new Identifier("PrintConversionEventImpl"),
              new Import[] {
                newImport("javax.xml.bind.helpers.PrintConversionEventImpl", false),
              })
          .put(
              new Identifier("NO_GENERATED_KEYS"),
              new Import[] {
                newImport("java.sql.Statement.NO_GENERATED_KEYS", true),
              })
          .put(
              new Identifier("WIDTH_SEMI_EXTENDED"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.WIDTH_SEMI_EXTENDED", true),
              })
          .put(
              new Identifier("ACCEPT_ONLY"),
              new Import[] {
                newImport("org.ietf.jgss.GSSCredential.ACCEPT_ONLY", true),
              })
          .put(
              new Identifier("CHOOSER_PANELS_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JColorChooser.CHOOSER_PANELS_PROPERTY", true),
              })
          .put(
              new Identifier("ISO_C2_ENVELOPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_C2_ENVELOPE", true),
              })
          .put(
              new Identifier("WEEK_OF_YEAR"),
              new Import[] {
                newImport("java.text.DateFormat.Field.WEEK_OF_YEAR", true),
                newImport("java.util.Calendar.WEEK_OF_YEAR", true),
              })
          .put(
              new Identifier("DigestMethodParameterSpec"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.spec.DigestMethodParameterSpec", false),
              })
          .put(
              new Identifier("MBeanServerDelegateMBean"),
              new Import[] {
                newImport("javax.management.MBeanServerDelegateMBean", false),
              })
          .put(
              new Identifier("IndexedPropertyDescriptor"),
              new Import[] {
                newImport("java.beans.IndexedPropertyDescriptor", false),
              })
          .put(
              new Identifier("LabelUI"),
              new Import[] {
                newImport("javax.swing.plaf.LabelUI", false),
              })
          .put(
              new Identifier("BasicFileAttributes"),
              new Import[] {
                newImport("java.nio.file.attribute.BasicFileAttributes", false),
              })
          .put(
              new Identifier("getMouseModifiersText"),
              new Import[] {
                newImport("java.awt.event.MouseEvent.getMouseModifiersText", true),
              })
          .put(
              new Identifier("ADD_SUBDIRECTORY"),
              new Import[] {
                newImport("java.nio.file.attribute.AclEntryPermission.ADD_SUBDIRECTORY", true),
              })
          .put(
              new Identifier("InvalidAddressHelper"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextExtPackage.InvalidAddressHelper", false),
              })
          .put(
              new Identifier("isDefaultLookAndFeelDecorated"),
              new Import[] {
                newImport("javax.swing.JDialog.isDefaultLookAndFeelDecorated", true),
                newImport("javax.swing.JFrame.isDefaultLookAndFeelDecorated", true),
              })
          .put(
              new Identifier("LookupOp"),
              new Import[] {
                newImport("java.awt.image.LookupOp", false),
              })
          .put(
              new Identifier("ModalExclusionType"),
              new Import[] {
                newImport("java.awt.Dialog.ModalExclusionType", false),
              })
          .put(
              new Identifier("BeanContext"),
              new Import[] {
                newImport("java.beans.beancontext.BeanContext", false),
              })
          .put(
              new Identifier("COMMON"),
              new Import[] {
                newImport("java.awt.JobAttributes.DialogType.COMMON", true),
                newImport("javax.print.attribute.standard.DialogTypeSelection.COMMON", true),
              })
          .put(
              new Identifier("PUBLIC"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandles.Lookup.PUBLIC", true),
                newImport("java.lang.reflect.Member.PUBLIC", true),
                newImport("java.lang.reflect.Modifier.PUBLIC", true),
                newImport("javax.swing.text.html.parser.DTDConstants.PUBLIC", true),
              })
          .put(
              new Identifier("DEFAULT_CURSOR"),
              new Import[] {
                newImport("java.awt.Cursor.DEFAULT_CURSOR", true),
                newImport("java.awt.Frame.DEFAULT_CURSOR", true),
              })
          .put(
              new Identifier("MultipleDocumentHandling"),
              new Import[] {
                newImport("javax.print.attribute.standard.MultipleDocumentHandling", false),
              })
          .put(
              new Identifier("LongSupplier"),
              new Import[] {
                newImport("java.util.function.LongSupplier", false),
              })
          .put(
              new Identifier("DOMImplementationList"),
              new Import[] {
                newImport("org.w3c.dom.DOMImplementationList", false),
              })
          .put(
              new Identifier("KeyValue"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.keyinfo.KeyValue", false),
              })
          .put(
              new Identifier("parallelPrefix"),
              new Import[] {
                newImport("java.util.Arrays.parallelPrefix", true),
              })
          .put(
              new Identifier("INPUT_METHOD_EVENT_MASK"),
              new Import[] {
                newImport("java.awt.AWTEvent.INPUT_METHOD_EVENT_MASK", true),
              })
          .put(
              new Identifier("RSAKeyGenParameterSpec"),
              new Import[] {
                newImport("java.security.spec.RSAKeyGenParameterSpec", false),
              })
          .put(
              new Identifier("CompositeDataInvocationHandler"),
              new Import[] {
                newImport("javax.management.openmbean.CompositeDataInvocationHandler", false),
              })
          .put(
              new Identifier("CertPathParameters"),
              new Import[] {
                newImport("java.security.cert.CertPathParameters", false),
              })
          .put(
              new Identifier("getPreviousWord"),
              new Import[] {
                newImport("javax.swing.text.Utilities.getPreviousWord", true),
              })
          .put(
              new Identifier("SCALE_REPLICATE"),
              new Import[] {
                newImport("java.awt.Image.SCALE_REPLICATE", true),
              })
          .put(
              new Identifier("getPreviewPanel"),
              new Import[] {
                newImport(
                    "javax.swing.colorchooser.ColorChooserComponentFactory.getPreviewPanel", true),
              })
          .put(
              new Identifier("MetalRadioButtonUI"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalRadioButtonUI", false),
              })
          .put(
              new Identifier("WebServiceFeatureAnnotation"),
              new Import[] {
                newImport("javax.xml.ws.spi.WebServiceFeatureAnnotation", false),
              })
          .put(
              new Identifier("StringSeqHelper"),
              new Import[] {
                newImport("org.omg.CORBA.StringSeqHelper", false),
              })
          .put(
              new Identifier("ContextualRenderedImageFactory"),
              new Import[] {
                newImport("java.awt.image.renderable.ContextualRenderedImageFactory", false),
              })
          .put(
              new Identifier("SQLData"),
              new Import[] {
                newImport("java.sql.SQLData", false),
              })
          .put(
              new Identifier("RowSetWarning"),
              new Import[] {
                newImport("javax.sql.rowset.RowSetWarning", false),
              })
          .put(
              new Identifier("W3CDomHandler"),
              new Import[] {
                newImport("javax.xml.bind.annotation.W3CDomHandler", false),
              })
          .put(
              new Identifier("FileVisitor"),
              new Import[] {
                newImport("java.nio.file.FileVisitor", false),
              })
          .put(
              new Identifier("JOB_OUTGOING"),
              new Import[] {
                newImport("javax.print.attribute.standard.JobStateReason.JOB_OUTGOING", true),
              })
          .put(
              new Identifier("FLAG_HAS_TRANSFORMS"),
              new Import[] {
                newImport("java.awt.font.GlyphVector.FLAG_HAS_TRANSFORMS", true),
              })
          .put(
              new Identifier("DOMStringList"),
              new Import[] {
                newImport("org.w3c.dom.DOMStringList", false),
              })
          .put(
              new Identifier("SocketPermission"),
              new Import[] {
                newImport("java.net.SocketPermission", false),
              })
          .put(
              new Identifier("convertPointFromScreen"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.convertPointFromScreen", true),
              })
          .put(
              new Identifier("CallSite"),
              new Import[] {
                newImport("java.lang.invoke.CallSite", false),
              })
          .put(
              new Identifier("SYSTEM_EXCLUSIVE"),
              new Import[] {
                newImport("javax.sound.midi.SysexMessage.SYSTEM_EXCLUSIVE", true),
              })
          .put(
              new Identifier("LARGE_MODEL_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JTree.LARGE_MODEL_PROPERTY", true),
              })
          .put(
              new Identifier("URLConnection"),
              new Import[] {
                newImport("java.net.URLConnection", false),
              })
          .put(
              new Identifier("Graphics2D"),
              new Import[] {
                newImport("java.awt.Graphics2D", false),
              })
          .put(
              new Identifier("PRIVATE"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandles.Lookup.PRIVATE", true),
                newImport("java.lang.reflect.Modifier.PRIVATE", true),
                newImport("java.nio.channels.FileChannel.MapMode.PRIVATE", true),
              })
          .put(
              new Identifier("IIORegistry"),
              new Import[] {
                newImport("javax.imageio.spi.IIORegistry", false),
              })
          .put(
              new Identifier("decodeDataFlavor"),
              new Import[] {
                newImport("java.awt.datatransfer.SystemFlavorMap.decodeDataFlavor", true),
              })
          .put(
              new Identifier("SERVICE_FORMATTED"),
              new Import[] {
                newImport("javax.print.DocFlavor.SERVICE_FORMATTED", false),
              })
          .put(
              new Identifier("Completion"),
              new Import[] {
                newImport("javax.annotation.processing.Completion", false),
              })
          .put(
              new Identifier("nCopies"),
              new Import[] {
                newImport("java.util.Collections.nCopies", true),
              })
          .put(
              new Identifier("MenuItemUI"),
              new Import[] {
                newImport("javax.swing.plaf.MenuItemUI", false),
              })
          .put(
              new Identifier("JMXAddressable"),
              new Import[] {
                newImport("javax.management.remote.JMXAddressable", false),
              })
          .put(
              new Identifier("STRIKETHROUGH"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.STRIKETHROUGH", true),
              })
          .put(
              new Identifier("AbstractSpliterator"),
              new Import[] {
                newImport("java.util.Spliterators.AbstractSpliterator", false),
              })
          .put(
              new Identifier("UnmodifiableSetException"),
              new Import[] {
                newImport("javax.print.attribute.UnmodifiableSetException", false),
              })
          .put(
              new Identifier("GURMUKHI"),
              new Import[] {
                newImport("java.awt.font.NumericShaper.GURMUKHI", true),
                newImport("java.lang.Character.UnicodeBlock.GURMUKHI", true),
              })
          .put(
              new Identifier("ValidationEvent"),
              new Import[] {
                newImport("javax.xml.bind.ValidationEvent", false),
              })
          .put(
              new Identifier("width"),
              new Import[] {
                newImport("javax.swing.Spring.width", true),
              })
          .put(
              new Identifier("DSAPrivateKey"),
              new Import[] {
                newImport("java.security.interfaces.DSAPrivateKey", false),
              })
          .put(
              new Identifier("MBeanServerNotificationFilter"),
              new Import[] {
                newImport("javax.management.relation.MBeanServerNotificationFilter", false),
              })
          .put(
              new Identifier("ComponentAttribute"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.ComponentAttribute", true),
              })
          .put(
              new Identifier("HOLDING"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.HOLDING", false),
                newImport("org.omg.PortableServer.POAManagerPackage.State.HOLDING", true),
              })
          .put(
              new Identifier("VK_KANA_LOCK"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_KANA_LOCK", true),
              })
          .put(
              new Identifier("isSameFile"),
              new Import[] {
                newImport("java.nio.file.Files.isSameFile", true),
              })
          .put(
              new Identifier("CELL_RENDERER_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JTree.CELL_RENDERER_PROPERTY", true),
                newImport("javax.swing.table.TableColumn.CELL_RENDERER_PROPERTY", true),
              })
          .put(
              new Identifier("procedureNoNulls"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.procedureNoNulls", true),
              })
          .put(
              new Identifier("AttributeListImpl"),
              new Import[] {
                newImport("org.xml.sax.helpers.AttributeListImpl", false),
              })
          .put(
              new Identifier("MissingResourceException"),
              new Import[] {
                newImport("java.util.MissingResourceException", false),
              })
          .put(
              new Identifier("MIN_PRIORITY"),
              new Import[] {
                newImport("java.lang.Thread.MIN_PRIORITY", true),
              })
          .put(
              new Identifier("putLayer"),
              new Import[] {
                newImport("javax.swing.JLayeredPane.putLayer", true),
              })
          .put(
              new Identifier("getWordEnd"),
              new Import[] {
                newImport("javax.swing.text.Utilities.getWordEnd", true),
              })
          .put(
              new Identifier("IntUnaryOperator"),
              new Import[] {
                newImport("java.util.function.IntUnaryOperator", false),
              })
          .put(
              new Identifier("MICROPHONE"),
              new Import[] {
                newImport("javax.sound.sampled.Port.Info.MICROPHONE", true),
              })
          .put(
              new Identifier("VK_ENTER"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_ENTER", true),
              })
          .put(
              new Identifier("MAX_RADIX"),
              new Import[] {
                newImport("java.lang.Character.MAX_RADIX", true),
              })
          .put(
              new Identifier("CHOU_30"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSize.JIS.CHOU_30", true),
              })
          .put(
              new Identifier("PosixFileAttributeView"),
              new Import[] {
                newImport("java.nio.file.attribute.PosixFileAttributeView", false),
              })
          .put(
              new Identifier("PAGEABLE"),
              new Import[] {
                newImport("javax.print.DocFlavor.SERVICE_FORMATTED.PAGEABLE", true),
              })
          .put(
              new Identifier("ServerRequestInterceptorOperations"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.ServerRequestInterceptorOperations", false),
              })
          .put(
              new Identifier("SHAVIAN"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.SHAVIAN", true),
              })
          .put(
              new Identifier("Utilities"),
              new Import[] {
                newImport("javax.swing.text.Utilities", false),
              })
          .put(
              new Identifier("findMBeanServer"),
              new Import[] {
                newImport("javax.management.MBeanServerFactory.findMBeanServer", true),
              })
          .put(
              new Identifier("URIException"),
              new Import[] {
                newImport("javax.print.URIException", false),
              })
          .put(
              new Identifier("AccessibleComponent"),
              new Import[] {
                newImport("javax.accessibility.AccessibleComponent", false),
              })
          .put(
              new Identifier("BeanContextChildSupport"),
              new Import[] {
                newImport("java.beans.beancontext.BeanContextChildSupport", false),
              })
          .put(
              new Identifier("MAXIMIZED_VERT"),
              new Import[] {
                newImport("java.awt.Frame.MAXIMIZED_VERT", true),
              })
          .put(
              new Identifier("getCurrentTheme"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalLookAndFeel.getCurrentTheme", true),
              })
          .put(
              new Identifier("CompilationMXBean"),
              new Import[] {
                newImport("java.lang.management.CompilationMXBean", false),
              })
          .put(
              new Identifier("POINT_INFINITY"),
              new Import[] {
                newImport("java.security.spec.ECPoint.POINT_INFINITY", true),
              })
          .put(
              new Identifier("DESKTOP_ICON"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.DESKTOP_ICON", true),
                newImport("javax.swing.plaf.synth.Region.DESKTOP_ICON", true),
              })
          .put(
              new Identifier("NUMBERS"),
              new Import[] {
                newImport("javax.swing.text.html.parser.DTDConstants.NUMBERS", true),
              })
          .put(
              new Identifier("setJNDIContext"),
              new Import[] {
                newImport("javax.sql.rowset.spi.SyncFactory.setJNDIContext", true),
              })
          .put(
              new Identifier("readOnlyAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.readOnlyAction", true),
              })
          .put(
              new Identifier("newInstance"),
              new Import[] {
                newImport("java.lang.reflect.Array.newInstance", true),
                newImport("java.net.URLClassLoader.newInstance", true),
                newImport("java.security.KeyStore.Builder.newInstance", true),
                newImport("javax.xml.bind.JAXBContext.newInstance", true),
                newImport("javax.xml.datatype.DatatypeFactory.newInstance", true),
                newImport("javax.xml.parsers.DocumentBuilderFactory.newInstance", true),
                newImport("javax.xml.parsers.SAXParserFactory.newInstance", true),
                newImport("javax.xml.soap.MessageFactory.newInstance", true),
                newImport("javax.xml.soap.SOAPConnectionFactory.newInstance", true),
                newImport("javax.xml.soap.SOAPElementFactory.newInstance", true),
                newImport("javax.xml.soap.SOAPFactory.newInstance", true),
                newImport("javax.xml.stream.XMLEventFactory.newInstance", true),
                newImport("javax.xml.stream.XMLInputFactory.newInstance", true),
                newImport("javax.xml.stream.XMLOutputFactory.newInstance", true),
                newImport("javax.xml.transform.TransformerFactory.newInstance", true),
                newImport("javax.xml.validation.SchemaFactory.newInstance", true),
                newImport("javax.xml.xpath.XPathFactory.newInstance", true),
                newImport("org.w3c.dom.bootstrap.DOMImplementationRegistry.newInstance", true),
              })
          .put(
              new Identifier("SEPTEMBER"),
              new Import[] {
                newImport("java.util.Calendar.SEPTEMBER", true),
                newImport("javax.xml.datatype.DatatypeConstants.SEPTEMBER", true),
              })
          .put(
              new Identifier("BACKGROUND_REPEAT"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.BACKGROUND_REPEAT", true),
              })
          .put(
              new Identifier("parkNanos"),
              new Import[] {
                newImport("java.util.concurrent.locks.LockSupport.parkNanos", true),
              })
          .put(
              new Identifier("SpaceBelow"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.SpaceBelow", true),
              })
          .put(
              new Identifier("TypeParameterElement"),
              new Import[] {
                newImport("javax.lang.model.element.TypeParameterElement", false),
              })
          .put(
              new Identifier("CHOU_40"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSize.JIS.CHOU_40", true),
              })
          .put(
              new Identifier("functionColumnResult"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.functionColumnResult", true),
              })
          .put(
              new Identifier("HTTP_UNSUPPORTED_TYPE"),
              new Import[] {
                newImport("java.net.HttpURLConnection.HTTP_UNSUPPORTED_TYPE", true),
              })
          .put(
              new Identifier("File"),
              new Import[] {
                newImport("java.io.File", false),
              })
          .put(
              new Identifier("withThreadPool"),
              new Import[] {
                newImport("java.nio.channels.AsynchronousChannelGroup.withThreadPool", true),
              })
          .put(
              new Identifier("magenta"),
              new Import[] {
                newImport("java.awt.Color.magenta", true),
              })
          .put(
              new Identifier("FLOAT"),
              new Import[] {
                newImport("java.sql.Types.FLOAT", true),
                newImport("javax.management.openmbean.SimpleType.FLOAT", true),
                newImport("javax.swing.text.html.CSS.Attribute.FLOAT", true),
              })
          .put(
              new Identifier("XmlAttribute"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlAttribute", false),
              })
          .put(
              new Identifier("BasicDesktopPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicDesktopPaneUI", false),
              })
          .put(
              new Identifier("ISO_INSTANT"),
              new Import[] {
                newImport("java.time.format.DateTimeFormatter.ISO_INSTANT", true),
              })
          .put(
              new Identifier("CONTROL_TEXT"),
              new Import[] {
                newImport("java.awt.SystemColor.CONTROL_TEXT", true),
              })
          .put(
              new Identifier("READ_ONLY"),
              new Import[] {
                newImport("java.nio.channels.FileChannel.MapMode.READ_ONLY", true),
              })
          .put(
              new Identifier("parallelSort"),
              new Import[] {
                newImport("java.util.Arrays.parallelSort", true),
              })
          .put(
              new Identifier("RATA_DIE"),
              new Import[] {
                newImport("java.time.temporal.JulianFields.RATA_DIE", true),
              })
          .put(
              new Identifier("GroupLayout"),
              new Import[] {
                newImport("javax.swing.GroupLayout", false),
              })
          .put(
              new Identifier("InputMethodListener"),
              new Import[] {
                newImport("java.awt.event.InputMethodListener", false),
              })
          .put(
              new Identifier("StrokeBorder"),
              new Import[] {
                newImport("javax.swing.border.StrokeBorder", false),
              })
          .put(
              new Identifier("LEAD_NONE"),
              new Import[] {
                newImport("javax.swing.text.TabStop.LEAD_NONE", true),
              })
          .put(
              new Identifier("Synthesizer"),
              new Import[] {
                newImport("javax.sound.midi.Synthesizer", false),
              })
          .put(
              new Identifier("icHdrModel"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icHdrModel", true),
              })
          .put(
              new Identifier("FONT_SIZE"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.FONT_SIZE", true),
              })
          .put(
              new Identifier("AUTO_RESIZE_OFF"),
              new Import[] {
                newImport("javax.swing.JTable.AUTO_RESIZE_OFF", true),
              })
          .put(
              new Identifier("icSaturation"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSaturation", true),
              })
          .put(
              new Identifier("MetalButtonUI"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalButtonUI", false),
              })
          .put(
              new Identifier("MOUSE_MOVE"),
              new Import[] {
                newImport("java.awt.Event.MOUSE_MOVE", true),
              })
          .put(
              new Identifier("POPUP_MENU"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.POPUP_MENU", true),
                newImport("javax.swing.plaf.synth.Region.POPUP_MENU", true),
              })
          .put(
              new Identifier("dayOfWeekInMonth"),
              new Import[] {
                newImport("java.time.temporal.TemporalAdjusters.dayOfWeekInMonth", true),
              })
          .put(
              new Identifier("SERVER_AUTH"),
              new Import[] {
                newImport("javax.security.sasl.Sasl.SERVER_AUTH", true),
              })
          .put(
              new Identifier("ValidationEventLocatorImpl"),
              new Import[] {
                newImport("javax.xml.bind.helpers.ValidationEventLocatorImpl", false),
              })
          .put(
              new Identifier("MEDIA_LOW"),
              new Import[] {
                newImport("javax.print.attribute.standard.PrinterStateReason.MEDIA_LOW", true),
              })
          .put(
              new Identifier("ROUND_HALF_EVEN"),
              new Import[] {
                newImport("java.math.BigDecimal.ROUND_HALF_EVEN", true),
              })
          .put(
              new Identifier("SECOND"),
              new Import[] {
                newImport("java.text.DateFormat.Field.SECOND", true),
                newImport("java.util.Calendar.SECOND", true),
              })
          .put(
              new Identifier("BasicTextPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicTextPaneUI", false),
              })
          .put(
              new Identifier("SynthLabelUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthLabelUI", false),
              })
          .put(
              new Identifier("FileDialog"),
              new Import[] {
                newImport("java.awt.FileDialog", false),
              })
          .put(
              new Identifier("APPROVE_SELECTION"),
              new Import[] {
                newImport("javax.swing.JFileChooser.APPROVE_SELECTION", true),
              })
          .build();
}
