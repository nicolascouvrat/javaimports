// Code generated by GenerateStdlib.java. DO NOT EDIT.
package com.nikodoko.javaimports.stdlib.internal.api.v8;

import static com.nikodoko.javaimports.stdlib.internal.Stdlib.newImport;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.common.Identifier;
import com.nikodoko.javaimports.common.Import;
import java.util.Map;

public class Java8StdlibChunk24 {
  static final Map<Identifier, Import[]> CLASSES =
      new ImmutableMap.Builder<Identifier, Import[]>()
          .put(
              new Identifier("WStringValueHelper"),
              new Import[] {
                newImport("org.omg.CORBA.WStringValueHelper", false),
              })
          .put(
              new Identifier("getByte"),
              new Import[] {
                newImport("java.lang.reflect.Array.getByte", true),
              })
          .put(
              new Identifier("DesktopIconUI"),
              new Import[] {
                newImport("javax.swing.plaf.DesktopIconUI", false),
              })
          .put(
              new Identifier("XMLStreamReader"),
              new Import[] {
                newImport("javax.xml.stream.XMLStreamReader", false),
              })
          .put(
              new Identifier("FOCUS_ACCELERATOR_KEY"),
              new Import[] {
                newImport("javax.swing.text.JTextComponent.FOCUS_ACCELERATOR_KEY", true),
              })
          .put(
              new Identifier("dk_none"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind.dk_none", true),
              })
          .put(
              new Identifier("ActivationID"),
              new Import[] {
                newImport("java.rmi.activation.ActivationID", false),
              })
          .put(
              new Identifier("isSuperscript"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.isSuperscript", true),
              })
          .put(
              new Identifier("AnnotationFormatError"),
              new Import[] {
                newImport("java.lang.annotation.AnnotationFormatError", false),
              })
          .put(
              new Identifier("ISO_C8_ENVELOPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_C8_ENVELOPE", true),
              })
          .put(
              new Identifier("VALUE_COLOR_RENDER_QUALITY"),
              new Import[] {
                newImport("java.awt.RenderingHints.VALUE_COLOR_RENDER_QUALITY", true),
              })
          .put(
              new Identifier("REF_getStatic"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandleInfo.REF_getStatic", true),
              })
          .put(
              new Identifier("BUTTON1"),
              new Import[] {
                newImport("java.awt.event.MouseEvent.BUTTON1", true),
              })
          .put(
              new Identifier("getInternalFrameMaximizeIcon"),
              new Import[] {
                newImport(
                    "javax.swing.plaf.metal.MetalIconFactory.getInternalFrameMaximizeIcon", true),
              })
          .put(
              new Identifier("CONTENT_TYPE"),
              new Import[] {
                newImport("java.util.jar.Attributes.Name.CONTENT_TYPE", true),
              })
          .put(
              new Identifier("Currency"),
              new Import[] {
                newImport("java.util.Currency", false),
              })
          .put(
              new Identifier("CounterMonitor"),
              new Import[] {
                newImport("javax.management.monitor.CounterMonitor", false),
              })
          .put(
              new Identifier("ServiceContextListHelper"),
              new Import[] {
                newImport("org.omg.IOP.ServiceContextListHelper", false),
              })
          .put(
              new Identifier("StandardConstants"),
              new Import[] {
                newImport("javax.net.ssl.StandardConstants", false),
              })
          .put(
              new Identifier("ARROWS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.ARROWS", true),
              })
          .put(
              new Identifier("BatchUpdateException"),
              new Import[] {
                newImport("java.sql.BatchUpdateException", false),
              })
          .put(
              new Identifier("attributeNoNulls"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.attributeNoNulls", true),
              })
          .put(
              new Identifier("PropertyChangeEvent"),
              new Import[] {
                newImport("java.beans.PropertyChangeEvent", false),
              })
          .put(
              new Identifier("GlyphVector"),
              new Import[] {
                newImport("java.awt.font.GlyphVector", false),
              })
          .put(
              new Identifier("getProperties"),
              new Import[] {
                newImport("java.lang.System.getProperties", true),
              })
          .put(
              new Identifier("StringValueExp"),
              new Import[] {
                newImport("javax.management.StringValueExp", false),
              })
          .put(
              new Identifier("AbstractInterruptibleChannel"),
              new Import[] {
                newImport("java.nio.channels.spi.AbstractInterruptibleChannel", false),
              })
          .put(
              new Identifier("SourceVersion"),
              new Import[] {
                newImport("javax.lang.model.SourceVersion", false),
              })
          .put(
              new Identifier("SSLPermission"),
              new Import[] {
                newImport("javax.net.ssl.SSLPermission", false),
              })
          .put(
              new Identifier("HANUNOO"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.HANUNOO", true),
              })
          .put(
              new Identifier("IMG_ALIGN_BOTTOM"),
              new Import[] {
                newImport("javax.swing.text.html.HTMLEditorKit.IMG_ALIGN_BOTTOM", true),
              })
          .put(
              new Identifier("SecretKey"),
              new Import[] {
                newImport("javax.crypto.SecretKey", false),
              })
          .put(
              new Identifier("DEFLATE_HINT"),
              new Import[] {
                newImport("java.util.jar.Pack200.Packer.DEFLATE_HINT", true),
                newImport("java.util.jar.Pack200.Unpacker.DEFLATE_HINT", true),
              })
          .put(
              new Identifier("VALIGN"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.VALIGN", true),
              })
          .put(
              new Identifier("windowText"),
              new Import[] {
                newImport("java.awt.SystemColor.windowText", true),
              })
          .put(
              new Identifier("MultiPanelUI"),
              new Import[] {
                newImport("javax.swing.plaf.multi.MultiPanelUI", false),
              })
          .put(
              new Identifier("DataBufferFloat"),
              new Import[] {
                newImport("java.awt.image.DataBufferFloat", false),
              })
          .put(
              new Identifier("InvalidDnDOperationException"),
              new Import[] {
                newImport("java.awt.dnd.InvalidDnDOperationException", false),
              })
          .put(
              new Identifier("LazyInputMap"),
              new Import[] {
                newImport("javax.swing.UIDefaults.LazyInputMap", false),
              })
          .put(
              new Identifier("Attribute"),
              new Import[] {
                newImport("java.security.KeyStore.Entry.Attribute", false),
                newImport("java.text.AttributedCharacterIterator.Attribute", false),
                newImport("javax.management.Attribute", false),
                newImport("javax.naming.directory.Attribute", false),
                newImport("javax.print.attribute.Attribute", false),
                newImport("javax.swing.text.html.CSS.Attribute", false),
                newImport("javax.swing.text.html.HTML.Attribute", false),
                newImport("javax.xml.stream.events.Attribute", false),
              })
          .put(
              new Identifier("BGCOLOR"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.BGCOLOR", true),
              })
          .put(
              new Identifier("ONE"),
              new Import[] {
                newImport("java.math.BigDecimal.ONE", true),
                newImport("java.math.BigInteger.ONE", true),
              })
          .put(
              new Identifier("_PARAM_IN"),
              new Import[] {
                newImport("org.omg.CORBA.ParameterMode._PARAM_IN", true),
              })
          .put(
              new Identifier("getImageWriter"),
              new Import[] {
                newImport("javax.imageio.ImageIO.getImageWriter", true),
              })
          .put(
              new Identifier("Timestamp"),
              new Import[] {
                newImport("java.security.Timestamp", false), newImport("java.sql.Timestamp", false),
              })
          .put(
              new Identifier("InvalidSearchControlsException"),
              new Import[] {
                newImport("javax.naming.directory.InvalidSearchControlsException", false),
              })
          .put(
              new Identifier("AccessibleIcon"),
              new Import[] {
                newImport("javax.accessibility.AccessibleIcon", false),
              })
          .put(
              new Identifier("getCurrentKeyboardFocusManager"),
              new Import[] {
                newImport("java.awt.KeyboardFocusManager.getCurrentKeyboardFocusManager", true),
              })
          .put(
              new Identifier("TreeModel"),
              new Import[] {
                newImport("javax.swing.tree.TreeModel", false),
              })
          .put(
              new Identifier("UNDECIMBER"),
              new Import[] {
                newImport("java.util.Calendar.UNDECIMBER", true),
              })
          .put(
              new Identifier("TYPE_UNIFORM_SCALE"),
              new Import[] {
                newImport("java.awt.geom.AffineTransform.TYPE_UNIFORM_SCALE", true),
              })
          .put(
              new Identifier("Backward"),
              new Import[] {
                newImport("javax.swing.text.Position.Bias.Backward", true),
              })
          .put(
              new Identifier("DefaultEditorKit"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit", false),
              })
          .put(
              new Identifier("pow"),
              new Import[] {
                newImport("java.lang.Math.pow", true), newImport("java.lang.StrictMath.pow", true),
              })
          .put(
              new Identifier("IIOParamController"),
              new Import[] {
                newImport("javax.imageio.IIOParamController", false),
              })
          .put(
              new Identifier("STANDARD"),
              new Import[] {
                newImport("java.awt.font.GlyphMetrics.STANDARD", true),
                newImport("java.time.format.DecimalStyle.STANDARD", true),
                newImport("javax.print.attribute.standard.JobSheets.STANDARD", true),
              })
          .put(
              new Identifier("latest"),
              new Import[] {
                newImport("javax.lang.model.SourceVersion.latest", true),
              })
          .put(
              new Identifier("ASCII_STREAM_PARAM"),
              new Import[] {
                newImport("javax.sql.rowset.BaseRowSet.ASCII_STREAM_PARAM", true),
              })
          .put(
              new Identifier("BufferedImageOp"),
              new Import[] {
                newImport("java.awt.image.BufferedImageOp", false),
              })
          .put(
              new Identifier("DateTimeAtCreation"),
              new Import[] {
                newImport("javax.print.attribute.standard.DateTimeAtCreation", false),
              })
          .put(
              new Identifier("FileView"),
              new Import[] {
                newImport("javax.swing.filechooser.FileView", false),
              })
          .put(
              new Identifier("PropertyDescriptor"),
              new Import[] {
                newImport("java.beans.PropertyDescriptor", false),
              })
          .put(
              new Identifier("getQuadrantRotateInstance"),
              new Import[] {
                newImport("java.awt.geom.AffineTransform.getQuadrantRotateInstance", true),
              })
          .put(
              new Identifier("Statement"),
              new Import[] {
                newImport("java.beans.Statement", false), newImport("java.sql.Statement", false),
              })
          .put(
              new Identifier("XmlElementRefs"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlElementRefs", false),
              })
          .put(
              new Identifier("getHorizontalSliderThumbIcon"),
              new Import[] {
                newImport(
                    "javax.swing.plaf.metal.MetalIconFactory.getHorizontalSliderThumbIcon", true),
              })
          .put(
              new Identifier("BUTTON2"),
              new Import[] {
                newImport("java.awt.event.MouseEvent.BUTTON2", true),
              })
          .put(
              new Identifier("BUTTON3"),
              new Import[] {
                newImport("java.awt.event.MouseEvent.BUTTON3", true),
              })
          .put(
              new Identifier("flashColor"),
              new Import[] {
                newImport("javax.swing.DebugGraphics.flashColor", true),
              })
          .put(
              new Identifier("ZipFile"),
              new Import[] {
                newImport("java.util.zip.ZipFile", false),
              })
          .put(
              new Identifier("ITEM_EVENT_MASK"),
              new Import[] {
                newImport("java.awt.AWTEvent.ITEM_EVENT_MASK", true),
              })
          .put(
              new Identifier("PERCENT"),
              new Import[] {
                newImport("java.text.NumberFormat.Field.PERCENT", true),
              })
          .put(
              new Identifier("DragSourceDropEvent"),
              new Import[] {
                newImport("java.awt.dnd.DragSourceDropEvent", false),
              })
          .put(
              new Identifier("doPrivileged"),
              new Import[] {
                newImport("java.security.AccessController.doPrivileged", true),
              })
          .put(
              new Identifier("BandCombineOp"),
              new Import[] {
                newImport("java.awt.image.BandCombineOp", false),
              })
          .put(
              new Identifier("getSoundbank"),
              new Import[] {
                newImport("javax.sound.midi.MidiSystem.getSoundbank", true),
              })
          .put(
              new Identifier("AbstractFormatter"),
              new Import[] {
                newImport("javax.swing.JFormattedTextField.AbstractFormatter", false),
              })
          .put(
              new Identifier("DERIVATION_LIST"),
              new Import[] {
                newImport("org.w3c.dom.TypeInfo.DERIVATION_LIST", true),
              })
          .put(
              new Identifier("SQLInput"),
              new Import[] {
                newImport("java.sql.SQLInput", false),
              })
          .put(
              new Identifier("getPosixFilePermissions"),
              new Import[] {
                newImport("java.nio.file.Files.getPosixFilePermissions", true),
              })
          .put(
              new Identifier("Schema"),
              new Import[] {
                newImport("javax.xml.validation.Schema", false),
              })
          .put(
              new Identifier("MEDIA_EMPTY"),
              new Import[] {
                newImport("javax.print.attribute.standard.PrinterStateReason.MEDIA_EMPTY", true),
              })
          .put(
              new Identifier("CLASS"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.CLASS", true),
              })
          .put(
              new Identifier("SOAPEnvelope"),
              new Import[] {
                newImport("javax.xml.soap.SOAPEnvelope", false),
              })
          .put(
              new Identifier("getRotateInstance"),
              new Import[] {
                newImport("java.awt.geom.AffineTransform.getRotateInstance", true),
              })
          .put(
              new Identifier("BAD_INV_ORDER"),
              new Import[] {
                newImport("org.omg.CORBA.BAD_INV_ORDER", false),
              })
          .put(
              new Identifier("procedureNoResult"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.procedureNoResult", true),
              })
          .put(
              new Identifier("Container"),
              new Import[] {
                newImport("java.awt.Container", false),
              })
          .put(
              new Identifier("SynthEditorPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthEditorPaneUI", false),
              })
          .put(
              new Identifier("NameDynAnyPair"),
              new Import[] {
                newImport("org.omg.DynamicAny.NameDynAnyPair", false),
              })
          .put(
              new Identifier("HEADPHONE"),
              new Import[] {
                newImport("javax.sound.sampled.Port.Info.HEADPHONE", true),
              })
          .put(
              new Identifier("CDATA_SECTION_ELEMENTS"),
              new Import[] {
                newImport("javax.xml.transform.OutputKeys.CDATA_SECTION_ELEMENTS", true),
              })
          .put(
              new Identifier("SOAPPart"),
              new Import[] {
                newImport("javax.xml.soap.SOAPPart", false),
              })
          .put(
              new Identifier("explicitCastArguments"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandles.explicitCastArguments", true),
              })
          .put(
              new Identifier("CompletionHandler"),
              new Import[] {
                newImport("java.nio.channels.CompletionHandler", false),
              })
          .put(
              new Identifier("BOLD"),
              new Import[] {
                newImport("java.awt.Font.BOLD", true),
              })
          .put(
              new Identifier("KeyManager"),
              new Import[] {
                newImport("javax.net.ssl.KeyManager", false),
              })
          .put(
              new Identifier("DocAttribute"),
              new Import[] {
                newImport("javax.print.attribute.DocAttribute", false),
              })
          .put(
              new Identifier("RGBtoHSB"),
              new Import[] {
                newImport("java.awt.Color.RGBtoHSB", true),
              })
          .put(
              new Identifier("createVerticalStrut"),
              new Import[] {
                newImport("javax.swing.Box.createVerticalStrut", true),
              })
          .put(
              new Identifier("PageRanges"),
              new Import[] {
                newImport("javax.print.attribute.standard.PageRanges", false),
              })
          .put(
              new Identifier("TAG_EBLC"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_EBLC", true),
              })
          .put(
              new Identifier("PARENT_CHANGED"),
              new Import[] {
                newImport("java.awt.event.HierarchyEvent.PARENT_CHANGED", true),
              })
          .put(
              new Identifier("ENTITY_NODE"),
              new Import[] {
                newImport("org.w3c.dom.Node.ENTITY_NODE", true),
              })
          .put(
              new Identifier("getTabbedTextOffset"),
              new Import[] {
                newImport("javax.swing.text.Utilities.getTabbedTextOffset", true),
              })
          .put(
              new Identifier("ComponentOrientation"),
              new Import[] {
                newImport("java.awt.ComponentOrientation", false),
              })
          .put(
              new Identifier("FileNameMap"),
              new Import[] {
                newImport("java.net.FileNameMap", false),
              })
          .put(
              new Identifier("NAME"),
              new Import[] {
                newImport("javax.script.ScriptEngine.NAME", true),
                newImport("javax.swing.Action.NAME", true),
                newImport("javax.swing.text.html.HTML.Attribute.NAME", true),
                newImport("javax.swing.text.html.parser.DTDConstants.NAME", true),
              })
          .put(
              new Identifier("DataInput"),
              new Import[] {
                newImport("java.io.DataInput", false),
              })
          .put(
              new Identifier("IMAGEERROR"),
              new Import[] {
                newImport("java.awt.image.ImageConsumer.IMAGEERROR", true),
              })
          .put(
              new Identifier("XmlSchema"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlSchema", false),
              })
          .put(
              new Identifier("INITIATE_ONLY"),
              new Import[] {
                newImport("org.ietf.jgss.GSSCredential.INITIATE_ONLY", true),
              })
          .put(
              new Identifier("TableHeaderBorder"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalBorders.TableHeaderBorder", false),
              })
          .put(
              new Identifier("NamingContextHolder"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextHolder", false),
              })
          .put(
              new Identifier("AlreadyBoundHelper"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextPackage.AlreadyBoundHelper", false),
              })
          .put(
              new Identifier("InputMap"),
              new Import[] {
                newImport("javax.swing.InputMap", false),
              })
          .put(
              new Identifier("TransactionRolledbackException"),
              new Import[] {
                newImport("javax.transaction.TransactionRolledbackException", false),
              })
          .put(
              new Identifier("FileSystemLoopException"),
              new Import[] {
                newImport("java.nio.file.FileSystemLoopException", false),
              })
          .put(
              new Identifier("DateTimeFormatter"),
              new Import[] {
                newImport("java.time.format.DateTimeFormatter", false),
              })
          .put(
              new Identifier("ORB"),
              new Import[] {
                newImport("org.omg.CORBA.ORB", false), newImport("org.omg.CORBA_2_3.ORB", false),
              })
          .put(
              new Identifier("functionColumnOut"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.functionColumnOut", true),
              })
          .put(
              new Identifier("isStatic"),
              new Import[] {
                newImport("java.lang.reflect.Modifier.isStatic", true),
              })
          .put(
              new Identifier("PropertyChangeListener"),
              new Import[] {
                newImport("java.beans.PropertyChangeListener", false),
              })
          .put(
              new Identifier("icSigProfileSequenceDescTag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigProfileSequenceDescTag", true),
              })
          .put(
              new Identifier("HIERARCHY_BOUNDS_EVENT_MASK"),
              new Import[] {
                newImport("java.awt.AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK", true),
              })
          .put(
              new Identifier("ofYears"),
              new Import[] {
                newImport("java.time.Period.ofYears", true),
              })
          .put(
              new Identifier("icSigBToA0Tag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigBToA0Tag", true),
              })
          .put(
              new Identifier("getClassLoader"),
              new Import[] {
                newImport("java.rmi.server.RMIClassLoader.getClassLoader", true),
              })
          .put(
              new Identifier("synchronizedCollection"),
              new Import[] {
                newImport("java.util.Collections.synchronizedCollection", true),
              })
          .put(
              new Identifier("GENERAL"),
              new Import[] {
                newImport("javax.swing.text.html.parser.DTDConstants.GENERAL", true),
              })
          .put(
              new Identifier("Line2D"),
              new Import[] {
                newImport("java.awt.geom.Line2D", false),
              })
          .put(
              new Identifier("MNEMONIC_KEY"),
              new Import[] {
                newImport("javax.swing.Action.MNEMONIC_KEY", true),
              })
          .put(
              new Identifier("BufferedImage"),
              new Import[] {
                newImport("java.awt.image.BufferedImage", false),
              })
          .put(
              new Identifier("HttpURLConnection"),
              new Import[] {
                newImport("java.net.HttpURLConnection", false),
              })
          .put(
              new Identifier("EXIT_ON_CLOSE"),
              new Import[] {
                newImport("javax.swing.JFrame.EXIT_ON_CLOSE", true),
                newImport("javax.swing.WindowConstants.EXIT_ON_CLOSE", true),
              })
          .put(
              new Identifier("TemporalQueries"),
              new Import[] {
                newImport("java.time.temporal.TemporalQueries", false),
              })
          .put(
              new Identifier("icSigSpaceBCLR"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigSpaceBCLR", true),
              })
          .put(
              new Identifier("SPECIFICATION_TITLE"),
              new Import[] {
                newImport("java.util.jar.Attributes.Name.SPECIFICATION_TITLE", true),
              })
          .put(
              new Identifier("SSLServerSocketFactory"),
              new Import[] {
                newImport("javax.net.ssl.SSLServerSocketFactory", false),
              })
          .put(
              new Identifier("getRGBdefault"),
              new Import[] {
                newImport("java.awt.image.ColorModel.getRGBdefault", true),
              })
          .put(
              new Identifier("DECRYPT_MODE"),
              new Import[] {
                newImport("javax.crypto.Cipher.DECRYPT_MODE", true),
              })
          .put(
              new Identifier("QueryEval"),
              new Import[] {
                newImport("javax.management.QueryEval", false),
              })
          .put(
              new Identifier("IIOParam"),
              new Import[] {
                newImport("javax.imageio.IIOParam", false),
              })
          .put(
              new Identifier("NORTHEAST"),
              new Import[] {
                newImport("java.awt.GridBagConstraints.NORTHEAST", true),
              })
          .put(
              new Identifier("FormatFlagsConversionMismatchException"),
              new Import[] {
                newImport("java.util.FormatFlagsConversionMismatchException", false),
              })
          .put(
              new Identifier("ECFieldF2m"),
              new Import[] {
                newImport("java.security.spec.ECFieldF2m", false),
              })
          .put(
              new Identifier("registerProvider"),
              new Import[] {
                newImport("java.time.zone.ZoneRulesProvider.registerProvider", true),
                newImport("javax.sql.rowset.spi.SyncFactory.registerProvider", true),
              })
          .put(
              new Identifier("SSLContext"),
              new Import[] {
                newImport("javax.net.ssl.SSLContext", false),
              })
          .put(
              new Identifier("SHIFT_DOWN_MASK"),
              new Import[] {
                newImport("java.awt.event.InputEvent.SHIFT_DOWN_MASK", true),
              })
          .put(
              new Identifier("_ORB_CTRL_MODEL"),
              new Import[] {
                newImport("org.omg.PortableServer.ThreadPolicyValue._ORB_CTRL_MODEL", true),
              })
          .put(
              new Identifier("UTF_16BE"),
              new Import[] {
                newImport("java.nio.charset.StandardCharsets.UTF_16BE", true),
              })
          .put(
              new Identifier("SynthDesktopPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthDesktopPaneUI", false),
              })
          .put(
              new Identifier("DATETIME"),
              new Import[] {
                newImport("javax.xml.datatype.DatatypeConstants.DATETIME", true),
              })
          .put(
              new Identifier("XMLConstants"),
              new Import[] {
                newImport("javax.xml.XMLConstants", false),
              })
          .put(
              new Identifier("PGUP"),
              new Import[] {
                newImport("java.awt.Event.PGUP", true),
              })
          .put(
              new Identifier("MOUSE_RELEASED"),
              new Import[] {
                newImport("java.awt.event.MouseEvent.MOUSE_RELEASED", true),
              })
          .put(
              new Identifier("IntBinaryOperator"),
              new Import[] {
                newImport("java.util.function.IntBinaryOperator", false),
              })
          .put(
              new Identifier("findFocusOwner"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.findFocusOwner", true),
              })
          .put(
              new Identifier("IntStream"),
              new Import[] {
                newImport("java.util.stream.IntStream", false),
              })
          .put(
              new Identifier("SOAP_1_1_CONTENT_TYPE"),
              new Import[] {
                newImport("javax.xml.soap.SOAPConstants.SOAP_1_1_CONTENT_TYPE", true),
              })
          .put(
              new Identifier("AbstractLayoutCache"),
              new Import[] {
                newImport("javax.swing.tree.AbstractLayoutCache", false),
              })
          .put(
              new Identifier("VALUE_TEXT_ANTIALIAS_ON"),
              new Import[] {
                newImport("java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_ON", true),
              })
          .put(
              new Identifier("icSigSpace7CLR"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigSpace7CLR", true),
              })
          .put(
              new Identifier("ObjectInputStream"),
              new Import[] {
                newImport("java.io.ObjectInputStream", false),
              })
          .put(
              new Identifier("DoubleToIntFunction"),
              new Import[] {
                newImport("java.util.function.DoubleToIntFunction", false),
              })
          .put(
              new Identifier("MetalToolTipUI"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalToolTipUI", false),
              })
          .put(
              new Identifier("TYPE_Luv"),
              new Import[] {
                newImport("java.awt.color.ColorSpace.TYPE_Luv", true),
              })
          .put(
              new Identifier("DATATYPE_INTEGER"),
              new Import[] {
                newImport("javax.imageio.metadata.IIOMetadataFormat.DATATYPE_INTEGER", true),
              })
          .put(
              new Identifier("PolicySpi"),
              new Import[] {
                newImport("java.security.PolicySpi", false),
              })
          .put(
              new Identifier("SUCCESS_NO_INFO"),
              new Import[] {
                newImport("java.sql.Statement.SUCCESS_NO_INFO", true),
              })
          .put(
              new Identifier("sourceToInputSource"),
              new Import[] {
                newImport("javax.xml.transform.sax.SAXSource.sourceToInputSource", true),
              })
          .put(
              new Identifier("PASS_FILE_PFX"),
              new Import[] {
                newImport("java.util.jar.Pack200.Packer.PASS_FILE_PFX", true),
              })
          .put(
              new Identifier("DeflaterInputStream"),
              new Import[] {
                newImport("java.util.zip.DeflaterInputStream", false),
              })
          .put(
              new Identifier("SCALE_FAST"),
              new Import[] {
                newImport("java.awt.Image.SCALE_FAST", true),
              })
          .put(
              new Identifier("ECKey"),
              new Import[] {
                newImport("java.security.interfaces.ECKey", false),
              })
          .put(
              new Identifier("createSaslServer"),
              new Import[] {
                newImport("javax.security.sasl.Sasl.createSaslServer", true),
              })
          .put(
              new Identifier("getTabSet"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.getTabSet", true),
              })
          .put(
              new Identifier("MODIFIER_SYMBOL"),
              new Import[] {
                newImport("java.lang.Character.MODIFIER_SYMBOL", true),
              })
          .put(
              new Identifier("put"),
              new Import[] {
                newImport("javax.swing.UIManager.put", true),
              })
          .put(
              new Identifier("TRANSACTION_REPEATABLE_READ"),
              new Import[] {
                newImport("java.sql.Connection.TRANSACTION_REPEATABLE_READ", true),
              })
          .put(
              new Identifier("SCROLL_ABSOLUTE"),
              new Import[] {
                newImport("java.awt.Event.SCROLL_ABSOLUTE", true),
              })
          .put(
              new Identifier("MYANMAR"),
              new Import[] {
                newImport("java.awt.font.NumericShaper.MYANMAR", true),
                newImport("java.lang.Character.UnicodeBlock.MYANMAR", true),
              })
          .put(
              new Identifier("CUSTOM_CURSOR"),
              new Import[] {
                newImport("java.awt.Cursor.CUSTOM_CURSOR", true),
              })
          .put(
              new Identifier("LOWER_LEFT_CORNER"),
              new Import[] {
                newImport("javax.swing.ScrollPaneConstants.LOWER_LEFT_CORNER", true),
              })
          .put(
              new Identifier("FAILED"),
              new Import[] {
                newImport("javax.management.remote.JMXConnectionNotification.FAILED", true),
              })
          .put(
              new Identifier("RUMI_NUMERAL_SYMBOLS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.RUMI_NUMERAL_SYMBOLS", true),
              })
          .put(
              new Identifier("TemporalQuery"),
              new Import[] {
                newImport("java.time.temporal.TemporalQuery", false),
              })
          .put(
              new Identifier("REF_invokeSpecial"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandleInfo.REF_invokeSpecial", true),
              })
          .put(
              new Identifier("HTTP_BAD_GATEWAY"),
              new Import[] {
                newImport("java.net.HttpURLConnection.HTTP_BAD_GATEWAY", true),
              })
          .put(
              new Identifier("CROSSHAIR_CURSOR"),
              new Import[] {
                newImport("java.awt.Cursor.CROSSHAIR_CURSOR", true),
                newImport("java.awt.Frame.CROSSHAIR_CURSOR", true),
              })
          .put(
              new Identifier("RowSetReader"),
              new Import[] {
                newImport("javax.sql.RowSetReader", false),
              })
          .put(
              new Identifier("DynAnyFactory"),
              new Import[] {
                newImport("org.omg.DynamicAny.DynAnyFactory", false),
              })
          .put(
              new Identifier("VK_UNDERSCORE"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_UNDERSCORE", true),
              })
          .put(
              new Identifier("DEFAULT_STYLE"),
              new Import[] {
                newImport("javax.swing.text.StyleContext.DEFAULT_STYLE", true),
              })
          .put(
              new Identifier("LONGVARCHAR"),
              new Import[] {
                newImport("java.sql.Types.LONGVARCHAR", true),
              })
          .put(
              new Identifier("HORIZONTAL_TEXT_POSITION_CHANGED_PROPERTY"),
              new Import[] {
                newImport(
                    "javax.swing.AbstractButton.HORIZONTAL_TEXT_POSITION_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("DigestInputStream"),
              new Import[] {
                newImport("java.security.DigestInputStream", false),
              })
          .put(
              new Identifier("Normalizer"),
              new Import[] {
                newImport("java.text.Normalizer", false),
              })
          .put(
              new Identifier("ISO_2A0"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_2A0", true),
              })
          .put(
              new Identifier("AlreadyBoundHolder"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextPackage.AlreadyBoundHolder", false),
              })
          .put(
              new Identifier("VERTICAL_SCROLLBAR_NEVER"),
              new Import[] {
                newImport("javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER", true),
              })
          .put(
              new Identifier("readAttributeSet"),
              new Import[] {
                newImport("javax.swing.text.StyleContext.readAttributeSet", true),
              })
          .put(
              new Identifier("ERA_FIELD"),
              new Import[] {
                newImport("java.text.DateFormat.ERA_FIELD", true),
              })
          .put(
              new Identifier("setFontSize"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.setFontSize", true),
              })
          .put(
              new Identifier("SUNDAY_START"),
              new Import[] {
                newImport("java.time.temporal.WeekFields.SUNDAY_START", true),
              })
          .put(
              new Identifier("DOCUMENT_FRAGMENT_NODE"),
              new Import[] {
                newImport("org.w3c.dom.Node.DOCUMENT_FRAGMENT_NODE", true),
              })
          .put(
              new Identifier("BasicSplitPaneDivider"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicSplitPaneDivider", false),
              })
          .put(
              new Identifier("InstantiationError"),
              new Import[] {
                newImport("java.lang.InstantiationError", false),
              })
          .put(
              new Identifier("TABBED_PANE_TAB_AREA"),
              new Import[] {
                newImport("javax.swing.plaf.synth.Region.TABBED_PANE_TAB_AREA", true),
              })
          .put(
              new Identifier("solveQuadratic"),
              new Import[] {
                newImport("java.awt.geom.QuadCurve2D.solveQuadratic", true),
              })
          .put(
              new Identifier("AbstractOwnableSynchronizer"),
              new Import[] {
                newImport("java.util.concurrent.locks.AbstractOwnableSynchronizer", false),
              })
          .put(
              new Identifier("InvalidNameHelper"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextPackage.InvalidNameHelper", false),
                newImport(
                    "org.omg.PortableInterceptor.ORBInitInfoPackage.InvalidNameHelper", false),
              })
          .put(
              new Identifier("SCROLL_TAB_LAYOUT"),
              new Import[] {
                newImport("javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT", true),
              })
          .put(
              new Identifier("VK_END"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_END", true),
              })
          .put(
              new Identifier("printBase64Binary"),
              new Import[] {
                newImport("javax.xml.bind.DatatypeConverter.printBase64Binary", true),
              })
          .put(
              new Identifier("Current"),
              new Import[] {
                newImport("org.omg.CORBA.Current", false),
                newImport("org.omg.PortableInterceptor.Current", false),
                newImport("org.omg.PortableServer.Current", false),
              })
          .put(
              new Identifier("LABELED_BY"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRelation.LABELED_BY", true),
              })
          .put(
              new Identifier("VERTICAL_FORMS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.VERTICAL_FORMS", true),
              })
          .put(
              new Identifier("RSAPublicKeySpec"),
              new Import[] {
                newImport("java.security.spec.RSAPublicKeySpec", false),
              })
          .put(
              new Identifier("InterruptedException"),
              new Import[] {
                newImport("java.lang.InterruptedException", false),
              })
          .put(
              new Identifier("RMIClientSocketFactory"),
              new Import[] {
                newImport("java.rmi.server.RMIClientSocketFactory", false),
              })
          .put(
              new Identifier("VK_F12"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_F12", true),
              })
          .put(
              new Identifier("userRoot"),
              new Import[] {
                newImport("java.util.prefs.Preferences.userRoot", true),
              })
          .put(
              new Identifier("getDefaultInstance"),
              new Import[] {
                newImport("javax.imageio.spi.IIORegistry.getDefaultInstance", true),
              })
          .put(
              new Identifier("VK_F11"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_F11", true),
              })
          .put(
              new Identifier("VK_F14"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_F14", true),
              })
          .put(
              new Identifier("VK_F13"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_F13", true),
              })
          .put(
              new Identifier("icSigPs2CRD2Tag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigPs2CRD2Tag", true),
              })
          .put(
              new Identifier("VK_F10"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_F10", true),
              })
          .put(
              new Identifier("ACCESSIBLE_TABLE_ROW_DESCRIPTION_CHANGED"),
              new Import[] {
                newImport(
                    "javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_ROW_DESCRIPTION_CHANGED",
                    true),
              })
          .put(
              new Identifier("STAPLE_DUAL_LEFT"),
              new Import[] {
                newImport("javax.print.attribute.standard.Finishings.STAPLE_DUAL_LEFT", true),
              })
          .put(
              new Identifier("QUEUED_IN_DEVICE"),
              new Import[] {
                newImport("javax.print.attribute.standard.JobStateReason.QUEUED_IN_DEVICE", true),
              })
          .put(
              new Identifier("icSigNamedColor2Tag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigNamedColor2Tag", true),
              })
          .put(
              new Identifier("convertMouseEvent"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.convertMouseEvent", true),
              })
          .put(
              new Identifier("StAXResult"),
              new Import[] {
                newImport("javax.xml.transform.stax.StAXResult", false),
              })
          .put(
              new Identifier("LongHolder"),
              new Import[] {
                newImport("org.omg.CORBA.LongHolder", false),
              })
          .put(
              new Identifier("getControlHighlight"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalLookAndFeel.getControlHighlight", true),
              })
          .put(
              new Identifier("LIST_STYLE_TYPE"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.LIST_STYLE_TYPE", true),
              })
          .put(
              new Identifier("END_DOCUMENT"),
              new Import[] {
                newImport("javax.xml.stream.XMLStreamConstants.END_DOCUMENT", true),
              })
          .put(
              new Identifier("VK_F19"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_F19", true),
              })
          .put(
              new Identifier("HANGUL_COMPATIBILITY_JAMO"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.HANGUL_COMPATIBILITY_JAMO", true),
              })
          .put(
              new Identifier("NamespaceChangeListener"),
              new Import[] {
                newImport("javax.naming.event.NamespaceChangeListener", false),
              })
          .put(
              new Identifier("VK_F16"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_F16", true),
              })
          .put(
              new Identifier("VK_F15"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_F15", true),
              })
          .put(
              new Identifier("VK_F18"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_F18", true),
              })
          .put(
              new Identifier("loadProxyClass"),
              new Import[] {
                newImport("java.rmi.server.RMIClassLoader.loadProxyClass", true),
              })
          .put(
              new Identifier("getDefaultLocale"),
              new Import[] {
                newImport("javax.swing.JComponent.getDefaultLocale", true),
              })
          .put(
              new Identifier("VK_F17"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_F17", true),
              })
          .put(
              new Identifier("VK_F23"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_F23", true),
              })
          .put(
              new Identifier("VK_F22"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_F22", true),
              })
          .put(
              new Identifier("VK_F24"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_F24", true),
              })
          .put(
              new Identifier("ActionMapUIResource"),
              new Import[] {
                newImport("javax.swing.plaf.ActionMapUIResource", false),
              })
          .put(
              new Identifier("SplitPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.SplitPaneUI", false),
              })
          .put(
              new Identifier("OPAQUE"),
              new Import[] {
                newImport("java.awt.Transparency.OPAQUE", true),
                newImport("javax.accessibility.AccessibleState.OPAQUE", true),
              })
          .put(
              new Identifier("NOTE_OFF"),
              new Import[] {
                newImport("javax.sound.midi.ShortMessage.NOTE_OFF", true),
              })
          .put(
              new Identifier("VK_F21"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_F21", true),
              })
          .put(
              new Identifier("VK_F20"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_F20", true),
              })
          .put(
              new Identifier("MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE"),
              new Import[] {
                newImport(
                    "java.lang.management.ManagementFactory.MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE",
                    true),
              })
          .put(
              new Identifier("LOGICAL_STYLE_ACTION"),
              new Import[] {
                newImport("javax.swing.text.html.HTMLEditorKit.LOGICAL_STYLE_ACTION", true),
              })
          .put(
              new Identifier("convertPoint"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.convertPoint", true),
              })
          .put(
              new Identifier("TRANSACTION_ROLLEDBACK"),
              new Import[] {
                newImport("org.omg.CORBA.TRANSACTION_ROLLEDBACK", false),
              })
          .put(
              new Identifier("HashPrintRequestAttributeSet"),
              new Import[] {
                newImport("javax.print.attribute.HashPrintRequestAttributeSet", false),
              })
          .put(
              new Identifier("WHEN_IN_FOCUSED_WINDOW"),
              new Import[] {
                newImport("javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW", true),
              })
          .put(
              new Identifier("OTHER_LETTER"),
              new Import[] {
                newImport("java.lang.Character.OTHER_LETTER", true),
              })
          .put(
              new Identifier("TAG_ORB_TYPE"),
              new Import[] {
                newImport("org.omg.IOP.TAG_ORB_TYPE", false),
              })
          .put(
              new Identifier("TAG_EBSC"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_EBSC", true),
              })
          .put(
              new Identifier("CHINESE"),
              new Import[] {
                newImport("java.util.Locale.CHINESE", true),
              })
          .put(
              new Identifier("getClassAnnotation"),
              new Import[] {
                newImport("java.rmi.server.RMIClassLoader.getClassAnnotation", true),
              })
          .put(
              new Identifier("IMMUTABLE_INFO_FIELD"),
              new Import[] {
                newImport("javax.management.JMX.IMMUTABLE_INFO_FIELD", true),
              })
          .put(
              new Identifier("SNIServerName"),
              new Import[] {
                newImport("javax.net.ssl.SNIServerName", false),
              })
          .put(
              new Identifier("BRIEF"),
              new Import[] {
                newImport("java.rmi.server.LogStream.BRIEF", true),
              })
          .put(
              new Identifier("JoinNextDirection"),
              new Import[] {
                newImport(
                    "javax.swing.text.DefaultStyledDocument.ElementSpec.JoinNextDirection", true),
              })
          .put(
              new Identifier("getInitialContext"),
              new Import[] {
                newImport("javax.naming.spi.NamingManager.getInitialContext", true),
              })
          .put(
              new Identifier("AWTEvent"),
              new Import[] {
                newImport("java.awt.AWTEvent", false),
              })
          .put(
              new Identifier("MultiScrollBarUI"),
              new Import[] {
                newImport("javax.swing.plaf.multi.MultiScrollBarUI", false),
              })
          .put(
              new Identifier("RequestWrapper"),
              new Import[] {
                newImport("javax.xml.ws.RequestWrapper", false),
              })
          .put(
              new Identifier("LOAD_FILE"),
              new Import[] {
                newImport("java.awt.Event.LOAD_FILE", true),
              })
          .put(
              new Identifier("BOTH"),
              new Import[] {
                newImport("java.awt.GridBagConstraints.BOTH", true),
              })
          .put(
              new Identifier("TableView"),
              new Import[] {
                newImport("javax.swing.text.TableView", false),
              })
          .put(
              new Identifier("procedureResultUnknown"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.procedureResultUnknown", true),
              })
          .put(
              new Identifier("setIn"),
              new Import[] {
                newImport("java.lang.System.setIn", true),
              })
          .put(
              new Identifier("SO_TIMEOUT"),
              new Import[] {
                newImport("java.net.SocketOptions.SO_TIMEOUT", true),
              })
          .put(
              new Identifier("ConcurrentMap"),
              new Import[] {
                newImport("java.util.concurrent.ConcurrentMap", false),
              })
          .put(
              new Identifier("NetworkInterface"),
              new Import[] {
                newImport("java.net.NetworkInterface", false),
              })
          .put(
              new Identifier("_NO_IMPLICIT_ACTIVATION"),
              new Import[] {
                newImport(
                    "org.omg.PortableServer.ImplicitActivationPolicyValue._NO_IMPLICIT_ACTIVATION",
                    true),
              })
          .put(
              new Identifier("ETHIOPIC_SUPPLEMENT"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.ETHIOPIC_SUPPLEMENT", true),
              })
          .put(
              new Identifier("ManagedBlocker"),
              new Import[] {
                newImport("java.util.concurrent.ForkJoinPool.ManagedBlocker", false),
              })
          .put(
              new Identifier("EXTENSION_LIST"),
              new Import[] {
                newImport("java.util.jar.Attributes.Name.EXTENSION_LIST", true),
              })
          .put(
              new Identifier("getImageTranscoders"),
              new Import[] {
                newImport("javax.imageio.ImageIO.getImageTranscoders", true),
              })
          .put(
              new Identifier("BasicLookAndFeel"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicLookAndFeel", false),
              })
          .put(
              new Identifier("IS_NAMESPACE_AWARE"),
              new Import[] {
                newImport("javax.xml.stream.XMLInputFactory.IS_NAMESPACE_AWARE", true),
              })
          .put(
              new Identifier("unbind"),
              new Import[] {
                newImport("java.rmi.Naming.unbind", true),
              })
          .put(
              new Identifier("CENDSK"),
              new Import[] {
                newImport("java.util.jar.JarEntry.CENDSK", true),
                newImport("java.util.jar.JarFile.CENDSK", true),
                newImport("java.util.jar.JarInputStream.CENDSK", true),
                newImport("java.util.jar.JarOutputStream.CENDSK", true),
                newImport("java.util.zip.ZipEntry.CENDSK", true),
                newImport("java.util.zip.ZipFile.CENDSK", true),
                newImport("java.util.zip.ZipInputStream.CENDSK", true),
                newImport("java.util.zip.ZipOutputStream.CENDSK", true),
              })
          .put(
              new Identifier("MouseInputListener"),
              new Import[] {
                newImport("javax.swing.event.MouseInputListener", false),
              })
          .put(
              new Identifier("FEATURE_SECURE_PROCESSING"),
              new Import[] {
                newImport("javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING", true),
              })
          .put(
              new Identifier("FEATURE_XMLFILTER"),
              new Import[] {
                newImport("javax.xml.transform.sax.SAXTransformerFactory.FEATURE_XMLFILTER", true),
              })
          .put(
              new Identifier("dk_Fixed"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind.dk_Fixed", true),
              })
          .put(
              new Identifier("SC_ENUM"),
              new Import[] {
                newImport("java.io.ObjectStreamConstants.SC_ENUM", true),
              })
          .put(
              new Identifier("DstOut"),
              new Import[] {
                newImport("java.awt.AlphaComposite.DstOut", true),
              })
          .put(
              new Identifier("MBeanParameterInfo"),
              new Import[] {
                newImport("javax.management.MBeanParameterInfo", false),
              })
          .build();
}
