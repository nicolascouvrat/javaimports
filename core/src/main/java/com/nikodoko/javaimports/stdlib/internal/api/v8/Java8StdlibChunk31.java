// Code generated by GenerateStdlib.java. DO NOT EDIT.
package com.nikodoko.javaimports.stdlib.internal.api.v8;

import static com.nikodoko.javaimports.stdlib.internal.Stdlib.newImport;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.common.Identifier;
import com.nikodoko.javaimports.common.Import;
import java.util.Map;

public class Java8StdlibChunk31 {
  static final Map<Identifier, Import[]> CLASSES =
      new ImmutableMap.Builder<Identifier, Import[]>()
          .put(
              new Identifier("setDatagramSocketImplFactory"),
              new Import[] {
                newImport("java.net.DatagramSocket.setDatagramSocketImplFactory", true),
              })
          .put(
              new Identifier("FlowStrategy"),
              new Import[] {
                newImport("javax.swing.text.FlowView.FlowStrategy", false),
              })
          .put(
              new Identifier("ImmutableDescriptor"),
              new Import[] {
                newImport("javax.management.ImmutableDescriptor", false),
              })
          .put(
              new Identifier("SUPERSCRIPT_SUPER"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.SUPERSCRIPT_SUPER", true),
              })
          .put(
              new Identifier("NO_MORE_EVENTS"),
              new Import[] {
                newImport("javax.print.event.PrintJobEvent.NO_MORE_EVENTS", true),
              })
          .put(
              new Identifier("XmlTransient"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlTransient", false),
              })
          .put(
              new Identifier("selectionBeginAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.selectionBeginAction", true),
              })
          .put(
              new Identifier("Engineering"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSize.Engineering", false),
              })
          .put(
              new Identifier("DynAnyFactoryHelper"),
              new Import[] {
                newImport("org.omg.DynamicAny.DynAnyFactoryHelper", false),
              })
          .put(
              new Identifier("newAudioClip"),
              new Import[] {
                newImport("java.applet.Applet.newAudioClip", true),
              })
          .put(
              new Identifier("TEXT_NODE"),
              new Import[] {
                newImport("org.w3c.dom.Node.TEXT_NODE", true),
              })
          .put(
              new Identifier("ACTION_NONE"),
              new Import[] {
                newImport("java.awt.dnd.DnDConstants.ACTION_NONE", true),
              })
          .put(
              new Identifier("_tk_longdouble"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind._tk_longdouble", true),
              })
          .put(
              new Identifier("XMLReader"),
              new Import[] {
                newImport("org.xml.sax.XMLReader", false),
              })
          .put(
              new Identifier("DATE_FIELD"),
              new Import[] {
                newImport("java.text.DateFormat.DATE_FIELD", true),
              })
          .put(
              new Identifier("endLineAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.endLineAction", true),
              })
          .put(
              new Identifier("ConcurrentSkipListSet"),
              new Import[] {
                newImport("java.util.concurrent.ConcurrentSkipListSet", false),
              })
          .put(
              new Identifier("NoType"),
              new Import[] {
                newImport("javax.lang.model.type.NoType", false),
              })
          .put(
              new Identifier("getTabbedTextWidth"),
              new Import[] {
                newImport("javax.swing.text.Utilities.getTabbedTextWidth", true),
              })
          .put(
              new Identifier("_dk_Struct"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind._dk_Struct", true),
              })
          .put(
              new Identifier("Exception"),
              new Import[] {
                newImport("java.lang.Exception", false),
              })
          .put(
              new Identifier("BigDecimal"),
              new Import[] {
                newImport("java.math.BigDecimal", false),
              })
          .put(
              new Identifier("userNodeForPackage"),
              new Import[] {
                newImport("java.util.prefs.Preferences.userNodeForPackage", true),
              })
          .put(
              new Identifier("EXPANDABLE"),
              new Import[] {
                newImport("javax.accessibility.AccessibleState.EXPANDABLE", true),
              })
          .put(
              new Identifier("ShortMessage"),
              new Import[] {
                newImport("javax.sound.midi.ShortMessage", false),
              })
          .put(
              new Identifier("SrcAtop"),
              new Import[] {
                newImport("java.awt.AlphaComposite.SrcAtop", true),
              })
          .put(
              new Identifier("MAX_KEY_LENGTH"),
              new Import[] {
                newImport("java.util.prefs.Preferences.MAX_KEY_LENGTH", true),
              })
          .put(
              new Identifier("PrintJobAdapter"),
              new Import[] {
                newImport("javax.print.event.PrintJobAdapter", false),
              })
          .put(
              new Identifier("ROOT_PANE_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JInternalFrame.ROOT_PANE_PROPERTY", true),
              })
          .put(
              new Identifier("ACCEPTING_JOBS"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.PrinterIsAcceptingJobs.ACCEPTING_JOBS", true),
              })
          .put(
              new Identifier("NULL_ATTRIBUTE_VALUE"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.NULL_ATTRIBUTE_VALUE", true),
              })
          .put(
              new Identifier("icICCAbsoluteColorimetric"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icICCAbsoluteColorimetric", true),
              })
          .build();
}
