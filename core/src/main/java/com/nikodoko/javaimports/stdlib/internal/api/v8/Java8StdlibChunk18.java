// Code generated by GenerateStdlib.java. DO NOT EDIT.
package com.nikodoko.javaimports.stdlib.internal.api.v8;

import static com.nikodoko.javaimports.stdlib.internal.Stdlib.newImport;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.common.Identifier;
import com.nikodoko.javaimports.common.Import;
import java.util.Map;

public class Java8StdlibChunk18 {
  static final Map<Identifier, Import[]> CLASSES =
      new ImmutableMap.Builder<Identifier, Import[]>()
          .put(
              new Identifier("setUnderline"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.setUnderline", true),
              })
          .put(
              new Identifier("StandardLocation"),
              new Import[] {
                newImport("javax.tools.StandardLocation", false),
              })
          .put(
              new Identifier("ENVELOPED"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.Transform.ENVELOPED", true),
              })
          .put(
              new Identifier("BooleanSeqHelper"),
              new Import[] {
                newImport("org.omg.CORBA.BooleanSeqHelper", false),
              })
          .put(
              new Identifier("newJMXConnector"),
              new Import[] {
                newImport("javax.management.remote.JMXConnectorFactory.newJMXConnector", true),
              })
          .put(
              new Identifier("OutputStream"),
              new Import[] {
                newImport("java.io.OutputStream", false),
                newImport("org.omg.CORBA.portable.OutputStream", false),
                newImport("org.omg.CORBA_2_3.portable.OutputStream", false),
              })
          .put(
              new Identifier("CLOSE"),
              new Import[] {
                newImport("javax.sound.sampled.LineEvent.Type.CLOSE", true),
              })
          .put(
              new Identifier("NamingContextExtHelper"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextExtHelper", false),
              })
          .put(
              new Identifier("tk_native"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind.tk_native", true),
              })
          .put(
              new Identifier("DefaultMetalTheme"),
              new Import[] {
                newImport("javax.swing.plaf.metal.DefaultMetalTheme", false),
              })
          .put(
              new Identifier("_NamingContextImplBase"),
              new Import[] {
                newImport("org.omg.CosNaming._NamingContextImplBase", false),
              })
          .put(
              new Identifier("KANBUN"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.KANBUN", true),
              })
          .put(
              new Identifier("MONTHS"),
              new Import[] {
                newImport("javax.xml.datatype.DatatypeConstants.MONTHS", true),
              })
          .put(
              new Identifier("UserPrincipalNotFoundException"),
              new Import[] {
                newImport("java.nio.file.attribute.UserPrincipalNotFoundException", false),
              })
          .put(
              new Identifier("StringBufferInputStream"),
              new Import[] {
                newImport("java.io.StringBufferInputStream", false),
              })
          .put(
              new Identifier("INTERNAL"),
              new Import[] {
                newImport("org.omg.CORBA.INTERNAL", false),
              })
          .put(
              new Identifier("ACCESSIBLE_TABLE_MODEL_CHANGED"),
              new Import[] {
                newImport(
                    "javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_MODEL_CHANGED", true),
              })
          .put(
              new Identifier("ICC_Profile"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile", false),
              })
          .put(
              new Identifier("PERSONAL_ENVELOPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.PERSONAL_ENVELOPE", true),
                newImport("javax.print.attribute.standard.MediaSizeName.PERSONAL_ENVELOPE", true),
                newImport("javax.print.attribute.standard.MediaSize.Other.PERSONAL_ENVELOPE", true),
              })
          .put(
              new Identifier("DateTimeFormatterBuilder"),
              new Import[] {
                newImport("java.time.format.DateTimeFormatterBuilder", false),
              })
          .put(
              new Identifier("StubNotFoundException"),
              new Import[] {
                newImport("java.rmi.StubNotFoundException", false),
              })
          .put(
              new Identifier("MBeanServer"),
              new Import[] {
                newImport("javax.management.MBeanServer", false),
              })
          .put(
              new Identifier("height"),
              new Import[] {
                newImport("javax.swing.Spring.height", true),
              })
          .put(
              new Identifier("allocateDirect"),
              new Import[] {
                newImport("java.nio.ByteBuffer.allocateDirect", true),
              })
          .put(
              new Identifier("readFrom"),
              new Import[] {
                newImport("javax.xml.ws.EndpointReference.readFrom", true),
              })
          .put(
              new Identifier("checkedCollection"),
              new Import[] {
                newImport("java.util.Collections.checkedCollection", true),
              })
          .put(
              new Identifier("MEMORY_POOL_MXBEAN_DOMAIN_TYPE"),
              new Import[] {
                newImport(
                    "java.lang.management.ManagementFactory.MEMORY_POOL_MXBEAN_DOMAIN_TYPE", true),
              })
          .put(
              new Identifier("NODE"),
              new Import[] {
                newImport("javax.xml.xpath.XPathConstants.NODE", true),
              })
          .put(
              new Identifier("paintComponent"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.paintComponent", true),
              })
          .put(
              new Identifier("getKeyStroke"),
              new Import[] {
                newImport("javax.swing.KeyStroke.getKeyStroke", true),
              })
          .put(
              new Identifier("INNER_JOIN"),
              new Import[] {
                newImport("javax.sql.rowset.JoinRowSet.INNER_JOIN", true),
              })
          .put(
              new Identifier("dk_ValueMember"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind.dk_ValueMember", true),
              })
          .put(
              new Identifier("importedKeyInitiallyDeferred"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.importedKeyInitiallyDeferred", true),
              })
          .put(
              new Identifier("Parser"),
              new Import[] {
                newImport("javax.swing.text.html.HTMLEditorKit.Parser", false),
                newImport("javax.swing.text.html.parser.Parser", false),
                newImport("org.xml.sax.Parser", false),
              })
          .put(
              new Identifier("HOUR_OF_DAY1_FIELD"),
              new Import[] {
                newImport("java.text.DateFormat.HOUR_OF_DAY1_FIELD", true),
              })
          .put(
              new Identifier("AtomicBoolean"),
              new Import[] {
                newImport("java.util.concurrent.atomic.AtomicBoolean", false),
              })
          .put(
              new Identifier("ChoiceCallback"),
              new Import[] {
                newImport("javax.security.auth.callback.ChoiceCallback", false),
              })
          .put(
              new Identifier("ICON_COLOR_32x32"),
              new Import[] {
                newImport("java.beans.BeanInfo.ICON_COLOR_32x32", true),
              })
          .put(
              new Identifier("AffineTransform"),
              new Import[] {
                newImport("java.awt.geom.AffineTransform", false),
              })
          .put(
              new Identifier("Key"),
              new Import[] {
                newImport("java.awt.RenderingHints.Key", false),
                newImport("java.security.Key", false),
              })
          .put(
              new Identifier("PasswordProtection"),
              new Import[] {
                newImport("java.security.KeyStore.PasswordProtection", false),
              })
          .put(
              new Identifier("PagedResultsControl"),
              new Import[] {
                newImport("javax.naming.ldap.PagedResultsControl", false),
              })
          .put(
              new Identifier("MOUSE_EVENT_MASK"),
              new Import[] {
                newImport("java.awt.AWTEvent.MOUSE_EVENT_MASK", true),
              })
          .put(
              new Identifier("CutAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.CutAction", false),
              })
          .put(
              new Identifier("IPA_EXTENSIONS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.IPA_EXTENSIONS", true),
              })
          .put(
              new Identifier("DynSequenceHelper"),
              new Import[] {
                newImport("org.omg.DynamicAny.DynSequenceHelper", false),
              })
          .put(
              new Identifier("PathIterator"),
              new Import[] {
                newImport("java.awt.geom.PathIterator", false),
              })
          .put(
              new Identifier("JOB_HOLD_UNTIL_SPECIFIED"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.JobStateReason.JOB_HOLD_UNTIL_SPECIFIED", true),
              })
          .put(
              new Identifier("PARAGRAPH_SEPARATOR"),
              new Import[] {
                newImport("java.lang.Character.PARAGRAPH_SEPARATOR", true),
              })
          .put(
              new Identifier("EventHandler"),
              new Import[] {
                newImport("java.beans.EventHandler", false),
              })
          .put(
              new Identifier("isPrivate"),
              new Import[] {
                newImport("java.lang.reflect.Modifier.isPrivate", true),
              })
          .put(
              new Identifier("Logger"),
              new Import[] {
                newImport("java.util.logging.Logger", false),
              })
          .put(
              new Identifier("Elements"),
              new Import[] {
                newImport("javax.lang.model.util.Elements", false),
              })
          .put(
              new Identifier("min"),
              new Import[] {
                newImport("java.lang.Double.min", true),
                newImport("java.lang.Float.min", true),
                newImport("java.lang.Integer.min", true),
                newImport("java.lang.Long.min", true),
                newImport("java.lang.Math.min", true),
                newImport("java.lang.StrictMath.min", true),
                newImport("java.util.Collections.min", true),
              })
          .put(
              new Identifier("PRIVATE_USE_EXTENSION"),
              new Import[] {
                newImport("java.util.Locale.PRIVATE_USE_EXTENSION", true),
              })
          .put(
              new Identifier("arraycopy"),
              new Import[] {
                newImport("java.lang.System.arraycopy", true),
              })
          .put(
              new Identifier("BLOCK_ELEMENTS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.BLOCK_ELEMENTS", true),
              })
          .put(
              new Identifier("HMAC_SHA1"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.SignatureMethod.HMAC_SHA1", true),
              })
          .put(
              new Identifier("getBoolean"),
              new Import[] {
                newImport("java.lang.Boolean.getBoolean", true),
                newImport("java.lang.reflect.Array.getBoolean", true),
                newImport("javax.swing.UIManager.getBoolean", true),
              })
          .put(
              new Identifier("icSigDeviceModelDescTag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigDeviceModelDescTag", true),
              })
          .put(
              new Identifier("DECIMAL32"),
              new Import[] {
                newImport("java.math.MathContext.DECIMAL32", true),
              })
          .put(
              new Identifier("getPreferredButtonSize"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicGraphicsUtils.getPreferredButtonSize", true),
              })
          .put(
              new Identifier("SOAPConnectionFactory"),
              new Import[] {
                newImport("javax.xml.soap.SOAPConnectionFactory", false),
              })
          .put(
              new Identifier("VK_KANA"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_KANA", true),
              })
          .put(
              new Identifier("LARGE_CAPACITY"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaTray.LARGE_CAPACITY", true),
              })
          .put(
              new Identifier("getMenuSelectedForeground"),
              new Import[] {
                newImport(
                    "javax.swing.plaf.metal.MetalLookAndFeel.getMenuSelectedForeground", true),
              })
          .put(
              new Identifier("Calendar"),
              new Import[] {
                newImport("java.util.Calendar", false),
              })
          .put(
              new Identifier("TYPE_USHORT_GRAY"),
              new Import[] {
                newImport("java.awt.image.BufferedImage.TYPE_USHORT_GRAY", true),
              })
          .put(
              new Identifier("emptySpliterator"),
              new Import[] {
                newImport("java.util.Spliterators.emptySpliterator", true),
              })
          .put(
              new Identifier("UNDERLINE_LOW_DOTTED"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.UNDERLINE_LOW_DOTTED", true),
              })
          .put(
              new Identifier("UP_CYCLE_TRAVERSAL_KEYS"),
              new Import[] {
                newImport("java.awt.KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS", true),
              })
          .put(
              new Identifier("DoubleSummaryStatistics"),
              new Import[] {
                newImport("java.util.DoubleSummaryStatistics", false),
              })
          .put(
              new Identifier("InsertContentAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.InsertContentAction", false),
              })
          .put(
              new Identifier("Observable"),
              new Import[] {
                newImport("java.util.Observable", false),
              })
          .put(
              new Identifier("icSigScreeningTag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigScreeningTag", true),
              })
          .put(
              new Identifier("BEFORE_LINE_BEGINS"),
              new Import[] {
                newImport("java.awt.BorderLayout.BEFORE_LINE_BEGINS", true),
              })
          .put(
              new Identifier("QUERY_STRING"),
              new Import[] {
                newImport("javax.xml.ws.handler.MessageContext.QUERY_STRING", true),
              })
          .put(
              new Identifier("functionReturnsTable"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.functionReturnsTable", true),
              })
          .put(
              new Identifier("SUBMIT"),
              new Import[] {
                newImport("javax.swing.text.html.FormView.SUBMIT", true),
              })
          .put(
              new Identifier("JEditorPane"),
              new Import[] {
                newImport("javax.swing.JEditorPane", false),
              })
          .put(
              new Identifier("XmlElement"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlElement", false),
              })
          .put(
              new Identifier("open"),
              new Import[] {
                newImport("java.nio.channels.AsynchronousFileChannel.open", true),
                newImport("java.nio.channels.AsynchronousServerSocketChannel.open", true),
                newImport("java.nio.channels.AsynchronousSocketChannel.open", true),
                newImport("java.nio.channels.DatagramChannel.open", true),
                newImport("java.nio.channels.FileChannel.open", true),
                newImport("java.nio.channels.Pipe.open", true),
                newImport("java.nio.channels.Selector.open", true),
                newImport("java.nio.channels.ServerSocketChannel.open", true),
                newImport("java.nio.channels.SocketChannel.open", true),
              })
          .put(
              new Identifier("OP_ACCEPT"),
              new Import[] {
                newImport("java.nio.channels.SelectionKey.OP_ACCEPT", true),
              })
          .put(
              new Identifier("XPathExpression"),
              new Import[] {
                newImport("javax.xml.xpath.XPathExpression", false),
              })
          .put(
              new Identifier("ResponseHandler"),
              new Import[] {
                newImport("org.omg.CORBA.portable.ResponseHandler", false),
              })
          .put(
              new Identifier("AlgorithmParametersSpi"),
              new Import[] {
                newImport("java.security.AlgorithmParametersSpi", false),
              })
          .put(
              new Identifier("filterArguments"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandles.filterArguments", true),
              })
          .put(
              new Identifier("chronology"),
              new Import[] {
                newImport("java.time.temporal.TemporalQueries.chronology", true),
              })
          .put(
              new Identifier("MouseWheelListener"),
              new Import[] {
                newImport("java.awt.event.MouseWheelListener", false),
              })
          .put(
              new Identifier("Process"),
              new Import[] {
                newImport("java.lang.Process", false),
              })
          .put(
              new Identifier("VK_DEAD_ABOVEDOT"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_DEAD_ABOVEDOT", true),
              })
          .put(
              new Identifier("StreamFilter"),
              new Import[] {
                newImport("javax.xml.stream.StreamFilter", false),
              })
          .put(
              new Identifier("isSpace"),
              new Import[] {
                newImport("java.lang.Character.isSpace", true),
              })
          .put(
              new Identifier("SslRMIClientSocketFactory"),
              new Import[] {
                newImport("javax.rmi.ssl.SslRMIClientSocketFactory", false),
              })
          .put(
              new Identifier("ThreadDeath"),
              new Import[] {
                newImport("java.lang.ThreadDeath", false),
              })
          .put(
              new Identifier("ORDERED"),
              new Import[] {
                newImport("java.util.Spliterator.ORDERED", true),
              })
          .put(
              new Identifier("TIMED_OUT"),
              new Import[] {
                newImport("javax.print.attribute.standard.PrinterStateReason.TIMED_OUT", true),
              })
          .put(
              new Identifier("UNIT_INCREMENT"),
              new Import[] {
                newImport("java.awt.event.AdjustmentEvent.UNIT_INCREMENT", true),
              })
          .put(
              new Identifier("WEEK_OF_YEAR_FIELD"),
              new Import[] {
                newImport("java.text.DateFormat.WEEK_OF_YEAR_FIELD", true),
              })
          .put(
              new Identifier("BadBreakWeight"),
              new Import[] {
                newImport("javax.swing.text.View.BadBreakWeight", true),
              })
          .put(
              new Identifier("dk_Array"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind.dk_Array", true),
              })
          .put(
              new Identifier("PrivateMLet"),
              new Import[] {
                newImport("javax.management.loading.PrivateMLet", false),
              })
          .put(
              new Identifier("Polygon"),
              new Import[] {
                newImport("java.awt.Polygon", false),
              })
          .put(
              new Identifier("AbstractAction"),
              new Import[] {
                newImport("javax.swing.AbstractAction", false),
              })
          .put(
              new Identifier("DECIMAL64"),
              new Import[] {
                newImport("java.math.MathContext.DECIMAL64", true),
              })
          .put(
              new Identifier("HANGUL_SYLLABLES"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.HANGUL_SYLLABLES", true),
              })
          .put(
              new Identifier("TMFAIL"),
              new Import[] {
                newImport("javax.transaction.xa.XAResource.TMFAIL", true),
              })
          .put(
              new Identifier("StandardCharsets"),
              new Import[] {
                newImport("java.nio.charset.StandardCharsets", false),
              })
          .put(
              new Identifier("standardMetadataFormatName"),
              new Import[] {
                newImport(
                    "javax.imageio.metadata.IIOMetadataFormatImpl.standardMetadataFormatName",
                    true),
              })
          .put(
              new Identifier("FontUIResource"),
              new Import[] {
                newImport("javax.swing.plaf.FontUIResource", false),
              })
          .put(
              new Identifier("VK_HALF_WIDTH"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_HALF_WIDTH", true),
              })
          .put(
              new Identifier("printHexBinary"),
              new Import[] {
                newImport("javax.xml.bind.DatatypeConverter.printHexBinary", true),
              })
          .put(
              new Identifier("MidiDevice"),
              new Import[] {
                newImport("javax.sound.midi.MidiDevice", false),
              })
          .put(
              new Identifier("getSecurityManager"),
              new Import[] {
                newImport("java.lang.System.getSecurityManager", true),
              })
          .put(
              new Identifier("ImageReaderWriterSpi"),
              new Import[] {
                newImport("javax.imageio.spi.ImageReaderWriterSpi", false),
              })
          .put(
              new Identifier("AnnotatedType"),
              new Import[] {
                newImport("java.lang.reflect.AnnotatedType", false),
              })
          .put(
              new Identifier("GrayFilter"),
              new Import[] {
                newImport("javax.swing.GrayFilter", false),
              })
          .put(
              new Identifier("HTTP_MULT_CHOICE"),
              new Import[] {
                newImport("java.net.HttpURLConnection.HTTP_MULT_CHOICE", true),
              })
          .put(
              new Identifier("NameCallback"),
              new Import[] {
                newImport("javax.security.auth.callback.NameCallback", false),
              })
          .put(
              new Identifier("StringHolder"),
              new Import[] {
                newImport("org.omg.CORBA.StringHolder", false),
              })
          .put(
              new Identifier("ProcessBuilder"),
              new Import[] {
                newImport("java.lang.ProcessBuilder", false),
              })
          .put(
              new Identifier("icSigViewingCondDescTag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigViewingCondDescTag", true),
              })
          .put(
              new Identifier("VK_CONVERT"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_CONVERT", true),
              })
          .put(
              new Identifier("setByte"),
              new Import[] {
                newImport("java.lang.reflect.Array.setByte", true),
              })
          .put(
              new Identifier("ERROR_MESSAGE"),
              new Import[] {
                newImport("javax.swing.JOptionPane.ERROR_MESSAGE", true),
              })
          .put(
              new Identifier("PaletteCloseIcon"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalIconFactory.PaletteCloseIcon", false),
              })
          .put(
              new Identifier("binarySearch"),
              new Import[] {
                newImport("java.util.Arrays.binarySearch", true),
                newImport("java.util.Collections.binarySearch", true),
              })
          .put(
              new Identifier("getStandardFormatInstance"),
              new Import[] {
                newImport(
                    "javax.imageio.metadata.IIOMetadataFormatImpl.getStandardFormatInstance", true),
              })
          .put(
              new Identifier("ZoneOffset"),
              new Import[] {
                newImport("java.time.ZoneOffset", false),
              })
          .put(
              new Identifier("Control"),
              new Import[] {
                newImport("java.util.ResourceBundle.Control", false),
                newImport("javax.naming.ldap.Control", false),
                newImport("javax.sound.sampled.Control", false),
              })
          .put(
              new Identifier("MetalComboBoxEditor"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalComboBoxEditor", false),
              })
          .put(
              new Identifier("isAlphabetic"),
              new Import[] {
                newImport("java.lang.Character.isAlphabetic", true),
              })
          .put(
              new Identifier("SO_RCVBUF"),
              new Import[] {
                newImport("java.net.SocketOptions.SO_RCVBUF", true),
                newImport("java.net.StandardSocketOptions.SO_RCVBUF", true),
              })
          .put(
              new Identifier("ChronoLocalDateTime"),
              new Import[] {
                newImport("java.time.chrono.ChronoLocalDateTime", false),
              })
          .put(
              new Identifier("Console"),
              new Import[] {
                newImport("java.io.Console", false),
              })
          .put(
              new Identifier("Iterator"),
              new Import[] {
                newImport("java.util.Iterator", false),
                newImport("javax.swing.text.html.HTMLDocument.Iterator", false),
              })
          .put(
              new Identifier("PAGE_TAB_LIST"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.PAGE_TAB_LIST", true),
              })
          .put(
              new Identifier("HIERARCHY_LAST"),
              new Import[] {
                newImport("java.awt.event.HierarchyEvent.HIERARCHY_LAST", true),
              })
          .put(
              new Identifier("GOTHIC"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.GOTHIC", true),
              })
          .put(
              new Identifier("TEXT_FIELD"),
              new Import[] {
                newImport("javax.swing.plaf.synth.Region.TEXT_FIELD", true),
              })
          .put(
              new Identifier("importPreferences"),
              new Import[] {
                newImport("java.util.prefs.Preferences.importPreferences", true),
              })
          .put(
              new Identifier("padSpaceBetweenStrings"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalToolTipUI.padSpaceBetweenStrings", true),
              })
          .put(
              new Identifier("ABOUT_UIROLE"),
              new Import[] {
                newImport("javax.print.ServiceUIFactory.ABOUT_UIROLE", true),
              })
          .put(
              new Identifier("DestroyFailedException"),
              new Import[] {
                newImport("javax.security.auth.DestroyFailedException", false),
              })
          .put(
              new Identifier("CharsetDecoder"),
              new Import[] {
                newImport("java.nio.charset.CharsetDecoder", false),
              })
          .put(
              new Identifier("MediaSize"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSize", false),
              })
          .put(
              new Identifier("nextDown"),
              new Import[] {
                newImport("java.lang.Math.nextDown", true),
                newImport("java.lang.StrictMath.nextDown", true),
              })
          .put(
              new Identifier("SCALE_SMOOTH"),
              new Import[] {
                newImport("java.awt.Image.SCALE_SMOOTH", true),
              })
          .put(
              new Identifier("COLS"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.COLS", true),
              })
          .put(
              new Identifier("RMICustomMaxStreamFormat"),
              new Import[] {
                newImport("org.omg.IOP.RMICustomMaxStreamFormat", false),
              })
          .put(
              new Identifier("getTargetLineInfo"),
              new Import[] {
                newImport("javax.sound.sampled.AudioSystem.getTargetLineInfo", true),
              })
          .put(
              new Identifier("InvalidRoleInfoException"),
              new Import[] {
                newImport("javax.management.relation.InvalidRoleInfoException", false),
              })
          .put(
              new Identifier("CONTROLLER_FOR_PROPERTY"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRelation.CONTROLLER_FOR_PROPERTY", true),
              })
          .put(
              new Identifier("AIFF"),
              new Import[] {
                newImport("javax.sound.sampled.AudioFileFormat.Type.AIFF", true),
              })
          .put(
              new Identifier("WHEEL_UNIT_SCROLL"),
              new Import[] {
                newImport("java.awt.event.MouseWheelEvent.WHEEL_UNIT_SCROLL", true),
              })
          .put(
              new Identifier("ncontext"),
              new Import[] {
                newImport("org.omg.CosNaming.BindingType.ncontext", true),
              })
          .put(
              new Identifier("MenuItemBorder"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalBorders.MenuItemBorder", false),
              })
          .put(
              new Identifier("AIFC"),
              new Import[] {
                newImport("javax.sound.sampled.AudioFileFormat.Type.AIFC", true),
              })
          .put(
              new Identifier("TIMEZONE_FIELD"),
              new Import[] {
                newImport("java.text.DateFormat.TIMEZONE_FIELD", true),
              })
          .put(
              new Identifier("PLAYING_CARDS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.PLAYING_CARDS", true),
              })
          .put(
              new Identifier("HIERARCHY_CHANGED"),
              new Import[] {
                newImport("java.awt.event.HierarchyEvent.HIERARCHY_CHANGED", true),
              })
          .put(
              new Identifier("HIGH_SURROGATES"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.HIGH_SURROGATES", true),
              })
          .put(
              new Identifier("INPUT_STREAM"),
              new Import[] {
                newImport("javax.print.DocFlavor.INPUT_STREAM", false),
              })
          .put(
              new Identifier("SERVLET_REQUEST"),
              new Import[] {
                newImport("javax.xml.ws.handler.MessageContext.SERVLET_REQUEST", true),
              })
          .put(
              new Identifier("Security"),
              new Import[] {
                newImport("java.security.Security", false),
              })
          .put(
              new Identifier("PARENT_WINDOW_OF"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRelation.PARENT_WINDOW_OF", true),
              })
          .put(
              new Identifier("setDefaultFileTypeMap"),
              new Import[] {
                newImport("javax.activation.FileTypeMap.setDefaultFileTypeMap", true),
              })
          .put(
              new Identifier("getWordStart"),
              new Import[] {
                newImport("javax.swing.text.Utilities.getWordStart", true),
              })
          .put(
              new Identifier("RoleStatus"),
              new Import[] {
                newImport("javax.management.relation.RoleStatus", false),
              })
          .put(
              new Identifier("SQLInputImpl"),
              new Import[] {
                newImport("javax.sql.rowset.serial.SQLInputImpl", false),
              })
          .put(
              new Identifier("ConfigurationException"),
              new Import[] {
                newImport("javax.naming.ConfigurationException", false),
              })
          .put(
              new Identifier("AudioPermission"),
              new Import[] {
                newImport("javax.sound.sampled.AudioPermission", false),
              })
          .put(
              new Identifier("NONE"),
              new Import[] {
                newImport("java.awt.GridBagConstraints.NONE", true),
                newImport("java.awt.JobAttributes.DialogType.NONE", true),
                newImport("javax.print.attribute.standard.Compression.NONE", true),
                newImport("javax.print.attribute.standard.Finishings.NONE", true),
                newImport("javax.print.attribute.standard.JobSheets.NONE", true),
                newImport("javax.swing.JRootPane.NONE", true),
                newImport("javax.swing.TransferHandler.NONE", true),
              })
          .put(
              new Identifier("ofMinutes"),
              new Import[] {
                newImport("java.time.Duration.ofMinutes", true),
              })
          .put(
              new Identifier("getWindowTitleInactiveForeground"),
              new Import[] {
                newImport(
                    "javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleInactiveForeground",
                    true),
              })
          .put(
              new Identifier("SWAP_COLORS_ON"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.SWAP_COLORS_ON", true),
              })
          .put(
              new Identifier("VK_JAPANESE_KATAKANA"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_JAPANESE_KATAKANA", true),
              })
          .put(
              new Identifier("ARABIC"),
              new Import[] {
                newImport("java.awt.font.NumericShaper.ARABIC", true),
                newImport("java.lang.Character.UnicodeBlock.ARABIC", true),
              })
          .put(
              new Identifier("TYPE_HLS"),
              new Import[] {
                newImport("java.awt.color.ColorSpace.TYPE_HLS", true),
              })
          .put(
              new Identifier("getFileSystem"),
              new Import[] {
                newImport("java.nio.file.FileSystems.getFileSystem", true),
              })
          .put(
              new Identifier("INTERNAL_FRAME_DEACTIVATED"),
              new Import[] {
                newImport("javax.swing.event.InternalFrameEvent.INTERNAL_FRAME_DEACTIVATED", true),
              })
          .put(
              new Identifier("ServerRequestInterceptor"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.ServerRequestInterceptor", false),
              })
          .put(
              new Identifier("SQLNonTransientConnectionException"),
              new Import[] {
                newImport("java.sql.SQLNonTransientConnectionException", false),
              })
          .put(
              new Identifier("icHdrPcs"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icHdrPcs", true),
              })
          .put(
              new Identifier("TrustManagerFactory"),
              new Import[] {
                newImport("javax.net.ssl.TrustManagerFactory", false),
              })
          .put(
              new Identifier("DateFormatSymbols"),
              new Import[] {
                newImport("java.text.DateFormatSymbols", false),
              })
          .put(
              new Identifier("DO_NOTHING_ON_CLOSE"),
              new Import[] {
                newImport("javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE", true),
              })
          .put(
              new Identifier("PolicyOperations"),
              new Import[] {
                newImport("org.omg.CORBA.PolicyOperations", false),
              })
          .put(
              new Identifier("DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE"),
              new Import[] {
                newImport("java.lang.Character.DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE", true),
              })
          .put(
              new Identifier("PROTOCOL_PROVIDER_CLASS_LOADER"),
              new Import[] {
                newImport(
                    "javax.management.remote.JMXConnectorFactory.PROTOCOL_PROVIDER_CLASS_LOADER",
                    true),
                newImport(
                    "javax.management.remote.JMXConnectorServerFactory.PROTOCOL_PROVIDER_CLASS_LOADER",
                    true),
              })
          .put(
              new Identifier("MEDIA_JAM"),
              new Import[] {
                newImport("javax.print.attribute.standard.PrinterStateReason.MEDIA_JAM", true),
              })
          .put(
              new Identifier("COMMIT_OR_REVERT"),
              new Import[] {
                newImport("javax.swing.JFormattedTextField.COMMIT_OR_REVERT", true),
              })
          .put(
              new Identifier("getAccessibleStateSet"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.getAccessibleStateSet", true),
              })
          .put(
              new Identifier("parseAnySimpleType"),
              new Import[] {
                newImport("javax.xml.bind.DatatypeConverter.parseAnySimpleType", true),
              })
          .put(
              new Identifier("GridBagLayout"),
              new Import[] {
                newImport("java.awt.GridBagLayout", false),
              })
          .put(
              new Identifier("NOON"),
              new Import[] {
                newImport("java.time.LocalTime.NOON", true),
              })
          .put(
              new Identifier("TONER_EMPTY"),
              new Import[] {
                newImport("javax.print.attribute.standard.PrinterStateReason.TONER_EMPTY", true),
              })
          .put(
              new Identifier("INITIALIZE"),
              new Import[] {
                newImport("org.omg.CORBA.INITIALIZE", false),
              })
          .put(
              new Identifier("FocusManager"),
              new Import[] {
                newImport("javax.swing.FocusManager", false),
              })
          .put(
              new Identifier("CellRendererPane"),
              new Import[] {
                newImport("javax.swing.CellRendererPane", false),
              })
          .put(
              new Identifier("FontAttribute"),
              new Import[] {
                newImport("javax.swing.text.AttributeSet.FontAttribute", false),
              })
          .put(
              new Identifier("BACKWARD_TRAVERSAL_KEYS"),
              new Import[] {
                newImport("java.awt.KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS", true),
              })
          .put(
              new Identifier("Addressing"),
              new Import[] {
                newImport("javax.xml.ws.soap.Addressing", false),
              })
          .put(
              new Identifier("SyncScopeHelper"),
              new Import[] {
                newImport("org.omg.Messaging.SyncScopeHelper", false),
              })
          .put(
              new Identifier("CREDENTIALS"),
              new Import[] {
                newImport("javax.management.remote.JMXConnector.CREDENTIALS", true),
                newImport("javax.security.sasl.Sasl.CREDENTIALS", true),
              })
          .put(
              new Identifier("computeUnion"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.computeUnion", true),
              })
          .put(
              new Identifier("GREENCOMPONENT"),
              new Import[] {
                newImport("java.awt.color.ICC_ProfileRGB.GREENCOMPONENT", true),
              })
          .put(
              new Identifier("WINDOW_OPENED"),
              new Import[] {
                newImport("java.awt.event.WindowEvent.WINDOW_OPENED", true),
              })
          .put(
              new Identifier("getPlatformMXBean"),
              new Import[] {
                newImport("java.lang.management.ManagementFactory.getPlatformMXBean", true),
              })
          .put(
              new Identifier("NO_COMPRESSION"),
              new Import[] {
                newImport("java.util.zip.Deflater.NO_COMPRESSION", true),
              })
          .put(
              new Identifier("VK_DEAD_ACUTE"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_DEAD_ACUTE", true),
              })
          .put(
              new Identifier("copyValueOf"),
              new Import[] {
                newImport("java.lang.String.copyValueOf", true),
              })
          .put(
              new Identifier("getSystemResources"),
              new Import[] {
                newImport("java.lang.ClassLoader.getSystemResources", true),
              })
          .put(
              new Identifier("UIEvent"),
              new Import[] {
                newImport("org.w3c.dom.events.UIEvent", false),
              })
          .put(
              new Identifier("setContentHandlerFactory"),
              new Import[] {
                newImport("java.net.URLConnection.setContentHandlerFactory", true),
              })
          .put(
              new Identifier("NodeChangeListener"),
              new Import[] {
                newImport("java.util.prefs.NodeChangeListener", false),
              })
          .put(
              new Identifier("max"),
              new Import[] {
                newImport("java.lang.Double.max", true),
                newImport("java.lang.Float.max", true),
                newImport("java.lang.Integer.max", true),
                newImport("java.lang.Long.max", true),
                newImport("java.lang.Math.max", true),
                newImport("java.lang.StrictMath.max", true),
                newImport("java.util.Collections.max", true),
                newImport("javax.swing.Spring.max", true),
              })
          .put(
              new Identifier("PROCESSING_INSTRUCTION_NODE"),
              new Import[] {
                newImport("org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE", true),
              })
          .put(
              new Identifier("ExceptionList"),
              new Import[] {
                newImport("org.omg.CORBA.ExceptionList", false),
              })
          .put(
              new Identifier("FunctionalInterface"),
              new Import[] {
                newImport("java.lang.FunctionalInterface", false),
              })
          .put(
              new Identifier("LayoutQueue"),
              new Import[] {
                newImport("javax.swing.text.LayoutQueue", false),
              })
          .put(
              new Identifier("InvocationHandler"),
              new Import[] {
                newImport("java.lang.reflect.InvocationHandler", false),
              })
          .put(
              new Identifier("TRANSACTION_SERIALIZABLE"),
              new Import[] {
                newImport("java.sql.Connection.TRANSACTION_SERIALIZABLE", true),
              })
          .put(
              new Identifier("KeyException"),
              new Import[] {
                newImport("java.security.KeyException", false),
              })
          .put(
              new Identifier("CENHDR"),
              new Import[] {
                newImport("java.util.jar.JarEntry.CENHDR", true),
                newImport("java.util.jar.JarFile.CENHDR", true),
                newImport("java.util.jar.JarInputStream.CENHDR", true),
                newImport("java.util.jar.JarOutputStream.CENHDR", true),
                newImport("java.util.zip.ZipEntry.CENHDR", true),
                newImport("java.util.zip.ZipFile.CENHDR", true),
                newImport("java.util.zip.ZipInputStream.CENHDR", true),
                newImport("java.util.zip.ZipOutputStream.CENHDR", true),
              })
          .put(
              new Identifier("PARSE_ERR"),
              new Import[] {
                newImport("org.w3c.dom.ls.LSException.PARSE_ERR", true),
              })
          .put(
              new Identifier("Italic"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.Italic", true),
              })
          .put(
              new Identifier("ApplicationException"),
              new Import[] {
                newImport("org.omg.CORBA.portable.ApplicationException", false),
              })
          .put(
              new Identifier("Expression"),
              new Import[] {
                newImport("java.beans.Expression", false),
              })
          .put(
              new Identifier("TAG_CVT"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_CVT", true),
              })
          .put(
              new Identifier("JobKOctets"),
              new Import[] {
                newImport("javax.print.attribute.standard.JobKOctets", false),
              })
          .put(
              new Identifier("SPACING_MODIFIER_LETTERS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.SPACING_MODIFIER_LETTERS", true),
              })
          .put(
              new Identifier("Clipboard"),
              new Import[] {
                newImport("java.awt.datatransfer.Clipboard", false),
              })
          .put(
              new Identifier("LAO"),
              new Import[] {
                newImport("java.awt.font.NumericShaper.LAO", true),
                newImport("java.lang.Character.UnicodeBlock.LAO", true),
              })
          .put(
              new Identifier("ACCESS_EXTERNAL_SCHEMA"),
              new Import[] {
                newImport("javax.xml.XMLConstants.ACCESS_EXTERNAL_SCHEMA", true),
              })
          .put(
              new Identifier("SHORT_IDS"),
              new Import[] {
                newImport("java.time.ZoneId.SHORT_IDS", true),
              })
          .put(
              new Identifier("NON_EXISTENT"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.NON_EXISTENT", false),
              })
          .put(
              new Identifier("APPROVE_BUTTON_TEXT_CHANGED_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JFileChooser.APPROVE_BUTTON_TEXT_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("Result"),
              new Import[] {
                newImport("javax.naming.spi.DirStateFactory.Result", false),
                newImport("javax.xml.transform.Result", false),
              })
          .put(
              new Identifier("nextUp"),
              new Import[] {
                newImport("java.lang.Math.nextUp", true),
                newImport("java.lang.StrictMath.nextUp", true),
              })
          .put(
              new Identifier("HTTP_SERVER_ERROR"),
              new Import[] {
                newImport("java.net.HttpURLConnection.HTTP_SERVER_ERROR", true),
              })
          .put(
              new Identifier("RSAPublicKey"),
              new Import[] {
                newImport("java.security.interfaces.RSAPublicKey", false),
              })
          .put(
              new Identifier("KeySetView"),
              new Import[] {
                newImport("java.util.concurrent.ConcurrentHashMap.KeySetView", false),
              })
          .put(
              new Identifier("INTERNAL_FRAME_TITLE_PANE"),
              new Import[] {
                newImport("javax.swing.plaf.synth.Region.INTERNAL_FRAME_TITLE_PANE", true),
              })
          .put(
              new Identifier("VK_KANJI"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_KANJI", true),
              })
          .put(
              new Identifier("DefaultLinkDrop"),
              new Import[] {
                newImport("java.awt.dnd.DragSource.DefaultLinkDrop", true),
              })
          .put(
              new Identifier("FlavorListener"),
              new Import[] {
                newImport("java.awt.datatransfer.FlavorListener", false),
              })
          .put(
              new Identifier("SOAPConstants"),
              new Import[] {
                newImport("javax.xml.soap.SOAPConstants", false),
              })
          .put(
              new Identifier("NotEmptyHelper"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextPackage.NotEmptyHelper", false),
              })
          .put(
              new Identifier("PropertyEditorSupport"),
              new Import[] {
                newImport("java.beans.PropertyEditorSupport", false),
              })
          .put(
              new Identifier("OpenMBeanParameterInfo"),
              new Import[] {
                newImport("javax.management.openmbean.OpenMBeanParameterInfo", false),
              })
          .put(
              new Identifier("CLOSE_ALL_RESULTS"),
              new Import[] {
                newImport("java.sql.Statement.CLOSE_ALL_RESULTS", true),
              })
          .put(
              new Identifier("LESSER"),
              new Import[] {
                newImport("javax.xml.datatype.DatatypeConstants.LESSER", true),
              })
          .put(
              new Identifier("FILE_CHOOSER_DIALOG"),
              new Import[] {
                newImport("javax.swing.JRootPane.FILE_CHOOSER_DIALOG", true),
              })
          .put(
              new Identifier("interrupted"),
              new Import[] {
                newImport("java.lang.Thread.interrupted", true),
              })
          .put(
              new Identifier("InvocationTargetException"),
              new Import[] {
                newImport("java.lang.reflect.InvocationTargetException", false),
              })
          .put(
              new Identifier("RELATION_BASIC_REMOVAL"),
              new Import[] {
                newImport(
                    "javax.management.relation.RelationNotification.RELATION_BASIC_REMOVAL", true),
              })
          .put(
              new Identifier("SCALE_DEFAULT"),
              new Import[] {
                newImport("java.awt.Image.SCALE_DEFAULT", true),
              })
          .put(
              new Identifier("THRESHOLD_VALUE_EXCEEDED"),
              new Import[] {
                newImport(
                    "javax.management.monitor.MonitorNotification.THRESHOLD_VALUE_EXCEEDED", true),
              })
          .put(
              new Identifier("Descriptor"),
              new Import[] {
                newImport("javax.management.Descriptor", false),
              })
          .put(
              new Identifier("isValidCodePoint"),
              new Import[] {
                newImport("java.lang.Character.isValidCodePoint", true),
              })
          .put(
              new Identifier("getComponent"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.getComponent", true),
              })
          .put(
              new Identifier("IllegalFormatWidthException"),
              new Import[] {
                newImport("java.util.IllegalFormatWidthException", false),
              })
          .put(
              new Identifier("WRAP_MODE"),
              new Import[] {
                newImport("javax.crypto.Cipher.WRAP_MODE", true),
              })
          .put(
              new Identifier("Destination"),
              new Import[] {
                newImport("javax.print.attribute.standard.Destination", false),
              })
          .put(
              new Identifier("SoundbankReader"),
              new Import[] {
                newImport("javax.sound.midi.spi.SoundbankReader", false),
              })
          .put(
              new Identifier("OP_READ"),
              new Import[] {
                newImport("java.nio.channels.SelectionKey.OP_READ", true),
              })
          .put(
              new Identifier("PropertyException"),
              new Import[] {
                newImport("javax.xml.bind.PropertyException", false),
              })
          .put(
              new Identifier("NT_USER_NAME"),
              new Import[] {
                newImport("org.ietf.jgss.GSSName.NT_USER_NAME", true),
              })
          .put(
              new Identifier("EnumSyntax"),
              new Import[] {
                newImport("javax.print.attribute.EnumSyntax", false),
              })
          .put(
              new Identifier("DOMImplementation"),
              new Import[] {
                newImport("org.w3c.dom.DOMImplementation", false),
              })
          .put(
              new Identifier("LANGUAGE_VERSION"),
              new Import[] {
                newImport("javax.script.ScriptEngine.LANGUAGE_VERSION", true),
              })
          .put(
              new Identifier("ALT_GRAPH_MASK"),
              new Import[] {
                newImport("java.awt.event.InputEvent.ALT_GRAPH_MASK", true),
              })
          .put(
              new Identifier("SynthOptionPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthOptionPaneUI", false),
              })
          .put(
              new Identifier("println"),
              new Import[] {
                newImport("java.sql.DriverManager.println", true),
              })
          .put(
              new Identifier("ModelWrapper"),
              new Import[] {
                newImport("javax.swing.DefaultRowSorter.ModelWrapper", false),
              })
          .put(
              new Identifier("CHILD_POLICY_MAX"),
              new Import[] {
                newImport("javax.imageio.metadata.IIOMetadataFormat.CHILD_POLICY_MAX", true),
              })
          .put(
              new Identifier("MISCELLANEOUS_TECHNICAL"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.MISCELLANEOUS_TECHNICAL", true),
              })
          .put(
              new Identifier("MidiSystem"),
              new Import[] {
                newImport("javax.sound.midi.MidiSystem", false),
              })
          .put(
              new Identifier("drawEtchedRect"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicGraphicsUtils.drawEtchedRect", true),
              })
          .put(
              new Identifier("VK_LEFT"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_LEFT", true),
              })
          .put(
              new Identifier("SelectionKey"),
              new Import[] {
                newImport("java.nio.channels.SelectionKey", false),
              })
          .put(
              new Identifier("DHGenParameterSpec"),
              new Import[] {
                newImport("javax.crypto.spec.DHGenParameterSpec", false),
              })
          .put(
              new Identifier("MinimalHTMLWriter"),
              new Import[] {
                newImport("javax.swing.text.html.MinimalHTMLWriter", false),
              })
          .put(
              new Identifier("RIPEMD160"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.DigestMethod.RIPEMD160", true),
              })
          .put(
              new Identifier("unregister"),
              new Import[] {
                newImport("java.rmi.activation.Activatable.unregister", true),
              })
          .put(
              new Identifier("registerTarget"),
              new Import[] {
                newImport("javax.rmi.CORBA.Util.registerTarget", true),
              })
          .put(
              new Identifier("BITMASK"),
              new Import[] {
                newImport("java.awt.Transparency.BITMASK", true),
              })
          .put(
              new Identifier("Error"),
              new Import[] {
                newImport("java.lang.Error", false),
              })
          .put(
              new Identifier("AbstractProcessor"),
              new Import[] {
                newImport("javax.annotation.processing.AbstractProcessor", false),
              })
          .put(
              new Identifier("toRadians"),
              new Import[] {
                newImport("java.lang.Math.toRadians", true),
                newImport("java.lang.StrictMath.toRadians", true),
              })
          .put(
              new Identifier("CountDownLatch"),
              new Import[] {
                newImport("java.util.concurrent.CountDownLatch", false),
              })
          .put(
              new Identifier("PaletteBorder"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalBorders.PaletteBorder", false),
              })
          .put(
              new Identifier("orange"),
              new Import[] {
                newImport("java.awt.Color.orange", true),
              })
          .put(
              new Identifier("CODE"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.CODE", true),
                newImport("javax.swing.text.html.HTML.Tag.CODE", true),
              })
          .put(
              new Identifier("INITIAL_QUOTE_PUNCTUATION"),
              new Import[] {
                newImport("java.lang.Character.INITIAL_QUOTE_PUNCTUATION", true),
              })
          .put(
              new Identifier("UPDATE_ROW_CONFLICT"),
              new Import[] {
                newImport("javax.sql.rowset.spi.SyncResolver.UPDATE_ROW_CONFLICT", true),
              })
          .put(
              new Identifier("Paper"),
              new Import[] {
                newImport("java.awt.print.Paper", false),
              })
          .put(
              new Identifier("INTERNAL_FRAME_ICONIFIED"),
              new Import[] {
                newImport("javax.swing.event.InternalFrameEvent.INTERNAL_FRAME_ICONIFIED", true),
              })
          .put(
              new Identifier("TEXT_BACKGROUND"),
              new Import[] {
                newImport("javax.swing.plaf.synth.ColorType.TEXT_BACKGROUND", true),
              })
          .build();
}
