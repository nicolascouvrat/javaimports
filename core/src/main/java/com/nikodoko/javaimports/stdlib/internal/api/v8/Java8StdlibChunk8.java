// Code generated by GenerateStdlib.java. DO NOT EDIT.
package com.nikodoko.javaimports.stdlib.internal.api.v8;

import static com.nikodoko.javaimports.stdlib.internal.Stdlib.newImport;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.common.Identifier;
import com.nikodoko.javaimports.common.Import;
import java.util.Map;

public class Java8StdlibChunk8 {
  static final Map<Identifier, Import[]> CLASSES =
      new ImmutableMap.Builder<Identifier, Import[]>()
          .put(
              new Identifier("_DynValueStub"),
              new Import[] {
                newImport("org.omg.DynamicAny._DynValueStub", false),
              })
          .put(
              new Identifier("HijrahDate"),
              new Import[] {
                newImport("java.time.chrono.HijrahDate", false),
              })
          .put(
              new Identifier("HexBinaryAdapter"),
              new Import[] {
                newImport("javax.xml.bind.annotation.adapters.HexBinaryAdapter", false),
              })
          .put(
              new Identifier("REVERT"),
              new Import[] {
                newImport("javax.swing.JFormattedTextField.REVERT", true),
              })
          .put(
              new Identifier("MultiSpinnerUI"),
              new Import[] {
                newImport("javax.swing.plaf.multi.MultiSpinnerUI", false),
              })
          .put(
              new Identifier("IORInfoOperations"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.IORInfoOperations", false),
              })
          .put(
              new Identifier("EventQueue"),
              new Import[] {
                newImport("java.awt.EventQueue", false),
              })
          .put(
              new Identifier("USE_STD3_ASCII_RULES"),
              new Import[] {
                newImport("java.net.IDN.USE_STD3_ASCII_RULES", true),
              })
          .put(
              new Identifier("IntegerSyntax"),
              new Import[] {
                newImport("javax.print.attribute.IntegerSyntax", false),
              })
          .put(
              new Identifier("MouseDragGestureRecognizer"),
              new Import[] {
                newImport("java.awt.dnd.MouseDragGestureRecognizer", false),
              })
          .put(
              new Identifier("tk_TypeCode"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind.tk_TypeCode", true),
              })
          .put(
              new Identifier("writeAbstractObject"),
              new Import[] {
                newImport("javax.rmi.CORBA.Util.writeAbstractObject", true),
              })
          .put(
              new Identifier("MenuSelectionManager"),
              new Import[] {
                newImport("javax.swing.MenuSelectionManager", false),
              })
          .put(
              new Identifier("DefaultFormatter"),
              new Import[] {
                newImport("javax.swing.text.DefaultFormatter", false),
              })
          .put(
              new Identifier("MediaTray"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaTray", false),
              })
          .put(
              new Identifier("IllegalArgumentException"),
              new Import[] {
                newImport("java.lang.IllegalArgumentException", false),
              })
          .put(
              new Identifier("_dk_Primitive"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind._dk_Primitive", true),
              })
          .put(
              new Identifier("ONE_MINUTE"),
              new Import[] {
                newImport("javax.management.timer.Timer.ONE_MINUTE", true),
              })
          .put(
              new Identifier("RowMapper"),
              new Import[] {
                newImport("javax.swing.tree.RowMapper", false),
              })
          .put(
              new Identifier("DOCTYPE_SYSTEM"),
              new Import[] {
                newImport("javax.xml.transform.OutputKeys.DOCTYPE_SYSTEM", true),
              })
          .put(
              new Identifier("VK_NUMPAD3"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_NUMPAD3", true),
              })
          .put(
              new Identifier("URIInaccessible"),
              new Import[] {
                newImport("javax.print.URIException.URIInaccessible", true),
              })
          .put(
              new Identifier("VK_NUMPAD4"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_NUMPAD4", true),
              })
          .put(
              new Identifier("AccessibleRelationSet"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRelationSet", false),
              })
          .put(
              new Identifier("VK_NUMPAD5"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_NUMPAD5", true),
              })
          .put(
              new Identifier("getBlackLineBorderUIResource"),
              new Import[] {
                newImport("javax.swing.plaf.BorderUIResource.getBlackLineBorderUIResource", true),
              })
          .put(
              new Identifier("VK_NUMPAD6"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_NUMPAD6", true),
              })
          .put(
              new Identifier("RSAPrivateCrtKey"),
              new Import[] {
                newImport("java.security.interfaces.RSAPrivateCrtKey", false),
              })
          .put(
              new Identifier("anySubString"),
              new Import[] {
                newImport("javax.management.Query.anySubString", true),
              })
          .put(
              new Identifier("PADDING_RIGHT"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.PADDING_RIGHT", true),
              })
          .put(
              new Identifier("VK_NUMPAD0"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_NUMPAD0", true),
              })
          .put(
              new Identifier("VK_NUMPAD1"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_NUMPAD1", true),
              })
          .put(
              new Identifier("VK_NUMPAD2"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_NUMPAD2", true),
              })
          .put(
              new Identifier("ACTION_COMMAND_KEY"),
              new Import[] {
                newImport("javax.swing.Action.ACTION_COMMAND_KEY", true),
              })
          .put(
              new Identifier("VK_RIGHT"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_RIGHT", true),
              })
          .put(
              new Identifier("LoginModule"),
              new Import[] {
                newImport("javax.security.auth.spi.LoginModule", false),
              })
          .put(
              new Identifier("AttachmentPart"),
              new Import[] {
                newImport("javax.xml.soap.AttachmentPart", false),
              })
          .put(
              new Identifier("ACCESSIBLE_TABLE_SUMMARY_CHANGED"),
              new Import[] {
                newImport(
                    "javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_SUMMARY_CHANGED", true),
              })
          .put(
              new Identifier("Orientation"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.Orientation", true),
              })
          .put(
              new Identifier("QuadCurve2D"),
              new Import[] {
                newImport("java.awt.geom.QuadCurve2D", false),
              })
          .put(
              new Identifier("BAD_POLICY_VALUE"),
              new Import[] {
                newImport("org.omg.CORBA.BAD_POLICY_VALUE", false),
              })
          .put(
              new Identifier("SOAPHandler"),
              new Import[] {
                newImport("javax.xml.ws.handler.soap.SOAPHandler", false),
              })
          .put(
              new Identifier("setDefault"),
              new Import[] {
                newImport("java.net.Authenticator.setDefault", true),
                newImport("java.net.CookieHandler.setDefault", true),
                newImport("java.net.ProxySelector.setDefault", true),
                newImport("java.net.ResponseCache.setDefault", true),
                newImport("java.util.Locale.setDefault", true),
                newImport("java.util.TimeZone.setDefault", true),
                newImport("javax.net.ssl.SSLContext.setDefault", true),
              })
          .put(
              new Identifier("UserPrincipal"),
              new Import[] {
                newImport("java.nio.file.attribute.UserPrincipal", false),
              })
          .put(
              new Identifier("LinkException"),
              new Import[] {
                newImport("javax.naming.LinkException", false),
              })
          .put(
              new Identifier("getButtonBorder"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicBorders.getButtonBorder", true),
                newImport("javax.swing.plaf.metal.MetalBorders.getButtonBorder", true),
              })
          .put(
              new Identifier("MetalTextFieldUI"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalTextFieldUI", false),
              })
          .put(
              new Identifier("REVERB"),
              new Import[] {
                newImport("javax.sound.sampled.EnumControl.Type.REVERB", true),
              })
          .put(
              new Identifier("icSigSpaceECLR"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigSpaceECLR", true),
              })
          .put(
              new Identifier("DynAny"),
              new Import[] {
                newImport("org.omg.CORBA.DynAny", false),
                newImport("org.omg.DynamicAny.DynAny", false),
              })
          .put(
              new Identifier("newMXBeanProxy"),
              new Import[] {
                newImport("javax.management.JMX.newMXBeanProxy", true),
              })
          .put(
              new Identifier("SortedMap"),
              new Import[] {
                newImport("java.util.SortedMap", false),
              })
          .put(
              new Identifier("TOP_ALIGNMENT"),
              new Import[] {
                newImport("java.awt.Component.TOP_ALIGNMENT", true),
                newImport("java.awt.font.GraphicAttribute.TOP_ALIGNMENT", true),
              })
          .put(
              new Identifier("selectionHtmlFlavor"),
              new Import[] {
                newImport("java.awt.datatransfer.DataFlavor.selectionHtmlFlavor", true),
              })
          .put(
              new Identifier("AbstractTableModel"),
              new Import[] {
                newImport("javax.swing.table.AbstractTableModel", false),
              })
          .put(
              new Identifier("icSigChromaticityTag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigChromaticityTag", true),
              })
          .put(
              new Identifier("COMMIT_ON_ACCEPT_CHANGES"),
              new Import[] {
                newImport("javax.sql.rowset.CachedRowSet.COMMIT_ON_ACCEPT_CHANGES", true),
              })
          .put(
              new Identifier("numberFilter"),
              new Import[] {
                newImport("javax.swing.RowFilter.numberFilter", true),
              })
          .put(
              new Identifier("SynthComboBoxUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthComboBoxUI", false),
              })
          .put(
              new Identifier("WeakHashMap"),
              new Import[] {
                newImport("java.util.WeakHashMap", false),
              })
          .put(
              new Identifier("lightGray"),
              new Import[] {
                newImport("java.awt.Color.lightGray", true),
              })
          .put(
              new Identifier("ShortHolder"),
              new Import[] {
                newImport("org.omg.CORBA.ShortHolder", false),
              })
          .put(
              new Identifier("ULongLongSeqHelper"),
              new Import[] {
                newImport("org.omg.CORBA.ULongLongSeqHelper", false),
              })
          .put(
              new Identifier("PI_ENABLE_OUTPUT_ESCAPING"),
              new Import[] {
                newImport("javax.xml.transform.Result.PI_ENABLE_OUTPUT_ESCAPING", true),
              })
          .put(
              new Identifier("DecimalFormat"),
              new Import[] {
                newImport("java.text.DecimalFormat", false),
              })
          .put(
              new Identifier("DESKTOP_PANE"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.DESKTOP_PANE", true),
                newImport("javax.swing.plaf.synth.Region.DESKTOP_PANE", true),
              })
          .put(
              new Identifier("EDITABLE"),
              new Import[] {
                newImport("javax.accessibility.AccessibleState.EDITABLE", true),
              })
          .put(
              new Identifier("X509Data"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.keyinfo.X509Data", false),
              })
          .put(
              new Identifier("BasicButtonUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicButtonUI", false),
              })
          .put(
              new Identifier("SMALL_SCALE"),
              new Import[] {
                newImport("javax.swing.plaf.nimbus.NimbusStyle.SMALL_SCALE", true),
              })
          .put(
              new Identifier("ActivationDataFlavor"),
              new Import[] {
                newImport("javax.activation.ActivationDataFlavor", false),
              })
          .put(
              new Identifier("RC5ParameterSpec"),
              new Import[] {
                newImport("javax.crypto.spec.RC5ParameterSpec", false),
              })
          .put(
              new Identifier("ClassLoaderRepository"),
              new Import[] {
                newImport("javax.management.loading.ClassLoaderRepository", false),
              })
          .put(
              new Identifier("NameAlreadyBoundException"),
              new Import[] {
                newImport("javax.naming.NameAlreadyBoundException", false),
              })
          .put(
              new Identifier("MouseListener"),
              new Import[] {
                newImport("java.awt.event.MouseListener", false),
              })
          .put(
              new Identifier("CollectionCertStoreParameters"),
              new Import[] {
                newImport("java.security.cert.CollectionCertStoreParameters", false),
              })
          .put(
              new Identifier("StateFactory"),
              new Import[] {
                newImport("javax.naming.spi.StateFactory", false),
              })
          .put(
              new Identifier("FULLWIDTH_DIGITS"),
              new Import[] {
                newImport("java.awt.im.InputSubset.FULLWIDTH_DIGITS", true),
              })
          .put(
              new Identifier("MetalTheme"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalTheme", false),
              })
          .put(
              new Identifier("ONELEVEL_SCOPE"),
              new Import[] {
                newImport("javax.naming.directory.SearchControls.ONELEVEL_SCOPE", true),
                newImport("javax.naming.event.EventContext.ONELEVEL_SCOPE", true),
              })
          .put(
              new Identifier("MetalComboBoxIcon"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalComboBoxIcon", false),
              })
          .put(
              new Identifier("SynthRootPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthRootPaneUI", false),
              })
          .put(
              new Identifier("MOUSE_CLICKED"),
              new Import[] {
                newImport("java.awt.event.MouseEvent.MOUSE_CLICKED", true),
              })
          .put(
              new Identifier("StreamPrintServiceFactory"),
              new Import[] {
                newImport("javax.print.StreamPrintServiceFactory", false),
              })
          .put(
              new Identifier("synchronizedMap"),
              new Import[] {
                newImport("java.util.Collections.synchronizedMap", true),
              })
          .put(
              new Identifier("RejectedExecutionHandler"),
              new Import[] {
                newImport("java.util.concurrent.RejectedExecutionHandler", false),
              })
          .put(
              new Identifier("JOB_CANCELED_BY_OPERATOR"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.JobStateReason.JOB_CANCELED_BY_OPERATOR", true),
              })
          .put(
              new Identifier("DOCUMENT_ACCESS_ERROR"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.JobStateReason.DOCUMENT_ACCESS_ERROR", true),
              })
          .put(
              new Identifier("union"),
              new Import[] {
                newImport("java.awt.geom.Rectangle2D.union", true),
                newImport("javax.management.ImmutableDescriptor.union", true),
              })
          .put(
              new Identifier("PipedInputStream"),
              new Import[] {
                newImport("java.io.PipedInputStream", false),
              })
          .put(
              new Identifier("createLoweredBevelBorder"),
              new Import[] {
                newImport("javax.swing.BorderFactory.createLoweredBevelBorder", true),
              })
          .put(
              new Identifier("getPlatformMXBeans"),
              new Import[] {
                newImport("java.lang.management.ManagementFactory.getPlatformMXBeans", true),
              })
          .put(
              new Identifier("InsertHTMLTextAction"),
              new Import[] {
                newImport("javax.swing.text.html.HTMLEditorKit.InsertHTMLTextAction", false),
              })
          .put(
              new Identifier("DIVIDER"),
              new Import[] {
                newImport("javax.swing.JSplitPane.DIVIDER", true),
              })
          .put(
              new Identifier("CONTINUE"),
              new Import[] {
                newImport("javax.sound.midi.ShortMessage.CONTINUE", true),
              })
          .put(
              new Identifier("getWindows"),
              new Import[] {
                newImport("java.awt.Window.getWindows", true),
              })
          .put(
              new Identifier("EDGE_STITCH_RIGHT"),
              new Import[] {
                newImport("javax.print.attribute.standard.Finishings.EDGE_STITCH_RIGHT", true),
              })
          .put(
              new Identifier("WindowEvent"),
              new Import[] {
                newImport("java.awt.event.WindowEvent", false),
              })
          .put(
              new Identifier("Forward"),
              new Import[] {
                newImport("javax.swing.text.Position.Bias.Forward", true),
              })
          .put(
              new Identifier("getLoginTimeout"),
              new Import[] {
                newImport("java.sql.DriverManager.getLoginTimeout", true),
              })
          .put(
              new Identifier("BevelBorderUIResource"),
              new Import[] {
                newImport("javax.swing.plaf.BorderUIResource.BevelBorderUIResource", false),
              })
          .put(
              new Identifier("ColorAttribute"),
              new Import[] {
                newImport("javax.swing.text.AttributeSet.ColorAttribute", false),
              })
          .put(
              new Identifier("VK_FINAL"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_FINAL", true),
              })
          .put(
              new Identifier("wrap"),
              new Import[] {
                newImport("java.nio.ByteBuffer.wrap", true),
                newImport("java.nio.CharBuffer.wrap", true),
                newImport("java.nio.DoubleBuffer.wrap", true),
                newImport("java.nio.FloatBuffer.wrap", true),
                newImport("java.nio.IntBuffer.wrap", true),
                newImport("java.nio.LongBuffer.wrap", true),
                newImport("java.nio.ShortBuffer.wrap", true),
              })
          .put(
              new Identifier("MOUSE_ENTERED"),
              new Import[] {
                newImport("java.awt.event.MouseEvent.MOUSE_ENTERED", true),
              })
          .put(
              new Identifier("PrinterURI"),
              new Import[] {
                newImport("javax.print.attribute.standard.PrinterURI", false),
              })
          .put(
              new Identifier("SINGLE_TREE_SELECTION"),
              new Import[] {
                newImport("javax.swing.tree.TreeSelectionModel.SINGLE_TREE_SELECTION", true),
              })
          .put(
              new Identifier("STATEMENT"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.STATEMENT", true),
              })
          .put(
              new Identifier("isProxyClass"),
              new Import[] {
                newImport("java.lang.reflect.Proxy.isProxyClass", true),
              })
          .put(
              new Identifier("HTTP_PROXY_AUTH"),
              new Import[] {
                newImport("java.net.HttpURLConnection.HTTP_PROXY_AUTH", true),
              })
          .put(
              new Identifier("EXITED"),
              new Import[] {
                newImport("javax.swing.event.HyperlinkEvent.EventType.EXITED", true),
              })
          .put(
              new Identifier("ColorSpace"),
              new Import[] {
                newImport("java.awt.color.ColorSpace", false),
              })
          .put(
              new Identifier("KHAROSHTHI"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.KHAROSHTHI", true),
              })
          .put(
              new Identifier("PCM_SIGNED"),
              new Import[] {
                newImport("javax.sound.sampled.AudioFormat.Encoding.PCM_SIGNED", true),
              })
          .put(
              new Identifier("PrintJobAttributeEvent"),
              new Import[] {
                newImport("javax.print.event.PrintJobAttributeEvent", false),
              })
          .put(
              new Identifier("icSigCmyData"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigCmyData", true),
              })
          .put(
              new Identifier("ListView"),
              new Import[] {
                newImport("javax.swing.text.html.ListView", false),
              })
          .put(
              new Identifier("Dialog"),
              new Import[] {
                newImport("java.awt.Dialog", false),
              })
          .put(
              new Identifier("FORMAT_DEFAULT"),
              new Import[] {
                newImport("java.util.ResourceBundle.Control.FORMAT_DEFAULT", true),
              })
          .put(
              new Identifier("MEDIA_TYPE"),
              new Import[] {
                newImport("javax.xml.transform.OutputKeys.MEDIA_TYPE", true),
              })
          .put(
              new Identifier("ACCESSIBLE_VALUE_PROPERTY"),
              new Import[] {
                newImport("javax.accessibility.AccessibleContext.ACCESSIBLE_VALUE_PROPERTY", true),
              })
          .put(
              new Identifier("enumeration"),
              new Import[] {
                newImport("java.util.Collections.enumeration", true),
              })
          .put(
              new Identifier("getStaticAttribute"),
              new Import[] {
                newImport("javax.swing.text.StyleContext.getStaticAttribute", true),
              })
          .put(
              new Identifier("Short"),
              new Import[] {
                newImport("java.lang.Short", false),
              })
          .put(
              new Identifier("setUseCache"),
              new Import[] {
                newImport("javax.imageio.ImageIO.setUseCache", true),
              })
          .put(
              new Identifier("UNCOLLATED"),
              new Import[] {
                newImport("javax.print.attribute.standard.SheetCollate.UNCOLLATED", true),
              })
          .put(
              new Identifier("getMemoryManagerMXBeans"),
              new Import[] {
                newImport("java.lang.management.ManagementFactory.getMemoryManagerMXBeans", true),
              })
          .put(
              new Identifier("Optional"),
              new Import[] {
                newImport("java.util.Optional", false),
              })
          .put(
              new Identifier("DefaultSingleSelectionModel"),
              new Import[] {
                newImport("javax.swing.DefaultSingleSelectionModel", false),
              })
          .put(
              new Identifier("ServantLocatorPOA"),
              new Import[] {
                newImport("org.omg.PortableServer.ServantLocatorPOA", false),
              })
          .put(
              new Identifier("VALUE_DITHER_ENABLE"),
              new Import[] {
                newImport("java.awt.RenderingHints.VALUE_DITHER_ENABLE", true),
              })
          .put(
              new Identifier("SUNDANESE"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.SUNDANESE", true),
              })
          .put(
              new Identifier("ButtonUI"),
              new Import[] {
                newImport("javax.swing.plaf.ButtonUI", false),
              })
          .put(
              new Identifier("MOUSE_LAST"),
              new Import[] {
                newImport("java.awt.event.MouseEvent.MOUSE_LAST", true),
              })
          .put(
              new Identifier("INVOICE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.INVOICE", true),
                newImport("javax.print.attribute.standard.MediaSizeName.INVOICE", true),
                newImport("javax.print.attribute.standard.MediaSize.Other.INVOICE", true),
              })
          .put(
              new Identifier("ValueHandlerMultiFormat"),
              new Import[] {
                newImport("javax.rmi.CORBA.ValueHandlerMultiFormat", false),
              })
          .put(
              new Identifier("State"),
              new Import[] {
                newImport("java.lang.Thread.State", false),
                newImport("javax.swing.plaf.nimbus.State", false),
                newImport("org.omg.PortableServer.POAManagerPackage.State", false),
              })
          .put(
              new Identifier("JMXConnectorServerFactory"),
              new Import[] {
                newImport("javax.management.remote.JMXConnectorServerFactory", false),
              })
          .put(
              new Identifier("PLAIN_DIALOG"),
              new Import[] {
                newImport("javax.swing.JRootPane.PLAIN_DIALOG", true),
              })
          .put(
              new Identifier("RowSetListener"),
              new Import[] {
                newImport("javax.sql.RowSetListener", false),
              })
          .put(
              new Identifier("icSigNamedColorClass"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigNamedColorClass", true),
              })
          .put(
              new Identifier("_DynFixedStub"),
              new Import[] {
                newImport("org.omg.DynamicAny._DynFixedStub", false),
              })
          .put(
              new Identifier("RoleUnresolved"),
              new Import[] {
                newImport("javax.management.relation.RoleUnresolved", false),
              })
          .put(
              new Identifier("StringBuilder"),
              new Import[] {
                newImport("java.lang.StringBuilder", false),
              })
          .put(
              new Identifier("PrinterIOException"),
              new Import[] {
                newImport("java.awt.print.PrinterIOException", false),
              })
          .put(
              new Identifier("RuntimePermission"),
              new Import[] {
                newImport("java.lang.RuntimePermission", false),
              })
          .put(
              new Identifier("CertStoreSpi"),
              new Import[] {
                newImport("java.security.cert.CertStoreSpi", false),
              })
          .put(
              new Identifier("TERTIARY"),
              new Import[] {
                newImport("java.text.Collator.TERTIARY", true),
              })
          .put(
              new Identifier("newPlatformMXBeanProxy"),
              new Import[] {
                newImport("java.lang.management.ManagementFactory.newPlatformMXBeanProxy", true),
              })
          .put(
              new Identifier("IllegalCharsetNameException"),
              new Import[] {
                newImport("java.nio.charset.IllegalCharsetNameException", false),
              })
          .put(
              new Identifier("emptyList"),
              new Import[] {
                newImport("java.util.Collections.emptyList", true),
              })
          .put(
              new Identifier("setDefaultRequestProperty"),
              new Import[] {
                newImport("java.net.URLConnection.setDefaultRequestProperty", true),
              })
          .put(
              new Identifier("MalformedParametersException"),
              new Import[] {
                newImport("java.lang.reflect.MalformedParametersException", false),
              })
          .put(
              new Identifier("SynthToolBarUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthToolBarUI", false),
              })
          .put(
              new Identifier("CENTER_BASELINE"),
              new Import[] {
                newImport("java.awt.Font.CENTER_BASELINE", true),
                newImport("java.awt.font.GraphicAttribute.CENTER_BASELINE", true),
              })
          .put(
              new Identifier("WHITE"),
              new Import[] {
                newImport("java.awt.Color.WHITE", true),
              })
          .put(
              new Identifier("STATE_FACTORIES"),
              new Import[] {
                newImport("javax.naming.Context.STATE_FACTORIES", true),
              })
          .put(
              new Identifier("OCTOBER"),
              new Import[] {
                newImport("java.util.Calendar.OCTOBER", true),
                newImport("javax.xml.datatype.DatatypeConstants.OCTOBER", true),
              })
          .put(
              new Identifier("ImageObserver"),
              new Import[] {
                newImport("java.awt.image.ImageObserver", false),
              })
          .put(
              new Identifier("DoubleSeqHelper"),
              new Import[] {
                newImport("org.omg.CORBA.DoubleSeqHelper", false),
              })
          .put(
              new Identifier("KeyStore"),
              new Import[] {
                newImport("java.security.KeyStore", false),
              })
          .put(
              new Identifier("MultiOptionPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.multi.MultiOptionPaneUI", false),
              })
          .put(
              new Identifier("isHidden"),
              new Import[] {
                newImport("java.nio.file.Files.isHidden", true),
              })
          .put(
              new Identifier("rangeClosed"),
              new Import[] {
                newImport("java.util.stream.IntStream.rangeClosed", true),
                newImport("java.util.stream.LongStream.rangeClosed", true),
              })
          .put(
              new Identifier("FileSystemProvider"),
              new Import[] {
                newImport("java.nio.file.spi.FileSystemProvider", false),
              })
          .put(
              new Identifier("SupportedOptions"),
              new Import[] {
                newImport("javax.annotation.processing.SupportedOptions", false),
              })
          .put(
              new Identifier("tk_struct"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind.tk_struct", true),
              })
          .put(
              new Identifier("JMenu"),
              new Import[] {
                newImport("javax.swing.JMenu", false),
              })
          .put(
              new Identifier("isRoleStatus"),
              new Import[] {
                newImport("javax.management.relation.RoleStatus.isRoleStatus", true),
              })
          .put(
              new Identifier("NamingContextExtPOA"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextExtPOA", false),
              })
          .put(
              new Identifier("SHA1"),
              new Import[] {
                newImport("java.security.spec.MGF1ParameterSpec.SHA1", true),
                newImport("javax.xml.crypto.dsig.DigestMethod.SHA1", true),
              })
          .put(
              new Identifier("MultiTabbedPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.multi.MultiTabbedPaneUI", false),
              })
          .put(
              new Identifier("_HOLDING"),
              new Import[] {
                newImport("org.omg.PortableServer.POAManagerPackage.State._HOLDING", true),
              })
          .put(
              new Identifier("BasicFileChooserUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicFileChooserUI", false),
              })
          .put(
              new Identifier("SSLKeyException"),
              new Import[] {
                newImport("javax.net.ssl.SSLKeyException", false),
              })
          .put(
              new Identifier("normalize"),
              new Import[] {
                newImport("java.text.Normalizer.normalize", true),
              })
          .put(
              new Identifier("LocatorImpl"),
              new Import[] {
                newImport("org.xml.sax.helpers.LocatorImpl", false),
              })
          .put(
              new Identifier("IncompleteAnnotationException"),
              new Import[] {
                newImport("java.lang.annotation.IncompleteAnnotationException", false),
              })
          .put(
              new Identifier("write"),
              new Import[] {
                newImport("java.nio.file.Files.write", true),
                newImport("javax.imageio.ImageIO.write", true),
                newImport("javax.sound.midi.MidiSystem.write", true),
                newImport("javax.sound.sampled.AudioSystem.write", true),
                newImport("org.omg.CORBA.AnySeqHelper.write", true),
                newImport("org.omg.CORBA.BooleanSeqHelper.write", true),
                newImport("org.omg.CORBA.CharSeqHelper.write", true),
                newImport("org.omg.CORBA.CompletionStatusHelper.write", true),
                newImport("org.omg.CORBA.CurrentHelper.write", true),
                newImport("org.omg.CORBA.DefinitionKindHelper.write", true),
                newImport("org.omg.CORBA.DoubleSeqHelper.write", true),
                newImport("org.omg.CORBA.FieldNameHelper.write", true),
                newImport("org.omg.CORBA.FloatSeqHelper.write", true),
                newImport("org.omg.CORBA.IDLTypeHelper.write", true),
                newImport("org.omg.CORBA.IdentifierHelper.write", true),
                newImport("org.omg.CORBA.LongLongSeqHelper.write", true),
                newImport("org.omg.CORBA.LongSeqHelper.write", true),
                newImport("org.omg.CORBA.NameValuePairHelper.write", true),
                newImport("org.omg.CORBA.ObjectHelper.write", true),
                newImport("org.omg.CORBA.OctetSeqHelper.write", true),
                newImport("org.omg.CORBA.ParameterModeHelper.write", true),
                newImport("org.omg.CORBA.PolicyErrorCodeHelper.write", true),
                newImport("org.omg.CORBA.PolicyErrorHelper.write", true),
                newImport("org.omg.CORBA.PolicyHelper.write", true),
                newImport("org.omg.CORBA.PolicyListHelper.write", true),
                newImport("org.omg.CORBA.PolicyTypeHelper.write", true),
                newImport("org.omg.CORBA.RepositoryIdHelper.write", true),
                newImport("org.omg.CORBA.ServiceDetailHelper.write", true),
                newImport("org.omg.CORBA.ServiceInformationHelper.write", true),
                newImport("org.omg.CORBA.SetOverrideTypeHelper.write", true),
                newImport("org.omg.CORBA.ShortSeqHelper.write", true),
                newImport("org.omg.CORBA.StringSeqHelper.write", true),
                newImport("org.omg.CORBA.StringValueHelper.write", true),
                newImport("org.omg.CORBA.StructMemberHelper.write", true),
                newImport("org.omg.CORBA.ULongLongSeqHelper.write", true),
                newImport("org.omg.CORBA.ULongSeqHelper.write", true),
                newImport("org.omg.CORBA.UShortSeqHelper.write", true),
                newImport("org.omg.CORBA.UnionMemberHelper.write", true),
                newImport("org.omg.CORBA.UnknownUserExceptionHelper.write", true),
                newImport("org.omg.CORBA.ValueBaseHelper.write", true),
                newImport("org.omg.CORBA.ValueMemberHelper.write", true),
                newImport("org.omg.CORBA.VersionSpecHelper.write", true),
                newImport("org.omg.CORBA.VisibilityHelper.write", true),
                newImport("org.omg.CORBA.WCharSeqHelper.write", true),
                newImport("org.omg.CORBA.WStringSeqHelper.write", true),
                newImport("org.omg.CORBA.WStringValueHelper.write", true),
                newImport("org.omg.CORBA.WrongTransactionHelper.write", true),
                newImport("org.omg.CosNaming.BindingHelper.write", true),
                newImport("org.omg.CosNaming.BindingIteratorHelper.write", true),
                newImport("org.omg.CosNaming.BindingListHelper.write", true),
                newImport("org.omg.CosNaming.BindingTypeHelper.write", true),
                newImport("org.omg.CosNaming.IstringHelper.write", true),
                newImport("org.omg.CosNaming.NameComponentHelper.write", true),
                newImport("org.omg.CosNaming.NameHelper.write", true),
                newImport("org.omg.CosNaming.NamingContextExtHelper.write", true),
                newImport("org.omg.CosNaming.NamingContextHelper.write", true),
                newImport("org.omg.CosNaming.NamingContextExtPackage.AddressHelper.write", true),
                newImport(
                    "org.omg.CosNaming.NamingContextExtPackage.InvalidAddressHelper.write", true),
                newImport("org.omg.CosNaming.NamingContextExtPackage.StringNameHelper.write", true),
                newImport("org.omg.CosNaming.NamingContextExtPackage.URLStringHelper.write", true),
                newImport("org.omg.CosNaming.NamingContextPackage.AlreadyBoundHelper.write", true),
                newImport("org.omg.CosNaming.NamingContextPackage.CannotProceedHelper.write", true),
                newImport("org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.write", true),
                newImport("org.omg.CosNaming.NamingContextPackage.NotEmptyHelper.write", true),
                newImport("org.omg.CosNaming.NamingContextPackage.NotFoundHelper.write", true),
                newImport(
                    "org.omg.CosNaming.NamingContextPackage.NotFoundReasonHelper.write", true),
                newImport("org.omg.DynamicAny.AnySeqHelper.write", true),
                newImport("org.omg.DynamicAny.DynAnyFactoryHelper.write", true),
                newImport("org.omg.DynamicAny.DynAnyHelper.write", true),
                newImport("org.omg.DynamicAny.DynAnySeqHelper.write", true),
                newImport("org.omg.DynamicAny.DynArrayHelper.write", true),
                newImport("org.omg.DynamicAny.DynEnumHelper.write", true),
                newImport("org.omg.DynamicAny.DynFixedHelper.write", true),
                newImport("org.omg.DynamicAny.DynSequenceHelper.write", true),
                newImport("org.omg.DynamicAny.DynStructHelper.write", true),
                newImport("org.omg.DynamicAny.DynUnionHelper.write", true),
                newImport("org.omg.DynamicAny.DynValueHelper.write", true),
                newImport("org.omg.DynamicAny.FieldNameHelper.write", true),
                newImport("org.omg.DynamicAny.NameDynAnyPairHelper.write", true),
                newImport("org.omg.DynamicAny.NameDynAnyPairSeqHelper.write", true),
                newImport("org.omg.DynamicAny.NameValuePairHelper.write", true),
                newImport("org.omg.DynamicAny.NameValuePairSeqHelper.write", true),
                newImport(
                    "org.omg.DynamicAny.DynAnyFactoryPackage.InconsistentTypeCodeHelper.write",
                    true),
                newImport("org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write", true),
                newImport("org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write", true),
                newImport("org.omg.IOP.CodecFactoryHelper.write", true),
                newImport("org.omg.IOP.ComponentIdHelper.write", true),
                newImport("org.omg.IOP.IORHelper.write", true),
                newImport("org.omg.IOP.MultipleComponentProfileHelper.write", true),
                newImport("org.omg.IOP.ProfileIdHelper.write", true),
                newImport("org.omg.IOP.ServiceContextHelper.write", true),
                newImport("org.omg.IOP.ServiceContextListHelper.write", true),
                newImport("org.omg.IOP.ServiceIdHelper.write", true),
                newImport("org.omg.IOP.TaggedComponentHelper.write", true),
                newImport("org.omg.IOP.TaggedProfileHelper.write", true),
                newImport("org.omg.IOP.CodecFactoryPackage.UnknownEncodingHelper.write", true),
                newImport("org.omg.IOP.CodecPackage.FormatMismatchHelper.write", true),
                newImport("org.omg.IOP.CodecPackage.InvalidTypeForEncodingHelper.write", true),
                newImport("org.omg.IOP.CodecPackage.TypeMismatchHelper.write", true),
                newImport("org.omg.Messaging.SyncScopeHelper.write", true),
                newImport("org.omg.PortableInterceptor.AdapterManagerIdHelper.write", true),
                newImport("org.omg.PortableInterceptor.AdapterNameHelper.write", true),
                newImport("org.omg.PortableInterceptor.AdapterStateHelper.write", true),
                newImport("org.omg.PortableInterceptor.CurrentHelper.write", true),
                newImport("org.omg.PortableInterceptor.ForwardRequestHelper.write", true),
                newImport("org.omg.PortableInterceptor.IORInterceptor_3_0Helper.write", true),
                newImport("org.omg.PortableInterceptor.InvalidSlotHelper.write", true),
                newImport("org.omg.PortableInterceptor.ORBIdHelper.write", true),
                newImport("org.omg.PortableInterceptor.ObjectIdHelper.write", true),
                newImport("org.omg.PortableInterceptor.ObjectReferenceFactoryHelper.write", true),
                newImport("org.omg.PortableInterceptor.ObjectReferenceTemplateHelper.write", true),
                newImport(
                    "org.omg.PortableInterceptor.ObjectReferenceTemplateSeqHelper.write", true),
                newImport("org.omg.PortableInterceptor.ServerIdHelper.write", true),
                newImport(
                    "org.omg.PortableInterceptor.ORBInitInfoPackage.DuplicateNameHelper.write",
                    true),
                newImport(
                    "org.omg.PortableInterceptor.ORBInitInfoPackage.InvalidNameHelper.write", true),
                newImport(
                    "org.omg.PortableInterceptor.ORBInitInfoPackage.ObjectIdHelper.write", true),
                newImport("org.omg.PortableServer.CurrentHelper.write", true),
                newImport("org.omg.PortableServer.ForwardRequestHelper.write", true),
                newImport("org.omg.PortableServer.POAHelper.write", true),
                newImport("org.omg.PortableServer.ServantActivatorHelper.write", true),
                newImport("org.omg.PortableServer.ServantLocatorHelper.write", true),
                newImport("org.omg.PortableServer.CurrentPackage.NoContextHelper.write", true),
                newImport(
                    "org.omg.PortableServer.POAManagerPackage.AdapterInactiveHelper.write", true),
                newImport(
                    "org.omg.PortableServer.POAPackage.AdapterAlreadyExistsHelper.write", true),
                newImport("org.omg.PortableServer.POAPackage.AdapterNonExistentHelper.write", true),
                newImport("org.omg.PortableServer.POAPackage.InvalidPolicyHelper.write", true),
                newImport("org.omg.PortableServer.POAPackage.NoServantHelper.write", true),
                newImport(
                    "org.omg.PortableServer.POAPackage.ObjectAlreadyActiveHelper.write", true),
                newImport("org.omg.PortableServer.POAPackage.ObjectNotActiveHelper.write", true),
                newImport(
                    "org.omg.PortableServer.POAPackage.ServantAlreadyActiveHelper.write", true),
                newImport("org.omg.PortableServer.POAPackage.ServantNotActiveHelper.write", true),
                newImport("org.omg.PortableServer.POAPackage.WrongAdapterHelper.write", true),
                newImport("org.omg.PortableServer.POAPackage.WrongPolicyHelper.write", true),
              })
          .put(
              new Identifier("CountedCompleter"),
              new Import[] {
                newImport("java.util.concurrent.CountedCompleter", false),
              })
          .put(
              new Identifier("IMPLIED"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.IMPLIED", true),
                newImport("javax.swing.text.html.HTMLEditorKit.ParserCallback.IMPLIED", true),
                newImport("javax.swing.text.html.parser.DTDConstants.IMPLIED", true),
              })
          .put(
              new Identifier("PGPData"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.keyinfo.PGPData", false),
              })
          .put(
              new Identifier("MultiPopupMenuUI"),
              new Import[] {
                newImport("javax.swing.plaf.multi.MultiPopupMenuUI", false),
              })
          .put(
              new Identifier("BufferStrategy"),
              new Import[] {
                newImport("java.awt.image.BufferStrategy", false),
              })
          .put(
              new Identifier("EmptyBorderUIResource"),
              new Import[] {
                newImport("javax.swing.plaf.BorderUIResource.EmptyBorderUIResource", false),
              })
          .put(
              new Identifier("UNREGISTRATION_NOTIFICATION"),
              new Import[] {
                newImport(
                    "javax.management.MBeanServerNotification.UNREGISTRATION_NOTIFICATION", true),
              })
          .put(
              new Identifier("notifyAction"),
              new Import[] {
                newImport("javax.swing.JTextField.notifyAction", true),
                newImport("javax.swing.SwingUtilities.notifyAction", true),
              })
          .put(
              new Identifier("altMetafactory"),
              new Import[] {
                newImport("java.lang.invoke.LambdaMetafactory.altMetafactory", true),
              })
          .put(
              new Identifier("TrustManager"),
              new Import[] {
                newImport("javax.net.ssl.TrustManager", false),
              })
          .put(
              new Identifier("IMPLEMENTATION_URL"),
              new Import[] {
                newImport("java.util.jar.Attributes.Name.IMPLEMENTATION_URL", true),
              })
          .put(
              new Identifier("SelectableChannel"),
              new Import[] {
                newImport("java.nio.channels.SelectableChannel", false),
              })
          .put(
              new Identifier("Era"),
              new Import[] {
                newImport("java.time.chrono.Era", false),
              })
          .put(
              new Identifier("NMTOKEN"),
              new Import[] {
                newImport("javax.swing.text.html.parser.DTDConstants.NMTOKEN", true),
              })
          .put(
              new Identifier("ScrollPane"),
              new Import[] {
                newImport("java.awt.ScrollPane", false),
              })
          .put(
              new Identifier("IntBuffer"),
              new Import[] {
                newImport("java.nio.IntBuffer", false),
              })
          .put(
              new Identifier("_ADD_OVERRIDE"),
              new Import[] {
                newImport("org.omg.CORBA.SetOverrideType._ADD_OVERRIDE", true),
              })
          .put(
              new Identifier("REDCOMPONENT"),
              new Import[] {
                newImport("java.awt.color.ICC_ProfileRGB.REDCOMPONENT", true),
              })
          .put(
              new Identifier("AdapterStateHelper"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.AdapterStateHelper", false),
              })
          .put(
              new Identifier("INITIAL_SELECTION_VALUE_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JOptionPane.INITIAL_SELECTION_VALUE_PROPERTY", true),
              })
          .put(
              new Identifier("OPTICAL_CHARACTER_RECOGNITION"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.OPTICAL_CHARACTER_RECOGNITION", true),
              })
          .put(
              new Identifier("NO_DATA_ALLOWED_ERR"),
              new Import[] {
                newImport("org.w3c.dom.DOMException.NO_DATA_ALLOWED_ERR", true),
              })
          .put(
              new Identifier("FTP"),
              new Import[] {
                newImport("javax.print.attribute.standard.ReferenceUriSchemesSupported.FTP", true),
              })
          .put(
              new Identifier("AWTEventListener"),
              new Import[] {
                newImport("java.awt.event.AWTEventListener", false),
              })
          .put(
              new Identifier("ISO_C9_ENVELOPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_C9_ENVELOPE", true),
              })
          .put(
              new Identifier("CITE"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.CITE", true),
              })
          .put(
              new Identifier("SortKey"),
              new Import[] {
                newImport("javax.naming.ldap.SortKey", false),
                newImport("javax.swing.RowSorter.SortKey", false),
              })
          .put(
              new Identifier("selectionEndParagraphAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.selectionEndParagraphAction", true),
              })
          .put(
              new Identifier("deleteNextCharAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.deleteNextCharAction", true),
              })
          .put(
              new Identifier("GridLayout"),
              new Import[] {
                newImport("java.awt.GridLayout", false),
              })
          .put(
              new Identifier("TooManyListenersException"),
              new Import[] {
                newImport("java.util.TooManyListenersException", false),
              })
          .put(
              new Identifier("SynthToolTipUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthToolTipUI", false),
              })
          .put(
              new Identifier("NA_10X14_ENVELOPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.NA_10X14_ENVELOPE", true),
                newImport("javax.print.attribute.standard.MediaSizeName.NA_10X14_ENVELOPE", true),
              })
          .put(
              new Identifier("StartTlsResponse"),
              new Import[] {
                newImport("javax.naming.ldap.StartTlsResponse", false),
              })
          .put(
              new Identifier("LETTER_NUMBER"),
              new Import[] {
                newImport("java.lang.Character.LETTER_NUMBER", true),
              })
          .put(
              new Identifier("ORANGE"),
              new Import[] {
                newImport("java.awt.Color.ORANGE", true),
              })
          .put(
              new Identifier("ModelMBeanNotificationInfo"),
              new Import[] {
                newImport("javax.management.modelmbean.ModelMBeanNotificationInfo", false),
              })
          .put(
              new Identifier("SaslServerFactory"),
              new Import[] {
                newImport("javax.security.sasl.SaslServerFactory", false),
              })
          .put(
              new Identifier("PrintJobAttributeSet"),
              new Import[] {
                newImport("javax.print.attribute.PrintJobAttributeSet", false),
              })
          .put(
              new Identifier("BeanContextEvent"),
              new Import[] {
                newImport("java.beans.beancontext.BeanContextEvent", false),
              })
          .put(
              new Identifier("PHAISTOS_DISC"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.PHAISTOS_DISC", true),
              })
          .put(
              new Identifier("CONTROLLER_FOR"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRelation.CONTROLLER_FOR", true),
              })
          .put(
              new Identifier("InvalidAttributeValueException"),
              new Import[] {
                newImport("javax.management.InvalidAttributeValueException", false),
                newImport("javax.naming.directory.InvalidAttributeValueException", false),
              })
          .put(
              new Identifier("parseLong"),
              new Import[] {
                newImport("java.lang.Long.parseLong", true),
                newImport("javax.xml.bind.DatatypeConverter.parseLong", true),
              })
          .put(
              new Identifier("LambdaMetafactory"),
              new Import[] {
                newImport("java.lang.invoke.LambdaMetafactory", false),
              })
          .put(
              new Identifier("EXPONENT"),
              new Import[] {
                newImport("java.text.NumberFormat.Field.EXPONENT", true),
              })
          .put(
              new Identifier("getDesktop"),
              new Import[] {
                newImport("java.awt.Desktop.getDesktop", true),
              })
          .put(
              new Identifier("nullsFirst"),
              new Import[] {
                newImport("java.util.Comparator.nullsFirst", true),
              })
          .put(
              new Identifier("BYZANTINE_MUSICAL_SYMBOLS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.BYZANTINE_MUSICAL_SYMBOLS", true),
              })
          .put(
              new Identifier("FileStoreAttributeView"),
              new Import[] {
                newImport("java.nio.file.attribute.FileStoreAttributeView", false),
              })
          .put(
              new Identifier("getIntegerAttributeValue"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.getIntegerAttributeValue", true),
              })
          .put(
              new Identifier("IstringHelper"),
              new Import[] {
                newImport("org.omg.CosNaming.IstringHelper", false),
              })
          .put(
              new Identifier("SCHEMA_SYSTEM_ID"),
              new Import[] {
                newImport("javax.sql.rowset.WebRowSet.SCHEMA_SYSTEM_ID", true),
              })
          .put(
              new Identifier("VK_KP_LEFT"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_KP_LEFT", true),
              })
          .put(
              new Identifier("COMPRESS"),
              new Import[] {
                newImport("javax.print.attribute.standard.Compression.COMPRESS", true),
              })
          .put(
              new Identifier("TIMESTAMP"),
              new Import[] {
                newImport("java.sql.Types.TIMESTAMP", true),
              })
          .put(
              new Identifier("UPPER_LEFT_CORNER"),
              new Import[] {
                newImport("javax.swing.ScrollPaneConstants.UPPER_LEFT_CORNER", true),
              })
          .put(
              new Identifier("_COMPLETED_MAYBE"),
              new Import[] {
                newImport("org.omg.CORBA.CompletionStatus._COMPLETED_MAYBE", true),
              })
          .put(
              new Identifier("WHITE_SPACE"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.WHITE_SPACE", true),
              })
          .put(
              new Identifier("SynthStyleFactory"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthStyleFactory", false),
              })
          .put(
              new Identifier("XMLResolver"),
              new Import[] {
                newImport("javax.xml.stream.XMLResolver", false),
              })
          .put(
              new Identifier("ImageView"),
              new Import[] {
                newImport("javax.swing.text.html.ImageView", false),
              })
          .put(
              new Identifier("OBJECT_RENAMED"),
              new Import[] {
                newImport("javax.naming.event.NamingEvent.OBJECT_RENAMED", true),
              })
          .put(
              new Identifier("getRuntime"),
              new Import[] {
                newImport("java.lang.Runtime.getRuntime", true),
              })
          .put(
              new Identifier("JANUARY"),
              new Import[] {
                newImport("java.util.Calendar.JANUARY", true),
                newImport("javax.xml.datatype.DatatypeConstants.JANUARY", true),
              })
          .put(
              new Identifier("counting"),
              new Import[] {
                newImport("java.util.stream.Collectors.counting", true),
              })
          .put(
              new Identifier("UNSUPPORTED_DOCUMENT_FORMAT"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.JobStateReason.UNSUPPORTED_DOCUMENT_FORMAT",
                    true),
              })
          .put(
              new Identifier("JULIAN_DAY"),
              new Import[] {
                newImport("java.time.temporal.JulianFields.JULIAN_DAY", true),
              })
          .put(
              new Identifier("comparingLong"),
              new Import[] {
                newImport("java.util.Comparator.comparingLong", true),
              })
          .put(
              new Identifier("swap"),
              new Import[] {
                newImport("java.util.Collections.swap", true),
              })
          .put(
              new Identifier("TEXT_AREA"),
              new Import[] {
                newImport("javax.swing.plaf.synth.Region.TEXT_AREA", true),
              })
          .put(
              new Identifier("ByteHolder"),
              new Import[] {
                newImport("org.omg.CORBA.ByteHolder", false),
              })
          .put(
              new Identifier("privilegedCallableUsingCurrentClassLoader"),
              new Import[] {
                newImport(
                    "java.util.concurrent.Executors.privilegedCallableUsingCurrentClassLoader",
                    true),
              })
          .put(
              new Identifier("getImageReaders"),
              new Import[] {
                newImport("javax.imageio.ImageIO.getImageReaders", true),
              })
          .put(
              new Identifier("tick"),
              new Import[] {
                newImport("java.time.Clock.tick", true),
              })
          .put(
              new Identifier("RootPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.RootPaneUI", false),
              })
          .put(
              new Identifier("RMISecurityManager"),
              new Import[] {
                newImport("java.rmi.RMISecurityManager", false),
              })
          .put(
              new Identifier("DoubleBinaryOperator"),
              new Import[] {
                newImport("java.util.function.DoubleBinaryOperator", false),
              })
          .put(
              new Identifier("RelationTypeSupport"),
              new Import[] {
                newImport("javax.management.relation.RelationTypeSupport", false),
              })
          .put(
              new Identifier("ServiceInformation"),
              new Import[] {
                newImport("org.omg.CORBA.ServiceInformation", false),
              })
          .put(
              new Identifier("UnsupportedCharsetException"),
              new Import[] {
                newImport("java.nio.charset.UnsupportedCharsetException", false),
              })
          .put(
              new Identifier("ImagingOpException"),
              new Import[] {
                newImport("java.awt.image.ImagingOpException", false),
              })
          .put(
              new Identifier("REAL"),
              new Import[] {
                newImport("java.sql.Types.REAL", true),
              })
          .put(
              new Identifier("SpringLayout"),
              new Import[] {
                newImport("javax.swing.SpringLayout", false),
              })
          .put(
              new Identifier("SCROLLBARS_HORIZONTAL_ONLY"),
              new Import[] {
                newImport("java.awt.TextArea.SCROLLBARS_HORIZONTAL_ONLY", true),
              })
          .put(
              new Identifier("VALUE_ALPHA_INTERPOLATION_DEFAULT"),
              new Import[] {
                newImport("java.awt.RenderingHints.VALUE_ALPHA_INTERPOLATION_DEFAULT", true),
              })
          .put(
              new Identifier("ColorConstants"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.ColorConstants", false),
              })
          .put(
              new Identifier("flushCaches"),
              new Import[] {
                newImport("java.beans.Introspector.flushCaches", true),
              })
          .put(
              new Identifier("flashCount"),
              new Import[] {
                newImport("javax.swing.DebugGraphics.flashCount", true),
              })
          .put(
              new Identifier("updateComponentTreeUI"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.updateComponentTreeUI", true),
              })
          .put(
              new Identifier("icSigPreview2Tag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigPreview2Tag", true),
              })
          .put(
              new Identifier("RenderedImageFactory"),
              new Import[] {
                newImport("java.awt.image.renderable.RenderedImageFactory", false),
              })
          .put(
              new Identifier("createStrokeBorder"),
              new Import[] {
                newImport("javax.swing.BorderFactory.createStrokeBorder", true),
              })
          .put(
              new Identifier("LayerPainter"),
              new Import[] {
                newImport("javax.swing.text.LayeredHighlighter.LayerPainter", false),
              })
          .put(
              new Identifier("GZIPInputStream"),
              new Import[] {
                newImport("java.util.zip.GZIPInputStream", false),
              })
          .put(
              new Identifier("withInitial"),
              new Import[] {
                newImport("java.lang.ThreadLocal.withInitial", true),
              })
          .put(
              new Identifier("TRANSACTION_READ_COMMITTED"),
              new Import[] {
                newImport("java.sql.Connection.TRANSACTION_READ_COMMITTED", true),
              })
          .put(
              new Identifier("XAER_OUTSIDE"),
              new Import[] {
                newImport("javax.transaction.xa.XAException.XAER_OUTSIDE", true),
              })
          .put(
              new Identifier("tableIndexHashed"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.tableIndexHashed", true),
              })
          .put(
              new Identifier("endWordAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.endWordAction", true),
              })
          .put(
              new Identifier("LINEAR_B_IDEOGRAMS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.LINEAR_B_IDEOGRAMS", true),
              })
          .put(
              new Identifier("APRIL"),
              new Import[] {
                newImport("java.util.Calendar.APRIL", true),
                newImport("javax.xml.datatype.DatatypeConstants.APRIL", true),
              })
          .put(
              new Identifier("Invalid"),
              new Import[] {
                newImport("org.omg.CORBA.DynAnyPackage.Invalid", false),
              })
          .put(
              new Identifier("TAG_BSLN"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_BSLN", true),
              })
          .put(
              new Identifier("systemRoot"),
              new Import[] {
                newImport("java.util.prefs.Preferences.systemRoot", true),
              })
          .put(
              new Identifier("createTempDirectory"),
              new Import[] {
                newImport("java.nio.file.Files.createTempDirectory", true),
              })
          .put(
              new Identifier("PrimitiveIterator"),
              new Import[] {
                newImport("java.util.PrimitiveIterator", false),
              })
          .put(
              new Identifier("CTX_RESTRICT_SCOPE"),
              new Import[] {
                newImport("org.omg.CORBA.CTX_RESTRICT_SCOPE", false),
              })
          .put(
              new Identifier("AlphaComposite"),
              new Import[] {
                newImport("java.awt.AlphaComposite", false),
              })
          .put(
              new Identifier("CertificateRevokedException"),
              new Import[] {
                newImport("java.security.cert.CertificateRevokedException", false),
              })
          .put(
              new Identifier("isHighSurrogate"),
              new Import[] {
                newImport("java.lang.Character.isHighSurrogate", true),
              })
          .put(
              new Identifier("InternalFrameBorder"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalBorders.InternalFrameBorder", false),
              })
          .put(
              new Identifier("AudioFileFormat"),
              new Import[] {
                newImport("javax.sound.sampled.AudioFileFormat", false),
              })
          .put(
              new Identifier("InvalidTypeForEncoding"),
              new Import[] {
                newImport("org.omg.IOP.CodecPackage.InvalidTypeForEncoding", false),
              })
          .put(
              new Identifier("getSystemJavaCompiler"),
              new Import[] {
                newImport("javax.tools.ToolProvider.getSystemJavaCompiler", true),
              })
          .put(
              new Identifier("OTHER_SYMBOL"),
              new Import[] {
                newImport("java.lang.Character.OTHER_SYMBOL", true),
              })
          .put(
              new Identifier("ClassCastException"),
              new Import[] {
                newImport("java.lang.ClassCastException", false),
              })
          .put(
              new Identifier("ObjectReferenceTemplate"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.ObjectReferenceTemplate", false),
              })
          .put(
              new Identifier("TargetedNotification"),
              new Import[] {
                newImport("javax.management.remote.TargetedNotification", false),
              })
          .put(
              new Identifier("walk"),
              new Import[] {
                newImport("java.nio.file.Files.walk", true),
              })
          .put(
              new Identifier("TAI_XUAN_JING_SYMBOLS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.TAI_XUAN_JING_SYMBOLS", true),
              })
          .build();
}
