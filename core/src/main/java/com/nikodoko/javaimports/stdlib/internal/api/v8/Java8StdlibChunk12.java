// Code generated by GenerateStdlib.java. DO NOT EDIT.
package com.nikodoko.javaimports.stdlib.internal.api.v8;

import static com.nikodoko.javaimports.stdlib.internal.Stdlib.newImport;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.common.Identifier;
import com.nikodoko.javaimports.common.Import;
import java.util.Map;

public class Java8StdlibChunk12 {
  static final Map<Identifier, Import[]> CLASSES =
      new ImmutableMap.Builder<Identifier, Import[]>()
          .put(
              new Identifier("MimeTypeParseException"),
              new Import[] {
                newImport("java.awt.datatransfer.MimeTypeParseException", false),
                newImport("javax.activation.MimeTypeParseException", false),
              })
          .put(
              new Identifier("ClassValue"),
              new Import[] {
                newImport("java.lang.ClassValue", false),
              })
          .put(
              new Identifier("getAudioFileFormat"),
              new Import[] {
                newImport("javax.sound.sampled.AudioSystem.getAudioFileFormat", true),
              })
          .put(
              new Identifier("getFrameForComponent"),
              new Import[] {
                newImport("javax.swing.JOptionPane.getFrameForComponent", true),
              })
          .put(
              new Identifier("createFromBufferedImageType"),
              new Import[] {
                newImport("javax.imageio.ImageTypeSpecifier.createFromBufferedImageType", true),
              })
          .put(
              new Identifier("tk_void"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind.tk_void", true),
              })
          .put(
              new Identifier("nativeOrder"),
              new Import[] {
                newImport("java.nio.ByteOrder.nativeOrder", true),
              })
          .put(
              new Identifier("setFollowRedirects"),
              new Import[] {
                newImport("java.net.HttpURLConnection.setFollowRedirects", true),
              })
          .put(
              new Identifier("LocalDate"),
              new Import[] {
                newImport("java.time.LocalDate", false),
              })
          .put(
              new Identifier("HSPACE"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.HSPACE", true),
              })
          .put(
              new Identifier("icSigBToA2Tag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigBToA2Tag", true),
              })
          .put(
              new Identifier("TAG_FPGM"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_FPGM", true),
              })
          .put(
              new Identifier("ReferenceType"),
              new Import[] {
                newImport("javax.lang.model.type.ReferenceType", false),
              })
          .put(
              new Identifier("PROGRESS_MONITOR"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.PROGRESS_MONITOR", true),
              })
          .put(
              new Identifier("MIN_VALUE_FIELD"),
              new Import[] {
                newImport("javax.management.JMX.MIN_VALUE_FIELD", true),
              })
          .put(
              new Identifier("ERROR"),
              new Import[] {
                newImport("java.awt.image.ImageObserver.ERROR", true),
                newImport("java.util.jar.Pack200.Packer.ERROR", true),
                newImport("javax.print.attribute.standard.Severity.ERROR", true),
                newImport("javax.security.auth.callback.ConfirmationCallback.ERROR", true),
                newImport("javax.security.auth.callback.TextOutputCallback.ERROR", true),
                newImport("javax.xml.bind.ValidationEvent.ERROR", true),
              })
          .put(
              new Identifier("PrimitiveType"),
              new Import[] {
                newImport("javax.lang.model.type.PrimitiveType", false),
              })
          .put(
              new Identifier("MetalRootPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalRootPaneUI", false),
              })
          .put(
              new Identifier("summarizingDouble"),
              new Import[] {
                newImport("java.util.stream.Collectors.summarizingDouble", true),
              })
          .put(
              new Identifier("ENGINE_SCOPE"),
              new Import[] {
                newImport("javax.script.ScriptContext.ENGINE_SCOPE", true),
              })
          .put(
              new Identifier("TypeInfoProvider"),
              new Import[] {
                newImport("javax.xml.validation.TypeInfoProvider", false),
              })
          .put(
              new Identifier("HttpHandler"),
              new Import[] {
                newImport("javax.xml.ws.spi.http.HttpHandler", false),
              })
          .put(
              new Identifier("ERRORED"),
              new Import[] {
                newImport("java.awt.MediaTracker.ERRORED", true),
              })
          .put(
              new Identifier("NoConnectionPendingException"),
              new Import[] {
                newImport("java.nio.channels.NoConnectionPendingException", false),
              })
          .put(
              new Identifier("NSDECL"),
              new Import[] {
                newImport("org.xml.sax.helpers.NamespaceSupport.NSDECL", true),
              })
          .put(
              new Identifier("TAG_TYP1"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_TYP1", true),
              })
          .put(
              new Identifier("printLong"),
              new Import[] {
                newImport("javax.xml.bind.DatatypeConverter.printLong", true),
              })
          .put(
              new Identifier("LifespanPolicyValue"),
              new Import[] {
                newImport("org.omg.PortableServer.LifespanPolicyValue", false),
              })
          .put(
              new Identifier("BIGINT"),
              new Import[] {
                newImport("java.sql.Types.BIGINT", true),
              })
          .put(
              new Identifier("BUTTON3_DOWN_MASK"),
              new Import[] {
                newImport("java.awt.event.InputEvent.BUTTON3_DOWN_MASK", true),
              })
          .put(
              new Identifier("getStateToBind"),
              new Import[] {
                newImport("javax.naming.spi.DirectoryManager.getStateToBind", true),
                newImport("javax.naming.spi.NamingManager.getStateToBind", true),
              })
          .put(
              new Identifier("URIReferenceException"),
              new Import[] {
                newImport("javax.xml.crypto.URIReferenceException", false),
              })
          .put(
              new Identifier("UserDefinedFileAttributeView"),
              new Import[] {
                newImport("java.nio.file.attribute.UserDefinedFileAttributeView", false),
              })
          .put(
              new Identifier("LocateRegistry"),
              new Import[] {
                newImport("java.rmi.registry.LocateRegistry", false),
              })
          .put(
              new Identifier("hostEncoding"),
              new Import[] {
                newImport("javax.print.DocFlavor.hostEncoding", true),
              })
          .put(
              new Identifier("VK_CANCEL"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_CANCEL", true),
              })
          .put(
              new Identifier("FloatSeqHelper"),
              new Import[] {
                newImport("org.omg.CORBA.FloatSeqHelper", false),
              })
          .put(
              new Identifier("flushFromCaches"),
              new Import[] {
                newImport("java.beans.Introspector.flushFromCaches", true),
              })
          .put(
              new Identifier("icSigSpace5CLR"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigSpace5CLR", true),
              })
          .put(
              new Identifier("COMPONENT_RESIZED"),
              new Import[] {
                newImport("java.awt.event.ComponentEvent.COMPONENT_RESIZED", true),
              })
          .put(
              new Identifier("ActivationGroupID"),
              new Import[] {
                newImport("java.rmi.activation.ActivationGroupID", false),
              })
          .put(
              new Identifier("Processor"),
              new Import[] {
                newImport("javax.annotation.processing.Processor", false),
              })
          .put(
              new Identifier("DefaultSelectionType"),
              new Import[] {
                newImport("java.awt.JobAttributes.DefaultSelectionType", false),
              })
          .put(
              new Identifier("UnicodeBlock"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock", false),
              })
          .put(
              new Identifier("getContinuationContext"),
              new Import[] {
                newImport("javax.naming.spi.NamingManager.getContinuationContext", true),
              })
          .put(
              new Identifier("CharBuffer"),
              new Import[] {
                newImport("java.nio.CharBuffer", false),
              })
          .put(
              new Identifier("ImageWriter"),
              new Import[] {
                newImport("javax.imageio.ImageWriter", false),
              })
          .put(
              new Identifier("VERTICAL_WRAP"),
              new Import[] {
                newImport("javax.swing.JList.VERTICAL_WRAP", true),
              })
          .put(
              new Identifier("readAllLines"),
              new Import[] {
                newImport("java.nio.file.Files.readAllLines", true),
              })
          .put(
              new Identifier("dk_ValueBox"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind.dk_ValueBox", true),
              })
          .put(
              new Identifier("Retention"),
              new Import[] {
                newImport("java.lang.annotation.Retention", false),
              })
          .put(
              new Identifier("PersistenceDelegate"),
              new Import[] {
                newImport("java.beans.PersistenceDelegate", false),
              })
          .put(
              new Identifier("icSigRedTRCTag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigRedTRCTag", true),
              })
          .put(
              new Identifier("ElementNameAttribute"),
              new Import[] {
                newImport("javax.swing.text.AbstractDocument.ElementNameAttribute", true),
              })
          .put(
              new Identifier("AbstractQueue"),
              new Import[] {
                newImport("java.util.AbstractQueue", false),
              })
          .put(
              new Identifier("Copies"),
              new Import[] {
                newImport("javax.print.attribute.standard.Copies", false),
              })
          .put(
              new Identifier("XmlAttachmentRef"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlAttachmentRef", false),
              })
          .put(
              new Identifier("getRules"),
              new Import[] {
                newImport("java.time.zone.ZoneRulesProvider.getRules", true),
              })
          .put(
              new Identifier("PreferenceChangeListener"),
              new Import[] {
                newImport("java.util.prefs.PreferenceChangeListener", false),
              })
          .put(
              new Identifier("AttributeUndoableEdit"),
              new Import[] {
                newImport("javax.swing.text.DefaultStyledDocument.AttributeUndoableEdit", false),
              })
          .put(
              new Identifier("ComposedTextAttribute"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.ComposedTextAttribute", true),
              })
          .put(
              new Identifier("INV_FLAG"),
              new Import[] {
                newImport("org.omg.CORBA.INV_FLAG", false),
              })
          .put(
              new Identifier("Lease"),
              new Import[] {
                newImport("java.rmi.dgc.Lease", false),
              })
          .put(
              new Identifier("unmodifiableNavigableMap"),
              new Import[] {
                newImport("java.util.Collections.unmodifiableNavigableMap", true),
              })
          .put(
              new Identifier("PADDING_BOTTOM"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.PADDING_BOTTOM", true),
              })
          .put(
              new Identifier("CacheRequest"),
              new Import[] {
                newImport("java.net.CacheRequest", false),
              })
          .put(
              new Identifier("NORTH_EAST"),
              new Import[] {
                newImport("javax.swing.SwingConstants.NORTH_EAST", true),
              })
          .put(
              new Identifier("SOAPMessageContext"),
              new Import[] {
                newImport("javax.xml.ws.handler.soap.SOAPMessageContext", false),
              })
          .put(
              new Identifier("setLogger"),
              new Import[] {
                newImport("javax.sql.rowset.spi.SyncFactory.setLogger", true),
              })
          .put(
              new Identifier("UnderlineAction"),
              new Import[] {
                newImport("javax.swing.text.StyledEditorKit.UnderlineAction", false),
              })
          .put(
              new Identifier("IvParameterSpec"),
              new Import[] {
                newImport("javax.crypto.spec.IvParameterSpec", false),
              })
          .put(
              new Identifier("ToLongBiFunction"),
              new Import[] {
                newImport("java.util.function.ToLongBiFunction", false),
              })
          .put(
              new Identifier("UNION"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.spec.XPathType.Filter.UNION", true),
              })
          .put(
              new Identifier("SrcOver"),
              new Import[] {
                newImport("java.awt.AlphaComposite.SrcOver", true),
              })
          .put(
              new Identifier("icSigColorSpaceClass"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigColorSpaceClass", true),
              })
          .put(
              new Identifier("tk_Principal"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind.tk_Principal", true),
              })
          .put(
              new Identifier("SynthMenuItemUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthMenuItemUI", false),
              })
          .put(
              new Identifier("UndoableEdit"),
              new Import[] {
                newImport("javax.swing.undo.UndoableEdit", false),
              })
          .put(
              new Identifier("indexOfSubList"),
              new Import[] {
                newImport("java.util.Collections.indexOfSubList", true),
              })
          .put(
              new Identifier("FileTime"),
              new Import[] {
                newImport("java.nio.file.attribute.FileTime", false),
              })
          .put(
              new Identifier("InternalFrameEvent"),
              new Import[] {
                newImport("javax.swing.event.InternalFrameEvent", false),
              })
          .put(
              new Identifier("UtilDelegate"),
              new Import[] {
                newImport("javax.rmi.CORBA.UtilDelegate", false),
              })
          .put(
              new Identifier("MemoryCacheImageOutputStream"),
              new Import[] {
                newImport("javax.imageio.stream.MemoryCacheImageOutputStream", false),
              })
          .put(
              new Identifier("IDN"),
              new Import[] {
                newImport("java.net.IDN", false),
              })
          .put(
              new Identifier("TaggedComponentHelper"),
              new Import[] {
                newImport("org.omg.IOP.TaggedComponentHelper", false),
              })
          .put(
              new Identifier("Binding"),
              new Import[] {
                newImport("javax.naming.Binding", false),
                newImport("javax.xml.ws.Binding", false),
                newImport("org.omg.CosNaming.Binding", false),
              })
          .put(
              new Identifier("ServantManagerOperations"),
              new Import[] {
                newImport("org.omg.PortableServer.ServantManagerOperations", false),
              })
          .put(
              new Identifier("BORDER_PAINTED_CHANGED_PROPERTY"),
              new Import[] {
                newImport("javax.swing.AbstractButton.BORDER_PAINTED_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("newFileSystem"),
              new Import[] {
                newImport("java.nio.file.FileSystems.newFileSystem", true),
              })
          .put(
              new Identifier("tk_value"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind.tk_value", true),
              })
          .put(
              new Identifier("TEXT_HTML_US_ASCII"),
              new Import[] {
                newImport("javax.print.DocFlavor.BYTE_ARRAY.TEXT_HTML_US_ASCII", true),
                newImport("javax.print.DocFlavor.INPUT_STREAM.TEXT_HTML_US_ASCII", true),
                newImport("javax.print.DocFlavor.URL.TEXT_HTML_US_ASCII", true),
              })
          .put(
              new Identifier("MembershipKey"),
              new Import[] {
                newImport("java.nio.channels.MembershipKey", false),
              })
          .put(
              new Identifier("removePropertyChangeListener"),
              new Import[] {
                newImport("javax.swing.UIManager.removePropertyChangeListener", true),
              })
          .put(
              new Identifier("GEOMETRIC_SHAPES"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.GEOMETRIC_SHAPES", true),
              })
          .put(
              new Identifier("FULL"),
              new Import[] {
                newImport("java.text.DateFormat.FULL", true),
              })
          .put(
              new Identifier("installBorder"),
              new Import[] {
                newImport("javax.swing.LookAndFeel.installBorder", true),
              })
          .put(
              new Identifier("ImplicitActivationPolicyValue"),
              new Import[] {
                newImport("org.omg.PortableServer.ImplicitActivationPolicyValue", false),
              })
          .put(
              new Identifier("DynValueCommon"),
              new Import[] {
                newImport("org.omg.DynamicAny.DynValueCommon", false),
              })
          .put(
              new Identifier("ENV_9"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ENV_9", true),
              })
          .put(
              new Identifier("RequestInfoOperations"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.RequestInfoOperations", false),
              })
          .put(
              new Identifier("replaceUIInputMap"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.replaceUIInputMap", true),
              })
          .put(
              new Identifier("FloatSeqHolder"),
              new Import[] {
                newImport("org.omg.CORBA.FloatSeqHolder", false),
              })
          .put(
              new Identifier("SCROLL_BEGIN"),
              new Import[] {
                newImport("java.awt.Event.SCROLL_BEGIN", true),
              })
          .put(
              new Identifier("getOwnerlessWindows"),
              new Import[] {
                newImport("java.awt.Window.getOwnerlessWindows", true),
              })
          .put(
              new Identifier("CookieHandler"),
              new Import[] {
                newImport("java.net.CookieHandler", false),
              })
          .put(
              new Identifier("getHTMLBaseline"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicHTML.getHTMLBaseline", true),
              })
          .put(
              new Identifier("RMIClassLoaderSpi"),
              new Import[] {
                newImport("java.rmi.server.RMIClassLoaderSpi", false),
              })
          .put(
              new Identifier("Scanner"),
              new Import[] {
                newImport("java.util.Scanner", false),
              })
          .put(
              new Identifier("joining"),
              new Import[] {
                newImport("java.util.stream.Collectors.joining", true),
              })
          .put(
              new Identifier("NUTOKENS"),
              new Import[] {
                newImport("javax.swing.text.html.parser.DTDConstants.NUTOKENS", true),
              })
          .put(
              new Identifier("TAG_GSUB"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_GSUB", true),
              })
          .put(
              new Identifier("TORIGHT_TOTOP"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.PresentationDirection.TORIGHT_TOTOP", true),
              })
          .put(
              new Identifier("Transformer"),
              new Import[] {
                newImport("javax.xml.transform.Transformer", false),
              })
          .put(
              new Identifier("getSystemLookAndFeelClassName"),
              new Import[] {
                newImport("javax.swing.UIManager.getSystemLookAndFeelClassName", true),
              })
          .put(
              new Identifier("distance"),
              new Import[] {
                newImport("java.awt.geom.Point2D.distance", true),
              })
          .put(
              new Identifier("ErrorManager"),
              new Import[] {
                newImport("java.util.logging.ErrorManager", false),
              })
          .put(
              new Identifier("TAIWAN"),
              new Import[] {
                newImport("java.util.Locale.TAIWAN", true),
              })
          .put(
              new Identifier("_dk_Union"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind._dk_Union", true),
              })
          .put(
              new Identifier("averagingLong"),
              new Import[] {
                newImport("java.util.stream.Collectors.averagingLong", true),
              })
          .put(
              new Identifier("getPrimaryControlDarkShadow"),
              new Import[] {
                newImport(
                    "javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControlDarkShadow", true),
              })
          .put(
              new Identifier("ExtendedSSLSession"),
              new Import[] {
                newImport("javax.net.ssl.ExtendedSSLSession", false),
              })
          .put(
              new Identifier("KANJI"),
              new Import[] {
                newImport("java.awt.im.InputSubset.KANJI", true),
              })
          .put(
              new Identifier("NavigationFilter"),
              new Import[] {
                newImport("javax.swing.text.NavigationFilter", false),
              })
          .put(
              new Identifier("DefaultMoveDrop"),
              new Import[] {
                newImport("java.awt.dnd.DragSource.DefaultMoveDrop", true),
              })
          .put(
              new Identifier("SPEAKER"),
              new Import[] {
                newImport("javax.sound.sampled.Port.Info.SPEAKER", true),
              })
          .put(
              new Identifier("MODIFICATION"),
              new Import[] {
                newImport("org.w3c.dom.events.MutationEvent.MODIFICATION", true),
              })
          .put(
              new Identifier("START_ELEMENT"),
              new Import[] {
                newImport("javax.xml.stream.XMLStreamConstants.START_ELEMENT", true),
              })
          .put(
              new Identifier("RowFilter"),
              new Import[] {
                newImport("javax.swing.RowFilter", false),
              })
          .put(
              new Identifier("JOB_QUEUED_FOR_MARKER"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.JobStateReason.JOB_QUEUED_FOR_MARKER", true),
              })
          .put(
              new Identifier("getSourceLineInfo"),
              new Import[] {
                newImport("javax.sound.sampled.AudioSystem.getSourceLineInfo", true),
              })
          .put(
              new Identifier("NullPointerException"),
              new Import[] {
                newImport("java.lang.NullPointerException", false),
              })
          .put(
              new Identifier("getCutAction"),
              new Import[] {
                newImport("javax.swing.TransferHandler.getCutAction", true),
              })
          .put(
              new Identifier("SSLSessionBindingListener"),
              new Import[] {
                newImport("javax.net.ssl.SSLSessionBindingListener", false),
              })
          .put(
              new Identifier("DynSequenceOperations"),
              new Import[] {
                newImport("org.omg.DynamicAny.DynSequenceOperations", false),
              })
          .put(
              new Identifier("Component"),
              new Import[] {
                newImport("java.awt.Component", false),
              })
          .put(
              new Identifier("ExcellentBreakWeight"),
              new Import[] {
                newImport("javax.swing.text.View.ExcellentBreakWeight", true),
              })
          .put(
              new Identifier("DocumentFragment"),
              new Import[] {
                newImport("org.w3c.dom.DocumentFragment", false),
              })
          .put(
              new Identifier("JDIALOG_UI"),
              new Import[] {
                newImport("javax.print.ServiceUIFactory.JDIALOG_UI", true),
              })
          .put(
              new Identifier("WebServiceRef"),
              new Import[] {
                newImport("javax.xml.ws.WebServiceRef", false),
              })
          .put(
              new Identifier("ToolProvider"),
              new Import[] {
                newImport("javax.tools.ToolProvider", false),
              })
          .put(
              new Identifier("DragSourceAdapter"),
              new Import[] {
                newImport("java.awt.dnd.DragSourceAdapter", false),
              })
          .put(
              new Identifier("HORIZONTAL_SCROLLBAR_ALWAYS"),
              new Import[] {
                newImport("javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS", true),
              })
          .put(
              new Identifier("BasicPanelUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicPanelUI", false),
              })
          .put(
              new Identifier("getDefaultFileTypeMap"),
              new Import[] {
                newImport("javax.activation.FileTypeMap.getDefaultFileTypeMap", true),
              })
          .put(
              new Identifier("TIFINAGH"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.TIFINAGH", true),
              })
          .put(
              new Identifier("BeanContextServicesSupport"),
              new Import[] {
                newImport("java.beans.beancontext.BeanContextServicesSupport", false),
              })
          .put(
              new Identifier("GUJARATI"),
              new Import[] {
                newImport("java.awt.font.NumericShaper.GUJARATI", true),
                newImport("java.lang.Character.UnicodeBlock.GUJARATI", true),
              })
          .put(
              new Identifier("Info"),
              new Import[] {
                newImport("javax.sound.midi.MidiDevice.Info", false),
                newImport("javax.sound.sampled.DataLine.Info", false),
                newImport("javax.sound.sampled.Line.Info", false),
                newImport("javax.sound.sampled.Mixer.Info", false),
                newImport("javax.sound.sampled.Port.Info", false),
              })
          .put(
              new Identifier("helpQuiesce"),
              new Import[] {
                newImport("java.util.concurrent.ForkJoinTask.helpQuiesce", true),
              })
          .put(
              new Identifier("setFlashColor"),
              new Import[] {
                newImport("javax.swing.DebugGraphics.setFlashColor", true),
              })
          .put(
              new Identifier("DoubleSupplier"),
              new Import[] {
                newImport("java.util.function.DoubleSupplier", false),
              })
          .put(
              new Identifier("JulianFields"),
              new Import[] {
                newImport("java.time.temporal.JulianFields", false),
              })
          .put(
              new Identifier("ENCRYPT_MODE"),
              new Import[] {
                newImport("javax.crypto.Cipher.ENCRYPT_MODE", true),
              })
          .put(
              new Identifier("setSuperscript"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.setSuperscript", true),
              })
          .put(
              new Identifier("SocketImpl"),
              new Import[] {
                newImport("java.net.SocketImpl", false),
              })
          .put(
              new Identifier("DefaultKeyboardFocusManager"),
              new Import[] {
                newImport("java.awt.DefaultKeyboardFocusManager", false),
              })
          .put(
              new Identifier("CallbackHandlerProtection"),
              new Import[] {
                newImport("java.security.KeyStore.CallbackHandlerProtection", false),
              })
          .put(
              new Identifier("TYPE_CCLR"),
              new Import[] {
                newImport("java.awt.color.ColorSpace.TYPE_CCLR", true),
              })
          .put(
              new Identifier("INTERNAL_CLOCK"),
              new Import[] {
                newImport("javax.sound.midi.Sequencer.SyncMode.INTERNAL_CLOCK", true),
              })
          .put(
              new Identifier("PRINT_SCREEN"),
              new Import[] {
                newImport("java.awt.Event.PRINT_SCREEN", true),
              })
          .put(
              new Identifier("PRIORITY_WHITESPACE"),
              new Import[] {
                newImport("java.awt.font.GlyphJustificationInfo.PRIORITY_WHITESPACE", true),
              })
          .put(
              new Identifier("UNDEFINED"),
              new Import[] {
                newImport("java.awt.BufferCapabilities.FlipContents.UNDEFINED", true),
              })
          .put(
              new Identifier("ACCESSIBLE_HYPERTEXT_OFFSET"),
              new Import[] {
                newImport(
                    "javax.accessibility.AccessibleContext.ACCESSIBLE_HYPERTEXT_OFFSET", true),
              })
          .put(
              new Identifier("TYPE_BYTE_INDEXED"),
              new Import[] {
                newImport("java.awt.image.BufferedImage.TYPE_BYTE_INDEXED", true),
              })
          .put(
              new Identifier("MethodHandles"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandles", false),
              })
          .put(
              new Identifier("DocumentHandler"),
              new Import[] {
                newImport("org.xml.sax.DocumentHandler", false),
              })
          .put(
              new Identifier("DECIMAL_DIGIT_NUMBER"),
              new Import[] {
                newImport("java.lang.Character.DECIMAL_DIGIT_NUMBER", true),
              })
          .put(
              new Identifier("JOB_PRINTING"),
              new Import[] {
                newImport("javax.print.attribute.standard.JobStateReason.JOB_PRINTING", true),
              })
          .put(
              new Identifier("BYTE"),
              new Import[] {
                newImport("javax.management.openmbean.SimpleType.BYTE", true),
              })
          .put(
              new Identifier("drawStringUnderlineCharAt"),
              new Import[] {
                newImport(
                    "javax.swing.plaf.basic.BasicGraphicsUtils.drawStringUnderlineCharAt", true),
              })
          .put(
              new Identifier("FileDataSource"),
              new Import[] {
                newImport("javax.activation.FileDataSource", false),
              })
          .put(
              new Identifier("BinaryOperator"),
              new Import[] {
                newImport("java.util.function.BinaryOperator", false),
              })
          .put(
              new Identifier("Sides"),
              new Import[] {
                newImport("javax.print.attribute.standard.Sides", false),
              })
          .put(
              new Identifier("atan2"),
              new Import[] {
                newImport("java.lang.Math.atan2", true),
                newImport("java.lang.StrictMath.atan2", true),
              })
          .put(
              new Identifier("PARAMETER"),
              new Import[] {
                newImport("javax.swing.text.html.parser.DTDConstants.PARAMETER", true),
              })
          .put(
              new Identifier("procedureColumnIn"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.procedureColumnIn", true),
              })
          .put(
              new Identifier("filterReturnValue"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandles.filterReturnValue", true),
              })
          .put(
              new Identifier("Documented"),
              new Import[] {
                newImport("java.lang.annotation.Documented", false),
              })
          .put(
              new Identifier("getAllByName"),
              new Import[] {
                newImport("java.net.InetAddress.getAllByName", true),
              })
          .put(
              new Identifier("LITERAL"),
              new Import[] {
                newImport("java.util.regex.Pattern.LITERAL", true),
              })
          .put(
              new Identifier("DoublePredicate"),
              new Import[] {
                newImport("java.util.function.DoublePredicate", false),
              })
          .put(
              new Identifier("STRENGTH"),
              new Import[] {
                newImport("javax.security.sasl.Sasl.STRENGTH", true),
              })
          .put(
              new Identifier("dk_Struct"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind.dk_Struct", true),
              })
          .put(
              new Identifier("columnNullable"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.columnNullable", true),
                newImport("java.sql.ResultSetMetaData.columnNullable", true),
              })
          .put(
              new Identifier("TEXT_HTML_UTF_16BE"),
              new Import[] {
                newImport("javax.print.DocFlavor.BYTE_ARRAY.TEXT_HTML_UTF_16BE", true),
                newImport("javax.print.DocFlavor.INPUT_STREAM.TEXT_HTML_UTF_16BE", true),
                newImport("javax.print.DocFlavor.URL.TEXT_HTML_UTF_16BE", true),
              })
          .put(
              new Identifier("BELOW_BASELINE_TRAILING"),
              new Import[] {
                newImport("java.awt.GridBagConstraints.BELOW_BASELINE_TRAILING", true),
              })
          .put(
              new Identifier("VK_DEAD_VOICED_SOUND"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_DEAD_VOICED_SOUND", true),
              })
          .put(
              new Identifier("XMLEncoder"),
              new Import[] {
                newImport("java.beans.XMLEncoder", false),
              })
          .put(
              new Identifier("VK_FULL_WIDTH"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_FULL_WIDTH", true),
              })
          .put(
              new Identifier("WINDOW_DEICONIFY"),
              new Import[] {
                newImport("java.awt.Event.WINDOW_DEICONIFY", true),
              })
          .put(
              new Identifier("TEXT_VALUE_CHANGED"),
              new Import[] {
                newImport("java.awt.event.TextEvent.TEXT_VALUE_CHANGED", true),
              })
          .put(
              new Identifier("compileClasses"),
              new Import[] {
                newImport("java.lang.Compiler.compileClasses", true),
              })
          .put(
              new Identifier("convertRectangle"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.convertRectangle", true),
              })
          .put(
              new Identifier("DOMImplementationLS"),
              new Import[] {
                newImport("org.w3c.dom.ls.DOMImplementationLS", false),
              })
          .put(
              new Identifier("SELECTED_ICON_CHANGED_PROPERTY"),
              new Import[] {
                newImport("javax.swing.AbstractButton.SELECTED_ICON_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("deregisterDriver"),
              new Import[] {
                newImport("java.sql.DriverManager.deregisterDriver", true),
              })
          .put(
              new Identifier("Savepoint"),
              new Import[] {
                newImport("java.sql.Savepoint", false),
              })
          .put(
              new Identifier("WSDL_SERVICE"),
              new Import[] {
                newImport("javax.xml.ws.Endpoint.WSDL_SERVICE", true),
                newImport("javax.xml.ws.handler.MessageContext.WSDL_SERVICE", true),
              })
          .put(
              new Identifier("COMMENT"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.COMMENT", true),
                newImport("javax.swing.text.html.HTML.Tag.COMMENT", true),
                newImport("javax.xml.stream.XMLStreamConstants.COMMENT", true),
              })
          .put(
              new Identifier("FRAMEBITS"),
              new Import[] {
                newImport("java.awt.image.ImageObserver.FRAMEBITS", true),
              })
          .put(
              new Identifier("MetalComboBoxButton"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalComboBoxButton", false),
              })
          .put(
              new Identifier("VK_COMPOSE"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_COMPOSE", true),
              })
          .put(
              new Identifier("TYPE_4BYTE_ABGR"),
              new Import[] {
                newImport("java.awt.image.BufferedImage.TYPE_4BYTE_ABGR", true),
              })
          .put(
              new Identifier("SURROGATES_AREA"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.SURROGATES_AREA", true),
              })
          .put(
              new Identifier("getDrivers"),
              new Import[] {
                newImport("java.sql.DriverManager.getDrivers", true),
              })
          .put(
              new Identifier("yield"),
              new Import[] {
                newImport("java.lang.Thread.yield", true),
              })
          .put(
              new Identifier("Toolkit"),
              new Import[] {
                newImport("java.awt.Toolkit", false),
              })
          .put(
              new Identifier("domainMatches"),
              new Import[] {
                newImport("java.net.HttpCookie.domainMatches", true),
              })
          .put(
              new Identifier("ObjIntConsumer"),
              new Import[] {
                newImport("java.util.function.ObjIntConsumer", false),
              })
          .put(
              new Identifier("ALIGN_LEFT"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.ALIGN_LEFT", true),
                newImport("javax.swing.text.TabStop.ALIGN_LEFT", true),
              })
          .put(
              new Identifier("dk_Primitive"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind.dk_Primitive", true),
              })
          .put(
              new Identifier("RelationTypeNotFoundException"),
              new Import[] {
                newImport("javax.management.relation.RelationTypeNotFoundException", false),
              })
          .put(
              new Identifier("WindowListener"),
              new Import[] {
                newImport("java.awt.event.WindowListener", false),
              })
          .put(
              new Identifier("EXTENSION_INSTALLATION"),
              new Import[] {
                newImport("java.util.jar.Attributes.Name.EXTENSION_INSTALLATION", true),
              })
          .put(
              new Identifier("SidesType"),
              new Import[] {
                newImport("java.awt.JobAttributes.SidesType", false),
              })
          .put(
              new Identifier("SimpleFormatter"),
              new Import[] {
                newImport("java.util.logging.SimpleFormatter", false),
              })
          .put(
              new Identifier("SSLPeerUnverifiedException"),
              new Import[] {
                newImport("javax.net.ssl.SSLPeerUnverifiedException", false),
              })
          .put(
              new Identifier("selectionBeginWordAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.selectionBeginWordAction", true),
              })
          .put(
              new Identifier("XmlSchemaTypes"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlSchemaTypes", false),
              })
          .put(
              new Identifier("AnnotatedArrayType"),
              new Import[] {
                newImport("java.lang.reflect.AnnotatedArrayType", false),
              })
          .put(
              new Identifier("toSet"),
              new Import[] {
                newImport("java.util.stream.Collectors.toSet", true),
              })
          .put(
              new Identifier("getRadioButtonIcon"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicIconFactory.getRadioButtonIcon", true),
                newImport("javax.swing.plaf.metal.MetalIconFactory.getRadioButtonIcon", true),
              })
          .put(
              new Identifier("TypeCodeHolder"),
              new Import[] {
                newImport("org.omg.CORBA.TypeCodeHolder", false),
              })
          .put(
              new Identifier("DSA_SHA1"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.SignatureMethod.DSA_SHA1", true),
              })
          .put(
              new Identifier("TYPE_8CLR"),
              new Import[] {
                newImport("java.awt.color.ColorSpace.TYPE_8CLR", true),
              })
          .put(
              new Identifier("ComponentIdHelper"),
              new Import[] {
                newImport("org.omg.IOP.ComponentIdHelper", false),
              })
          .put(
              new Identifier("toCodePoint"),
              new Import[] {
                newImport("java.lang.Character.toCodePoint", true),
              })
          .put(
              new Identifier("WEST"),
              new Import[] {
                newImport("java.awt.BorderLayout.WEST", true),
                newImport("java.awt.GridBagConstraints.WEST", true),
                newImport("javax.swing.SpringLayout.WEST", true),
                newImport("javax.swing.SwingConstants.WEST", true),
              })
          .put(
              new Identifier("precision"),
              new Import[] {
                newImport("java.time.temporal.TemporalQueries.precision", true),
              })
          .put(
              new Identifier("DECIMAL"),
              new Import[] {
                newImport("java.sql.Types.DECIMAL", true),
              })
          .put(
              new Identifier("IIOServiceProvider"),
              new Import[] {
                newImport("javax.imageio.spi.IIOServiceProvider", false),
              })
          .put(
              new Identifier("DEFAULT_PROPERTY_NAME"),
              new Import[] {
                newImport("javax.xml.xpath.XPathFactory.DEFAULT_PROPERTY_NAME", true),
              })
          .put(
              new Identifier("unmodifiableView"),
              new Import[] {
                newImport("javax.print.attribute.AttributeSetUtilities.unmodifiableView", true),
              })
          .put(
              new Identifier("SO_LINGER"),
              new Import[] {
                newImport("java.net.SocketOptions.SO_LINGER", true),
                newImport("java.net.StandardSocketOptions.SO_LINGER", true),
              })
          .put(
              new Identifier("JOB_INTERPRETING"),
              new Import[] {
                newImport("javax.print.attribute.standard.JobStateReason.JOB_INTERPRETING", true),
              })
          .put(
              new Identifier("ServantActivatorHelper"),
              new Import[] {
                newImport("org.omg.PortableServer.ServantActivatorHelper", false),
              })
          .put(
              new Identifier("FILTER_ACCEPT"),
              new Import[] {
                newImport("org.w3c.dom.ls.LSParserFilter.FILTER_ACCEPT", true),
              })
          .put(
              new Identifier("DynValueOperations"),
              new Import[] {
                newImport("org.omg.DynamicAny.DynValueOperations", false),
              })
          .put(
              new Identifier("CookieManager"),
              new Import[] {
                newImport("java.net.CookieManager", false),
              })
          .put(
              new Identifier("SILENT"),
              new Import[] {
                newImport("java.rmi.server.LogStream.SILENT", true),
              })
          .put(
              new Identifier("DAY_OF_YEAR_FIELD"),
              new Import[] {
                newImport("java.text.DateFormat.DAY_OF_YEAR_FIELD", true),
              })
          .put(
              new Identifier("DSAParameterSpec"),
              new Import[] {
                newImport("java.security.spec.DSAParameterSpec", false),
              })
          .put(
              new Identifier("ErrorHandler"),
              new Import[] {
                newImport("org.xml.sax.ErrorHandler", false),
              })
          .put(
              new Identifier("ofNanoOfDay"),
              new Import[] {
                newImport("java.time.LocalTime.ofNanoOfDay", true),
              })
          .put(
              new Identifier("NA_6X9_ENVELOPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.NA_6X9_ENVELOPE", true),
                newImport("javax.print.attribute.standard.MediaSizeName.NA_6X9_ENVELOPE", true),
                newImport("javax.print.attribute.standard.MediaSize.NA.NA_6X9_ENVELOPE", true),
              })
          .put(
              new Identifier("read"),
              new Import[] {
                newImport("java.rmi.server.ObjID.read", true),
                newImport("java.rmi.server.UID.read", true),
                newImport("javax.imageio.ImageIO.read", true),
                newImport("org.omg.CORBA.AnySeqHelper.read", true),
                newImport("org.omg.CORBA.BooleanSeqHelper.read", true),
                newImport("org.omg.CORBA.CharSeqHelper.read", true),
                newImport("org.omg.CORBA.CompletionStatusHelper.read", true),
                newImport("org.omg.CORBA.CurrentHelper.read", true),
                newImport("org.omg.CORBA.DefinitionKindHelper.read", true),
                newImport("org.omg.CORBA.DoubleSeqHelper.read", true),
                newImport("org.omg.CORBA.FieldNameHelper.read", true),
                newImport("org.omg.CORBA.FloatSeqHelper.read", true),
                newImport("org.omg.CORBA.IDLTypeHelper.read", true),
                newImport("org.omg.CORBA.IdentifierHelper.read", true),
                newImport("org.omg.CORBA.LongLongSeqHelper.read", true),
                newImport("org.omg.CORBA.LongSeqHelper.read", true),
                newImport("org.omg.CORBA.NameValuePairHelper.read", true),
                newImport("org.omg.CORBA.ObjectHelper.read", true),
                newImport("org.omg.CORBA.OctetSeqHelper.read", true),
                newImport("org.omg.CORBA.ParameterModeHelper.read", true),
                newImport("org.omg.CORBA.PolicyErrorCodeHelper.read", true),
                newImport("org.omg.CORBA.PolicyErrorHelper.read", true),
                newImport("org.omg.CORBA.PolicyHelper.read", true),
                newImport("org.omg.CORBA.PolicyListHelper.read", true),
                newImport("org.omg.CORBA.PolicyTypeHelper.read", true),
                newImport("org.omg.CORBA.RepositoryIdHelper.read", true),
                newImport("org.omg.CORBA.ServiceDetailHelper.read", true),
                newImport("org.omg.CORBA.ServiceInformationHelper.read", true),
                newImport("org.omg.CORBA.SetOverrideTypeHelper.read", true),
                newImport("org.omg.CORBA.ShortSeqHelper.read", true),
                newImport("org.omg.CORBA.StringSeqHelper.read", true),
                newImport("org.omg.CORBA.StringValueHelper.read", true),
                newImport("org.omg.CORBA.StructMemberHelper.read", true),
                newImport("org.omg.CORBA.ULongLongSeqHelper.read", true),
                newImport("org.omg.CORBA.ULongSeqHelper.read", true),
                newImport("org.omg.CORBA.UShortSeqHelper.read", true),
                newImport("org.omg.CORBA.UnionMemberHelper.read", true),
                newImport("org.omg.CORBA.UnknownUserExceptionHelper.read", true),
                newImport("org.omg.CORBA.ValueBaseHelper.read", true),
                newImport("org.omg.CORBA.ValueMemberHelper.read", true),
                newImport("org.omg.CORBA.VersionSpecHelper.read", true),
                newImport("org.omg.CORBA.VisibilityHelper.read", true),
                newImport("org.omg.CORBA.WCharSeqHelper.read", true),
                newImport("org.omg.CORBA.WStringSeqHelper.read", true),
                newImport("org.omg.CORBA.WStringValueHelper.read", true),
                newImport("org.omg.CORBA.WrongTransactionHelper.read", true),
                newImport("org.omg.CosNaming.BindingHelper.read", true),
                newImport("org.omg.CosNaming.BindingIteratorHelper.read", true),
                newImport("org.omg.CosNaming.BindingListHelper.read", true),
                newImport("org.omg.CosNaming.BindingTypeHelper.read", true),
                newImport("org.omg.CosNaming.IstringHelper.read", true),
                newImport("org.omg.CosNaming.NameComponentHelper.read", true),
                newImport("org.omg.CosNaming.NameHelper.read", true),
                newImport("org.omg.CosNaming.NamingContextExtHelper.read", true),
                newImport("org.omg.CosNaming.NamingContextHelper.read", true),
                newImport("org.omg.CosNaming.NamingContextExtPackage.AddressHelper.read", true),
                newImport(
                    "org.omg.CosNaming.NamingContextExtPackage.InvalidAddressHelper.read", true),
                newImport("org.omg.CosNaming.NamingContextExtPackage.StringNameHelper.read", true),
                newImport("org.omg.CosNaming.NamingContextExtPackage.URLStringHelper.read", true),
                newImport("org.omg.CosNaming.NamingContextPackage.AlreadyBoundHelper.read", true),
                newImport("org.omg.CosNaming.NamingContextPackage.CannotProceedHelper.read", true),
                newImport("org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.read", true),
                newImport("org.omg.CosNaming.NamingContextPackage.NotEmptyHelper.read", true),
                newImport("org.omg.CosNaming.NamingContextPackage.NotFoundHelper.read", true),
                newImport("org.omg.CosNaming.NamingContextPackage.NotFoundReasonHelper.read", true),
                newImport("org.omg.DynamicAny.AnySeqHelper.read", true),
                newImport("org.omg.DynamicAny.DynAnyFactoryHelper.read", true),
                newImport("org.omg.DynamicAny.DynAnyHelper.read", true),
                newImport("org.omg.DynamicAny.DynAnySeqHelper.read", true),
                newImport("org.omg.DynamicAny.DynArrayHelper.read", true),
                newImport("org.omg.DynamicAny.DynEnumHelper.read", true),
                newImport("org.omg.DynamicAny.DynFixedHelper.read", true),
                newImport("org.omg.DynamicAny.DynSequenceHelper.read", true),
                newImport("org.omg.DynamicAny.DynStructHelper.read", true),
                newImport("org.omg.DynamicAny.DynUnionHelper.read", true),
                newImport("org.omg.DynamicAny.DynValueHelper.read", true),
                newImport("org.omg.DynamicAny.FieldNameHelper.read", true),
                newImport("org.omg.DynamicAny.NameDynAnyPairHelper.read", true),
                newImport("org.omg.DynamicAny.NameDynAnyPairSeqHelper.read", true),
                newImport("org.omg.DynamicAny.NameValuePairHelper.read", true),
                newImport("org.omg.DynamicAny.NameValuePairSeqHelper.read", true),
                newImport(
                    "org.omg.DynamicAny.DynAnyFactoryPackage.InconsistentTypeCodeHelper.read",
                    true),
                newImport("org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.read", true),
                newImport("org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.read", true),
                newImport("org.omg.IOP.CodecFactoryHelper.read", true),
                newImport("org.omg.IOP.ComponentIdHelper.read", true),
                newImport("org.omg.IOP.IORHelper.read", true),
                newImport("org.omg.IOP.MultipleComponentProfileHelper.read", true),
                newImport("org.omg.IOP.ProfileIdHelper.read", true),
                newImport("org.omg.IOP.ServiceContextHelper.read", true),
                newImport("org.omg.IOP.ServiceContextListHelper.read", true),
                newImport("org.omg.IOP.ServiceIdHelper.read", true),
                newImport("org.omg.IOP.TaggedComponentHelper.read", true),
                newImport("org.omg.IOP.TaggedProfileHelper.read", true),
                newImport("org.omg.IOP.CodecFactoryPackage.UnknownEncodingHelper.read", true),
                newImport("org.omg.IOP.CodecPackage.FormatMismatchHelper.read", true),
                newImport("org.omg.IOP.CodecPackage.InvalidTypeForEncodingHelper.read", true),
                newImport("org.omg.IOP.CodecPackage.TypeMismatchHelper.read", true),
                newImport("org.omg.Messaging.SyncScopeHelper.read", true),
                newImport("org.omg.PortableInterceptor.AdapterManagerIdHelper.read", true),
                newImport("org.omg.PortableInterceptor.AdapterNameHelper.read", true),
                newImport("org.omg.PortableInterceptor.AdapterStateHelper.read", true),
                newImport("org.omg.PortableInterceptor.CurrentHelper.read", true),
                newImport("org.omg.PortableInterceptor.ForwardRequestHelper.read", true),
                newImport("org.omg.PortableInterceptor.IORInterceptor_3_0Helper.read", true),
                newImport("org.omg.PortableInterceptor.InvalidSlotHelper.read", true),
                newImport("org.omg.PortableInterceptor.ORBIdHelper.read", true),
                newImport("org.omg.PortableInterceptor.ObjectIdHelper.read", true),
                newImport("org.omg.PortableInterceptor.ObjectReferenceFactoryHelper.read", true),
                newImport("org.omg.PortableInterceptor.ObjectReferenceTemplateHelper.read", true),
                newImport(
                    "org.omg.PortableInterceptor.ObjectReferenceTemplateSeqHelper.read", true),
                newImport("org.omg.PortableInterceptor.ServerIdHelper.read", true),
                newImport(
                    "org.omg.PortableInterceptor.ORBInitInfoPackage.DuplicateNameHelper.read",
                    true),
                newImport(
                    "org.omg.PortableInterceptor.ORBInitInfoPackage.InvalidNameHelper.read", true),
                newImport(
                    "org.omg.PortableInterceptor.ORBInitInfoPackage.ObjectIdHelper.read", true),
                newImport("org.omg.PortableServer.CurrentHelper.read", true),
                newImport("org.omg.PortableServer.ForwardRequestHelper.read", true),
                newImport("org.omg.PortableServer.POAHelper.read", true),
                newImport("org.omg.PortableServer.ServantActivatorHelper.read", true),
                newImport("org.omg.PortableServer.ServantLocatorHelper.read", true),
                newImport("org.omg.PortableServer.CurrentPackage.NoContextHelper.read", true),
                newImport(
                    "org.omg.PortableServer.POAManagerPackage.AdapterInactiveHelper.read", true),
                newImport(
                    "org.omg.PortableServer.POAPackage.AdapterAlreadyExistsHelper.read", true),
                newImport("org.omg.PortableServer.POAPackage.AdapterNonExistentHelper.read", true),
                newImport("org.omg.PortableServer.POAPackage.InvalidPolicyHelper.read", true),
                newImport("org.omg.PortableServer.POAPackage.NoServantHelper.read", true),
                newImport("org.omg.PortableServer.POAPackage.ObjectAlreadyActiveHelper.read", true),
                newImport("org.omg.PortableServer.POAPackage.ObjectNotActiveHelper.read", true),
                newImport(
                    "org.omg.PortableServer.POAPackage.ServantAlreadyActiveHelper.read", true),
                newImport("org.omg.PortableServer.POAPackage.ServantNotActiveHelper.read", true),
                newImport("org.omg.PortableServer.POAPackage.WrongAdapterHelper.read", true),
                newImport("org.omg.PortableServer.POAPackage.WrongPolicyHelper.read", true),
              })
          .put(
              new Identifier("NORTH_WEST"),
              new Import[] {
                newImport("javax.swing.SwingConstants.NORTH_WEST", true),
              })
          .put(
              new Identifier("newSingleThreadScheduledExecutor"),
              new Import[] {
                newImport("java.util.concurrent.Executors.newSingleThreadScheduledExecutor", true),
              })
          .put(
              new Identifier("DropTargetEvent"),
              new Import[] {
                newImport("java.awt.dnd.DropTargetEvent", false),
              })
          .put(
              new Identifier("acos"),
              new Import[] {
                newImport("java.lang.Math.acos", true),
                newImport("java.lang.StrictMath.acos", true),
              })
          .put(
              new Identifier("orFilter"),
              new Import[] {
                newImport("javax.swing.RowFilter.orFilter", true),
              })
          .put(
              new Identifier("KAYAH_LI"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.KAYAH_LI", true),
              })
          .put(
              new Identifier("getUI"),
              new Import[] {
                newImport("javax.swing.UIManager.getUI", true),
              })
          .put(
              new Identifier("SQLXML"),
              new Import[] {
                newImport("java.sql.SQLXML", false), newImport("java.sql.Types.SQLXML", true),
              })
          .put(
              new Identifier("BLOCK_DECREMENT"),
              new Import[] {
                newImport("java.awt.event.AdjustmentEvent.BLOCK_DECREMENT", true),
              })
          .put(
              new Identifier("IsoEra"),
              new Import[] {
                newImport("java.time.chrono.IsoEra", false),
              })
          .put(
              new Identifier("RSAPrivateKey"),
              new Import[] {
                newImport("java.security.interfaces.RSAPrivateKey", false),
              })
          .put(
              new Identifier("CONNECTOR_PUNCTUATION"),
              new Import[] {
                newImport("java.lang.Character.CONNECTOR_PUNCTUATION", true),
              })
          .put(
              new Identifier("RSAOtherPrimeInfo"),
              new Import[] {
                newImport("java.security.spec.RSAOtherPrimeInfo", false),
              })
          .put(
              new Identifier("typeNoNulls"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.typeNoNulls", true),
              })
          .put(
              new Identifier("BidiLevel"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.BidiLevel", true),
              })
          .put(
              new Identifier("LinkedBlockingDeque"),
              new Import[] {
                newImport("java.util.concurrent.LinkedBlockingDeque", false),
              })
          .put(
              new Identifier("ABOVE_BASELINE"),
              new Import[] {
                newImport("java.awt.GridBagConstraints.ABOVE_BASELINE", true),
              })
          .put(
              new Identifier("DataOutputStream"),
              new Import[] {
                newImport("java.io.DataOutputStream", false),
                newImport("org.omg.CORBA.DataOutputStream", false),
              })
          .put(
              new Identifier("IllegalPathStateException"),
              new Import[] {
                newImport("java.awt.geom.IllegalPathStateException", false),
              })
          .put(
              new Identifier("SQLSyntaxErrorException"),
              new Import[] {
                newImport("java.sql.SQLSyntaxErrorException", false),
              })
          .put(
              new Identifier("InvalidTransactionException"),
              new Import[] {
                newImport("javax.transaction.InvalidTransactionException", false),
              })
          .put(
              new Identifier("icSigYxyData"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigYxyData", true),
              })
          .put(
              new Identifier("UndoableEditListener"),
              new Import[] {
                newImport("javax.swing.event.UndoableEditListener", false),
              })
          .put(
              new Identifier("JPEGHuffmanTable"),
              new Import[] {
                newImport("javax.imageio.plugins.jpeg.JPEGHuffmanTable", false),
              })
          .put(
              new Identifier("Format"),
              new Import[] {
                newImport("java.text.Format", false),
              })
          .put(
              new Identifier("ActiveValue"),
              new Import[] {
                newImport("javax.swing.UIDefaults.ActiveValue", false),
              })
          .put(
              new Identifier("XA_HEURRB"),
              new Import[] {
                newImport("javax.transaction.xa.XAException.XA_HEURRB", true),
              })
          .put(
              new Identifier("parsedLeapSecond"),
              new Import[] {
                newImport("java.time.format.DateTimeFormatter.parsedLeapSecond", true),
              })
          .put(
              new Identifier("ClassLoader"),
              new Import[] {
                newImport("java.lang.ClassLoader", false),
              })
          .put(
              new Identifier("getFileNameMap"),
              new Import[] {
                newImport("java.net.URLConnection.getFileNameMap", true),
              })
          .put(
              new Identifier("OUT_LEFT"),
              new Import[] {
                newImport("java.awt.geom.Rectangle2D.OUT_LEFT", true),
              })
          .put(
              new Identifier("attr"),
              new Import[] {
                newImport("javax.management.Query.attr", true),
              })
          .put(
              new Identifier("JAXB_NO_NAMESPACE_SCHEMA_LOCATION"),
              new Import[] {
                newImport("javax.xml.bind.Marshaller.JAXB_NO_NAMESPACE_SCHEMA_LOCATION", true),
              })
          .put(
              new Identifier("PATH_INFO"),
              new Import[] {
                newImport("javax.xml.ws.handler.MessageContext.PATH_INFO", true),
              })
          .put(
              new Identifier("ResolveResult"),
              new Import[] {
                newImport("javax.naming.spi.ResolveResult", false),
              })
          .put(
              new Identifier("PrincipalHolder"),
              new Import[] {
                newImport("org.omg.CORBA.PrincipalHolder", false),
              })
          .put(
              new Identifier("FONT_FAMILY"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.FONT_FAMILY", true),
              })
          .put(
              new Identifier("CLASSID"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.CLASSID", true),
              })
          .put(
              new Identifier("PROCESSING_TO_STOP_POINT"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.JobStateReason.PROCESSING_TO_STOP_POINT", true),
              })
          .put(
              new Identifier("getTextFieldBorder"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicBorders.getTextFieldBorder", true),
                newImport("javax.swing.plaf.metal.MetalBorders.getTextFieldBorder", true),
              })
          .put(
              new Identifier("OGHAM"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.OGHAM", true),
              })
          .put(
              new Identifier("VK_INPUT_METHOD_ON_OFF"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_INPUT_METHOD_ON_OFF", true),
              })
          .put(
              new Identifier("CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT"),
              new Import[] {
                newImport(
                    "java.lang.Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT",
                    true),
              })
          .put(
              new Identifier("INTERNAL_FRAME_CLOSED"),
              new Import[] {
                newImport("javax.swing.event.InternalFrameEvent.INTERNAL_FRAME_CLOSED", true),
              })
          .put(
              new Identifier("FILE_VIEW_CHANGED_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JFileChooser.FILE_VIEW_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("getAvailableIDs"),
              new Import[] {
                newImport("java.util.TimeZone.getAvailableIDs", true),
              })
          .put(
              new Identifier("Manifest"),
              new Import[] {
                newImport("java.util.jar.Manifest", false),
                newImport("javax.xml.crypto.dsig.Manifest", false),
              })
          .put(
              new Identifier("XA_HEURCOM"),
              new Import[] {
                newImport("javax.transaction.xa.XAException.XA_HEURCOM", true),
              })
          .put(
              new Identifier("FLAG_SERIALIZABLE"),
              new Import[] {
                newImport("java.lang.invoke.LambdaMetafactory.FLAG_SERIALIZABLE", true),
              })
          .put(
              new Identifier("HIERARCHY_EVENT_MASK"),
              new Import[] {
                newImport("java.awt.AWTEvent.HIERARCHY_EVENT_MASK", true),
              })
          .put(
              new Identifier("adjustSizes"),
              new Import[] {
                newImport("javax.swing.SizeRequirements.adjustSizes", true),
              })
          .put(
              new Identifier("toStub"),
              new Import[] {
                newImport("java.rmi.server.RemoteObject.toStub", true),
                newImport("javax.rmi.PortableRemoteObject.toStub", true),
              })
          .put(
              new Identifier("getCompilationMXBean"),
              new Import[] {
                newImport("java.lang.management.ManagementFactory.getCompilationMXBean", true),
              })
          .put(
              new Identifier("LSException"),
              new Import[] {
                newImport("org.w3c.dom.ls.LSException", false),
              })
          .build();
}
