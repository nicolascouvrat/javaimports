// Code generated by GenerateStdlib.java. DO NOT EDIT.
package com.nikodoko.javaimports.stdlib.internal.api.v8;

import static com.nikodoko.javaimports.stdlib.internal.Stdlib.newImport;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.common.Identifier;
import com.nikodoko.javaimports.common.Import;
import java.util.Map;

public class Java8StdlibChunk11 {
  static final Map<Identifier, Import[]> CLASSES =
      new ImmutableMap.Builder<Identifier, Import[]>()
          .put(
              new Identifier("ListEditor"),
              new Import[] {
                newImport("javax.swing.JSpinner.ListEditor", false),
              })
          .put(
              new Identifier("BUFFERED_OPTION"),
              new Import[] {
                newImport("javax.swing.DebugGraphics.BUFFERED_OPTION", true),
              })
          .put(
              new Identifier("BorderUIResource"),
              new Import[] {
                newImport("javax.swing.plaf.BorderUIResource", false),
              })
          .put(
              new Identifier("NoServant"),
              new Import[] {
                newImport("org.omg.PortableServer.POAPackage.NoServant", false),
              })
          .put(
              new Identifier("String"),
              new Import[] {
                newImport("java.lang.String", false),
              })
          .put(
              new Identifier("NO_SYNC"),
              new Import[] {
                newImport("javax.sound.midi.Sequencer.SyncMode.NO_SYNC", true),
              })
          .put(
              new Identifier("_tk_union"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind._tk_union", true),
              })
          .put(
              new Identifier("TaggedComponentHolder"),
              new Import[] {
                newImport("org.omg.IOP.TaggedComponentHolder", false),
              })
          .put(
              new Identifier("Runtime"),
              new Import[] {
                newImport("java.lang.Runtime", false),
              })
          .put(
              new Identifier("JMXConnector"),
              new Import[] {
                newImport("javax.management.remote.JMXConnector", false),
              })
          .put(
              new Identifier("ListCellRenderer"),
              new Import[] {
                newImport("javax.swing.ListCellRenderer", false),
              })
          .put(
              new Identifier("ImageInputStreamImpl"),
              new Import[] {
                newImport("javax.imageio.stream.ImageInputStreamImpl", false),
              })
          .put(
              new Identifier("NOFRAMES"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.NOFRAMES", true),
              })
          .put(
              new Identifier("DoubleUnaryOperator"),
              new Import[] {
                newImport("java.util.function.DoubleUnaryOperator", false),
              })
          .put(
              new Identifier("WEIGHT_HEAVY"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.WEIGHT_HEAVY", true),
              })
          .put(
              new Identifier("LOWSRC"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.LOWSRC", true),
              })
          .put(
              new Identifier("toUnicode"),
              new Import[] {
                newImport("java.net.IDN.toUnicode", true),
              })
          .put(
              new Identifier("LEFT"),
              new Import[] {
                newImport("java.awt.Event.LEFT", true),
                newImport("java.awt.FlowLayout.LEFT", true),
                newImport("java.awt.Label.LEFT", true),
                newImport("javax.swing.JSplitPane.LEFT", true),
                newImport("javax.swing.SwingConstants.LEFT", true),
                newImport("javax.swing.border.TitledBorder.LEFT", true),
              })
          .put(
              new Identifier("SIZE"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.SIZE", true),
                newImport("java.lang.Byte.SIZE", true),
                newImport("java.lang.Character.SIZE", true),
                newImport("java.lang.Double.SIZE", true),
                newImport("java.lang.Float.SIZE", true),
                newImport("java.lang.Integer.SIZE", true),
                newImport("java.lang.Long.SIZE", true),
                newImport("java.lang.Short.SIZE", true),
                newImport("javax.swing.text.html.HTML.Attribute.SIZE", true),
              })
          .put(
              new Identifier("AclEntryPermission"),
              new Import[] {
                newImport("java.nio.file.attribute.AclEntryPermission", false),
              })
          .put(
              new Identifier("concat"),
              new Import[] {
                newImport("java.util.stream.DoubleStream.concat", true),
                newImport("java.util.stream.IntStream.concat", true),
                newImport("java.util.stream.LongStream.concat", true),
                newImport("java.util.stream.Stream.concat", true),
              })
          .put(
              new Identifier("_NamingContextStub"),
              new Import[] {
                newImport("org.omg.CosNaming._NamingContextStub", false),
              })
          .put(
              new Identifier("toBinaryString"),
              new Import[] {
                newImport("java.lang.Integer.toBinaryString", true),
                newImport("java.lang.Long.toBinaryString", true),
              })
          .put(
              new Identifier("Xor"),
              new Import[] {
                newImport("java.awt.AlphaComposite.Xor", true),
              })
          .put(
              new Identifier("INUSE_ATTRIBUTE_ERR"),
              new Import[] {
                newImport("org.w3c.dom.DOMException.INUSE_ATTRIBUTE_ERR", true),
              })
          .put(
              new Identifier("Clob"),
              new Import[] {
                newImport("java.sql.Clob", false),
              })
          .put(
              new Identifier("newChannel"),
              new Import[] {
                newImport("java.nio.channels.Channels.newChannel", true),
              })
          .put(
              new Identifier("MBeanFeatureInfo"),
              new Import[] {
                newImport("javax.management.MBeanFeatureInfo", false),
              })
          .put(
              new Identifier("BOPOMOFO_EXTENDED"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.BOPOMOFO_EXTENDED", true),
              })
          .put(
              new Identifier("emptySet"),
              new Import[] {
                newImport("java.util.Collections.emptySet", true),
              })
          .put(
              new Identifier("COVER"),
              new Import[] {
                newImport("javax.print.attribute.standard.Finishings.COVER", true),
              })
          .put(
              new Identifier("MultiButtonUI"),
              new Import[] {
                newImport("javax.swing.plaf.multi.MultiButtonUI", false),
              })
          .put(
              new Identifier("getAllStackTraces"),
              new Import[] {
                newImport("java.lang.Thread.getAllStackTraces", true),
              })
          .put(
              new Identifier("getNumericValue"),
              new Import[] {
                newImport("java.lang.Character.getNumericValue", true),
              })
          .put(
              new Identifier("HTTP_ACCEPTED"),
              new Import[] {
                newImport("java.net.HttpURLConnection.HTTP_ACCEPTED", true),
              })
          .put(
              new Identifier("ScriptContext"),
              new Import[] {
                newImport("javax.script.ScriptContext", false),
              })
          .put(
              new Identifier("JPEG"),
              new Import[] {
                newImport("javax.print.DocFlavor.BYTE_ARRAY.JPEG", true),
                newImport("javax.print.DocFlavor.INPUT_STREAM.JPEG", true),
                newImport("javax.print.DocFlavor.URL.JPEG", true),
              })
          .put(
              new Identifier("isWritable"),
              new Import[] {
                newImport("java.nio.file.Files.isWritable", true),
              })
          .put(
              new Identifier("runAsync"),
              new Import[] {
                newImport("java.util.concurrent.CompletableFuture.runAsync", true),
              })
          .put(
              new Identifier("SMALL"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.SMALL", true),
              })
          .put(
              new Identifier("createRigidArea"),
              new Import[] {
                newImport("javax.swing.Box.createRigidArea", true),
              })
          .put(
              new Identifier("AttributesImpl"),
              new Import[] {
                newImport("org.xml.sax.helpers.AttributesImpl", false),
              })
          .put(
              new Identifier("LIST_SELECT"),
              new Import[] {
                newImport("java.awt.Event.LIST_SELECT", true),
              })
          .put(
              new Identifier("HTTP_BAD_METHOD"),
              new Import[] {
                newImport("java.net.HttpURLConnection.HTTP_BAD_METHOD", true),
              })
          .put(
              new Identifier("StandardJavaFileManager"),
              new Import[] {
                newImport("javax.tools.StandardJavaFileManager", false),
              })
          .put(
              new Identifier("getLogWriter"),
              new Import[] {
                newImport("java.sql.DriverManager.getLogWriter", true),
              })
          .put(
              new Identifier("EXPONENT_SYMBOL"),
              new Import[] {
                newImport("java.text.NumberFormat.Field.EXPONENT_SYMBOL", true),
              })
          .put(
              new Identifier("Path"),
              new Import[] {
                newImport("java.nio.file.Path", false),
              })
          .put(
              new Identifier("OperationNotSupportedException"),
              new Import[] {
                newImport("javax.naming.OperationNotSupportedException", false),
              })
          .put(
              new Identifier("ActionMap"),
              new Import[] {
                newImport("javax.swing.ActionMap", false),
              })
          .put(
              new Identifier("NamingContextOperations"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextOperations", false),
              })
          .put(
              new Identifier("Hashtable"),
              new Import[] {
                newImport("java.util.Hashtable", false),
              })
          .put(
              new Identifier("getMidiFileTypes"),
              new Import[] {
                newImport("javax.sound.midi.MidiSystem.getMidiFileTypes", true),
              })
          .put(
              new Identifier("_tk_enum"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind._tk_enum", true),
              })
          .put(
              new Identifier("JMXServerErrorException"),
              new Import[] {
                newImport("javax.management.remote.JMXServerErrorException", false),
              })
          .put(
              new Identifier("CRLReason"),
              new Import[] {
                newImport("java.security.cert.CRLReason", false),
              })
          .put(
              new Identifier("createPackedRaster"),
              new Import[] {
                newImport("java.awt.image.Raster.createPackedRaster", true),
              })
          .put(
              new Identifier("MAX_PRIORITY"),
              new Import[] {
                newImport("java.lang.Thread.MAX_PRIORITY", true),
              })
          .put(
              new Identifier("UnionMember"),
              new Import[] {
                newImport("org.omg.CORBA.UnionMember", false),
              })
          .put(
              new Identifier("ParserCallback"),
              new Import[] {
                newImport("javax.swing.text.html.HTMLEditorKit.ParserCallback", false),
              })
          .put(
              new Identifier("NameComponentHelper"),
              new Import[] {
                newImport("org.omg.CosNaming.NameComponentHelper", false),
              })
          .put(
              new Identifier("TabSet"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.TabSet", true),
                newImport("javax.swing.text.TabSet", false),
              })
          .put(
              new Identifier("isNull"),
              new Import[] {
                newImport("java.util.Objects.isNull", true),
              })
          .put(
              new Identifier("TemporalAdjusters"),
              new Import[] {
                newImport("java.time.temporal.TemporalAdjusters", false),
              })
          .put(
              new Identifier("Socket"),
              new Import[] {
                newImport("java.net.Socket", false),
              })
          .put(
              new Identifier("getTransmitter"),
              new Import[] {
                newImport("javax.sound.midi.MidiSystem.getTransmitter", true),
              })
          .put(
              new Identifier("InternalFrameListener"),
              new Import[] {
                newImport("javax.swing.event.InternalFrameListener", false),
              })
          .put(
              new Identifier("getName"),
              new Import[] {
                newImport("java.lang.Character.getName", true),
              })
          .put(
              new Identifier("AuthenticationException"),
              new Import[] {
                newImport("javax.naming.AuthenticationException", false),
                newImport("javax.security.sasl.AuthenticationException", false),
              })
          .put(
              new Identifier("VK_BEGIN"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_BEGIN", true),
              })
          .put(
              new Identifier("MODIFIER_LETTER"),
              new Import[] {
                newImport("java.lang.Character.MODIFIER_LETTER", true),
              })
          .put(
              new Identifier("VK_DEAD_BREVE"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_DEAD_BREVE", true),
              })
          .put(
              new Identifier("UNSEQ_TOKEN"),
              new Import[] {
                newImport("org.ietf.jgss.GSSException.UNSEQ_TOKEN", true),
              })
          .put(
              new Identifier("DefaultMenuLayout"),
              new Import[] {
                newImport("javax.swing.plaf.basic.DefaultMenuLayout", false),
              })
          .put(
              new Identifier("Servant"),
              new Import[] {
                newImport("org.omg.PortableServer.Servant", false),
              })
          .put(
              new Identifier("PrintJobListener"),
              new Import[] {
                newImport("javax.print.event.PrintJobListener", false),
              })
          .put(
              new Identifier("NA_9X11_ENVELOPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.NA_9X11_ENVELOPE", true),
                newImport("javax.print.attribute.standard.MediaSizeName.NA_9X11_ENVELOPE", true),
              })
          .put(
              new Identifier("X509CRLEntry"),
              new Import[] {
                newImport("java.security.cert.X509CRLEntry", false),
              })
          .put(
              new Identifier("CONTAINER_EVENT_MASK"),
              new Import[] {
                newImport("java.awt.AWTEvent.CONTAINER_EVENT_MASK", true),
              })
          .put(
              new Identifier("ServerRequestInfoOperations"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.ServerRequestInfoOperations", false),
              })
          .put(
              new Identifier("SCROLL_PAGE_UP"),
              new Import[] {
                newImport("java.awt.Event.SCROLL_PAGE_UP", true),
              })
          .put(
              new Identifier("TYPE_FLIP"),
              new Import[] {
                newImport("java.awt.geom.AffineTransform.TYPE_FLIP", true),
              })
          .put(
              new Identifier("getPasteAction"),
              new Import[] {
                newImport("javax.swing.TransferHandler.getPasteAction", true),
              })
          .put(
              new Identifier("TYPE_XYZ"),
              new Import[] {
                newImport("java.awt.color.ColorSpace.TYPE_XYZ", true),
              })
          .put(
              new Identifier("HTTP_ENTITY_TOO_LARGE"),
              new Import[] {
                newImport("java.net.HttpURLConnection.HTTP_ENTITY_TOO_LARGE", true),
              })
          .put(
              new Identifier("tk_sequence"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind.tk_sequence", true),
              })
          .put(
              new Identifier("MenuBarBorder"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicBorders.MenuBarBorder", false),
                newImport("javax.swing.plaf.metal.MetalBorders.MenuBarBorder", false),
              })
          .put(
              new Identifier("MidiMessage"),
              new Import[] {
                newImport("javax.sound.midi.MidiMessage", false),
              })
          .put(
              new Identifier("ServerError"),
              new Import[] {
                newImport("java.rmi.ServerError", false),
              })
          .put(
              new Identifier("Canvas"),
              new Import[] {
                newImport("java.awt.Canvas", false),
              })
          .put(
              new Identifier("DesktopPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.DesktopPaneUI", false),
              })
          .put(
              new Identifier("linesIntersect"),
              new Import[] {
                newImport("java.awt.geom.Line2D.linesIntersect", true),
              })
          .put(
              new Identifier("_tk_alias"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind._tk_alias", true),
              })
          .put(
              new Identifier("NoSuchMechanismException"),
              new Import[] {
                newImport("javax.xml.crypto.NoSuchMechanismException", false),
              })
          .put(
              new Identifier("StAXSource"),
              new Import[] {
                newImport("javax.xml.transform.stax.StAXSource", false),
              })
          .put(
              new Identifier("WEEK_BASED_YEARS"),
              new Import[] {
                newImport("java.time.temporal.IsoFields.WEEK_BASED_YEARS", true),
                newImport("java.time.temporal.WeekFields.WEEK_BASED_YEARS", true),
              })
          .put(
              new Identifier("DocumentEvent"),
              new Import[] {
                newImport("javax.swing.event.DocumentEvent", false),
                newImport("org.w3c.dom.events.DocumentEvent", false),
              })
          .put(
              new Identifier("WARNING"),
              new Import[] {
                newImport("java.util.logging.Level.WARNING", true),
                newImport("javax.print.attribute.standard.Severity.WARNING", true),
                newImport("javax.security.auth.callback.ConfirmationCallback.WARNING", true),
                newImport("javax.security.auth.callback.TextOutputCallback.WARNING", true),
                newImport("javax.xml.bind.ValidationEvent.WARNING", true),
              })
          .put(
              new Identifier("BOOLEAN"),
              new Import[] {
                newImport("java.sql.Types.BOOLEAN", true),
                newImport("javax.management.openmbean.SimpleType.BOOLEAN", true),
                newImport("javax.xml.xpath.XPathConstants.BOOLEAN", true),
              })
          .put(
              new Identifier("EXTCRC"),
              new Import[] {
                newImport("java.util.jar.JarEntry.EXTCRC", true),
                newImport("java.util.jar.JarFile.EXTCRC", true),
                newImport("java.util.jar.JarInputStream.EXTCRC", true),
                newImport("java.util.jar.JarOutputStream.EXTCRC", true),
                newImport("java.util.zip.ZipEntry.EXTCRC", true),
                newImport("java.util.zip.ZipFile.EXTCRC", true),
                newImport("java.util.zip.ZipInputStream.EXTCRC", true),
                newImport("java.util.zip.ZipOutputStream.EXTCRC", true),
              })
          .put(
              new Identifier("CompositeDataView"),
              new Import[] {
                newImport("javax.management.openmbean.CompositeDataView", false),
              })
          .put(
              new Identifier("Stack"),
              new Import[] {
                newImport("java.util.Stack", false),
              })
          .put(
              new Identifier("MultiDesktopPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.multi.MultiDesktopPaneUI", false),
              })
          .put(
              new Identifier("Responses"),
              new Import[] {
                newImport("javax.xml.ws.soap.AddressingFeature.Responses", false),
              })
          .put(
              new Identifier("FILE_VERSION"),
              new Import[] {
                newImport("javax.swing.text.html.parser.DTD.FILE_VERSION", true),
              })
          .put(
              new Identifier("dk_Value"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind.dk_Value", true),
              })
          .put(
              new Identifier("BORDER_TOP_WIDTH"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.BORDER_TOP_WIDTH", true),
              })
          .put(
              new Identifier("LongSeqHelper"),
              new Import[] {
                newImport("org.omg.CORBA.LongSeqHelper", false),
              })
          .put(
              new Identifier("CharacterData"),
              new Import[] {
                newImport("org.w3c.dom.CharacterData", false),
              })
          .put(
              new Identifier("TabularDataSupport"),
              new Import[] {
                newImport("javax.management.openmbean.TabularDataSupport", false),
              })
          .put(
              new Identifier("getAccessibleChild"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.getAccessibleChild", true),
              })
          .put(
              new Identifier("INFORMATION_MESSAGE"),
              new Import[] {
                newImport("javax.swing.JOptionPane.INFORMATION_MESSAGE", true),
              })
          .put(
              new Identifier("logicalXor"),
              new Import[] {
                newImport("java.lang.Boolean.logicalXor", true),
              })
          .put(
              new Identifier("ISO_8859_1"),
              new Import[] {
                newImport("java.nio.charset.StandardCharsets.ISO_8859_1", true),
              })
          .put(
              new Identifier("DataBindingException"),
              new Import[] {
                newImport("javax.xml.bind.DataBindingException", false),
              })
          .put(
              new Identifier("TRANSIENT"),
              new Import[] {
                newImport("java.lang.reflect.Modifier.TRANSIENT", true),
                newImport("javax.accessibility.AccessibleState.TRANSIENT", true),
                newImport("org.omg.CORBA.TRANSIENT", false),
                newImport("org.omg.PortableServer.LifespanPolicyValue.TRANSIENT", true),
              })
          .put(
              new Identifier("Border"),
              new Import[] {
                newImport("javax.swing.border.Border", false),
              })
          .put(
              new Identifier("SC_WRITE_METHOD"),
              new Import[] {
                newImport("java.io.ObjectStreamConstants.SC_WRITE_METHOD", true),
              })
          .put(
              new Identifier("NameValuePairSeqHelper"),
              new Import[] {
                newImport("org.omg.DynamicAny.NameValuePairSeqHelper", false),
              })
          .put(
              new Identifier("ActivationInstantiator"),
              new Import[] {
                newImport("java.rmi.activation.ActivationInstantiator", false),
              })
          .put(
              new Identifier("YES"),
              new Import[] {
                newImport("javax.security.auth.callback.ConfirmationCallback.YES", true),
              })
          .put(
              new Identifier("Bias"),
              new Import[] {
                newImport("javax.swing.text.Position.Bias", false),
              })
          .put(
              new Identifier("SOAP_MUSTUNDERSTAND_FAULT"),
              new Import[] {
                newImport("javax.xml.soap.SOAPConstants.SOAP_MUSTUNDERSTAND_FAULT", true),
              })
          .put(
              new Identifier("Properties"),
              new Import[] {
                newImport("java.util.Properties", false),
              })
          .put(
              new Identifier("FOCUSED"),
              new Import[] {
                newImport("javax.accessibility.AccessibleState.FOCUSED", true),
                newImport("javax.swing.plaf.synth.SynthConstants.FOCUSED", true),
              })
          .put(
              new Identifier("CANONICAL_DECOMPOSITION"),
              new Import[] {
                newImport("java.text.Collator.CANONICAL_DECOMPOSITION", true),
              })
          .put(
              new Identifier("HIDE_ON_CLOSE"),
              new Import[] {
                newImport("javax.swing.WindowConstants.HIDE_ON_CLOSE", true),
              })
          .put(
              new Identifier("ListDataEvent"),
              new Import[] {
                newImport("javax.swing.event.ListDataEvent", false),
              })
          .put(
              new Identifier("CharacterConstants"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.CharacterConstants", false),
              })
          .put(
              new Identifier("DoubleAdder"),
              new Import[] {
                newImport("java.util.concurrent.atomic.DoubleAdder", false),
              })
          .put(
              new Identifier("ImageFilter"),
              new Import[] {
                newImport("java.awt.image.ImageFilter", false),
              })
          .put(
              new Identifier("AbstractQueuedLongSynchronizer"),
              new Import[] {
                newImport("java.util.concurrent.locks.AbstractQueuedLongSynchronizer", false),
              })
          .put(
              new Identifier("icSigYCbCrData"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigYCbCrData", true),
              })
          .put(
              new Identifier("FileReader"),
              new Import[] {
                newImport("java.io.FileReader", false),
              })
          .put(
              new Identifier("SyncMode"),
              new Import[] {
                newImport("javax.sound.midi.Sequencer.SyncMode", false),
              })
          .put(
              new Identifier("SkeletonNotFoundException"),
              new Import[] {
                newImport("java.rmi.server.SkeletonNotFoundException", false),
              })
          .put(
              new Identifier("ConcurrentSkipListMap"),
              new Import[] {
                newImport("java.util.concurrent.ConcurrentSkipListMap", false),
              })
          .put(
              new Identifier("CENTER_ALIGNMENT"),
              new Import[] {
                newImport("java.awt.Component.CENTER_ALIGNMENT", true),
              })
          .put(
              new Identifier("getImageWritersBySuffix"),
              new Import[] {
                newImport("javax.imageio.ImageIO.getImageWritersBySuffix", true),
              })
          .put(
              new Identifier("firstDayOfMonth"),
              new Import[] {
                newImport("java.time.temporal.TemporalAdjusters.firstDayOfMonth", true),
              })
          .put(
              new Identifier("SOAPFaultException"),
              new Import[] {
                newImport("javax.xml.ws.soap.SOAPFaultException", false),
              })
          .put(
              new Identifier("AdapterNonExistent"),
              new Import[] {
                newImport("org.omg.PortableServer.POAPackage.AdapterNonExistent", false),
              })
          .put(
              new Identifier("DefaultFormatterFactory"),
              new Import[] {
                newImport("javax.swing.text.DefaultFormatterFactory", false),
              })
          .put(
              new Identifier("removeKeymap"),
              new Import[] {
                newImport("javax.swing.text.JTextComponent.removeKeymap", true),
              })
          .put(
              new Identifier("BOPOMOFO"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.BOPOMOFO", true),
              })
          .put(
              new Identifier("InvalidAddress"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextExtPackage.InvalidAddress", false),
              })
          .put(
              new Identifier("HierarchyEvent"),
              new Import[] {
                newImport("java.awt.event.HierarchyEvent", false),
              })
          .put(
              new Identifier("PAGE_END"),
              new Import[] {
                newImport("java.awt.BorderLayout.PAGE_END", true),
                newImport("java.awt.GridBagConstraints.PAGE_END", true),
              })
          .put(
              new Identifier("VALUE_DITHER_DISABLE"),
              new Import[] {
                newImport("java.awt.RenderingHints.VALUE_DITHER_DISABLE", true),
              })
          .put(
              new Identifier("getLocalGraphicsEnvironment"),
              new Import[] {
                newImport("java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment", true),
              })
          .put(
              new Identifier("CoderResult"),
              new Import[] {
                newImport("java.nio.charset.CoderResult", false),
              })
          .put(
              new Identifier("SynthPainter"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthPainter", false),
              })
          .put(
              new Identifier("MILLISECOND_FIELD"),
              new Import[] {
                newImport("java.text.DateFormat.MILLISECOND_FIELD", true),
              })
          .put(
              new Identifier("ORBInitializerOperations"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.ORBInitializerOperations", false),
              })
          .put(
              new Identifier("tk_long"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind.tk_long", true),
              })
          .put(
              new Identifier("enable"),
              new Import[] {
                newImport("java.lang.Compiler.enable", true),
              })
          .put(
              new Identifier("BasicSpinnerUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicSpinnerUI", false),
              })
          .put(
              new Identifier("activeCaptionText"),
              new Import[] {
                newImport("java.awt.SystemColor.activeCaptionText", true),
              })
          .put(
              new Identifier("AccessibleKeyBinding"),
              new Import[] {
                newImport("javax.accessibility.AccessibleKeyBinding", false),
              })
          .put(
              new Identifier("UnknownTypeException"),
              new Import[] {
                newImport("javax.lang.model.type.UnknownTypeException", false),
              })
          .put(
              new Identifier("_dk_AbstractInterface"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind._dk_AbstractInterface", true),
              })
          .put(
              new Identifier("dk_Native"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind.dk_Native", true),
              })
          .put(
              new Identifier("InvalidRelationTypeException"),
              new Import[] {
                newImport("javax.management.relation.InvalidRelationTypeException", false),
              })
          .put(
              new Identifier("FileTypeDetector"),
              new Import[] {
                newImport("java.nio.file.spi.FileTypeDetector", false),
              })
          .put(
              new Identifier("KeyAgreementSpi"),
              new Import[] {
                newImport("javax.crypto.KeyAgreementSpi", false),
              })
          .put(
              new Identifier("LONG_FORMAT"),
              new Import[] {
                newImport("java.util.Calendar.LONG_FORMAT", true),
              })
          .put(
              new Identifier("getSystemDocumentationTool"),
              new Import[] {
                newImport("javax.tools.ToolProvider.getSystemDocumentationTool", true),
              })
          .put(
              new Identifier("createRaisedSoftBevelBorder"),
              new Import[] {
                newImport("javax.swing.BorderFactory.createRaisedSoftBevelBorder", true),
              })
          .put(
              new Identifier("LIVE_DRAG_MODE"),
              new Import[] {
                newImport("javax.swing.JDesktopPane.LIVE_DRAG_MODE", true),
              })
          .put(
              new Identifier("RunTimeOperations"),
              new Import[] {
                newImport("org.omg.SendingContext.RunTimeOperations", false),
              })
          .put(
              new Identifier("AppletContext"),
              new Import[] {
                newImport("java.applet.AppletContext", false),
              })
          .put(
              new Identifier("START_PUNCTUATION"),
              new Import[] {
                newImport("java.lang.Character.START_PUNCTUATION", true),
              })
          .put(
              new Identifier("GenericDeclaration"),
              new Import[] {
                newImport("java.lang.reflect.GenericDeclaration", false),
              })
          .put(
              new Identifier("FileInputStream"),
              new Import[] {
                newImport("java.io.FileInputStream", false),
              })
          .put(
              new Identifier("SELECTED"),
              new Import[] {
                newImport("java.awt.event.ItemEvent.SELECTED", true),
                newImport("javax.accessibility.AccessibleState.SELECTED", true),
                newImport("javax.swing.DefaultButtonModel.SELECTED", true),
                newImport("javax.swing.plaf.synth.SynthConstants.SELECTED", true),
                newImport("javax.swing.text.html.HTML.Attribute.SELECTED", true),
              })
          .put(
              new Identifier("OceanTheme"),
              new Import[] {
                newImport("javax.swing.plaf.metal.OceanTheme", false),
              })
          .put(
              new Identifier("RMIClassLoader"),
              new Import[] {
                newImport("java.rmi.server.RMIClassLoader", false),
              })
          .put(
              new Identifier("Bidi"),
              new Import[] {
                newImport("java.text.Bidi", false),
              })
          .put(
              new Identifier("EtchedBorderUIResource"),
              new Import[] {
                newImport("javax.swing.plaf.BorderUIResource.EtchedBorderUIResource", false),
              })
          .put(
              new Identifier("ROLE_NOT_READABLE"),
              new Import[] {
                newImport("javax.management.relation.RoleStatus.ROLE_NOT_READABLE", true),
              })
          .put(
              new Identifier("OperatingSystemMXBean"),
              new Import[] {
                newImport("java.lang.management.OperatingSystemMXBean", false),
              })
          .put(
              new Identifier("Locator2Impl"),
              new Import[] {
                newImport("org.xml.sax.ext.Locator2Impl", false),
              })
          .put(
              new Identifier("ImageIcon"),
              new Import[] {
                newImport("javax.swing.ImageIcon", false),
              })
          .put(
              new Identifier("TYPE_FORWARD_ONLY"),
              new Import[] {
                newImport("java.sql.ResultSet.TYPE_FORWARD_ONLY", true),
              })
          .put(
              new Identifier("DAY_OF_MONTH"),
              new Import[] {
                newImport("java.text.DateFormat.Field.DAY_OF_MONTH", true),
                newImport("java.util.Calendar.DAY_OF_MONTH", true),
              })
          .put(
              new Identifier("ExecutableElement"),
              new Import[] {
                newImport("javax.lang.model.element.ExecutableElement", false),
              })
          .put(
              new Identifier("backwardAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.backwardAction", true),
              })
          .put(
              new Identifier("packagesIn"),
              new Import[] {
                newImport("javax.lang.model.util.ElementFilter.packagesIn", true),
              })
          .put(
              new Identifier("TabularData"),
              new Import[] {
                newImport("javax.management.openmbean.TabularData", false),
              })
          .put(
              new Identifier("SynthTreeUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthTreeUI", false),
              })
          .put(
              new Identifier("Clip"),
              new Import[] {
                newImport("javax.sound.sampled.Clip", false),
              })
          .put(
              new Identifier("Invocable"),
              new Import[] {
                newImport("javax.script.Invocable", false),
              })
          .put(
              new Identifier("WrongPolicy"),
              new Import[] {
                newImport("org.omg.PortableServer.POAPackage.WrongPolicy", false),
              })
          .put(
              new Identifier("DefaultTreeSelectionModel"),
              new Import[] {
                newImport("javax.swing.tree.DefaultTreeSelectionModel", false),
              })
          .put(
              new Identifier("versionColumnNotPseudo"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.versionColumnNotPseudo", true),
              })
          .put(
              new Identifier("SAXParseException"),
              new Import[] {
                newImport("org.xml.sax.SAXParseException", false),
              })
          .put(
              new Identifier("MonitorMBean"),
              new Import[] {
                newImport("javax.management.monitor.MonitorMBean", false),
              })
          .put(
              new Identifier("DOUBLE"),
              new Import[] {
                newImport("java.sql.Types.DOUBLE", true),
                newImport("javax.management.openmbean.SimpleType.DOUBLE", true),
              })
          .put(
              new Identifier("MetalIconFactory"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalIconFactory", false),
              })
          .put(
              new Identifier("CloneNotSupportedException"),
              new Import[] {
                newImport("java.lang.CloneNotSupportedException", false),
              })
          .put(
              new Identifier("secondaryOrder"),
              new Import[] {
                newImport("java.text.CollationElementIterator.secondaryOrder", true),
              })
          .put(
              new Identifier("privilegedThreadFactory"),
              new Import[] {
                newImport("java.util.concurrent.Executors.privilegedThreadFactory", true),
              })
          .put(
              new Identifier("SQLTransactionRollbackException"),
              new Import[] {
                newImport("java.sql.SQLTransactionRollbackException", false),
              })
          .put(
              new Identifier("SCROLLBARS_VERTICAL_ONLY"),
              new Import[] {
                newImport("java.awt.TextArea.SCROLLBARS_VERTICAL_ONLY", true),
              })
          .put(
              new Identifier("ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS"),
              new Import[] {
                newImport(
                    "java.lang.Character.UnicodeBlock.ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS",
                    true),
              })
          .put(
              new Identifier("FileVisitResult"),
              new Import[] {
                newImport("java.nio.file.FileVisitResult", false),
              })
          .put(
              new Identifier("PENDING"),
              new Import[] {
                newImport("javax.print.attribute.standard.JobState.PENDING", true),
              })
          .put(
              new Identifier("GlyphJustificationInfo"),
              new Import[] {
                newImport("java.awt.font.GlyphJustificationInfo", false),
              })
          .put(
              new Identifier("RESIZABLE"),
              new Import[] {
                newImport("javax.accessibility.AccessibleState.RESIZABLE", true),
              })
          .put(
              new Identifier("FAILURE"),
              new Import[] {
                newImport("org.ietf.jgss.GSSException.FAILURE", true),
              })
          .put(
              new Identifier("WINDOW"),
              new Import[] {
                newImport("java.awt.SystemColor.WINDOW", true),
                newImport("javax.accessibility.AccessibleRole.WINDOW", true),
              })
          .put(
              new Identifier("getSynthesizer"),
              new Import[] {
                newImport("javax.sound.midi.MidiSystem.getSynthesizer", true),
              })
          .put(
              new Identifier("Xid"),
              new Import[] {
                newImport("javax.transaction.xa.Xid", false),
              })
          .put(
              new Identifier("ReverbType"),
              new Import[] {
                newImport("javax.sound.sampled.ReverbType", false),
              })
          .put(
              new Identifier("VERSION"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.VERSION", true),
                newImport("javax.xml.transform.OutputKeys.VERSION", true),
              })
          .put(
              new Identifier("DateFormatSymbolsProvider"),
              new Import[] {
                newImport("java.text.spi.DateFormatSymbolsProvider", false),
              })
          .put(
              new Identifier("DstAtop"),
              new Import[] {
                newImport("java.awt.AlphaComposite.DstAtop", true),
              })
          .put(
              new Identifier("ONE_HOUR"),
              new Import[] {
                newImport("javax.management.timer.Timer.ONE_HOUR", true),
              })
          .put(
              new Identifier("IdentityHashMap"),
              new Import[] {
                newImport("java.util.IdentityHashMap", false),
              })
          .put(
              new Identifier("AudioSystem"),
              new Import[] {
                newImport("javax.sound.sampled.AudioSystem", false),
              })
          .put(
              new Identifier("ACCELERATOR_KEY"),
              new Import[] {
                newImport("javax.swing.Action.ACCELERATOR_KEY", true),
              })
          .put(
              new Identifier("createCompoundBorder"),
              new Import[] {
                newImport("javax.swing.BorderFactory.createCompoundBorder", true),
              })
          .put(
              new Identifier("atan"),
              new Import[] {
                newImport("java.lang.Math.atan", true),
                newImport("java.lang.StrictMath.atan", true),
              })
          .put(
              new Identifier("BooleanSeqHolder"),
              new Import[] {
                newImport("org.omg.CORBA.BooleanSeqHolder", false),
              })
          .put(
              new Identifier("SANS_SERIF"),
              new Import[] {
                newImport("java.awt.Font.SANS_SERIF", true),
              })
          .put(
              new Identifier("SPECIAL_SYSTEM_EXCLUSIVE"),
              new Import[] {
                newImport("javax.sound.midi.SysexMessage.SPECIAL_SYSTEM_EXCLUSIVE", true),
              })
          .put(
              new Identifier("TAG_HDMX"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_HDMX", true),
              })
          .put(
              new Identifier("SimpleAttributeSet"),
              new Import[] {
                newImport("javax.swing.text.SimpleAttributeSet", false),
              })
          .put(
              new Identifier("_dk_Repository"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind._dk_Repository", true),
              })
          .put(
              new Identifier("GZIPOutputStream"),
              new Import[] {
                newImport("java.util.zip.GZIPOutputStream", false),
              })
          .put(
              new Identifier("from"),
              new Import[] {
                newImport("java.lang.ProcessBuilder.Redirect.from", true),
                newImport("java.lang.management.LockInfo.from", true),
                newImport("java.lang.management.MemoryNotificationInfo.from", true),
                newImport("java.lang.management.MemoryUsage.from", true),
                newImport("java.lang.management.MonitorInfo.from", true),
                newImport("java.lang.management.ThreadInfo.from", true),
                newImport("java.nio.file.attribute.FileTime.from", true),
                newImport("java.sql.Timestamp.from", true),
                newImport("java.time.DayOfWeek.from", true),
                newImport("java.time.Duration.from", true),
                newImport("java.time.Instant.from", true),
                newImport("java.time.LocalDate.from", true),
                newImport("java.time.LocalDateTime.from", true),
                newImport("java.time.LocalTime.from", true),
                newImport("java.time.Month.from", true),
                newImport("java.time.MonthDay.from", true),
                newImport("java.time.OffsetDateTime.from", true),
                newImport("java.time.OffsetTime.from", true),
                newImport("java.time.Period.from", true),
                newImport("java.time.Year.from", true),
                newImport("java.time.YearMonth.from", true),
                newImport("java.time.ZoneId.from", true),
                newImport("java.time.ZoneOffset.from", true),
                newImport("java.time.ZonedDateTime.from", true),
                newImport("java.time.chrono.ChronoLocalDate.from", true),
                newImport("java.time.chrono.ChronoLocalDateTime.from", true),
                newImport("java.time.chrono.ChronoZonedDateTime.from", true),
                newImport("java.time.chrono.Chronology.from", true),
                newImport("java.time.chrono.HijrahDate.from", true),
                newImport("java.time.chrono.JapaneseDate.from", true),
                newImport("java.time.chrono.MinguoDate.from", true),
                newImport("java.time.chrono.ThaiBuddhistDate.from", true),
                newImport("java.util.Date.from", true),
                newImport("java.util.GregorianCalendar.from", true),
              })
          .put(
              new Identifier("createDirectory"),
              new Import[] {
                newImport("java.nio.file.Files.createDirectory", true),
              })
          .put(
              new Identifier("SearchControls"),
              new Import[] {
                newImport("javax.naming.directory.SearchControls", false),
              })
          .put(
              new Identifier("beginParagraphAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.beginParagraphAction", true),
              })
          .put(
              new Identifier("SynthPopupMenuUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthPopupMenuUI", false),
              })
          .put(
              new Identifier("SchemaFactory"),
              new Import[] {
                newImport("javax.xml.validation.SchemaFactory", false),
              })
          .put(
              new Identifier("getControl"),
              new Import[] {
                newImport("java.util.ResourceBundle.Control.getControl", true),
                newImport("javax.swing.plaf.metal.MetalLookAndFeel.getControl", true),
              })
          .put(
              new Identifier("PDLOverrideSupported"),
              new Import[] {
                newImport("javax.print.attribute.standard.PDLOverrideSupported", false),
              })
          .put(
              new Identifier("SUNDAY"),
              new Import[] {
                newImport("java.util.Calendar.SUNDAY", true),
              })
          .put(
              new Identifier("tk_ulong"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind.tk_ulong", true),
              })
          .put(
              new Identifier("getNumberInstance"),
              new Import[] {
                newImport("java.text.NumberFormat.getNumberInstance", true),
              })
          .put(
              new Identifier("MXBEAN_FIELD"),
              new Import[] {
                newImport("javax.management.JMX.MXBEAN_FIELD", true),
              })
          .put(
              new Identifier("UNSUPPORTED_COMPRESSION"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.JobStateReason.UNSUPPORTED_COMPRESSION", true),
              })
          .put(
              new Identifier("icSigLuminanceTag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigLuminanceTag", true),
              })
          .put(
              new Identifier("ExceptionDetailMessage"),
              new Import[] {
                newImport("org.omg.IOP.ExceptionDetailMessage", false),
              })
          .put(
              new Identifier("ptSegDistSq"),
              new Import[] {
                newImport("java.awt.geom.Line2D.ptSegDistSq", true),
              })
          .put(
              new Identifier("INTERNAL_FRAME_CLOSING"),
              new Import[] {
                newImport("javax.swing.event.InternalFrameEvent.INTERNAL_FRAME_CLOSING", true),
              })
          .put(
              new Identifier("CONTROL_PICTURES"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.CONTROL_PICTURES", true),
              })
          .put(
              new Identifier("Content"),
              new Import[] {
                newImport("javax.swing.text.AbstractDocument.Content", false),
              })
          .put(
              new Identifier("HORIZONTAL"),
              new Import[] {
                newImport("java.awt.Adjustable.HORIZONTAL", true),
                newImport("java.awt.GridBagConstraints.HORIZONTAL", true),
                newImport("java.awt.Scrollbar.HORIZONTAL", true),
                newImport("javax.accessibility.AccessibleState.HORIZONTAL", true),
                newImport("javax.swing.SwingConstants.HORIZONTAL", true),
              })
          .put(
              new Identifier("DropTarget"),
              new Import[] {
                newImport("java.awt.dnd.DropTarget", false),
              })
          .put(
              new Identifier("FontRenderContext"),
              new Import[] {
                newImport("java.awt.font.FontRenderContext", false),
              })
          .put(
              new Identifier("TC_RESET"),
              new Import[] {
                newImport("java.io.ObjectStreamConstants.TC_RESET", true),
              })
          .put(
              new Identifier("MESSAGE_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JOptionPane.MESSAGE_PROPERTY", true),
              })
          .put(
              new Identifier("toChars"),
              new Import[] {
                newImport("java.lang.Character.toChars", true),
              })
          .put(
              new Identifier("DirectoryIteratorException"),
              new Import[] {
                newImport("java.nio.file.DirectoryIteratorException", false),
              })
          .put(
              new Identifier("WSDL_INTERFACE"),
              new Import[] {
                newImport("javax.xml.ws.handler.MessageContext.WSDL_INTERFACE", true),
              })
          .put(
              new Identifier("TAG_VMTX"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_VMTX", true),
              })
          .put(
              new Identifier("BoxLayout"),
              new Import[] {
                newImport("javax.swing.BoxLayout", false),
              })
          .put(
              new Identifier("bestRowNotPseudo"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.bestRowNotPseudo", true),
              })
          .put(
              new Identifier("DOCTYPE_PUBLIC"),
              new Import[] {
                newImport("javax.xml.transform.OutputKeys.DOCTYPE_PUBLIC", true),
              })
          .put(
              new Identifier("TextFieldBorder"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalBorders.TextFieldBorder", false),
              })
          .put(
              new Identifier("WebServiceClient"),
              new Import[] {
                newImport("javax.xml.ws.WebServiceClient", false),
              })
          .put(
              new Identifier("setBackground"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.setBackground", true),
              })
          .put(
              new Identifier("PageAttributes"),
              new Import[] {
                newImport("java.awt.PageAttributes", false),
              })
          .put(
              new Identifier("parseDecimal"),
              new Import[] {
                newImport("javax.xml.bind.DatatypeConverter.parseDecimal", true),
              })
          .put(
              new Identifier("MIN_SUPPLEMENTARY_CODE_POINT"),
              new Import[] {
                newImport("java.lang.Character.MIN_SUPPLEMENTARY_CODE_POINT", true),
              })
          .put(
              new Identifier("ComponentPlacement"),
              new Import[] {
                newImport("javax.swing.LayoutStyle.ComponentPlacement", false),
              })
          .put(
              new Identifier("WHEN_FOCUSED"),
              new Import[] {
                newImport("javax.swing.JComponent.WHEN_FOCUSED", true),
              })
          .put(
              new Identifier("arrayElementGetter"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandles.arrayElementGetter", true),
              })
          .put(
              new Identifier("VALUE_RENDER_QUALITY"),
              new Import[] {
                newImport("java.awt.RenderingHints.VALUE_RENDER_QUALITY", true),
              })
          .put(
              new Identifier("CertPathBuilderException"),
              new Import[] {
                newImport("java.security.cert.CertPathBuilderException", false),
              })
          .put(
              new Identifier("_not_context"),
              new Import[] {
                newImport(
                    "org.omg.CosNaming.NamingContextPackage.NotFoundReason._not_context", true),
              })
          .put(
              new Identifier("EASTERN_ARABIC"),
              new Import[] {
                newImport("java.awt.font.NumericShaper.EASTERN_ARABIC", true),
              })
          .put(
              new Identifier("WINDOW_MOVED"),
              new Import[] {
                newImport("java.awt.Event.WINDOW_MOVED", true),
              })
          .put(
              new Identifier("icSigSpace4CLR"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigSpace4CLR", true),
              })
          .put(
              new Identifier("decodeJavaMIMEType"),
              new Import[] {
                newImport("java.awt.datatransfer.SystemFlavorMap.decodeJavaMIMEType", true),
              })
          .put(
              new Identifier("BORDER_PAINTED_FLAT_CHANGED_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JCheckBox.BORDER_PAINTED_FLAT_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("value"),
              new Import[] {
                newImport("javax.management.Query.value", true),
                newImport("org.omg.CORBA.ARG_IN.value", true),
                newImport("org.omg.CORBA.ARG_INOUT.value", true),
                newImport("org.omg.CORBA.ARG_OUT.value", true),
                newImport("org.omg.CORBA.BAD_POLICY.value", true),
                newImport("org.omg.CORBA.BAD_POLICY_TYPE.value", true),
                newImport("org.omg.CORBA.BAD_POLICY_VALUE.value", true),
                newImport("org.omg.CORBA.CTX_RESTRICT_SCOPE.value", true),
                newImport("org.omg.CORBA.OMGVMCID.value", true),
                newImport("org.omg.CORBA.PRIVATE_MEMBER.value", true),
                newImport("org.omg.CORBA.PUBLIC_MEMBER.value", true),
                newImport("org.omg.CORBA.UNSUPPORTED_POLICY.value", true),
                newImport("org.omg.CORBA.UNSUPPORTED_POLICY_VALUE.value", true),
                newImport("org.omg.CORBA.VM_ABSTRACT.value", true),
                newImport("org.omg.CORBA.VM_CUSTOM.value", true),
                newImport("org.omg.CORBA.VM_NONE.value", true),
                newImport("org.omg.CORBA.VM_TRUNCATABLE.value", true),
                newImport("org.omg.IOP.CodeSets.value", true),
                newImport("org.omg.IOP.ENCODING_CDR_ENCAPS.value", true),
                newImport("org.omg.IOP.ExceptionDetailMessage.value", true),
                newImport("org.omg.IOP.RMICustomMaxStreamFormat.value", true),
                newImport("org.omg.IOP.TAG_ALTERNATE_IIOP_ADDRESS.value", true),
                newImport("org.omg.IOP.TAG_CODE_SETS.value", true),
                newImport("org.omg.IOP.TAG_INTERNET_IOP.value", true),
                newImport("org.omg.IOP.TAG_JAVA_CODEBASE.value", true),
                newImport("org.omg.IOP.TAG_MULTIPLE_COMPONENTS.value", true),
                newImport("org.omg.IOP.TAG_ORB_TYPE.value", true),
                newImport("org.omg.IOP.TAG_POLICIES.value", true),
                newImport("org.omg.IOP.TAG_RMI_CUSTOM_MAX_STREAM_FORMAT.value", true),
                newImport("org.omg.IOP.TransactionService.value", true),
                newImport("org.omg.Messaging.SYNC_WITH_TRANSPORT.value", true),
                newImport("org.omg.PortableInterceptor.ACTIVE.value", true),
                newImport("org.omg.PortableInterceptor.DISCARDING.value", true),
                newImport("org.omg.PortableInterceptor.HOLDING.value", true),
                newImport("org.omg.PortableInterceptor.INACTIVE.value", true),
                newImport("org.omg.PortableInterceptor.LOCATION_FORWARD.value", true),
                newImport("org.omg.PortableInterceptor.NON_EXISTENT.value", true),
                newImport("org.omg.PortableInterceptor.SUCCESSFUL.value", true),
                newImport("org.omg.PortableInterceptor.SYSTEM_EXCEPTION.value", true),
                newImport("org.omg.PortableInterceptor.TRANSPORT_RETRY.value", true),
                newImport("org.omg.PortableInterceptor.UNKNOWN.value", true),
                newImport("org.omg.PortableInterceptor.USER_EXCEPTION.value", true),
                newImport("org.omg.PortableServer.ID_ASSIGNMENT_POLICY_ID.value", true),
                newImport("org.omg.PortableServer.ID_UNIQUENESS_POLICY_ID.value", true),
                newImport("org.omg.PortableServer.IMPLICIT_ACTIVATION_POLICY_ID.value", true),
                newImport("org.omg.PortableServer.LIFESPAN_POLICY_ID.value", true),
                newImport("org.omg.PortableServer.REQUEST_PROCESSING_POLICY_ID.value", true),
                newImport("org.omg.PortableServer.SERVANT_RETENTION_POLICY_ID.value", true),
                newImport("org.omg.PortableServer.THREAD_POLICY_ID.value", true),
              })
          .put(
              new Identifier("FileSystems"),
              new Import[] {
                newImport("java.nio.file.FileSystems", false),
              })
          .put(
              new Identifier("lookup"),
              new Import[] {
                newImport("java.io.ObjectStreamClass.lookup", true),
                newImport("java.lang.invoke.MethodHandles.lookup", true),
                newImport("java.rmi.Naming.lookup", true),
                newImport("java.util.Locale.lookup", true),
              })
          .put(
              new Identifier("AccessibleAttributeSequence"),
              new Import[] {
                newImport("javax.accessibility.AccessibleAttributeSequence", false),
              })
          .put(
              new Identifier("MODE_DEFAULT"),
              new Import[] {
                newImport("javax.imageio.ImageWriteParam.MODE_DEFAULT", true),
              })
          .put(
              new Identifier("SwitchPoint"),
              new Import[] {
                newImport("java.lang.invoke.SwitchPoint", false),
              })
          .put(
              new Identifier("TMSUCCESS"),
              new Import[] {
                newImport("javax.transaction.xa.XAResource.TMSUCCESS", true),
              })
          .put(
              new Identifier("procedureColumnResult"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.procedureColumnResult", true),
              })
          .put(
              new Identifier("MINI_SCALE"),
              new Import[] {
                newImport("javax.swing.plaf.nimbus.NimbusStyle.MINI_SCALE", true),
              })
          .put(
              new Identifier("CHORD"),
              new Import[] {
                newImport("java.awt.geom.Arc2D.CHORD", true),
              })
          .put(
              new Identifier("SignatureSpi"),
              new Import[] {
                newImport("java.security.SignatureSpi", false),
              })
          .put(
              new Identifier("MetalLabelUI"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalLabelUI", false),
              })
          .put(
              new Identifier("Response"),
              new Import[] {
                newImport("javax.xml.ws.Response", false),
              })
          .put(
              new Identifier("DECLARE"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.DECLARE", true),
              })
          .put(
              new Identifier("VALUE_RANGE_MIN_MAX_INCLUSIVE"),
              new Import[] {
                newImport(
                    "javax.imageio.metadata.IIOMetadataFormat.VALUE_RANGE_MIN_MAX_INCLUSIVE", true),
              })
          .put(
              new Identifier("JOB_RESTARTABLE"),
              new Import[] {
                newImport("javax.print.attribute.standard.JobStateReason.JOB_RESTARTABLE", true),
              })
          .put(
              new Identifier("isLineSupported"),
              new Import[] {
                newImport("javax.sound.sampled.AudioSystem.isLineSupported", true),
              })
          .put(
              new Identifier("SUBCLASS_IMPLEMENTATION_PERMISSION"),
              new Import[] {
                newImport("java.io.ObjectStreamConstants.SUBCLASS_IMPLEMENTATION_PERMISSION", true),
              })
          .put(
              new Identifier("getClientHost"),
              new Import[] {
                newImport("java.rmi.server.RemoteServer.getClientHost", true),
              })
          .put(
              new Identifier("EMPTY_LIST"),
              new Import[] {
                newImport("java.util.Collections.EMPTY_LIST", true),
              })
          .put(
              new Identifier("WrongMethodTypeException"),
              new Import[] {
                newImport("java.lang.invoke.WrongMethodTypeException", false),
              })
          .put(
              new Identifier("SplittableRandom"),
              new Import[] {
                newImport("java.util.SplittableRandom", false),
              })
          .build();
}
