// Code generated by GenerateStdlib.java. DO NOT EDIT.
package com.nikodoko.javaimports.stdlib.internal.api.v8;

import static com.nikodoko.javaimports.stdlib.internal.Stdlib.newImport;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.common.Identifier;
import com.nikodoko.javaimports.common.Import;
import java.util.Map;

public class Java8StdlibChunk25 {
  static final Map<Identifier, Import[]> CLASSES =
      new ImmutableMap.Builder<Identifier, Import[]>()
          .put(
              new Identifier("SECONDARY"),
              new Import[] {
                newImport("java.text.Collator.SECONDARY", true),
              })
          .put(
              new Identifier("MINUS"),
              new Import[] {
                newImport("javax.management.Query.MINUS", true),
              })
          .put(
              new Identifier("checkPermission"),
              new Import[] {
                newImport("java.security.AccessController.checkPermission", true),
              })
          .put(
              new Identifier("DEFAULT_OPTION"),
              new Import[] {
                newImport("javax.swing.JOptionPane.DEFAULT_OPTION", true),
              })
          .put(
              new Identifier("VK_COPY"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_COPY", true),
              })
          .put(
              new Identifier("NotFoundReasonHolder"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextPackage.NotFoundReasonHolder", false),
              })
          .put(
              new Identifier("LABEL_FOR_PROPERTY"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRelation.LABEL_FOR_PROPERTY", true),
              })
          .put(
              new Identifier("POPUP_LAYER"),
              new Import[] {
                newImport("javax.swing.JLayeredPane.POPUP_LAYER", true),
              })
          .put(
              new Identifier("CropImageFilter"),
              new Import[] {
                newImport("java.awt.image.CropImageFilter", false),
              })
          .put(
              new Identifier("IIOMetadataNode"),
              new Import[] {
                newImport("javax.imageio.metadata.IIOMetadataNode", false),
              })
          .put(
              new Identifier("COLLAPSED"),
              new Import[] {
                newImport("javax.accessibility.AccessibleState.COLLAPSED", true),
              })
          .put(
              new Identifier("DirObjectFactory"),
              new Import[] {
                newImport("javax.naming.spi.DirObjectFactory", false),
              })
          .put(
              new Identifier("INDEX_SIZE_ERR"),
              new Import[] {
                newImport("org.w3c.dom.DOMException.INDEX_SIZE_ERR", true),
              })
          .put(
              new Identifier("getWordInstance"),
              new Import[] {
                newImport("java.text.BreakIterator.getWordInstance", true),
              })
          .put(
              new Identifier("LSParserFilter"),
              new Import[] {
                newImport("org.w3c.dom.ls.LSParserFilter", false),
              })
          .put(
              new Identifier("UndoableEditEvent"),
              new Import[] {
                newImport("javax.swing.event.UndoableEditEvent", false),
              })
          .put(
              new Identifier("Method"),
              new Import[] {
                newImport("java.lang.reflect.Method", false),
              })
          .put(
              new Identifier("GOPHER"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.ReferenceUriSchemesSupported.GOPHER", true),
              })
          .put(
              new Identifier("icSigUcrBgTag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigUcrBgTag", true),
              })
          .put(
              new Identifier("HTTP_OK"),
              new Import[] {
                newImport("java.net.HttpURLConnection.HTTP_OK", true),
              })
          .put(
              new Identifier("DefinitionKindHelper"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKindHelper", false),
              })
          .put(
              new Identifier("ContentModel"),
              new Import[] {
                newImport("javax.swing.text.html.parser.ContentModel", false),
              })
          .put(
              new Identifier("ELEMENT_NODE"),
              new Import[] {
                newImport("org.w3c.dom.Node.ELEMENT_NODE", true),
              })
          .put(
              new Identifier("XAResource"),
              new Import[] {
                newImport("javax.transaction.xa.XAResource", false),
              })
          .put(
              new Identifier("DEFAULT_LIFETIME"),
              new Import[] {
                newImport("org.ietf.jgss.GSSContext.DEFAULT_LIFETIME", true),
                newImport("org.ietf.jgss.GSSCredential.DEFAULT_LIFETIME", true),
              })
          .put(
              new Identifier("CREDENTIALS_EXPIRED"),
              new Import[] {
                newImport("org.ietf.jgss.GSSException.CREDENTIALS_EXPIRED", true),
              })
          .put(
              new Identifier("DIRECTIONALITY_OTHER_NEUTRALS"),
              new Import[] {
                newImport("java.lang.Character.DIRECTIONALITY_OTHER_NEUTRALS", true),
              })
          .put(
              new Identifier("CHILD_NODE_OF_PROPERTY"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRelation.CHILD_NODE_OF_PROPERTY", true),
              })
          .put(
              new Identifier("AnnotationValueVisitor"),
              new Import[] {
                newImport("javax.lang.model.element.AnnotationValueVisitor", false),
              })
          .put(
              new Identifier("InetAddress"),
              new Import[] {
                newImport("java.net.InetAddress", false),
              })
          .put(
              new Identifier("JList"),
              new Import[] {
                newImport("javax.swing.JList", false),
              })
          .put(
              new Identifier("setLogWriter"),
              new Import[] {
                newImport("java.sql.DriverManager.setLogWriter", true),
              })
          .put(
              new Identifier("Matcher"),
              new Import[] {
                newImport("java.util.regex.Matcher", false),
              })
          .put(
              new Identifier("OPTION_PANE"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.OPTION_PANE", true),
                newImport("javax.swing.plaf.synth.Region.OPTION_PANE", true),
              })
          .put(
              new Identifier("MetalCheckBoxUI"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalCheckBoxUI", false),
              })
          .put(
              new Identifier("TOLEFT_TOTOP"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.PresentationDirection.TOLEFT_TOTOP", true),
              })
          .put(
              new Identifier("CertPathTrustManagerParameters"),
              new Import[] {
                newImport("javax.net.ssl.CertPathTrustManagerParameters", false),
              })
          .put(
              new Identifier("PUBLIC_XML_SCHEMA"),
              new Import[] {
                newImport("javax.sql.rowset.WebRowSet.PUBLIC_XML_SCHEMA", true),
              })
          .put(
              new Identifier("SupportedValuesAttribute"),
              new Import[] {
                newImport("javax.print.attribute.SupportedValuesAttribute", false),
              })
          .put(
              new Identifier("RequestInfo"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.RequestInfo", false),
              })
          .put(
              new Identifier("CENCRC"),
              new Import[] {
                newImport("java.util.jar.JarEntry.CENCRC", true),
                newImport("java.util.jar.JarFile.CENCRC", true),
                newImport("java.util.jar.JarInputStream.CENCRC", true),
                newImport("java.util.jar.JarOutputStream.CENCRC", true),
                newImport("java.util.zip.ZipEntry.CENCRC", true),
                newImport("java.util.zip.ZipFile.CENCRC", true),
                newImport("java.util.zip.ZipInputStream.CENCRC", true),
                newImport("java.util.zip.ZipOutputStream.CENCRC", true),
              })
          .put(
              new Identifier("FAMILY"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.FAMILY", true),
              })
          .put(
              new Identifier("ImageReaderSpi"),
              new Import[] {
                newImport("javax.imageio.spi.ImageReaderSpi", false),
              })
          .put(
              new Identifier("RelationNotFoundException"),
              new Import[] {
                newImport("javax.management.relation.RelationNotFoundException", false),
              })
          .put(
              new Identifier("NotBoundException"),
              new Import[] {
                newImport("java.rmi.NotBoundException", false),
              })
          .put(
              new Identifier("UnknownElementException"),
              new Import[] {
                newImport("javax.lang.model.element.UnknownElementException", false),
              })
          .put(
              new Identifier("AncestorListener"),
              new Import[] {
                newImport("javax.swing.event.AncestorListener", false),
              })
          .put(
              new Identifier("Transient"),
              new Import[] {
                newImport("java.beans.Transient", false),
              })
          .put(
              new Identifier("Paths"),
              new Import[] {
                newImport("java.nio.file.Paths", false),
              })
          .put(
              new Identifier("ICON"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.ICON", true),
              })
          .put(
              new Identifier("UserException"),
              new Import[] {
                newImport("org.omg.CORBA.UserException", false),
              })
          .put(
              new Identifier("SHA224"),
              new Import[] {
                newImport("java.security.spec.MGF1ParameterSpec.SHA224", true),
              })
          .put(
              new Identifier("TYPE_QUADRANT_ROTATION"),
              new Import[] {
                newImport("java.awt.geom.AffineTransform.TYPE_QUADRANT_ROTATION", true),
              })
          .put(
              new Identifier("NimbusStyle"),
              new Import[] {
                newImport("javax.swing.plaf.nimbus.NimbusStyle", false),
              })
          .put(
              new Identifier("NameList"),
              new Import[] {
                newImport("org.w3c.dom.NameList", false),
              })
          .put(
              new Identifier("TAG_KERN"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_KERN", true),
              })
          .put(
              new Identifier("INVOCATION_FIRST"),
              new Import[] {
                newImport("java.awt.event.InvocationEvent.INVOCATION_FIRST", true),
              })
          .put(
              new Identifier("CertificateEncodingException"),
              new Import[] {
                newImport("java.security.cert.CertificateEncodingException", false),
                newImport("javax.security.cert.CertificateEncodingException", false),
              })
          .put(
              new Identifier("KeyPairGenerator"),
              new Import[] {
                newImport("java.security.KeyPairGenerator", false),
              })
          .put(
              new Identifier("WrongTransactionHolder"),
              new Import[] {
                newImport("org.omg.CORBA.WrongTransactionHolder", false),
              })
          .put(
              new Identifier("SynthListUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthListUI", false),
              })
          .put(
              new Identifier("isFileTypeSupported"),
              new Import[] {
                newImport("javax.sound.midi.MidiSystem.isFileTypeSupported", true),
                newImport("javax.sound.sampled.AudioSystem.isFileTypeSupported", true),
              })
          .put(
              new Identifier("CHOU_4"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSize.JIS.CHOU_4", true),
              })
          .put(
              new Identifier("RasterOp"),
              new Import[] {
                newImport("java.awt.image.RasterOp", false),
              })
          .put(
              new Identifier("BCSIterator"),
              new Import[] {
                newImport("java.beans.beancontext.BeanContextSupport.BCSIterator", false),
              })
          .put(
              new Identifier("VK_PAUSE"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_PAUSE", true),
              })
          .put(
              new Identifier("ofCalendarField"),
              new Import[] {
                newImport("java.text.DateFormat.Field.ofCalendarField", true),
              })
          .put(
              new Identifier("GRADE_NONE"),
              new Import[] {
                newImport("javax.sql.rowset.spi.SyncProvider.GRADE_NONE", true),
              })
          .put(
              new Identifier("PAN"),
              new Import[] {
                newImport("javax.sound.sampled.FloatControl.Type.PAN", true),
              })
          .put(
              new Identifier("setEditorSearchPath"),
              new Import[] {
                newImport("java.beans.PropertyEditorManager.setEditorSearchPath", true),
              })
          .put(
              new Identifier("BiConsumer"),
              new Import[] {
                newImport("java.util.function.BiConsumer", false),
              })
          .put(
              new Identifier("createRegistry"),
              new Import[] {
                newImport("java.rmi.registry.LocateRegistry.createRegistry", true),
              })
          .put(
              new Identifier("SYSTEM"),
              new Import[] {
                newImport("javax.swing.text.html.parser.DTDConstants.SYSTEM", true),
              })
          .put(
              new Identifier("XPATH"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.Transform.XPATH", true),
              })
          .put(
              new Identifier("TYPE_Lab"),
              new Import[] {
                newImport("java.awt.color.ColorSpace.TYPE_Lab", true),
              })
          .put(
              new Identifier("DescriptorRead"),
              new Import[] {
                newImport("javax.management.DescriptorRead", false),
              })
          .put(
              new Identifier("ENCLOSED_ALPHANUMERIC_SUPPLEMENT"),
              new Import[] {
                newImport(
                    "java.lang.Character.UnicodeBlock.ENCLOSED_ALPHANUMERIC_SUPPLEMENT", true),
              })
          .put(
              new Identifier("createImageOutputStream"),
              new Import[] {
                newImport("javax.imageio.ImageIO.createImageOutputStream", true),
              })
          .put(
              new Identifier("getImageReadersByMIMEType"),
              new Import[] {
                newImport("javax.imageio.ImageIO.getImageReadersByMIMEType", true),
              })
          .put(
              new Identifier("setChar"),
              new Import[] {
                newImport("java.lang.reflect.Array.setChar", true),
              })
          .put(
              new Identifier("createTitledBorder"),
              new Import[] {
                newImport("javax.swing.BorderFactory.createTitledBorder", true),
              })
          .put(
              new Identifier("NE_RESIZE_CURSOR"),
              new Import[] {
                newImport("java.awt.Cursor.NE_RESIZE_CURSOR", true),
                newImport("java.awt.Frame.NE_RESIZE_CURSOR", true),
              })
          .put(
              new Identifier("CONTROL_HIGHLIGHT"),
              new Import[] {
                newImport("java.awt.SystemColor.CONTROL_HIGHLIGHT", true),
              })
          .put(
              new Identifier("COLOR"),
              new Import[] {
                newImport("java.awt.PageAttributes.ColorType.COLOR", true),
                newImport("javax.print.attribute.standard.Chromaticity.COLOR", true),
                newImport("javax.swing.text.html.CSS.Attribute.COLOR", true),
                newImport("javax.swing.text.html.HTML.Attribute.COLOR", true),
              })
          .put(
              new Identifier("DOMImplementationRegistry"),
              new Import[] {
                newImport("org.w3c.dom.bootstrap.DOMImplementationRegistry", false),
              })
          .put(
              new Identifier("UNAVAILABLE"),
              new Import[] {
                newImport("org.ietf.jgss.GSSException.UNAVAILABLE", true),
              })
          .put(
              new Identifier("HOUR_OF_DAY0_FIELD"),
              new Import[] {
                newImport("java.text.DateFormat.HOUR_OF_DAY0_FIELD", true),
              })
          .put(
              new Identifier("UnsupportedOperationException"),
              new Import[] {
                newImport("java.lang.UnsupportedOperationException", false),
              })
          .put(
              new Identifier("ECPrivateKey"),
              new Import[] {
                newImport("java.security.interfaces.ECPrivateKey", false),
              })
          .put(
              new Identifier("SERVLET_RESPONSE"),
              new Import[] {
                newImport("javax.xml.ws.handler.MessageContext.SERVLET_RESPONSE", true),
              })
          .put(
              new Identifier("loadClassWithout"),
              new Import[] {
                newImport("javax.management.DefaultLoaderRepository.loadClassWithout", true),
                newImport(
                    "javax.management.loading.DefaultLoaderRepository.loadClassWithout", true),
              })
          .put(
              new Identifier("UNICODE_CHARACTER_CLASS"),
              new Import[] {
                newImport("java.util.regex.Pattern.UNICODE_CHARACTER_CLASS", true),
              })
          .put(
              new Identifier("getLoweredBevelBorderUIResource"),
              new Import[] {
                newImport(
                    "javax.swing.plaf.BorderUIResource.getLoweredBevelBorderUIResource", true),
              })
          .put(
              new Identifier("NO_ROW_CONFLICT"),
              new Import[] {
                newImport("javax.sql.rowset.spi.SyncResolver.NO_ROW_CONFLICT", true),
              })
          .put(
              new Identifier("NameValuePairHelper"),
              new Import[] {
                newImport("org.omg.CORBA.NameValuePairHelper", false),
                newImport("org.omg.DynamicAny.NameValuePairHelper", false),
              })
          .put(
              new Identifier("LinkedList"),
              new Import[] {
                newImport("java.util.LinkedList", false),
              })
          .put(
              new Identifier("MARKER_WASTE_FULL"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.PrinterStateReason.MARKER_WASTE_FULL", true),
              })
          .put(
              new Identifier("CROSS_JOIN"),
              new Import[] {
                newImport("javax.sql.rowset.JoinRowSet.CROSS_JOIN", true),
              })
          .put(
              new Identifier("getDesktopPaneForComponent"),
              new Import[] {
                newImport("javax.swing.JOptionPane.getDesktopPaneForComponent", true),
              })
          .put(
              new Identifier("Role"),
              new Import[] {
                newImport("javax.management.relation.Role", false),
              })
          .put(
              new Identifier("DIRECTIONALITY_UNDEFINED"),
              new Import[] {
                newImport("java.lang.Character.DIRECTIONALITY_UNDEFINED", true),
              })
          .put(
              new Identifier("spliteratorUnknownSize"),
              new Import[] {
                newImport("java.util.Spliterators.spliteratorUnknownSize", true),
              })
          .put(
              new Identifier("sharedInstance"),
              new Import[] {
                newImport("javax.swing.ToolTipManager.sharedInstance", true),
                newImport("javax.swing.JTree.EmptySelectionModel.sharedInstance", true),
              })
          .put(
              new Identifier("PCL"),
              new Import[] {
                newImport("javax.print.DocFlavor.BYTE_ARRAY.PCL", true),
                newImport("javax.print.DocFlavor.INPUT_STREAM.PCL", true),
                newImport("javax.print.DocFlavor.URL.PCL", true),
              })
          .put(
              new Identifier("XMLEvent"),
              new Import[] {
                newImport("javax.xml.stream.events.XMLEvent", false),
              })
          .put(
              new Identifier("SynthSliderUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthSliderUI", false),
              })
          .put(
              new Identifier("AreaAveragingScaleFilter"),
              new Import[] {
                newImport("java.awt.image.AreaAveragingScaleFilter", false),
              })
          .put(
              new Identifier("ENCRYPT"),
              new Import[] {
                newImport("javax.xml.crypto.KeySelector.Purpose.ENCRYPT", true),
              })
          .put(
              new Identifier("Patch"),
              new Import[] {
                newImport("javax.sound.midi.Patch", false),
              })
          .put(
              new Identifier("Caret"),
              new Import[] {
                newImport("javax.swing.text.Caret", false),
              })
          .put(
              new Identifier("HTTP_NOT_FOUND"),
              new Import[] {
                newImport("java.net.HttpURLConnection.HTTP_NOT_FOUND", true),
              })
          .put(
              new Identifier("ServantAlreadyActiveHelper"),
              new Import[] {
                newImport("org.omg.PortableServer.POAPackage.ServantAlreadyActiveHelper", false),
              })
          .put(
              new Identifier("BasicPermission"),
              new Import[] {
                newImport("java.security.BasicPermission", false),
              })
          .put(
              new Identifier("_NamingContextExtStub"),
              new Import[] {
                newImport("org.omg.CosNaming._NamingContextExtStub", false),
              })
          .put(
              new Identifier("ADD_FILE"),
              new Import[] {
                newImport("java.nio.file.attribute.AclEntryPermission.ADD_FILE", true),
              })
          .put(
              new Identifier("GRADE_CHECK_ALL_AT_COMMIT"),
              new Import[] {
                newImport("javax.sql.rowset.spi.SyncProvider.GRADE_CHECK_ALL_AT_COMMIT", true),
              })
          .put(
              new Identifier("BINARY"),
              new Import[] {
                newImport("java.sql.Types.BINARY", true),
              })
          .put(
              new Identifier("IntToDoubleFunction"),
              new Import[] {
                newImport("java.util.function.IntToDoubleFunction", false),
              })
          .put(
              new Identifier("WINDOW_CLOSING"),
              new Import[] {
                newImport("java.awt.event.WindowEvent.WINDOW_CLOSING", true),
              })
          .put(
              new Identifier("EDGE_ZERO_FILL"),
              new Import[] {
                newImport("java.awt.image.ConvolveOp.EDGE_ZERO_FILL", true),
              })
          .put(
              new Identifier("ViewportUI"),
              new Import[] {
                newImport("javax.swing.plaf.ViewportUI", false),
              })
          .put(
              new Identifier("tanh"),
              new Import[] {
                newImport("java.lang.Math.tanh", true),
                newImport("java.lang.StrictMath.tanh", true),
              })
          .put(
              new Identifier("Field"),
              new Import[] {
                newImport("java.lang.reflect.Field", false),
                newImport("java.text.DateFormat.Field", false),
                newImport("java.text.Format.Field", false),
                newImport("java.text.MessageFormat.Field", false),
                newImport("java.text.NumberFormat.Field", false),
                newImport("javax.xml.datatype.DatatypeConstants.Field", false),
              })
          .put(
              new Identifier("PDF"),
              new Import[] {
                newImport("javax.print.DocFlavor.BYTE_ARRAY.PDF", true),
                newImport("javax.print.DocFlavor.INPUT_STREAM.PDF", true),
                newImport("javax.print.DocFlavor.URL.PDF", true),
              })
          .put(
              new Identifier("_tk_boolean"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind._tk_boolean", true),
              })
          .put(
              new Identifier("TRACKING"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.TRACKING", true),
              })
          .put(
              new Identifier("availableCharsets"),
              new Import[] {
                newImport("java.nio.charset.Charset.availableCharsets", true),
              })
          .put(
              new Identifier("ULongSeqHelper"),
              new Import[] {
                newImport("org.omg.CORBA.ULongSeqHelper", false),
              })
          .put(
              new Identifier("NO_RESOURCES"),
              new Import[] {
                newImport("org.omg.CORBA.NO_RESOURCES", false),
              })
          .put(
              new Identifier("ENV_11"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ENV_11", true),
              })
          .put(
              new Identifier("ENV_12"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ENV_12", true),
              })
          .put(
              new Identifier("MalformedParameterizedTypeException"),
              new Import[] {
                newImport("java.lang.reflect.MalformedParameterizedTypeException", false),
              })
          .put(
              new Identifier("ENV_10"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ENV_10", true),
              })
          .put(
              new Identifier("FormatConversionProvider"),
              new Import[] {
                newImport("javax.sound.sampled.spi.FormatConversionProvider", false),
              })
          .put(
              new Identifier("NO_RESPONSE"),
              new Import[] {
                newImport("org.omg.CORBA.NO_RESPONSE", false),
              })
          .put(
              new Identifier("_dk_Constant"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind._dk_Constant", true),
              })
          .put(
              new Identifier("ENV_14"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ENV_14", true),
              })
          .put(
              new Identifier("SocketOptions"),
              new Import[] {
                newImport("java.net.SocketOptions", false),
              })
          .put(
              new Identifier("K1Luminance"),
              new Import[] {
                newImport("javax.imageio.plugins.jpeg.JPEGQTable.K1Luminance", true),
              })
          .put(
              new Identifier("APPROVE_OPTION"),
              new Import[] {
                newImport("javax.swing.JFileChooser.APPROVE_OPTION", true),
              })
          .put(
              new Identifier("RSA_TYPE"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.keyinfo.KeyValue.RSA_TYPE", true),
              })
          .put(
              new Identifier("DisplayMode"),
              new Import[] {
                newImport("java.awt.DisplayMode", false),
              })
          .put(
              new Identifier("SCROLLBARS_AS_NEEDED"),
              new Import[] {
                newImport("java.awt.ScrollPane.SCROLLBARS_AS_NEEDED", true),
              })
          .put(
              new Identifier("getSocketFactory"),
              new Import[] {
                newImport("java.rmi.server.RMISocketFactory.getSocketFactory", true),
              })
          .put(
              new Identifier("Autoscroll"),
              new Import[] {
                newImport("java.awt.dnd.Autoscroll", false),
              })
          .put(
              new Identifier("ThaiBuddhistDate"),
              new Import[] {
                newImport("java.time.chrono.ThaiBuddhistDate", false),
              })
          .put(
              new Identifier("KEY_PRESSED"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.KEY_PRESSED", true),
              })
          .put(
              new Identifier("DARK_GRAY"),
              new Import[] {
                newImport("java.awt.Color.DARK_GRAY", true),
              })
          .put(
              new Identifier("getControlDarkShadow"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalLookAndFeel.getControlDarkShadow", true),
              })
          .put(
              new Identifier("ValueInputStream"),
              new Import[] {
                newImport("org.omg.CORBA.portable.ValueInputStream", false),
              })
          .put(
              new Identifier("JPanel"),
              new Import[] {
                newImport("javax.swing.JPanel", false),
              })
          .put(
              new Identifier("registerStaticAttributeKey"),
              new Import[] {
                newImport("javax.swing.text.StyleContext.registerStaticAttributeKey", true),
              })
          .put(
              new Identifier("PropertyEditorManager"),
              new Import[] {
                newImport("java.beans.PropertyEditorManager", false),
              })
          .put(
              new Identifier("importedKeyNoAction"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.importedKeyNoAction", true),
              })
          .put(
              new Identifier("GlyphMetrics"),
              new Import[] {
                newImport("java.awt.font.GlyphMetrics", false),
              })
          .put(
              new Identifier("ISO_C10"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_C10", true),
              })
          .put(
              new Identifier("HALIGN"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.HALIGN", true),
              })
          .put(
              new Identifier("DOMConfiguration"),
              new Import[] {
                newImport("org.w3c.dom.DOMConfiguration", false),
              })
          .put(
              new Identifier("DSAParams"),
              new Import[] {
                newImport("java.security.interfaces.DSAParams", false),
              })
          .put(
              new Identifier("NotLinkException"),
              new Import[] {
                newImport("java.nio.file.NotLinkException", false),
              })
          .put(
              new Identifier("bestRowSession"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.bestRowSession", true),
              })
          .put(
              new Identifier("LEFT_TO_RIGHT"),
              new Import[] {
                newImport("java.awt.ComponentOrientation.LEFT_TO_RIGHT", true),
              })
          .put(
              new Identifier("ActivationGroup"),
              new Import[] {
                newImport("java.rmi.activation.ActivationGroup", false),
              })
          .put(
              new Identifier("identityHashCode"),
              new Import[] {
                newImport("java.lang.System.identityHashCode", true),
              })
          .put(
              new Identifier("ArrayBlockingQueue"),
              new Import[] {
                newImport("java.util.concurrent.ArrayBlockingQueue", false),
              })
          .put(
              new Identifier("PrintJobAttributeListener"),
              new Import[] {
                newImport("javax.print.event.PrintJobAttributeListener", false),
              })
          .put(
              new Identifier("RFC2253"),
              new Import[] {
                newImport("javax.security.auth.x500.X500Principal.RFC2253", true),
              })
          .put(
              new Identifier("ATTRIBUTE_CHANGE"),
              new Import[] {
                newImport("javax.management.AttributeChangeNotification.ATTRIBUTE_CHANGE", true),
              })
          .put(
              new Identifier("KeyInfo"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.keyinfo.KeyInfo", false),
              })
          .put(
              new Identifier("Delegate"),
              new Import[] {
                newImport("org.omg.CORBA.portable.Delegate", false),
                newImport("org.omg.CORBA_2_3.portable.Delegate", false),
                newImport("org.omg.PortableServer.portable.Delegate", false),
              })
          .put(
              new Identifier("BUTTON2_MASK"),
              new Import[] {
                newImport("java.awt.event.InputEvent.BUTTON2_MASK", true),
              })
          .put(
              new Identifier("fieldsIn"),
              new Import[] {
                newImport("javax.lang.model.util.ElementFilter.fieldsIn", true),
              })
          .put(
              new Identifier("unchecked_narrow"),
              new Import[] {
                newImport("org.omg.CosNaming.BindingIteratorHelper.unchecked_narrow", true),
                newImport("org.omg.CosNaming.NamingContextExtHelper.unchecked_narrow", true),
                newImport("org.omg.CosNaming.NamingContextHelper.unchecked_narrow", true),
                newImport("org.omg.DynamicAny.DynAnyFactoryHelper.unchecked_narrow", true),
                newImport("org.omg.DynamicAny.DynAnyHelper.unchecked_narrow", true),
                newImport("org.omg.DynamicAny.DynArrayHelper.unchecked_narrow", true),
                newImport("org.omg.DynamicAny.DynEnumHelper.unchecked_narrow", true),
                newImport("org.omg.DynamicAny.DynFixedHelper.unchecked_narrow", true),
                newImport("org.omg.DynamicAny.DynSequenceHelper.unchecked_narrow", true),
                newImport("org.omg.DynamicAny.DynStructHelper.unchecked_narrow", true),
                newImport("org.omg.DynamicAny.DynUnionHelper.unchecked_narrow", true),
                newImport("org.omg.DynamicAny.DynValueHelper.unchecked_narrow", true),
                newImport("org.omg.IOP.CodecFactoryHelper.unchecked_narrow", true),
                newImport("org.omg.PortableInterceptor.CurrentHelper.unchecked_narrow", true),
                newImport(
                    "org.omg.PortableInterceptor.IORInterceptor_3_0Helper.unchecked_narrow", true),
                newImport("org.omg.PortableServer.ServantActivatorHelper.unchecked_narrow", true),
                newImport("org.omg.PortableServer.ServantLocatorHelper.unchecked_narrow", true),
              })
          .put(
              new Identifier("SOAPBodyElement"),
              new Import[] {
                newImport("javax.xml.soap.SOAPBodyElement", false),
              })
          .put(
              new Identifier("InvalidActivityException"),
              new Import[] {
                newImport("javax.activity.InvalidActivityException", false),
              })
          .put(
              new Identifier("dk_Sequence"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind.dk_Sequence", true),
              })
          .put(
              new Identifier("isConversionSupported"),
              new Import[] {
                newImport("javax.sound.sampled.AudioSystem.isConversionSupported", true),
              })
          .put(
              new Identifier("BasicTextUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicTextUI", false),
              })
          .put(
              new Identifier("catchException"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandles.catchException", true),
              })
          .put(
              new Identifier("AuthPermission"),
              new Import[] {
                newImport("javax.security.auth.AuthPermission", false),
              })
          .put(
              new Identifier("END_ELEMENT"),
              new Import[] {
                newImport("javax.xml.stream.XMLStreamConstants.END_ELEMENT", true),
              })
          .put(
              new Identifier("RandomAccess"),
              new Import[] {
                newImport("java.util.RandomAccess", false),
              })
          .put(
              new Identifier("IntConsumer"),
              new Import[] {
                newImport("java.util.function.IntConsumer", false),
              })
          .put(
              new Identifier("reorderVisually"),
              new Import[] {
                newImport("java.text.Bidi.reorderVisually", true),
              })
          .put(
              new Identifier("TAG_HMTX"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_HMTX", true),
              })
          .put(
              new Identifier("KeyGeneratorSpi"),
              new Import[] {
                newImport("javax.crypto.KeyGeneratorSpi", false),
              })
          .put(
              new Identifier("DISCONTIGUOUS_TREE_SELECTION"),
              new Import[] {
                newImport("javax.swing.tree.TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION", true),
              })
          .put(
              new Identifier("DomainLoadStoreParameter"),
              new Import[] {
                newImport("java.security.DomainLoadStoreParameter", false),
              })
          .put(
              new Identifier("SO_OOBINLINE"),
              new Import[] {
                newImport("java.net.SocketOptions.SO_OOBINLINE", true),
              })
          .put(
              new Identifier("DEVELOPER_EMPTY"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.PrinterStateReason.DEVELOPER_EMPTY", true),
              })
          .put(
              new Identifier("synchronizedSortedMap"),
              new Import[] {
                newImport("java.util.Collections.synchronizedSortedMap", true),
              })
          .put(
              new Identifier("ComboBoxModel"),
              new Import[] {
                newImport("javax.swing.ComboBoxModel", false),
              })
          .put(
              new Identifier("getListeners"),
              new Import[] {
                newImport("java.awt.AWTEventMulticaster.getListeners", true),
              })
          .put(
              new Identifier("HANGING_BASELINE"),
              new Import[] {
                newImport("java.awt.Font.HANGING_BASELINE", true),
                newImport("java.awt.font.GraphicAttribute.HANGING_BASELINE", true),
              })
          .put(
              new Identifier("unregisterProvider"),
              new Import[] {
                newImport("javax.sql.rowset.spi.SyncFactory.unregisterProvider", true),
              })
          .put(
              new Identifier("getFlatnessSq"),
              new Import[] {
                newImport("java.awt.geom.CubicCurve2D.getFlatnessSq", true),
                newImport("java.awt.geom.QuadCurve2D.getFlatnessSq", true),
              })
          .put(
              new Identifier("PrintQuality"),
              new Import[] {
                newImport("javax.print.attribute.standard.PrintQuality", false),
              })
          .put(
              new Identifier("IMAGEABORTED"),
              new Import[] {
                newImport("java.awt.image.ImageConsumer.IMAGEABORTED", true),
              })
          .put(
              new Identifier("FRAME"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.FRAME", true),
                newImport("javax.swing.JRootPane.FRAME", true),
                newImport("javax.swing.text.html.HTML.Tag.FRAME", true),
              })
          .put(
              new Identifier("JOB_DATA_INSUFFICIENT"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.JobStateReason.JOB_DATA_INSUFFICIENT", true),
              })
          .put(
              new Identifier("REF_MBEAN_OF_INCORRECT_CLASS"),
              new Import[] {
                newImport(
                    "javax.management.relation.RoleStatus.REF_MBEAN_OF_INCORRECT_CLASS", true),
              })
          .put(
              new Identifier("parseShort"),
              new Import[] {
                newImport("java.lang.Short.parseShort", true),
                newImport("javax.xml.bind.DatatypeConverter.parseShort", true),
              })
          .put(
              new Identifier("CollationElementIterator"),
              new Import[] {
                newImport("java.text.CollationElementIterator", false),
              })
          .put(
              new Identifier("AnnotatedWildcardType"),
              new Import[] {
                newImport("java.lang.reflect.AnnotatedWildcardType", false),
              })
          .put(
              new Identifier("DiagnosticCollector"),
              new Import[] {
                newImport("javax.tools.DiagnosticCollector", false),
              })
          .put(
              new Identifier("PARENT_WINDOW_OF_PROPERTY"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRelation.PARENT_WINDOW_OF_PROPERTY", true),
              })
          .put(
              new Identifier("MARGIN_TOP"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.MARGIN_TOP", true),
              })
          .put(
              new Identifier("PRIVATE_USE"),
              new Import[] {
                newImport("java.lang.Character.PRIVATE_USE", true),
              })
          .put(
              new Identifier("ACTION_INFO"),
              new Import[] {
                newImport("javax.management.MBeanOperationInfo.ACTION_INFO", true),
              })
          .put(
              new Identifier("Sasl"),
              new Import[] {
                newImport("javax.security.sasl.Sasl", false),
              })
          .put(
              new Identifier("FontFamilyAction"),
              new Import[] {
                newImport("javax.swing.text.StyledEditorKit.FontFamilyAction", false),
              })
          .put(
              new Identifier("Marshaller"),
              new Import[] {
                newImport("javax.xml.bind.Marshaller", false),
              })
          .put(
              new Identifier("LogicalMessageContext"),
              new Import[] {
                newImport("javax.xml.ws.handler.LogicalMessageContext", false),
              })
          .put(
              new Identifier("InstanceNotFoundException"),
              new Import[] {
                newImport("javax.management.InstanceNotFoundException", false),
              })
          .put(
              new Identifier("getSystemTray"),
              new Import[] {
                newImport("java.awt.SystemTray.getSystemTray", true),
              })
          .put(
              new Identifier("createVerticalGlue"),
              new Import[] {
                newImport("javax.swing.Box.createVerticalGlue", true),
              })
          .put(
              new Identifier("PIE"),
              new Import[] {
                newImport("java.awt.geom.Arc2D.PIE", true),
              })
          .put(
              new Identifier("getControlInstance"),
              new Import[] {
                newImport("javax.naming.ldap.ControlFactory.getControlInstance", true),
              })
          .put(
              new Identifier("Formattable"),
              new Import[] {
                newImport("java.util.Formattable", false),
              })
          .put(
              new Identifier("ARMENIAN"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.ARMENIAN", true),
              })
          .put(
              new Identifier("ofHours"),
              new Import[] {
                newImport("java.time.Duration.ofHours", true),
                newImport("java.time.ZoneOffset.ofHours", true),
              })
          .put(
              new Identifier("DateFormat"),
              new Import[] {
                newImport("java.text.DateFormat", false),
              })
          .put(
              new Identifier("ValueBaseHolder"),
              new Import[] {
                newImport("org.omg.CORBA.ValueBaseHolder", false),
              })
          .put(
              new Identifier("RenderedImage"),
              new Import[] {
                newImport("java.awt.image.RenderedImage", false),
              })
          .put(
              new Identifier("SynthMenuBarUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthMenuBarUI", false),
              })
          .put(
              new Identifier("DISPLAYED_MNEMONIC_INDEX_KEY"),
              new Import[] {
                newImport("javax.swing.Action.DISPLAYED_MNEMONIC_INDEX_KEY", true),
              })
          .put(
              new Identifier("tk_fixed"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind.tk_fixed", true),
              })
          .put(
              new Identifier("AdapterInactiveHelper"),
              new Import[] {
                newImport("org.omg.PortableServer.POAManagerPackage.AdapterInactiveHelper", false),
              })
          .put(
              new Identifier("ServiceIdHelper"),
              new Import[] {
                newImport("org.omg.IOP.ServiceIdHelper", false),
              })
          .put(
              new Identifier("JTableHeader"),
              new Import[] {
                newImport("javax.swing.table.JTableHeader", false),
              })
          .put(
              new Identifier("TC_BLOCKDATALONG"),
              new Import[] {
                newImport("java.io.ObjectStreamConstants.TC_BLOCKDATALONG", true),
              })
          .put(
              new Identifier("WINDOW_DEICONIFIED"),
              new Import[] {
                newImport("java.awt.event.WindowEvent.WINDOW_DEICONIFIED", true),
              })
          .put(
              new Identifier("ScriptException"),
              new Import[] {
                newImport("javax.script.ScriptException", false),
              })
          .put(
              new Identifier("getControlTextColor"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalLookAndFeel.getControlTextColor", true),
              })
          .put(
              new Identifier("MultiTableHeaderUI"),
              new Import[] {
                newImport("javax.swing.plaf.multi.MultiTableHeaderUI", false),
              })
          .put(
              new Identifier("BoundedRangeModel"),
              new Import[] {
                newImport("javax.swing.BoundedRangeModel", false),
              })
          .put(
              new Identifier("BIDI_EMBEDDING"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.BIDI_EMBEDDING", true),
              })
          .put(
              new Identifier("_nobject"),
              new Import[] {
                newImport("org.omg.CosNaming.BindingType._nobject", true),
              })
          .put(
              new Identifier("JobMediaSheets"),
              new Import[] {
                newImport("javax.print.attribute.standard.JobMediaSheets", false),
              })
          .put(
              new Identifier("find"),
              new Import[] {
                newImport("java.nio.file.Files.find", true),
              })
          .put(
              new Identifier("IsoFields"),
              new Import[] {
                newImport("java.time.temporal.IsoFields", false),
              })
          .put(
              new Identifier("calculateInnerArea"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.calculateInnerArea", true),
              })
          .put(
              new Identifier("TOOL_BAR_SEPARATOR"),
              new Import[] {
                newImport("javax.swing.plaf.synth.Region.TOOL_BAR_SEPARATOR", true),
              })
          .put(
              new Identifier("PhantomReference"),
              new Import[] {
                newImport("java.lang.ref.PhantomReference", false),
              })
          .put(
              new Identifier("_DynAnyFactoryStub"),
              new Import[] {
                newImport("org.omg.DynamicAny._DynAnyFactoryStub", false),
              })
          .put(
              new Identifier("setDefaultStream"),
              new Import[] {
                newImport("java.rmi.server.LogStream.setDefaultStream", true),
              })
          .put(
              new Identifier("ONE_TOUCH_EXPANDABLE_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JSplitPane.ONE_TOUCH_EXPANDABLE_PROPERTY", true),
              })
          .put(
              new Identifier("TYPE_USHORT_565_RGB"),
              new Import[] {
                newImport("java.awt.image.BufferedImage.TYPE_USHORT_565_RGB", true),
              })
          .put(
              new Identifier("CertStoreException"),
              new Import[] {
                newImport("java.security.cert.CertStoreException", false),
              })
          .put(
              new Identifier("icTagReserved"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icTagReserved", true),
              })
          .put(
              new Identifier("PrinterState"),
              new Import[] {
                newImport("javax.print.attribute.standard.PrinterState", false),
              })
          .put(
              new Identifier("SynthRadioButtonUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthRadioButtonUI", false),
              })
          .put(
              new Identifier("JAXBException"),
              new Import[] {
                newImport("javax.xml.bind.JAXBException", false),
              })
          .put(
              new Identifier("ACTIVITY_REQUIRED"),
              new Import[] {
                newImport("org.omg.CORBA.ACTIVITY_REQUIRED", false),
              })
          .put(
              new Identifier("NotYetConnectedException"),
              new Import[] {
                newImport("java.nio.channels.NotYetConnectedException", false),
              })
          .put(
              new Identifier("sort"),
              new Import[] {
                newImport("java.util.Arrays.sort", true),
                newImport("java.util.Collections.sort", true),
              })
          .put(
              new Identifier("wrapException"),
              new Import[] {
                newImport("javax.rmi.CORBA.Util.wrapException", true),
              })
          .put(
              new Identifier("Oid"),
              new Import[] {
                newImport("org.ietf.jgss.Oid", false),
              })
          .put(
              new Identifier("fill"),
              new Import[] {
                newImport("java.util.Arrays.fill", true),
                newImport("java.util.Collections.fill", true),
              })
          .put(
              new Identifier("HTTPEQUIV"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.HTTPEQUIV", true),
              })
          .put(
              new Identifier("ServiceContextHolder"),
              new Import[] {
                newImport("org.omg.IOP.ServiceContextHolder", false),
              })
          .put(
              new Identifier("DOCUMENT_TYPE_NODE"),
              new Import[] {
                newImport("org.w3c.dom.Node.DOCUMENT_TYPE_NODE", true),
              })
          .put(
              new Identifier("GLAGOLITIC"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.GLAGOLITIC", true),
              })
          .put(
              new Identifier("X509ExtendedTrustManager"),
              new Import[] {
                newImport("javax.net.ssl.X509ExtendedTrustManager", false),
              })
          .put(
              new Identifier("COMPONENT_EVENT_MASK"),
              new Import[] {
                newImport("java.awt.AWTEvent.COMPONENT_EVENT_MASK", true),
              })
          .put(
              new Identifier("Formatter"),
              new Import[] {
                newImport("java.util.Formatter", false),
                newImport("java.util.logging.Formatter", false),
              })
          .put(
              new Identifier("DataContentHandlerFactory"),
              new Import[] {
                newImport("javax.activation.DataContentHandlerFactory", false),
              })
          .put(
              new Identifier("XA_RBBASE"),
              new Import[] {
                newImport("javax.transaction.xa.XAException.XA_RBBASE", true),
              })
          .put(
              new Identifier("pathSeparatorChar"),
              new Import[] {
                newImport("java.io.File.pathSeparatorChar", true),
              })
          .put(
              new Identifier("LINE_AXIS"),
              new Import[] {
                newImport("javax.swing.BoxLayout.LINE_AXIS", true),
              })
          .put(
              new Identifier("JButton"),
              new Import[] {
                newImport("javax.swing.JButton", false),
              })
          .put(
              new Identifier("ListSelectionEvent"),
              new Import[] {
                newImport("javax.swing.event.ListSelectionEvent", false),
              })
          .put(
              new Identifier("TAI_VIET"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.TAI_VIET", true),
              })
          .put(
              new Identifier("Remote"),
              new Import[] {
                newImport("java.rmi.Remote", false),
              })
          .put(
              new Identifier("RoleNotFoundException"),
              new Import[] {
                newImport("javax.management.relation.RoleNotFoundException", false),
              })
          .put(
              new Identifier("ISO_C0_ENVELOPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_C0_ENVELOPE", true),
              })
          .put(
              new Identifier("MidiFileReader"),
              new Import[] {
                newImport("javax.sound.midi.spi.MidiFileReader", false),
              })
          .put(
              new Identifier("getSaslClientFactories"),
              new Import[] {
                newImport("javax.security.sasl.Sasl.getSaslClientFactories", true),
              })
          .put(
              new Identifier("SOAP11HTTP_MTOM_BINDING"),
              new Import[] {
                newImport("javax.xml.ws.soap.SOAPBinding.SOAP11HTTP_MTOM_BINDING", true),
              })
          .put(
              new Identifier("ABSTRACT"),
              new Import[] {
                newImport("java.lang.reflect.Modifier.ABSTRACT", true),
              })
          .put(
              new Identifier("delete"),
              new Import[] {
                newImport("java.nio.file.Files.delete", true),
              })
          .put(
              new Identifier("isLetter"),
              new Import[] {
                newImport("java.lang.Character.isLetter", true),
              })
          .put(
              new Identifier("ControllerEventListener"),
              new Import[] {
                newImport("javax.sound.midi.ControllerEventListener", false),
              })
          .put(
              new Identifier("VK_PASTE"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_PASTE", true),
              })
          .put(
              new Identifier("CHILD_POLICY_CHOICE"),
              new Import[] {
                newImport("javax.imageio.metadata.IIOMetadataFormat.CHILD_POLICY_CHOICE", true),
              })
          .put(
              new Identifier("KEY_LOCATION_STANDARD"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.KEY_LOCATION_STANDARD", true),
              })
          .put(
              new Identifier("C14NMethodParameterSpec"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.spec.C14NMethodParameterSpec", false),
              })
          .put(
              new Identifier("NotFoundReasonHelper"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextPackage.NotFoundReasonHelper", false),
              })
          .put(
              new Identifier("TypeCode"),
              new Import[] {
                newImport("org.omg.CORBA.TypeCode", false),
              })
          .put(
              new Identifier("SynthLookAndFeel"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthLookAndFeel", false),
              })
          .put(
              new Identifier("unpark"),
              new Import[] {
                newImport("java.util.concurrent.locks.LockSupport.unpark", true),
              })
          .put(
              new Identifier("RadialGradientPaint"),
              new Import[] {
                newImport("java.awt.RadialGradientPaint", false),
              })
          .put(
              new Identifier("DstOver"),
              new Import[] {
                newImport("java.awt.AlphaComposite.DstOver", true),
              })
          .put(
              new Identifier("TaggedComponent"),
              new Import[] {
                newImport("org.omg.IOP.TaggedComponent", false),
              })
          .put(
              new Identifier("REMAINDER"),
              new Import[] {
                newImport("java.awt.GridBagConstraints.REMAINDER", true),
              })
          .put(
              new Identifier("MOVE"),
              new Import[] {
                newImport("javax.swing.TransferHandler.MOVE", true),
              })
          .put(
              new Identifier("DomainManager"),
              new Import[] {
                newImport("org.omg.CORBA.DomainManager", false),
              })
          .put(
              new Identifier("DATALINK"),
              new Import[] {
                newImport("java.sql.Types.DATALINK", true),
              })
          .put(
              new Identifier("COMPACT_DISC"),
              new Import[] {
                newImport("javax.sound.sampled.Port.Info.COMPACT_DISC", true),
              })
          .put(
              new Identifier("CompositeType"),
              new Import[] {
                newImport("javax.management.openmbean.CompositeType", false),
              })
          .build();
}
