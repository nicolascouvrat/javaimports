// Code generated by GenerateStdlib.java. DO NOT EDIT.
package com.nikodoko.javaimports.stdlib.internal.api.v8;

import static com.nikodoko.javaimports.stdlib.internal.Stdlib.newImport;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.common.Identifier;
import com.nikodoko.javaimports.common.Import;
import java.util.Map;

public class Java8StdlibChunk23 {
  static final Map<Identifier, Import[]> CLASSES =
      new ImmutableMap.Builder<Identifier, Import[]>()
          .put(
              new Identifier("DST_OVER"),
              new Import[] {
                newImport("java.awt.AlphaComposite.DST_OVER", true),
              })
          .put(
              new Identifier("UTF_16LE"),
              new Import[] {
                newImport("java.nio.charset.StandardCharsets.UTF_16LE", true),
              })
          .put(
              new Identifier("TableModelEvent"),
              new Import[] {
                newImport("javax.swing.event.TableModelEvent", false),
              })
          .put(
              new Identifier("TYPE_SHORT"),
              new Import[] {
                newImport("java.awt.image.DataBuffer.TYPE_SHORT", true),
              })
          .put(
              new Identifier("FileNotFoundException"),
              new Import[] {
                newImport("java.io.FileNotFoundException", false),
              })
          .put(
              new Identifier("toUnsignedLong"),
              new Import[] {
                newImport("java.lang.Byte.toUnsignedLong", true),
                newImport("java.lang.Integer.toUnsignedLong", true),
                newImport("java.lang.Short.toUnsignedLong", true),
              })
          .put(
              new Identifier("NodeDimensions"),
              new Import[] {
                newImport("javax.swing.tree.AbstractLayoutCache.NodeDimensions", false),
              })
          .put(
              new Identifier("newSingleThreadExecutor"),
              new Import[] {
                newImport("java.util.concurrent.Executors.newSingleThreadExecutor", true),
              })
          .put(
              new Identifier("ElementVisitor"),
              new Import[] {
                newImport("javax.lang.model.element.ElementVisitor", false),
              })
          .put(
              new Identifier("VALUE_STROKE_DEFAULT"),
              new Import[] {
                newImport("java.awt.RenderingHints.VALUE_STROKE_DEFAULT", true),
              })
          .put(
              new Identifier("createUI"),
              new Import[] {
                newImport("javax.swing.plaf.ComponentUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicButtonUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicCheckBoxMenuItemUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicCheckBoxUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicColorChooserUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicComboBoxUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicDesktopIconUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicDesktopPaneUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicEditorPaneUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicFileChooserUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicFormattedTextFieldUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicInternalFrameUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicLabelUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicListUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicMenuBarUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicMenuItemUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicMenuUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicOptionPaneUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicPanelUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicPasswordFieldUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicPopupMenuSeparatorUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicPopupMenuUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicProgressBarUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicRadioButtonMenuItemUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicRadioButtonUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicRootPaneUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicScrollBarUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicScrollPaneUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicSeparatorUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicSliderUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicSpinnerUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicSplitPaneUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicTabbedPaneUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicTableHeaderUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicTableUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicTextAreaUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicTextFieldUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicTextPaneUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicToggleButtonUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicToolBarSeparatorUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicToolBarUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicToolTipUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicTreeUI.createUI", true),
                newImport("javax.swing.plaf.basic.BasicViewportUI.createUI", true),
                newImport("javax.swing.plaf.metal.MetalButtonUI.createUI", true),
                newImport("javax.swing.plaf.metal.MetalCheckBoxUI.createUI", true),
                newImport("javax.swing.plaf.metal.MetalComboBoxUI.createUI", true),
                newImport("javax.swing.plaf.metal.MetalDesktopIconUI.createUI", true),
                newImport("javax.swing.plaf.metal.MetalFileChooserUI.createUI", true),
                newImport("javax.swing.plaf.metal.MetalInternalFrameUI.createUI", true),
                newImport("javax.swing.plaf.metal.MetalLabelUI.createUI", true),
                newImport("javax.swing.plaf.metal.MetalMenuBarUI.createUI", true),
                newImport("javax.swing.plaf.metal.MetalPopupMenuSeparatorUI.createUI", true),
                newImport("javax.swing.plaf.metal.MetalProgressBarUI.createUI", true),
                newImport("javax.swing.plaf.metal.MetalRadioButtonUI.createUI", true),
                newImport("javax.swing.plaf.metal.MetalRootPaneUI.createUI", true),
                newImport("javax.swing.plaf.metal.MetalScrollBarUI.createUI", true),
                newImport("javax.swing.plaf.metal.MetalScrollPaneUI.createUI", true),
                newImport("javax.swing.plaf.metal.MetalSeparatorUI.createUI", true),
                newImport("javax.swing.plaf.metal.MetalSliderUI.createUI", true),
                newImport("javax.swing.plaf.metal.MetalSplitPaneUI.createUI", true),
                newImport("javax.swing.plaf.metal.MetalTabbedPaneUI.createUI", true),
                newImport("javax.swing.plaf.metal.MetalTextFieldUI.createUI", true),
                newImport("javax.swing.plaf.metal.MetalToggleButtonUI.createUI", true),
                newImport("javax.swing.plaf.metal.MetalToolBarUI.createUI", true),
                newImport("javax.swing.plaf.metal.MetalToolTipUI.createUI", true),
                newImport("javax.swing.plaf.metal.MetalTreeUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiButtonUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiColorChooserUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiComboBoxUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiDesktopIconUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiDesktopPaneUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiFileChooserUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiInternalFrameUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiLabelUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiListUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiMenuBarUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiMenuItemUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiOptionPaneUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiPanelUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiPopupMenuUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiProgressBarUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiRootPaneUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiScrollBarUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiScrollPaneUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiSeparatorUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiSliderUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiSpinnerUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiSplitPaneUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiTabbedPaneUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiTableHeaderUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiTableUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiTextUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiToolBarUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiToolTipUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiTreeUI.createUI", true),
                newImport("javax.swing.plaf.multi.MultiViewportUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthButtonUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthCheckBoxMenuItemUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthCheckBoxUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthColorChooserUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthComboBoxUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthDesktopIconUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthDesktopPaneUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthEditorPaneUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthFormattedTextFieldUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthInternalFrameUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthLabelUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthListUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthLookAndFeel.createUI", true),
                newImport("javax.swing.plaf.synth.SynthMenuBarUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthMenuItemUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthMenuUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthOptionPaneUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthPanelUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthPasswordFieldUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthPopupMenuUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthProgressBarUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthRadioButtonMenuItemUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthRadioButtonUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthRootPaneUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthScrollBarUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthScrollPaneUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthSeparatorUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthSliderUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthSpinnerUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthSplitPaneUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthTabbedPaneUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthTableHeaderUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthTableUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthTextAreaUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthTextFieldUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthTextPaneUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthToggleButtonUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthToolBarUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthToolTipUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthTreeUI.createUI", true),
                newImport("javax.swing.plaf.synth.SynthViewportUI.createUI", true),
              })
          .put(
              new Identifier("SynthColorChooserUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthColorChooserUI", false),
              })
          .put(
              new Identifier("RemoteObject"),
              new Import[] {
                newImport("java.rmi.server.RemoteObject", false),
              })
          .put(
              new Identifier("StreamableValue"),
              new Import[] {
                newImport("org.omg.CORBA.portable.StreamableValue", false),
              })
          .put(
              new Identifier("getFileChooserDetailViewIcon"),
              new Import[] {
                newImport(
                    "javax.swing.plaf.metal.MetalIconFactory.getFileChooserDetailViewIcon", true),
              })
          .put(
              new Identifier("TAG_MULTIPLE_COMPONENTS"),
              new Import[] {
                newImport("org.omg.IOP.TAG_MULTIPLE_COMPONENTS", false),
              })
          .put(
              new Identifier("ObjectNotActive"),
              new Import[] {
                newImport("org.omg.PortableServer.POAPackage.ObjectNotActive", false),
              })
          .put(
              new Identifier("InterruptibleChannel"),
              new Import[] {
                newImport("java.nio.channels.InterruptibleChannel", false),
              })
          .put(
              new Identifier("DEVANAGARI_EXTENDED"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.DEVANAGARI_EXTENDED", true),
              })
          .put(
              new Identifier("randomUUID"),
              new Import[] {
                newImport("java.util.UUID.randomUUID", true),
              })
          .put(
              new Identifier("DropLocation"),
              new Import[] {
                newImport("javax.swing.JList.DropLocation", false),
                newImport("javax.swing.JTable.DropLocation", false),
                newImport("javax.swing.JTree.DropLocation", false),
                newImport("javax.swing.TransferHandler.DropLocation", false),
                newImport("javax.swing.text.JTextComponent.DropLocation", false),
              })
          .put(
              new Identifier("Inherited"),
              new Import[] {
                newImport("java.lang.annotation.Inherited", false),
              })
          .put(
              new Identifier("CHILD_NODE_OF"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRelation.CHILD_NODE_OF", true),
              })
          .put(
              new Identifier("CompilationTask"),
              new Import[] {
                newImport("javax.tools.JavaCompiler.CompilationTask", false),
              })
          .put(
              new Identifier("IIOWriteProgressListener"),
              new Import[] {
                newImport("javax.imageio.event.IIOWriteProgressListener", false),
              })
          .put(
              new Identifier("getIntegerInstance"),
              new Import[] {
                newImport("java.text.NumberFormat.getIntegerInstance", true),
              })
          .put(
              new Identifier("makeComponentInputMap"),
              new Import[] {
                newImport("javax.swing.LookAndFeel.makeComponentInputMap", true),
              })
          .put(
              new Identifier("TYPE_6CLR"),
              new Import[] {
                newImport("java.awt.color.ColorSpace.TYPE_6CLR", true),
              })
          .put(
              new Identifier("INPUT_METHOD_SEGMENT"),
              new Import[] {
                newImport(
                    "java.text.AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT", true),
              })
          .put(
              new Identifier("JoinPreviousDirection"),
              new Import[] {
                newImport(
                    "javax.swing.text.DefaultStyledDocument.ElementSpec.JoinPreviousDirection",
                    true),
              })
          .put(
              new Identifier("Arrays"),
              new Import[] {
                newImport("java.util.Arrays", false),
              })
          .put(
              new Identifier("getTargetEncodings"),
              new Import[] {
                newImport("javax.sound.sampled.AudioSystem.getTargetEncodings", true),
              })
          .put(
              new Identifier("MBeanRegistrationException"),
              new Import[] {
                newImport("javax.management.MBeanRegistrationException", false),
              })
          .put(
              new Identifier("NamingContextHelper"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextHelper", false),
              })
          .put(
              new Identifier("DOMResult"),
              new Import[] {
                newImport("javax.xml.transform.dom.DOMResult", false),
              })
          .put(
              new Identifier("TransformerConfigurationException"),
              new Import[] {
                newImport("javax.xml.transform.TransformerConfigurationException", false),
              })
          .put(
              new Identifier("yellow"),
              new Import[] {
                newImport("java.awt.Color.yellow", true),
              })
          .put(
              new Identifier("ICON_CHANGED_PROPERTY"),
              new Import[] {
                newImport("javax.swing.AbstractButton.ICON_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("EMPTY_DESCRIPTOR"),
              new Import[] {
                newImport("javax.management.ImmutableDescriptor.EMPTY_DESCRIPTOR", true),
              })
          .put(
              new Identifier("ShutdownChannelGroupException"),
              new Import[] {
                newImport("java.nio.channels.ShutdownChannelGroupException", false),
              })
          .put(
              new Identifier("Notification"),
              new Import[] {
                newImport("javax.management.Notification", false),
              })
          .put(
              new Identifier("VALUE_RENDER_DEFAULT"),
              new Import[] {
                newImport("java.awt.RenderingHints.VALUE_RENDER_DEFAULT", true),
              })
          .put(
              new Identifier("ForegroundAction"),
              new Import[] {
                newImport("javax.swing.text.StyledEditorKit.ForegroundAction", false),
              })
          .put(
              new Identifier("OBJECT_ADDED"),
              new Import[] {
                newImport("javax.naming.event.NamingEvent.OBJECT_ADDED", true),
              })
          .put(
              new Identifier("PackedColorModel"),
              new Import[] {
                newImport("java.awt.image.PackedColorModel", false),
              })
          .put(
              new Identifier("MouseEvent"),
              new Import[] {
                newImport("java.awt.event.MouseEvent", false),
                newImport("org.w3c.dom.events.MouseEvent", false),
              })
          .put(
              new Identifier("JDBCType"),
              new Import[] {
                newImport("java.sql.JDBCType", false),
              })
          .put(
              new Identifier("BasicReason"),
              new Import[] {
                newImport("java.security.cert.CertPathValidatorException.BasicReason", false),
              })
          .put(
              new Identifier("TRANSACTION_NONE"),
              new Import[] {
                newImport("java.sql.Connection.TRANSACTION_NONE", true),
              })
          .put(
              new Identifier("HTMLEditorKit"),
              new Import[] {
                newImport("javax.swing.text.html.HTMLEditorKit", false),
              })
          .put(
              new Identifier("TextAction"),
              new Import[] {
                newImport("javax.swing.text.TextAction", false),
              })
          .put(
              new Identifier("BAD_NAMETYPE"),
              new Import[] {
                newImport("org.ietf.jgss.GSSException.BAD_NAMETYPE", true),
              })
          .put(
              new Identifier("blue"),
              new Import[] {
                newImport("java.awt.Color.blue", true),
              })
          .put(
              new Identifier("IllegalFormatException"),
              new Import[] {
                newImport("java.util.IllegalFormatException", false),
              })
          .put(
              new Identifier("MetalTreeUI"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalTreeUI", false),
              })
          .put(
              new Identifier("ListUI"),
              new Import[] {
                newImport("javax.swing.plaf.ListUI", false),
              })
          .put(
              new Identifier("sqlStateSQL99"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.sqlStateSQL99", true),
              })
          .put(
              new Identifier("getMemoryMXBean"),
              new Import[] {
                newImport("java.lang.management.ManagementFactory.getMemoryMXBean", true),
              })
          .put(
              new Identifier("MetalToolBarUI"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalToolBarUI", false),
              })
          .put(
              new Identifier("INSCRIPTIONAL_PAHLAVI"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.INSCRIPTIONAL_PAHLAVI", true),
              })
          .put(
              new Identifier("XMLStreamWriter"),
              new Import[] {
                newImport("javax.xml.stream.XMLStreamWriter", false),
              })
          .put(
              new Identifier("TAG_VDMX"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_VDMX", true),
              })
          .put(
              new Identifier("asInterfaceInstance"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandleProxies.asInterfaceInstance", true),
              })
          .put(
              new Identifier("NORTHWEST"),
              new Import[] {
                newImport("java.awt.GridBagConstraints.NORTHWEST", true),
              })
          .put(
              new Identifier("Compiler"),
              new Import[] {
                newImport("java.lang.Compiler", false),
              })
          .put(
              new Identifier("NotOwnerException"),
              new Import[] {
                newImport("java.security.acl.NotOwnerException", false),
              })
          .put(
              new Identifier("TransactionRequiredException"),
              new Import[] {
                newImport("javax.transaction.TransactionRequiredException", false),
              })
          .put(
              new Identifier("TransformerFactory"),
              new Import[] {
                newImport("javax.xml.transform.TransformerFactory", false),
              })
          .put(
              new Identifier("AbstractTypeVisitor6"),
              new Import[] {
                newImport("javax.lang.model.util.AbstractTypeVisitor6", false),
              })
          .put(
              new Identifier("AbstractTypeVisitor7"),
              new Import[] {
                newImport("javax.lang.model.util.AbstractTypeVisitor7", false),
              })
          .put(
              new Identifier("KeyEventPostProcessor"),
              new Import[] {
                newImport("java.awt.KeyEventPostProcessor", false),
              })
          .put(
              new Identifier("AbstractTypeVisitor8"),
              new Import[] {
                newImport("javax.lang.model.util.AbstractTypeVisitor8", false),
              })
          .put(
              new Identifier("INVOCATION_DEFAULT"),
              new Import[] {
                newImport("java.awt.event.InvocationEvent.INVOCATION_DEFAULT", true),
              })
          .put(
              new Identifier("NA_NUMBER_12_ENVELOPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.NA_NUMBER_12_ENVELOPE", true),
                newImport(
                    "javax.print.attribute.standard.MediaSizeName.NA_NUMBER_12_ENVELOPE", true),
                newImport(
                    "javax.print.attribute.standard.MediaSize.NA.NA_NUMBER_12_ENVELOPE", true),
              })
          .put(
              new Identifier("createGrayLineBorder"),
              new Import[] {
                newImport("javax.swing.border.LineBorder.createGrayLineBorder", true),
              })
          .put(
              new Identifier("list"),
              new Import[] {
                newImport("java.nio.file.Files.list", true),
                newImport("java.rmi.Naming.list", true),
                newImport("java.util.Collections.list", true),
              })
          .put(
              new Identifier("AFTER_LAST_LINE"),
              new Import[] {
                newImport("java.awt.BorderLayout.AFTER_LAST_LINE", true),
              })
          .put(
              new Identifier("XA_RBINTEGRITY"),
              new Import[] {
                newImport("javax.transaction.xa.XAException.XA_RBINTEGRITY", true),
              })
          .put(
              new Identifier("InconsistentTypeCode"),
              new Import[] {
                newImport("org.omg.CORBA.ORBPackage.InconsistentTypeCode", false),
                newImport("org.omg.DynamicAny.DynAnyFactoryPackage.InconsistentTypeCode", false),
              })
          .put(
              new Identifier("SOAPFaultElement"),
              new Import[] {
                newImport("javax.xml.soap.SOAPFaultElement", false),
              })
          .put(
              new Identifier("LoginModuleControlFlag"),
              new Import[] {
                newImport(
                    "javax.security.auth.login.AppConfigurationEntry.LoginModuleControlFlag",
                    false),
              })
          .put(
              new Identifier("ObjectFactoryBuilder"),
              new Import[] {
                newImport("javax.naming.spi.ObjectFactoryBuilder", false),
              })
          .put(
              new Identifier("getClip"),
              new Import[] {
                newImport("javax.sound.sampled.AudioSystem.getClip", true),
              })
          .put(
              new Identifier("JSpinner"),
              new Import[] {
                newImport("javax.swing.JSpinner", false),
              })
          .put(
              new Identifier("VK_SLASH"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_SLASH", true),
              })
          .put(
              new Identifier("Icon"),
              new Import[] {
                newImport("javax.swing.Icon", false),
              })
          .put(
              new Identifier("NimbusLookAndFeel"),
              new Import[] {
                newImport("javax.swing.plaf.nimbus.NimbusLookAndFeel", false),
              })
          .put(
              new Identifier("MidiFileWriter"),
              new Import[] {
                newImport("javax.sound.midi.spi.MidiFileWriter", false),
              })
          .put(
              new Identifier("AtomicMarkableReference"),
              new Import[] {
                newImport("java.util.concurrent.atomic.AtomicMarkableReference", false),
              })
          .put(
              new Identifier("IllegalStateException"),
              new Import[] {
                newImport("java.lang.IllegalStateException", false),
              })
          .put(
              new Identifier("GlobalScope"),
              new Import[] {
                newImport("javax.xml.bind.JAXBElement.GlobalScope", false),
              })
          .put(
              new Identifier("HIERARCHY_FIRST"),
              new Import[] {
                newImport("java.awt.event.HierarchyEvent.HIERARCHY_FIRST", true),
              })
          .put(
              new Identifier("HTTP_BAD_REQUEST"),
              new Import[] {
                newImport("java.net.HttpURLConnection.HTTP_BAD_REQUEST", true),
              })
          .put(
              new Identifier("lookupDefaultPrintService"),
              new Import[] {
                newImport("javax.print.PrintServiceLookup.lookupDefaultPrintService", true),
              })
          .put(
              new Identifier("MBeanInfo"),
              new Import[] {
                newImport("javax.management.MBeanInfo", false),
              })
          .put(
              new Identifier("WindowStateListener"),
              new Import[] {
                newImport("java.awt.event.WindowStateListener", false),
              })
          .put(
              new Identifier("getImageWritersByFormatName"),
              new Import[] {
                newImport("javax.imageio.ImageIO.getImageWritersByFormatName", true),
              })
          .put(
              new Identifier("JMXAuthenticator"),
              new Import[] {
                newImport("javax.management.remote.JMXAuthenticator", false),
              })
          .put(
              new Identifier("SerialBlob"),
              new Import[] {
                newImport("javax.sql.rowset.serial.SerialBlob", false),
              })
          .put(
              new Identifier("ACCEPT_ORIGINAL_SERVER"),
              new Import[] {
                newImport("java.net.CookiePolicy.ACCEPT_ORIGINAL_SERVER", true),
              })
          .put(
              new Identifier("UnsolicitedNotification"),
              new Import[] {
                newImport("javax.naming.ldap.UnsolicitedNotification", false),
              })
          .put(
              new Identifier("XmlSeeAlso"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlSeeAlso", false),
              })
          .put(
              new Identifier("remove"),
              new Import[] {
                newImport("java.awt.AWTEventMulticaster.remove", true),
              })
          .put(
              new Identifier("NCHAR"),
              new Import[] {
                newImport("java.sql.Types.NCHAR", true),
              })
          .put(
              new Identifier("OBJECT_FACTORIES"),
              new Import[] {
                newImport("javax.naming.Context.OBJECT_FACTORIES", true),
              })
          .put(
              new Identifier("INTERNAL_FRAME_DEICONIFIED"),
              new Import[] {
                newImport("javax.swing.event.InternalFrameEvent.INTERNAL_FRAME_DEICONIFIED", true),
              })
          .put(
              new Identifier("SORA_SOMPENG"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.SORA_SOMPENG", true),
              })
          .put(
              new Identifier("TOOL_BAR"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.TOOL_BAR", true),
                newImport("javax.swing.plaf.synth.Region.TOOL_BAR", true),
              })
          .put(
              new Identifier("ServiceContextHelper"),
              new Import[] {
                newImport("org.omg.IOP.ServiceContextHelper", false),
              })
          .put(
              new Identifier("ChronoField"),
              new Import[] {
                newImport("java.time.temporal.ChronoField", false),
              })
          .put(
              new Identifier("PolicyError"),
              new Import[] {
                newImport("org.omg.CORBA.PolicyError", false),
              })
          .put(
              new Identifier("NaN"),
              new Import[] {
                newImport("java.lang.Double.NaN", true), newImport("java.lang.Float.NaN", true),
              })
          .put(
              new Identifier("wrapperInstanceTarget"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandleProxies.wrapperInstanceTarget", true),
              })
          .put(
              new Identifier("IndexColorModel"),
              new Import[] {
                newImport("java.awt.image.IndexColorModel", false),
              })
          .put(
              new Identifier("CURRENCY"),
              new Import[] {
                newImport("java.text.NumberFormat.Field.CURRENCY", true),
              })
          .put(
              new Identifier("PGDN"),
              new Import[] {
                newImport("java.awt.Event.PGDN", true),
              })
          .put(
              new Identifier("loadInstalled"),
              new Import[] {
                newImport("java.util.ServiceLoader.loadInstalled", true),
              })
          .put(
              new Identifier("IGNORE_IMMEDIATE_BEANINFO"),
              new Import[] {
                newImport("java.beans.Introspector.IGNORE_IMMEDIATE_BEANINFO", true),
              })
          .put(
              new Identifier("INTERSECT"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.spec.XPathType.Filter.INTERSECT", true),
              })
          .put(
              new Identifier("Adler32"),
              new Import[] {
                newImport("java.util.zip.Adler32", false),
              })
          .put(
              new Identifier("WRAP_TAB_LAYOUT"),
              new Import[] {
                newImport("javax.swing.JTabbedPane.WRAP_TAB_LAYOUT", true),
              })
          .put(
              new Identifier("TABLOID"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.TABLOID", true),
                newImport("javax.print.attribute.standard.MediaSizeName.TABLOID", true),
                newImport("javax.print.attribute.standard.MediaSize.Other.TABLOID", true),
              })
          .put(
              new Identifier("getPointerInfo"),
              new Import[] {
                newImport("java.awt.MouseInfo.getPointerInfo", true),
              })
          .put(
              new Identifier("VK_SEPARATOR"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_SEPARATOR", true),
              })
          .put(
              new Identifier("BeanDescriptor"),
              new Import[] {
                newImport("java.beans.BeanDescriptor", false),
              })
          .put(
              new Identifier("ExtendedResponse"),
              new Import[] {
                newImport("javax.naming.ldap.ExtendedResponse", false),
              })
          .put(
              new Identifier("ActivationDesc"),
              new Import[] {
                newImport("java.rmi.activation.ActivationDesc", false),
              })
          .put(
              new Identifier("NoSuchObjectException"),
              new Import[] {
                newImport("java.rmi.NoSuchObjectException", false),
              })
          .put(
              new Identifier("emptySortedSet"),
              new Import[] {
                newImport("java.util.Collections.emptySortedSet", true),
              })
          .put(
              new Identifier("MetalToggleButtonUI"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalToggleButtonUI", false),
              })
          .put(
              new Identifier("getContextualShaper"),
              new Import[] {
                newImport("java.awt.font.NumericShaper.getContextualShaper", true),
              })
          .put(
              new Identifier("GMONTHDAY"),
              new Import[] {
                newImport("javax.xml.datatype.DatatypeConstants.GMONTHDAY", true),
              })
          .put(
              new Identifier("ImageGraphicAttribute"),
              new Import[] {
                newImport("java.awt.font.ImageGraphicAttribute", false),
              })
          .put(
              new Identifier("WHEEL_BLOCK_SCROLL"),
              new Import[] {
                newImport("java.awt.event.MouseWheelEvent.WHEEL_BLOCK_SCROLL", true),
              })
          .put(
              new Identifier("_tk_longlong"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind._tk_longlong", true),
              })
          .put(
              new Identifier("SINGLE_SELECTION"),
              new Import[] {
                newImport("javax.swing.ListSelectionModel.SINGLE_SELECTION", true),
              })
          .put(
              new Identifier("GraphicsConfiguration"),
              new Import[] {
                newImport("java.awt.GraphicsConfiguration", false),
              })
          .put(
              new Identifier("ChannelBinding"),
              new Import[] {
                newImport("org.ietf.jgss.ChannelBinding", false),
              })
          .put(
              new Identifier("BRAHMI"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.BRAHMI", true),
              })
          .put(
              new Identifier("BeanContextContainerProxy"),
              new Import[] {
                newImport("java.beans.beancontext.BeanContextContainerProxy", false),
              })
          .put(
              new Identifier("COMBINING_DIACRITICAL_MARKS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.COMBINING_DIACRITICAL_MARKS", true),
              })
          .put(
              new Identifier("SRC_OVER"),
              new Import[] {
                newImport("java.awt.AlphaComposite.SRC_OVER", true),
              })
          .put(
              new Identifier("codePointBefore"),
              new Import[] {
                newImport("java.lang.Character.codePointBefore", true),
              })
          .put(
              new Identifier("getTreeLeafIcon"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalIconFactory.getTreeLeafIcon", true),
              })
          .put(
              new Identifier("spliterator"),
              new Import[] {
                newImport("java.util.Arrays.spliterator", true),
                newImport("java.util.Spliterators.spliterator", true),
              })
          .put(
              new Identifier("ACTIVATOR_ID"),
              new Import[] {
                newImport("java.rmi.server.ObjID.ACTIVATOR_ID", true),
              })
          .put(
              new Identifier("VK_DELETE"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_DELETE", true),
              })
          .put(
              new Identifier("TAG_POLICIES"),
              new Import[] {
                newImport("org.omg.IOP.TAG_POLICIES", false),
              })
          .put(
              new Identifier("ForwardRequestHelper"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.ForwardRequestHelper", false),
                newImport("org.omg.PortableServer.ForwardRequestHelper", false),
              })
          .put(
              new Identifier("getExponent"),
              new Import[] {
                newImport("java.lang.Math.getExponent", true),
                newImport("java.lang.StrictMath.getExponent", true),
              })
          .put(
              new Identifier("SUPERSCRIPT"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.SUPERSCRIPT", true),
              })
          .put(
              new Identifier("HMACParameterSpec"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.spec.HMACParameterSpec", false),
              })
          .put(
              new Identifier("PKIXRevocationChecker"),
              new Import[] {
                newImport("java.security.cert.PKIXRevocationChecker", false),
              })
          .put(
              new Identifier("DocumentationTask"),
              new Import[] {
                newImport("javax.tools.DocumentationTool.DocumentationTask", false),
              })
          .put(
              new Identifier("ReadOnlyBufferException"),
              new Import[] {
                newImport("java.nio.ReadOnlyBufferException", false),
              })
          .put(
              new Identifier("ofMillis"),
              new Import[] {
                newImport("java.time.Duration.ofMillis", true),
              })
          .put(
              new Identifier("selectionBeginParagraphAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.selectionBeginParagraphAction", true),
              })
          .put(
              new Identifier("WIDTH"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.WIDTH", true),
                newImport("java.awt.image.ImageObserver.WIDTH", true),
                newImport("javax.swing.SpringLayout.WIDTH", true),
                newImport("javax.swing.text.html.CSS.Attribute.WIDTH", true),
                newImport("javax.swing.text.html.HTML.Attribute.WIDTH", true),
              })
          .put(
              new Identifier("IGNORE"),
              new Import[] {
                newImport("java.nio.charset.CodingErrorAction.IGNORE", true),
              })
          .put(
              new Identifier("AnnotationTypeMismatchException"),
              new Import[] {
                newImport("java.lang.annotation.AnnotationTypeMismatchException", false),
              })
          .put(
              new Identifier("OFF"),
              new Import[] {
                newImport("java.util.logging.Level.OFF", true),
              })
          .put(
              new Identifier("VALUE_ANTIALIAS_OFF"),
              new Import[] {
                newImport("java.awt.RenderingHints.VALUE_ANTIALIAS_OFF", true),
              })
          .put(
              new Identifier("CHARACTERS"),
              new Import[] {
                newImport("javax.xml.stream.XMLStreamConstants.CHARACTERS", true),
              })
          .put(
              new Identifier("spreadInvoker"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandles.spreadInvoker", true),
              })
          .put(
              new Identifier("WebMethod"),
              new Import[] {
                newImport("javax.jws.WebMethod", false),
              })
          .put(
              new Identifier("OriginateDirection"),
              new Import[] {
                newImport(
                    "javax.swing.text.DefaultStyledDocument.ElementSpec.OriginateDirection", true),
              })
          .put(
              new Identifier("PRIORITY_NONE"),
              new Import[] {
                newImport("java.awt.font.GlyphJustificationInfo.PRIORITY_NONE", true),
              })
          .put(
              new Identifier("NOTIFS_LOST"),
              new Import[] {
                newImport("javax.management.remote.JMXConnectionNotification.NOTIFS_LOST", true),
              })
          .put(
              new Identifier("_tk_TypeCode"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind._tk_TypeCode", true),
              })
          .put(
              new Identifier("READING"),
              new Import[] {
                newImport("java.text.AttributedCharacterIterator.Attribute.READING", true),
              })
          .put(
              new Identifier("MetalSeparatorUI"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalSeparatorUI", false),
              })
          .put(
              new Identifier("icHdrRenderingIntent"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icHdrRenderingIntent", true),
              })
          .put(
              new Identifier("_tk_wchar"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind._tk_wchar", true),
              })
          .put(
              new Identifier("RAW_TEXT"),
              new Import[] {
                newImport("java.awt.im.InputMethodHighlight.RAW_TEXT", true),
              })
          .put(
              new Identifier("ServiceContextListHolder"),
              new Import[] {
                newImport("org.omg.IOP.ServiceContextListHolder", false),
              })
          .put(
              new Identifier("TEXT_FIRST"),
              new Import[] {
                newImport("java.awt.event.TextEvent.TEXT_FIRST", true),
              })
          .put(
              new Identifier("Introspector"),
              new Import[] {
                newImport("java.beans.Introspector", false),
              })
          .put(
              new Identifier("ADD_ATTRIBUTE"),
              new Import[] {
                newImport("javax.naming.directory.DirContext.ADD_ATTRIBUTE", true),
              })
          .put(
              new Identifier("KeyManagerFactorySpi"),
              new Import[] {
                newImport("javax.net.ssl.KeyManagerFactorySpi", false),
              })
          .put(
              new Identifier("LayoutFocusTraversalPolicy"),
              new Import[] {
                newImport("javax.swing.LayoutFocusTraversalPolicy", false),
              })
          .put(
              new Identifier("KEY_LOCATION_NUMPAD"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.KEY_LOCATION_NUMPAD", true),
              })
          .put(
              new Identifier("IEEEremainder"),
              new Import[] {
                newImport("java.lang.Math.IEEEremainder", true),
                newImport("java.lang.StrictMath.IEEEremainder", true),
              })
          .put(
              new Identifier("TileObserver"),
              new Import[] {
                newImport("java.awt.image.TileObserver", false),
              })
          .put(
              new Identifier("Beans"),
              new Import[] {
                newImport("java.beans.Beans", false),
              })
          .put(
              new Identifier("ByteChannel"),
              new Import[] {
                newImport("java.nio.channels.ByteChannel", false),
              })
          .put(
              new Identifier("_tk_native"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind._tk_native", true),
              })
          .put(
              new Identifier("VK_DEAD_GRAVE"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_DEAD_GRAVE", true),
              })
          .put(
              new Identifier("PrinterMakeAndModel"),
              new Import[] {
                newImport("javax.print.attribute.standard.PrinterMakeAndModel", false),
              })
          .put(
              new Identifier("MenuBarUI"),
              new Import[] {
                newImport("javax.swing.plaf.MenuBarUI", false),
              })
          .put(
              new Identifier("ImageInputStreamSpi"),
              new Import[] {
                newImport("javax.imageio.spi.ImageInputStreamSpi", false),
              })
          .put(
              new Identifier("setLog"),
              new Import[] {
                newImport("java.rmi.server.RemoteServer.setLog", true),
              })
          .put(
              new Identifier("Choice"),
              new Import[] {
                newImport("java.awt.Choice", false),
              })
          .put(
              new Identifier("PORTRAIT"),
              new Import[] {
                newImport("java.awt.PageAttributes.OrientationRequestedType.PORTRAIT", true),
                newImport("java.awt.print.PageFormat.PORTRAIT", true),
                newImport("javax.print.attribute.standard.OrientationRequested.PORTRAIT", true),
              })
          .put(
              new Identifier("FlavorException"),
              new Import[] {
                newImport("javax.print.FlavorException", false),
              })
          .put(
              new Identifier("toList"),
              new Import[] {
                newImport("java.util.stream.Collectors.toList", true),
              })
          .put(
              new Identifier("CharsetEncoder"),
              new Import[] {
                newImport("java.nio.charset.CharsetEncoder", false),
              })
          .put(
              new Identifier("FRENCH"),
              new Import[] {
                newImport("java.util.Locale.FRENCH", true),
              })
          .put(
              new Identifier("HierarchyListener"),
              new Import[] {
                newImport("java.awt.event.HierarchyListener", false),
              })
          .put(
              new Identifier("BasicRadioButtonUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicRadioButtonUI", false),
              })
          .put(
              new Identifier("SchemaOutputResolver"),
              new Import[] {
                newImport("javax.xml.bind.SchemaOutputResolver", false),
              })
          .put(
              new Identifier("CJK_SYMBOLS_AND_PUNCTUATION"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION", true),
              })
          .put(
              new Identifier("NA_5X7"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSizeName.NA_5X7", true),
                newImport("javax.print.attribute.standard.MediaSize.NA.NA_5X7", true),
              })
          .put(
              new Identifier("CENVER"),
              new Import[] {
                newImport("java.util.jar.JarEntry.CENVER", true),
                newImport("java.util.jar.JarFile.CENVER", true),
                newImport("java.util.jar.JarInputStream.CENVER", true),
                newImport("java.util.jar.JarOutputStream.CENVER", true),
                newImport("java.util.zip.ZipEntry.CENVER", true),
                newImport("java.util.zip.ZipFile.CENVER", true),
                newImport("java.util.zip.ZipInputStream.CENVER", true),
                newImport("java.util.zip.ZipOutputStream.CENVER", true),
              })
          .put(
              new Identifier("YIJING_HEXAGRAM_SYMBOLS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.YIJING_HEXAGRAM_SYMBOLS", true),
              })
          .put(
              new Identifier("AtomicIntegerFieldUpdater"),
              new Import[] {
                newImport("java.util.concurrent.atomic.AtomicIntegerFieldUpdater", false),
              })
          .put(
              new Identifier("CJK_UNIFIED_IDEOGRAPHS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS", true),
              })
          .put(
              new Identifier("CENVEM"),
              new Import[] {
                newImport("java.util.jar.JarEntry.CENVEM", true),
                newImport("java.util.jar.JarFile.CENVEM", true),
                newImport("java.util.jar.JarInputStream.CENVEM", true),
                newImport("java.util.jar.JarOutputStream.CENVEM", true),
                newImport("java.util.zip.ZipEntry.CENVEM", true),
                newImport("java.util.zip.ZipFile.CENVEM", true),
                newImport("java.util.zip.ZipInputStream.CENVEM", true),
                newImport("java.util.zip.ZipOutputStream.CENVEM", true),
              })
          .put(
              new Identifier("setDefaultHostnameVerifier"),
              new Import[] {
                newImport("javax.net.ssl.HttpsURLConnection.setDefaultHostnameVerifier", true),
              })
          .put(
              new Identifier("getSplashScreen"),
              new Import[] {
                newImport("java.awt.SplashScreen.getSplashScreen", true),
              })
          .put(
              new Identifier("ALPHABETIC_PRESENTATION_FORMS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.ALPHABETIC_PRESENTATION_FORMS", true),
              })
          .put(
              new Identifier("NamingListener"),
              new Import[] {
                newImport("javax.naming.event.NamingListener", false),
              })
          .put(
              new Identifier("YEAR_FIELD"),
              new Import[] {
                newImport("java.text.DateFormat.YEAR_FIELD", true),
              })
          .put(
              new Identifier("AdapterInactive"),
              new Import[] {
                newImport("org.omg.PortableServer.POAManagerPackage.AdapterInactive", false),
              })
          .put(
              new Identifier("OID"),
              new Import[] {
                newImport("javax.naming.ldap.ManageReferralControl.OID", true),
                newImport("javax.naming.ldap.PagedResultsControl.OID", true),
                newImport("javax.naming.ldap.PagedResultsResponseControl.OID", true),
                newImport("javax.naming.ldap.SortControl.OID", true),
                newImport("javax.naming.ldap.SortResponseControl.OID", true),
                newImport("javax.naming.ldap.StartTlsRequest.OID", true),
                newImport("javax.naming.ldap.StartTlsResponse.OID", true),
              })
          .put(
              new Identifier("LongPredicate"),
              new Import[] {
                newImport("java.util.function.LongPredicate", false),
              })
          .put(
              new Identifier("icSigLinkClass"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigLinkClass", true),
              })
          .put(
              new Identifier("getClassLoaderRepository"),
              new Import[] {
                newImport("javax.management.MBeanServerFactory.getClassLoaderRepository", true),
              })
          .put(
              new Identifier("TOTOP_TOLEFT"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.PresentationDirection.TOTOP_TOLEFT", true),
              })
          .put(
              new Identifier("getDecoder"),
              new Import[] {
                newImport("java.util.Base64.getDecoder", true),
              })
          .put(
              new Identifier("SizeSequence"),
              new Import[] {
                newImport("javax.swing.SizeSequence", false),
              })
          .put(
              new Identifier("SERVLET_CONTEXT"),
              new Import[] {
                newImport("javax.xml.ws.handler.MessageContext.SERVLET_CONTEXT", true),
              })
          .put(
              new Identifier("SimpleBindings"),
              new Import[] {
                newImport("javax.script.SimpleBindings", false),
              })
          .put(
              new Identifier("JMException"),
              new Import[] {
                newImport("javax.management.JMException", false),
              })
          .put(
              new Identifier("BODY"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.BODY", true),
              })
          .put(
              new Identifier("InvalidNameHolder"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextPackage.InvalidNameHolder", false),
              })
          .put(
              new Identifier("ALAW"),
              new Import[] {
                newImport("javax.sound.sampled.AudioFormat.Encoding.ALAW", true),
              })
          .put(
              new Identifier("TextUI"),
              new Import[] {
                newImport("javax.swing.plaf.TextUI", false),
              })
          .put(
              new Identifier("BasicStroke"),
              new Import[] {
                newImport("java.awt.BasicStroke", false),
              })
          .put(
              new Identifier("ChronoPeriod"),
              new Import[] {
                newImport("java.time.chrono.ChronoPeriod", false),
              })
          .put(
              new Identifier("EUROPEAN"),
              new Import[] {
                newImport("java.awt.font.NumericShaper.EUROPEAN", true),
              })
          .put(
              new Identifier("FlowView"),
              new Import[] {
                newImport("javax.swing.text.FlowView", false),
              })
          .put(
              new Identifier("SINGLE_INTERVAL_SELECTION"),
              new Import[] {
                newImport("javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION", true),
              })
          .put(
              new Identifier("CELLPADDING"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.CELLPADDING", true),
              })
          .put(
              new Identifier("getFontFamily"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.getFontFamily", true),
              })
          .put(
              new Identifier("TYPE_ACLR"),
              new Import[] {
                newImport("java.awt.color.ColorSpace.TYPE_ACLR", true),
              })
          .put(
              new Identifier("VK_SEPARATER"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_SEPARATER", true),
              })
          .put(
              new Identifier("Segment"),
              new Import[] {
                newImport("javax.swing.text.Segment", false),
              })
          .put(
              new Identifier("MenuKeyEvent"),
              new Import[] {
                newImport("javax.swing.event.MenuKeyEvent", false),
              })
          .put(
              new Identifier("MirroredTypeException"),
              new Import[] {
                newImport("javax.lang.model.type.MirroredTypeException", false),
              })
          .put(
              new Identifier("PRESSED"),
              new Import[] {
                newImport("javax.accessibility.AccessibleState.PRESSED", true),
                newImport("javax.swing.DefaultButtonModel.PRESSED", true),
                newImport("javax.swing.plaf.synth.SynthConstants.PRESSED", true),
              })
          .put(
              new Identifier("parameterModeInOut"),
              new Import[] {
                newImport("java.sql.ParameterMetaData.parameterModeInOut", true),
              })
          .put(
              new Identifier("GERMANY"),
              new Import[] {
                newImport("java.util.Locale.GERMANY", true),
              })
          .put(
              new Identifier("SSLParameters"),
              new Import[] {
                newImport("javax.net.ssl.SSLParameters", false),
              })
          .put(
              new Identifier("UNAUTHORIZED"),
              new Import[] {
                newImport("org.ietf.jgss.GSSException.UNAUTHORIZED", true),
              })
          .put(
              new Identifier("LogRecord"),
              new Import[] {
                newImport("java.util.logging.LogRecord", false),
              })
          .put(
              new Identifier("BATCHSIZE"),
              new Import[] {
                newImport("javax.naming.Context.BATCHSIZE", true),
              })
          .put(
              new Identifier("XMLEventWriter"),
              new Import[] {
                newImport("javax.xml.stream.XMLEventWriter", false),
              })
          .put(
              new Identifier("IIOMetadataFormatImpl"),
              new Import[] {
                newImport("javax.imageio.metadata.IIOMetadataFormatImpl", false),
              })
          .put(
              new Identifier("MBeanTrustPermission"),
              new Import[] {
                newImport("javax.management.MBeanTrustPermission", false),
              })
          .put(
              new Identifier("UPPERCASE"),
              new Import[] {
                newImport("java.util.FormattableFlags.UPPERCASE", true),
              })
          .put(
              new Identifier("BasicTreeUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicTreeUI", false),
              })
          .put(
              new Identifier("ValidationEventLocator"),
              new Import[] {
                newImport("javax.xml.bind.ValidationEventLocator", false),
              })
          .put(
              new Identifier("TC_STRING"),
              new Import[] {
                newImport("java.io.ObjectStreamConstants.TC_STRING", true),
              })
          .put(
              new Identifier("ANCESTOR_ADDED"),
              new Import[] {
                newImport("javax.swing.event.AncestorEvent.ANCESTOR_ADDED", true),
              })
          .put(
              new Identifier("CHANGE"),
              new Import[] {
                newImport("javax.swing.event.DocumentEvent.EventType.CHANGE", true),
              })
          .put(
              new Identifier("NotIdentifiableEvent"),
              new Import[] {
                newImport("javax.xml.bind.NotIdentifiableEvent", false),
              })
          .put(
              new Identifier("icSigPs2CSATag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigPs2CSATag", true),
              })
          .put(
              new Identifier("getMenuDisabledForeground"),
              new Import[] {
                newImport(
                    "javax.swing.plaf.metal.MetalLookAndFeel.getMenuDisabledForeground", true),
              })
          .put(
              new Identifier("selectLineAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.selectLineAction", true),
              })
          .put(
              new Identifier("PatternSyntaxException"),
              new Import[] {
                newImport("java.util.regex.PatternSyntaxException", false),
              })
          .put(
              new Identifier("RELATION_BASIC_UPDATE"),
              new Import[] {
                newImport(
                    "javax.management.relation.RelationNotification.RELATION_BASIC_UPDATE", true),
              })
          .put(
              new Identifier("PrintStream"),
              new Import[] {
                newImport("java.io.PrintStream", false),
              })
          .put(
              new Identifier("NameValuePair"),
              new Import[] {
                newImport("org.omg.CORBA.NameValuePair", false),
                newImport("org.omg.DynamicAny.NameValuePair", false),
              })
          .put(
              new Identifier("setFloat"),
              new Import[] {
                newImport("java.lang.reflect.Array.setFloat", true),
              })
          .put(
              new Identifier("XMLSignatureFactory"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.XMLSignatureFactory", false),
              })
          .put(
              new Identifier("INPUT_METHOD_UNDERLINE"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.INPUT_METHOD_UNDERLINE", true),
              })
          .put(
              new Identifier("MAX_COUNT"),
              new Import[] {
                newImport("javax.swing.plaf.synth.ColorType.MAX_COUNT", true),
              })
          .put(
              new Identifier("Generated"),
              new Import[] {
                newImport("javax.annotation.Generated", false),
              })
          .put(
              new Identifier("ISO_C7_ENVELOPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_C7_ENVELOPE", true),
              })
          .put(
              new Identifier("ActivationException"),
              new Import[] {
                newImport("java.rmi.activation.ActivationException", false),
              })
          .put(
              new Identifier("KeyStoreBuilderParameters"),
              new Import[] {
                newImport("javax.net.ssl.KeyStoreBuilderParameters", false),
              })
          .put(
              new Identifier("TypeElement"),
              new Import[] {
                newImport("javax.lang.model.element.TypeElement", false),
              })
          .put(
              new Identifier("TAG_FDSC"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_FDSC", true),
              })
          .put(
              new Identifier("TAG_PROP"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_PROP", true),
              })
          .put(
              new Identifier("InputContext"),
              new Import[] {
                newImport("java.awt.im.InputContext", false),
              })
          .put(
              new Identifier("controlText"),
              new Import[] {
                newImport("java.awt.SystemColor.controlText", true),
              })
          .put(
              new Identifier("LocaleServiceProvider"),
              new Import[] {
                newImport("java.util.spi.LocaleServiceProvider", false),
              })
          .put(
              new Identifier("DuplicateNameHelper"),
              new Import[] {
                newImport(
                    "org.omg.PortableInterceptor.ORBInitInfoPackage.DuplicateNameHelper", false),
              })
          .put(
              new Identifier("CertPathValidatorSpi"),
              new Import[] {
                newImport("java.security.cert.CertPathValidatorSpi", false),
              })
          .put(
              new Identifier("NOT_SUPPORTED_ERR"),
              new Import[] {
                newImport("org.w3c.dom.DOMException.NOT_SUPPORTED_ERR", true),
              })
          .put(
              new Identifier("cosh"),
              new Import[] {
                newImport("java.lang.Math.cosh", true),
                newImport("java.lang.StrictMath.cosh", true),
              })
          .put(
              new Identifier("getMaxAllowedKeyLength"),
              new Import[] {
                newImport("javax.crypto.Cipher.getMaxAllowedKeyLength", true),
              })
          .put(
              new Identifier("DynStructOperations"),
              new Import[] {
                newImport("org.omg.DynamicAny.DynStructOperations", false),
              })
          .put(
              new Identifier("KeyName"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.keyinfo.KeyName", false),
              })
          .put(
              new Identifier("DIVIDER_LOCATION_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JSplitPane.DIVIDER_LOCATION_PROPERTY", true),
              })
          .put(
              new Identifier("setFontFamily"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.setFontFamily", true),
              })
          .put(
              new Identifier("RMIConnector"),
              new Import[] {
                newImport("javax.management.remote.rmi.RMIConnector", false),
              })
          .put(
              new Identifier("YearMonth"),
              new Import[] {
                newImport("java.time.YearMonth", false),
              })
          .put(
              new Identifier("icSigPs2CRD1Tag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigPs2CRD1Tag", true),
              })
          .put(
              new Identifier("ComboBoxUI"),
              new Import[] {
                newImport("javax.swing.plaf.ComboBoxUI", false),
              })
          .put(
              new Identifier("SCROLL_PAGE_DOWN"),
              new Import[] {
                newImport("java.awt.Event.SCROLL_PAGE_DOWN", true),
              })
          .put(
              new Identifier("LockSupport"),
              new Import[] {
                newImport("java.util.concurrent.locks.LockSupport", false),
              })
          .put(
              new Identifier("MANIFEST_VERSION"),
              new Import[] {
                newImport("java.util.jar.Attributes.Name.MANIFEST_VERSION", true),
              })
          .put(
              new Identifier("SoftBevelBorder"),
              new Import[] {
                newImport("javax.swing.border.SoftBevelBorder", false),
              })
          .put(
              new Identifier("ACCESSORY_CHANGED_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JFileChooser.ACCESSORY_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("NOHREF"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.NOHREF", true),
              })
          .put(
              new Identifier("VALUE_TEXT_ANTIALIAS_LCD_HBGR"),
              new Import[] {
                newImport("java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_HBGR", true),
              })
          .put(
              new Identifier("HTTP_UNAUTHORIZED"),
              new Import[] {
                newImport("java.net.HttpURLConnection.HTTP_UNAUTHORIZED", true),
              })
          .put(
              new Identifier("VK_META"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_META", true),
              })
          .put(
              new Identifier("PrivateKeyEntry"),
              new Import[] {
                newImport("java.security.KeyStore.PrivateKeyEntry", false),
              })
          .build();
}
