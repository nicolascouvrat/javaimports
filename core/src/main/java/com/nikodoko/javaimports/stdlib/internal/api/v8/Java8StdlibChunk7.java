// Code generated by GenerateStdlib.java. DO NOT EDIT.
package com.nikodoko.javaimports.stdlib.internal.api.v8;

import static com.nikodoko.javaimports.stdlib.internal.Stdlib.newImport;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.common.Identifier;
import com.nikodoko.javaimports.common.Import;
import java.util.Map;

public class Java8StdlibChunk7 {
  static final Map<Identifier, Import[]> CLASSES =
      new ImmutableMap.Builder<Identifier, Import[]>()
          .put(
              new Identifier("HTTP_SEE_OTHER"),
              new Import[] {
                newImport("java.net.HttpURLConnection.HTTP_SEE_OTHER", true),
              })
          .put(
              new Identifier("Serializable"),
              new Import[] {
                newImport("java.io.Serializable", false),
              })
          .put(
              new Identifier("ConcurrentModificationException"),
              new Import[] {
                newImport("java.util.ConcurrentModificationException", false),
              })
          .put(
              new Identifier("DocumentBuilderFactory"),
              new Import[] {
                newImport("javax.xml.parsers.DocumentBuilderFactory", false),
              })
          .put(
              new Identifier("FORMAT"),
              new Import[] {
                newImport("java.lang.Character.FORMAT", true),
              })
          .put(
              new Identifier("RequestorType"),
              new Import[] {
                newImport("java.net.Authenticator.RequestorType", false),
              })
          .put(
              new Identifier("AWTError"),
              new Import[] {
                newImport("java.awt.AWTError", false),
              })
          .put(
              new Identifier("USER_ID"),
              new Import[] {
                newImport("org.omg.PortableServer.IdAssignmentPolicyValue.USER_ID", true),
              })
          .put(
              new Identifier("LogStream"),
              new Import[] {
                newImport("java.rmi.server.LogStream", false),
              })
          .put(
              new Identifier("KeySelector"),
              new Import[] {
                newImport("javax.xml.crypto.KeySelector", false),
              })
          .put(
              new Identifier("setDatatypeConverter"),
              new Import[] {
                newImport("javax.xml.bind.DatatypeConverter.setDatatypeConverter", true),
              })
          .put(
              new Identifier("DefaultEditor"),
              new Import[] {
                newImport("javax.swing.JSpinner.DefaultEditor", false),
              })
          .put(
              new Identifier("XPathConstants"),
              new Import[] {
                newImport("javax.xml.xpath.XPathConstants", false),
              })
          .put(
              new Identifier("Attr"),
              new Import[] {
                newImport("org.w3c.dom.Attr", false),
              })
          .put(
              new Identifier("STATIC"),
              new Import[] {
                newImport("java.lang.reflect.Modifier.STATIC", true),
              })
          .put(
              new Identifier("icSigRgbData"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigRgbData", true),
              })
          .put(
              new Identifier("URI_NS_SOAP_ENCODING"),
              new Import[] {
                newImport("javax.xml.soap.SOAPConstants.URI_NS_SOAP_ENCODING", true),
              })
          .put(
              new Identifier("NEGATIVE_INFINITY"),
              new Import[] {
                newImport("java.lang.Double.NEGATIVE_INFINITY", true),
                newImport("java.lang.Float.NEGATIVE_INFINITY", true),
              })
          .put(
              new Identifier("iterator"),
              new Import[] {
                newImport("java.util.Spliterators.iterator", true),
              })
          .put(
              new Identifier("ReflectiveOperationException"),
              new Import[] {
                newImport("java.lang.ReflectiveOperationException", false),
              })
          .put(
              new Identifier("TYPE_SCROLL_INSENSITIVE"),
              new Import[] {
                newImport("java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE", true),
              })
          .put(
              new Identifier("STRIKETHROUGH_ON"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.STRIKETHROUGH_ON", true),
              })
          .put(
              new Identifier("Painter"),
              new Import[] {
                newImport("javax.swing.Painter", false),
              })
          .put(
              new Identifier("KEY_DITHERING"),
              new Import[] {
                newImport("java.awt.RenderingHints.KEY_DITHERING", true),
              })
          .put(
              new Identifier("CHILD_POLICY_ALL"),
              new Import[] {
                newImport("javax.imageio.metadata.IIOMetadataFormat.CHILD_POLICY_ALL", true),
              })
          .put(
              new Identifier("XMLEventReader"),
              new Import[] {
                newImport("javax.xml.stream.XMLEventReader", false),
              })
          .put(
              new Identifier("GlyphView"),
              new Import[] {
                newImport("javax.swing.text.GlyphView", false),
              })
          .put(
              new Identifier("TabableView"),
              new Import[] {
                newImport("javax.swing.text.TabableView", false),
              })
          .put(
              new Identifier("WRITE_XML_DECLARATION"),
              new Import[] {
                newImport("javax.xml.soap.SOAPMessage.WRITE_XML_DECLARATION", true),
              })
          .put(
              new Identifier("TYPE_BYTE_BINARY"),
              new Import[] {
                newImport("java.awt.image.BufferedImage.TYPE_BYTE_BINARY", true),
              })
          .put(
              new Identifier("SOAPACTION_URI_PROPERTY"),
              new Import[] {
                newImport("javax.xml.ws.BindingProvider.SOAPACTION_URI_PROPERTY", true),
              })
          .put(
              new Identifier("KEY_TEXT_ANTIALIASING"),
              new Import[] {
                newImport("java.awt.RenderingHints.KEY_TEXT_ANTIALIASING", true),
              })
          .put(
              new Identifier("META"),
              new Import[] {
                newImport("javax.sound.midi.MetaMessage.META", true),
                newImport("javax.swing.text.html.HTML.Tag.META", true),
              })
          .put(
              new Identifier("fieldModifiers"),
              new Import[] {
                newImport("java.lang.reflect.Modifier.fieldModifiers", true),
              })
          .put(
              new Identifier("synchronizedSortedSet"),
              new Import[] {
                newImport("java.util.Collections.synchronizedSortedSet", true),
              })
          .put(
              new Identifier("ServiceContext"),
              new Import[] {
                newImport("org.omg.IOP.ServiceContext", false),
              })
          .put(
              new Identifier("IllformedLocaleException"),
              new Import[] {
                newImport("java.util.IllformedLocaleException", false),
              })
          .put(
              new Identifier("getReaderFileSuffixes"),
              new Import[] {
                newImport("javax.imageio.ImageIO.getReaderFileSuffixes", true),
              })
          .put(
              new Identifier("ACTION_REFERENCE"),
              new Import[] {
                newImport("java.awt.dnd.DnDConstants.ACTION_REFERENCE", true),
              })
          .put(
              new Identifier("DefaultCellEditor"),
              new Import[] {
                newImport("javax.swing.DefaultCellEditor", false),
              })
          .put(
              new Identifier("CommandInfo"),
              new Import[] {
                newImport("javax.activation.CommandInfo", false),
              })
          .put(
              new Identifier("AtomicInteger"),
              new Import[] {
                newImport("java.util.concurrent.atomic.AtomicInteger", false),
              })
          .put(
              new Identifier("ACCESSIBLE_ACTION_PROPERTY"),
              new Import[] {
                newImport("javax.accessibility.AccessibleContext.ACCESSIBLE_ACTION_PROPERTY", true),
              })
          .put(
              new Identifier("Cloneable"),
              new Import[] {
                newImport("java.lang.Cloneable", false),
              })
          .put(
              new Identifier("_ncontext"),
              new Import[] {
                newImport("org.omg.CosNaming.BindingType._ncontext", true),
              })
          .put(
              new Identifier("icSigGreenMatrixColumnTag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigGreenMatrixColumnTag", true),
              })
          .put(
              new Identifier("SERVANT_RETENTION_POLICY_ID"),
              new Import[] {
                newImport("org.omg.PortableServer.SERVANT_RETENTION_POLICY_ID", false),
              })
          .put(
              new Identifier("JapaneseEra"),
              new Import[] {
                newImport("java.time.chrono.JapaneseEra", false),
              })
          .put(
              new Identifier("commonPool"),
              new Import[] {
                newImport("java.util.concurrent.ForkJoinPool.commonPool", true),
              })
          .put(
              new Identifier("TYPE_ECLR"),
              new Import[] {
                newImport("java.awt.color.ColorSpace.TYPE_ECLR", true),
              })
          .put(
              new Identifier("ABOVE_TOP"),
              new Import[] {
                newImport("javax.swing.border.TitledBorder.ABOVE_TOP", true),
              })
          .put(
              new Identifier("STRIP"),
              new Import[] {
                newImport("java.util.jar.Pack200.Packer.STRIP", true),
              })
          .put(
              new Identifier("MarshalException"),
              new Import[] {
                newImport("java.rmi.MarshalException", false),
                newImport("javax.xml.bind.MarshalException", false),
                newImport("javax.xml.crypto.MarshalException", false),
              })
          .put(
              new Identifier("K1Div2Luminance"),
              new Import[] {
                newImport("javax.imageio.plugins.jpeg.JPEGQTable.K1Div2Luminance", true),
              })
          .put(
              new Identifier("MOUSE_WHEEL"),
              new Import[] {
                newImport("java.awt.event.MouseEvent.MOUSE_WHEEL", true),
              })
          .put(
              new Identifier("DSAGenParameterSpec"),
              new Import[] {
                newImport("java.security.spec.DSAGenParameterSpec", false),
              })
          .put(
              new Identifier("DynValueBoxOperations"),
              new Import[] {
                newImport("org.omg.DynamicAny.DynValueBoxOperations", false),
              })
          .put(
              new Identifier("getEtchedInsets"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicGraphicsUtils.getEtchedInsets", true),
              })
          .put(
              new Identifier("WindowAdapter"),
              new Import[] {
                newImport("java.awt.event.WindowAdapter", false),
              })
          .put(
              new Identifier("JSeparator"),
              new Import[] {
                newImport("javax.swing.JSeparator", false),
              })
          .put(
              new Identifier("ConnectionPoolDataSource"),
              new Import[] {
                newImport("javax.sql.ConnectionPoolDataSource", false),
              })
          .put(
              new Identifier("getSharedInstance"),
              new Import[] {
                newImport("javax.swing.PopupFactory.getSharedInstance", true),
              })
          .put(
              new Identifier("DELETE"),
              new Import[] {
                newImport("java.awt.Event.DELETE", true),
                newImport("javax.accessibility.AccessibleTableModelChange.DELETE", true),
                newImport("javax.swing.event.TableModelEvent.DELETE", true),
              })
          .put(
              new Identifier("lowSurrogate"),
              new Import[] {
                newImport("java.lang.Character.lowSurrogate", true),
              })
          .put(
              new Identifier("NoServantHelper"),
              new Import[] {
                newImport("org.omg.PortableServer.POAPackage.NoServantHelper", false),
              })
          .put(
              new Identifier("NamingManager"),
              new Import[] {
                newImport("javax.naming.spi.NamingManager", false),
              })
          .put(
              new Identifier("Files"),
              new Import[] {
                newImport("java.nio.file.Files", false),
              })
          .put(
              new Identifier("Filer"),
              new Import[] {
                newImport("javax.annotation.processing.Filer", false),
              })
          .put(
              new Identifier("AbstractChronology"),
              new Import[] {
                newImport("java.time.chrono.AbstractChronology", false),
              })
          .put(
              new Identifier("cutAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.cutAction", true),
              })
          .put(
              new Identifier("JToolTip"),
              new Import[] {
                newImport("javax.swing.JToolTip", false),
              })
          .put(
              new Identifier("WINDOW_STATE_CHANGED"),
              new Import[] {
                newImport("java.awt.event.WindowEvent.WINDOW_STATE_CHANGED", true),
              })
          .put(
              new Identifier("SECURITY_PRINCIPAL"),
              new Import[] {
                newImport("javax.naming.Context.SECURITY_PRINCIPAL", true),
              })
          .put(
              new Identifier("Redirect"),
              new Import[] {
                newImport("java.lang.ProcessBuilder.Redirect", false),
              })
          .put(
              new Identifier("OptionalInt"),
              new Import[] {
                newImport("java.util.OptionalInt", false),
              })
          .put(
              new Identifier("CAP_ROUND"),
              new Import[] {
                newImport("java.awt.BasicStroke.CAP_ROUND", true),
              })
          .put(
              new Identifier("parallelSetAll"),
              new Import[] {
                newImport("java.util.Arrays.parallelSetAll", true),
              })
          .put(
              new Identifier("OPEN_READ"),
              new Import[] {
                newImport("java.util.zip.ZipFile.OPEN_READ", true),
              })
          .put(
              new Identifier("IMPLEMENTATION_VENDOR_ID"),
              new Import[] {
                newImport("java.util.jar.Attributes.Name.IMPLEMENTATION_VENDOR_ID", true),
              })
          .put(
              new Identifier("SizeLimitExceededException"),
              new Import[] {
                newImport("javax.naming.SizeLimitExceededException", false),
              })
          .put(
              new Identifier("RMIConnectorServer"),
              new Import[] {
                newImport("javax.management.remote.rmi.RMIConnectorServer", false),
              })
          .put(
              new Identifier("toMap"),
              new Import[] {
                newImport("java.util.stream.Collectors.toMap", true),
              })
          .put(
              new Identifier("BUTTON3_MASK"),
              new Import[] {
                newImport("java.awt.event.InputEvent.BUTTON3_MASK", true),
              })
          .put(
              new Identifier("to"),
              new Import[] {
                newImport("java.lang.ProcessBuilder.Redirect.to", true),
              })
          .put(
              new Identifier("PackageElement"),
              new Import[] {
                newImport("javax.lang.model.element.PackageElement", false),
              })
          .put(
              new Identifier("NoSuchProviderException"),
              new Import[] {
                newImport("java.security.NoSuchProviderException", false),
              })
          .put(
              new Identifier("FACE"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.FACE", true),
              })
          .put(
              new Identifier("NestingKind"),
              new Import[] {
                newImport("javax.lang.model.element.NestingKind", false),
              })
          .put(
              new Identifier("ROLLOVER_ICON_CHANGED_PROPERTY"),
              new Import[] {
                newImport("javax.swing.AbstractButton.ROLLOVER_ICON_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("CLASS_OUTPUT"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.CLASS_OUTPUT", true),
              })
          .put(
              new Identifier("VK_RIGHT_PARENTHESIS"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_RIGHT_PARENTHESIS", true),
              })
          .put(
              new Identifier("ACCESSIBLE_TEXT_ATTRIBUTES_CHANGED"),
              new Import[] {
                newImport(
                    "javax.accessibility.AccessibleContext.ACCESSIBLE_TEXT_ATTRIBUTES_CHANGED",
                    true),
              })
          .put(
              new Identifier("Templates"),
              new Import[] {
                newImport("javax.xml.transform.Templates", false),
              })
          .put(
              new Identifier("FloatBuffer"),
              new Import[] {
                newImport("java.nio.FloatBuffer", false),
              })
          .put(
              new Identifier("JAPANESE_POSTCARD"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSizeName.JAPANESE_POSTCARD", true),
                newImport("javax.print.attribute.standard.MediaSize.Other.JAPANESE_POSTCARD", true),
              })
          .put(
              new Identifier("PolicyListHolder"),
              new Import[] {
                newImport("org.omg.CORBA.PolicyListHolder", false),
              })
          .put(
              new Identifier("DAY_OF_WEEK_IN_MONTH"),
              new Import[] {
                newImport("java.text.DateFormat.Field.DAY_OF_WEEK_IN_MONTH", true),
                newImport("java.util.Calendar.DAY_OF_WEEK_IN_MONTH", true),
              })
          .put(
              new Identifier("InvalidPathException"),
              new Import[] {
                newImport("java.nio.file.InvalidPathException", false),
              })
          .put(
              new Identifier("HandlerChain"),
              new Import[] {
                newImport("javax.jws.HandlerChain", false),
              })
          .put(
              new Identifier("BorderLayout"),
              new Import[] {
                newImport("java.awt.BorderLayout", false),
              })
          .put(
              new Identifier("getKeyStrokeForEvent"),
              new Import[] {
                newImport("javax.swing.KeyStroke.getKeyStrokeForEvent", true),
              })
          .put(
              new Identifier("_tk_fixed"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind._tk_fixed", true),
              })
          .put(
              new Identifier("VK_HOME"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_HOME", true),
              })
          .put(
              new Identifier("RAW_SEND_SIZE"),
              new Import[] {
                newImport("javax.security.sasl.Sasl.RAW_SEND_SIZE", true),
              })
          .put(
              new Identifier("EXPONENT_SIGN"),
              new Import[] {
                newImport("java.text.NumberFormat.Field.EXPONENT_SIGN", true),
              })
          .put(
              new Identifier("AbstractView"),
              new Import[] {
                newImport("org.w3c.dom.views.AbstractView", false),
              })
          .put(
              new Identifier("TreeModelListener"),
              new Import[] {
                newImport("javax.swing.event.TreeModelListener", false),
              })
          .put(
              new Identifier("LATIN"),
              new Import[] {
                newImport("java.awt.im.InputSubset.LATIN", true),
              })
          .put(
              new Identifier("icAbsoluteColorimetric"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icAbsoluteColorimetric", true),
              })
          .put(
              new Identifier("SPINNER"),
              new Import[] {
                newImport("javax.swing.plaf.synth.Region.SPINNER", true),
              })
          .put(
              new Identifier("DatabaseMetaData"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData", false),
              })
          .put(
              new Identifier("getAcceleratorForeground"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalLookAndFeel.getAcceleratorForeground", true),
              })
          .put(
              new Identifier("INTEGER_FIELD"),
              new Import[] {
                newImport("java.text.NumberFormat.INTEGER_FIELD", true),
              })
          .put(
              new Identifier("sqlStateXOpen"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.sqlStateXOpen", true),
              })
          .put(
              new Identifier("AudioInputStream"),
              new Import[] {
                newImport("javax.sound.sampled.AudioInputStream", false),
              })
          .put(
              new Identifier("NumberOfInterveningJobs"),
              new Import[] {
                newImport("javax.print.attribute.standard.NumberOfInterveningJobs", false),
              })
          .put(
              new Identifier("W3C_XPATH_DATATYPE_NS_URI"),
              new Import[] {
                newImport("javax.xml.XMLConstants.W3C_XPATH_DATATYPE_NS_URI", true),
              })
          .put(
              new Identifier("ResourceBundle"),
              new Import[] {
                newImport("java.util.ResourceBundle", false),
              })
          .put(
              new Identifier("CLICK"),
              new Import[] {
                newImport("javax.accessibility.AccessibleAction.CLICK", true),
              })
          .put(
              new Identifier("ITALY_ENVELOPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ITALY_ENVELOPE", true),
                newImport("javax.print.attribute.standard.MediaSizeName.ITALY_ENVELOPE", true),
                newImport("javax.print.attribute.standard.MediaSize.Other.ITALY_ENVELOPE", true),
              })
          .put(
              new Identifier("JDialog"),
              new Import[] {
                newImport("javax.swing.JDialog", false),
              })
          .put(
              new Identifier("AWTException"),
              new Import[] {
                newImport("java.awt.AWTException", false),
              })
          .put(
              new Identifier("MULTILINE"),
              new Import[] {
                newImport("java.util.regex.Pattern.MULTILINE", true),
              })
          .put(
              new Identifier("XMLOutputFactory"),
              new Import[] {
                newImport("javax.xml.stream.XMLOutputFactory", false),
              })
          .put(
              new Identifier("DOMImplementationSource"),
              new Import[] {
                newImport("org.w3c.dom.DOMImplementationSource", false),
              })
          .put(
              new Identifier("CURRENCY_SYMBOL"),
              new Import[] {
                newImport("java.lang.Character.CURRENCY_SYMBOL", true),
              })
          .put(
              new Identifier("OBJECTNAME"),
              new Import[] {
                newImport("javax.management.openmbean.SimpleType.OBJECTNAME", true),
              })
          .put(
              new Identifier("setLogTimers"),
              new Import[] {
                newImport("javax.swing.Timer.setLogTimers", true),
              })
          .put(
              new Identifier("TAI_THAM"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.TAI_THAM", true),
              })
          .put(
              new Identifier("AtomicStampedReference"),
              new Import[] {
                newImport("java.util.concurrent.atomic.AtomicStampedReference", false),
              })
          .put(
              new Identifier("ClipboardOwner"),
              new Import[] {
                newImport("java.awt.datatransfer.ClipboardOwner", false),
              })
          .put(
              new Identifier("ObjectOutputStream"),
              new Import[] {
                newImport("java.io.ObjectOutputStream", false),
              })
          .put(
              new Identifier("CHILD_POLICY_SOME"),
              new Import[] {
                newImport("javax.imageio.metadata.IIOMetadataFormat.CHILD_POLICY_SOME", true),
              })
          .put(
              new Identifier("FLOWS_FROM"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRelation.FLOWS_FROM", true),
              })
          .put(
              new Identifier("BAMUM_SUPPLEMENT"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.BAMUM_SUPPLEMENT", true),
              })
          .put(
              new Identifier("EMPTY"),
              new Import[] {
                newImport("javax.swing.text.SimpleAttributeSet.EMPTY", true),
                newImport("javax.swing.text.html.parser.DTDConstants.EMPTY", true),
              })
          .put(
              new Identifier("parameterModeOut"),
              new Import[] {
                newImport("java.sql.ParameterMetaData.parameterModeOut", true),
              })
          .put(
              new Identifier("FileCacheImageInputStream"),
              new Import[] {
                newImport("javax.imageio.stream.FileCacheImageInputStream", false),
              })
          .put(
              new Identifier("BindingIteratorPOA"),
              new Import[] {
                newImport("org.omg.CosNaming.BindingIteratorPOA", false),
              })
          .put(
              new Identifier("MessageFormat"),
              new Import[] {
                newImport("java.text.MessageFormat", false),
              })
          .put(
              new Identifier("previous"),
              new Import[] {
                newImport("java.time.temporal.TemporalAdjusters.previous", true),
              })
          .put(
              new Identifier("AWTKeyStroke"),
              new Import[] {
                newImport("java.awt.AWTKeyStroke", false),
              })
          .put(
              new Identifier("valueOf"),
              new Import[] {
                newImport("java.awt.Component.BaselineResizeBehavior.valueOf", true),
                newImport("java.awt.Desktop.Action.valueOf", true),
                newImport("java.awt.Dialog.ModalExclusionType.valueOf", true),
                newImport("java.awt.Dialog.ModalityType.valueOf", true),
                newImport("java.awt.GraphicsDevice.WindowTranslucency.valueOf", true),
                newImport("java.awt.MultipleGradientPaint.ColorSpaceType.valueOf", true),
                newImport("java.awt.MultipleGradientPaint.CycleMethod.valueOf", true),
                newImport("java.awt.TrayIcon.MessageType.valueOf", true),
                newImport("java.awt.Window.Type.valueOf", true),
                newImport("java.awt.font.NumericShaper.Range.valueOf", true),
                newImport("java.lang.Boolean.valueOf", true),
                newImport("java.lang.Byte.valueOf", true),
                newImport("java.lang.Character.valueOf", true),
                newImport("java.lang.Double.valueOf", true),
                newImport("java.lang.Enum.valueOf", true),
                newImport("java.lang.Float.valueOf", true),
                newImport("java.lang.Integer.valueOf", true),
                newImport("java.lang.Long.valueOf", true),
                newImport("java.lang.Short.valueOf", true),
                newImport("java.lang.String.valueOf", true),
                newImport("java.lang.Character.UnicodeScript.valueOf", true),
                newImport("java.lang.ProcessBuilder.Redirect.Type.valueOf", true),
                newImport("java.lang.Thread.State.valueOf", true),
                newImport("java.lang.annotation.ElementType.valueOf", true),
                newImport("java.lang.annotation.RetentionPolicy.valueOf", true),
                newImport("java.lang.management.MemoryType.valueOf", true),
                newImport("java.math.BigDecimal.valueOf", true),
                newImport("java.math.BigInteger.valueOf", true),
                newImport("java.math.RoundingMode.valueOf", true),
                newImport("java.net.StandardProtocolFamily.valueOf", true),
                newImport("java.net.Authenticator.RequestorType.valueOf", true),
                newImport("java.net.Proxy.Type.valueOf", true),
                newImport("java.nio.file.AccessMode.valueOf", true),
                newImport("java.nio.file.FileVisitOption.valueOf", true),
                newImport("java.nio.file.FileVisitResult.valueOf", true),
                newImport("java.nio.file.LinkOption.valueOf", true),
                newImport("java.nio.file.StandardCopyOption.valueOf", true),
                newImport("java.nio.file.StandardOpenOption.valueOf", true),
                newImport("java.nio.file.attribute.AclEntryFlag.valueOf", true),
                newImport("java.nio.file.attribute.AclEntryPermission.valueOf", true),
                newImport("java.nio.file.attribute.AclEntryType.valueOf", true),
                newImport("java.nio.file.attribute.PosixFilePermission.valueOf", true),
                newImport("java.security.CryptoPrimitive.valueOf", true),
                newImport("java.security.KeyRep.Type.valueOf", true),
                newImport("java.security.cert.CRLReason.valueOf", true),
                newImport("java.security.cert.PKIXReason.valueOf", true),
                newImport(
                    "java.security.cert.CertPathValidatorException.BasicReason.valueOf", true),
                newImport("java.security.cert.PKIXRevocationChecker.Option.valueOf", true),
                newImport("java.sql.ClientInfoStatus.valueOf", true),
                newImport("java.sql.Date.valueOf", true),
                newImport("java.sql.JDBCType.valueOf", true),
                newImport("java.sql.PseudoColumnUsage.valueOf", true),
                newImport("java.sql.RowIdLifetime.valueOf", true),
                newImport("java.sql.Time.valueOf", true),
                newImport("java.sql.Timestamp.valueOf", true),
                newImport("java.text.Normalizer.Form.valueOf", true),
                newImport("java.time.DayOfWeek.valueOf", true),
                newImport("java.time.Month.valueOf", true),
                newImport("java.time.chrono.HijrahEra.valueOf", true),
                newImport("java.time.chrono.IsoEra.valueOf", true),
                newImport("java.time.chrono.JapaneseEra.valueOf", true),
                newImport("java.time.chrono.MinguoEra.valueOf", true),
                newImport("java.time.chrono.ThaiBuddhistEra.valueOf", true),
                newImport("java.time.format.FormatStyle.valueOf", true),
                newImport("java.time.format.ResolverStyle.valueOf", true),
                newImport("java.time.format.SignStyle.valueOf", true),
                newImport("java.time.format.TextStyle.valueOf", true),
                newImport("java.time.temporal.ChronoField.valueOf", true),
                newImport("java.time.temporal.ChronoUnit.valueOf", true),
                newImport("java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.valueOf", true),
                newImport("java.util.BitSet.valueOf", true),
                newImport("java.util.Formatter.BigDecimalLayoutForm.valueOf", true),
                newImport("java.util.Locale.Category.valueOf", true),
                newImport("java.util.Locale.FilteringMode.valueOf", true),
                newImport("java.util.concurrent.TimeUnit.valueOf", true),
                newImport("java.util.stream.Collector.Characteristics.valueOf", true),
                newImport("javax.annotation.Resource.AuthenticationType.valueOf", true),
                newImport("javax.jws.WebParam.Mode.valueOf", true),
                newImport("javax.jws.soap.SOAPBinding.ParameterStyle.valueOf", true),
                newImport("javax.jws.soap.SOAPBinding.Style.valueOf", true),
                newImport("javax.jws.soap.SOAPBinding.Use.valueOf", true),
                newImport("javax.lang.model.SourceVersion.valueOf", true),
                newImport("javax.lang.model.element.ElementKind.valueOf", true),
                newImport("javax.lang.model.element.Modifier.valueOf", true),
                newImport("javax.lang.model.element.NestingKind.valueOf", true),
                newImport("javax.lang.model.type.TypeKind.valueOf", true),
                newImport("javax.net.ssl.SSLEngineResult.HandshakeStatus.valueOf", true),
                newImport("javax.net.ssl.SSLEngineResult.Status.valueOf", true),
                newImport("javax.swing.DropMode.valueOf", true),
                newImport("javax.swing.SortOrder.valueOf", true),
                newImport("javax.swing.GroupLayout.Alignment.valueOf", true),
                newImport("javax.swing.JTable.PrintMode.valueOf", true),
                newImport("javax.swing.LayoutStyle.ComponentPlacement.valueOf", true),
                newImport("javax.swing.RowFilter.ComparisonType.valueOf", true),
                newImport("javax.swing.SwingWorker.StateValue.valueOf", true),
                newImport("javax.swing.event.RowSorterEvent.Type.valueOf", true),
                newImport(
                    "javax.swing.plaf.nimbus.AbstractRegionPainter.PaintContext.CacheMode.valueOf",
                    true),
                newImport("javax.swing.text.html.FormSubmitEvent.MethodType.valueOf", true),
                newImport("javax.tools.StandardLocation.valueOf", true),
                newImport("javax.tools.Diagnostic.Kind.valueOf", true),
                newImport("javax.tools.DocumentationTool.Location.valueOf", true),
                newImport("javax.tools.JavaFileObject.Kind.valueOf", true),
                newImport("javax.xml.bind.annotation.XmlAccessOrder.valueOf", true),
                newImport("javax.xml.bind.annotation.XmlAccessType.valueOf", true),
                newImport("javax.xml.bind.annotation.XmlNsForm.valueOf", true),
                newImport("javax.xml.namespace.QName.valueOf", true),
                newImport("javax.xml.ws.Service.Mode.valueOf", true),
                newImport("javax.xml.ws.handler.MessageContext.Scope.valueOf", true),
                newImport("javax.xml.ws.soap.AddressingFeature.Responses.valueOf", true),
              })
          .put(
              new Identifier("isRegularFile"),
              new Import[] {
                newImport("java.nio.file.Files.isRegularFile", true),
              })
          .put(
              new Identifier("JobSheets"),
              new Import[] {
                newImport("javax.print.attribute.standard.JobSheets", false),
              })
          .put(
              new Identifier("UNSELECTED_RAW_TEXT_HIGHLIGHT"),
              new Import[] {
                newImport("java.awt.im.InputMethodHighlight.UNSELECTED_RAW_TEXT_HIGHLIGHT", true),
              })
          .put(
              new Identifier("ENGINE_VERSION"),
              new Import[] {
                newImport("javax.script.ScriptEngine.ENGINE_VERSION", true),
              })
          .put(
              new Identifier("Registry"),
              new Import[] {
                newImport("java.rmi.registry.Registry", false),
              })
          .put(
              new Identifier("KeyStoreSpi"),
              new Import[] {
                newImport("java.security.KeyStoreSpi", false),
              })
          .put(
              new Identifier("selectionNextWordAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.selectionNextWordAction", true),
              })
          .put(
              new Identifier("InvalidSlot"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.InvalidSlot", false),
              })
          .put(
              new Identifier("MEIJI"),
              new Import[] {
                newImport("java.time.chrono.JapaneseEra.MEIJI", true),
              })
          .put(
              new Identifier("ESCAPE"),
              new Import[] {
                newImport("java.awt.Event.ESCAPE", true),
              })
          .put(
              new Identifier("getDateInstance"),
              new Import[] {
                newImport("java.text.DateFormat.getDateInstance", true),
              })
          .put(
              new Identifier("Integer"),
              new Import[] {
                newImport("java.lang.Integer", false),
              })
          .put(
              new Identifier("SimpleTypeVisitor8"),
              new Import[] {
                newImport("javax.lang.model.util.SimpleTypeVisitor8", false),
              })
          .put(
              new Identifier("ofNanos"),
              new Import[] {
                newImport("java.time.Duration.ofNanos", true),
              })
          .put(
              new Identifier("SimpleTypeVisitor7"),
              new Import[] {
                newImport("javax.lang.model.util.SimpleTypeVisitor7", false),
              })
          .put(
              new Identifier("SimpleTypeVisitor6"),
              new Import[] {
                newImport("javax.lang.model.util.SimpleTypeVisitor6", false),
              })
          .put(
              new Identifier("ADJUSTMENT_LAST"),
              new Import[] {
                newImport("java.awt.event.AdjustmentEvent.ADJUSTMENT_LAST", true),
              })
          .put(
              new Identifier("getInstance"),
              new Import[] {
                newImport("java.awt.AlphaComposite.getInstance", true),
                newImport("java.awt.color.ColorSpace.getInstance", true),
                newImport("java.awt.color.ICC_Profile.getInstance", true),
                newImport("java.awt.im.InputContext.getInstance", true),
                newImport("java.security.AlgorithmParameterGenerator.getInstance", true),
                newImport("java.security.AlgorithmParameters.getInstance", true),
                newImport("java.security.KeyFactory.getInstance", true),
                newImport("java.security.KeyPairGenerator.getInstance", true),
                newImport("java.security.KeyStore.getInstance", true),
                newImport("java.security.MessageDigest.getInstance", true),
                newImport("java.security.Policy.getInstance", true),
                newImport("java.security.SecureRandom.getInstance", true),
                newImport("java.security.Signature.getInstance", true),
                newImport("java.security.cert.CertPathBuilder.getInstance", true),
                newImport("java.security.cert.CertPathValidator.getInstance", true),
                newImport("java.security.cert.CertStore.getInstance", true),
                newImport("java.security.cert.CertificateFactory.getInstance", true),
                newImport("java.text.Collator.getInstance", true),
                newImport("java.text.DateFormat.getInstance", true),
                newImport("java.text.DateFormatSymbols.getInstance", true),
                newImport("java.text.DecimalFormatSymbols.getInstance", true),
                newImport("java.text.NumberFormat.getInstance", true),
                newImport("java.util.Calendar.getInstance", true),
                newImport("java.util.Currency.getInstance", true),
                newImport("javax.crypto.Cipher.getInstance", true),
                newImport("javax.crypto.ExemptionMechanism.getInstance", true),
                newImport("javax.crypto.KeyAgreement.getInstance", true),
                newImport("javax.crypto.KeyGenerator.getInstance", true),
                newImport("javax.crypto.Mac.getInstance", true),
                newImport("javax.crypto.SecretKeyFactory.getInstance", true),
                newImport("javax.management.ObjectName.getInstance", true),
                newImport("javax.net.ssl.KeyManagerFactory.getInstance", true),
                newImport("javax.net.ssl.SSLContext.getInstance", true),
                newImport("javax.net.ssl.TrustManagerFactory.getInstance", true),
                newImport("javax.security.auth.kerberos.KeyTab.getInstance", true),
                newImport("javax.security.auth.login.Configuration.getInstance", true),
                newImport("javax.security.cert.X509Certificate.getInstance", true),
                newImport("javax.sql.rowset.spi.SyncFactory.getInstance", true),
                newImport("javax.swing.LayoutStyle.getInstance", true),
                newImport("javax.xml.crypto.dsig.TransformService.getInstance", true),
                newImport("javax.xml.crypto.dsig.XMLSignatureFactory.getInstance", true),
                newImport("javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getInstance", true),
                newImport("org.ietf.jgss.GSSManager.getInstance", true),
              })
          .put(
              new Identifier("lastDayOfYear"),
              new Import[] {
                newImport("java.time.temporal.TemporalAdjusters.lastDayOfYear", true),
              })
          .put(
              new Identifier("HEISEI"),
              new Import[] {
                newImport("java.time.chrono.JapaneseEra.HEISEI", true),
              })
          .put(
              new Identifier("DHPrivateKey"),
              new Import[] {
                newImport("javax.crypto.interfaces.DHPrivateKey", false),
              })
          .put(
              new Identifier("NA_NUMBER_14_ENVELOPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.NA_NUMBER_14_ENVELOPE", true),
                newImport(
                    "javax.print.attribute.standard.MediaSizeName.NA_NUMBER_14_ENVELOPE", true),
                newImport(
                    "javax.print.attribute.standard.MediaSize.NA.NA_NUMBER_14_ENVELOPE", true),
              })
          .put(
              new Identifier("PrivateKey"),
              new Import[] {
                newImport("java.security.PrivateKey", false),
              })
          .put(
              new Identifier("SELECTED_KEY"),
              new Import[] {
                newImport("javax.swing.Action.SELECTED_KEY", true),
              })
          .put(
              new Identifier("BORDER_LEFT_STYLE"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.BORDER_LEFT_STYLE", true),
              })
          .put(
              new Identifier("SaslServer"),
              new Import[] {
                newImport("javax.security.sasl.SaslServer", false),
              })
          .put(
              new Identifier("XmlAnyElement"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlAnyElement", false),
              })
          .put(
              new Identifier("BindingListHolder"),
              new Import[] {
                newImport("org.omg.CosNaming.BindingListHolder", false),
              })
          .put(
              new Identifier("_SYSTEM_ID"),
              new Import[] {
                newImport("org.omg.PortableServer.IdAssignmentPolicyValue._SYSTEM_ID", true),
              })
          .put(
              new Identifier("TC_PROXYCLASSDESC"),
              new Import[] {
                newImport("java.io.ObjectStreamConstants.TC_PROXYCLASSDESC", true),
              })
          .put(
              new Identifier("COMPILATION_MXBEAN_NAME"),
              new Import[] {
                newImport("java.lang.management.ManagementFactory.COMPILATION_MXBEAN_NAME", true),
              })
          .put(
              new Identifier("type"),
              new Import[] {
                newImport("org.omg.CORBA.AnySeqHelper.type", true),
                newImport("org.omg.CORBA.BooleanSeqHelper.type", true),
                newImport("org.omg.CORBA.CharSeqHelper.type", true),
                newImport("org.omg.CORBA.CompletionStatusHelper.type", true),
                newImport("org.omg.CORBA.CurrentHelper.type", true),
                newImport("org.omg.CORBA.DefinitionKindHelper.type", true),
                newImport("org.omg.CORBA.DoubleSeqHelper.type", true),
                newImport("org.omg.CORBA.FieldNameHelper.type", true),
                newImport("org.omg.CORBA.FloatSeqHelper.type", true),
                newImport("org.omg.CORBA.IDLTypeHelper.type", true),
                newImport("org.omg.CORBA.IdentifierHelper.type", true),
                newImport("org.omg.CORBA.LongLongSeqHelper.type", true),
                newImport("org.omg.CORBA.LongSeqHelper.type", true),
                newImport("org.omg.CORBA.NameValuePairHelper.type", true),
                newImport("org.omg.CORBA.ObjectHelper.type", true),
                newImport("org.omg.CORBA.OctetSeqHelper.type", true),
                newImport("org.omg.CORBA.ParameterModeHelper.type", true),
                newImport("org.omg.CORBA.PolicyErrorCodeHelper.type", true),
                newImport("org.omg.CORBA.PolicyErrorHelper.type", true),
                newImport("org.omg.CORBA.PolicyHelper.type", true),
                newImport("org.omg.CORBA.PolicyListHelper.type", true),
                newImport("org.omg.CORBA.PolicyTypeHelper.type", true),
                newImport("org.omg.CORBA.RepositoryIdHelper.type", true),
                newImport("org.omg.CORBA.ServiceDetailHelper.type", true),
                newImport("org.omg.CORBA.ServiceInformationHelper.type", true),
                newImport("org.omg.CORBA.SetOverrideTypeHelper.type", true),
                newImport("org.omg.CORBA.ShortSeqHelper.type", true),
                newImport("org.omg.CORBA.StringSeqHelper.type", true),
                newImport("org.omg.CORBA.StringValueHelper.type", true),
                newImport("org.omg.CORBA.StructMemberHelper.type", true),
                newImport("org.omg.CORBA.ULongLongSeqHelper.type", true),
                newImport("org.omg.CORBA.ULongSeqHelper.type", true),
                newImport("org.omg.CORBA.UShortSeqHelper.type", true),
                newImport("org.omg.CORBA.UnionMemberHelper.type", true),
                newImport("org.omg.CORBA.UnknownUserExceptionHelper.type", true),
                newImport("org.omg.CORBA.ValueBaseHelper.type", true),
                newImport("org.omg.CORBA.ValueMemberHelper.type", true),
                newImport("org.omg.CORBA.VersionSpecHelper.type", true),
                newImport("org.omg.CORBA.VisibilityHelper.type", true),
                newImport("org.omg.CORBA.WCharSeqHelper.type", true),
                newImport("org.omg.CORBA.WStringSeqHelper.type", true),
                newImport("org.omg.CORBA.WStringValueHelper.type", true),
                newImport("org.omg.CORBA.WrongTransactionHelper.type", true),
                newImport("org.omg.CosNaming.BindingHelper.type", true),
                newImport("org.omg.CosNaming.BindingIteratorHelper.type", true),
                newImport("org.omg.CosNaming.BindingListHelper.type", true),
                newImport("org.omg.CosNaming.BindingTypeHelper.type", true),
                newImport("org.omg.CosNaming.IstringHelper.type", true),
                newImport("org.omg.CosNaming.NameComponentHelper.type", true),
                newImport("org.omg.CosNaming.NameHelper.type", true),
                newImport("org.omg.CosNaming.NamingContextExtHelper.type", true),
                newImport("org.omg.CosNaming.NamingContextHelper.type", true),
                newImport("org.omg.CosNaming.NamingContextExtPackage.AddressHelper.type", true),
                newImport(
                    "org.omg.CosNaming.NamingContextExtPackage.InvalidAddressHelper.type", true),
                newImport("org.omg.CosNaming.NamingContextExtPackage.StringNameHelper.type", true),
                newImport("org.omg.CosNaming.NamingContextExtPackage.URLStringHelper.type", true),
                newImport("org.omg.CosNaming.NamingContextPackage.AlreadyBoundHelper.type", true),
                newImport("org.omg.CosNaming.NamingContextPackage.CannotProceedHelper.type", true),
                newImport("org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.type", true),
                newImport("org.omg.CosNaming.NamingContextPackage.NotEmptyHelper.type", true),
                newImport("org.omg.CosNaming.NamingContextPackage.NotFoundHelper.type", true),
                newImport("org.omg.CosNaming.NamingContextPackage.NotFoundReasonHelper.type", true),
                newImport("org.omg.DynamicAny.AnySeqHelper.type", true),
                newImport("org.omg.DynamicAny.DynAnyFactoryHelper.type", true),
                newImport("org.omg.DynamicAny.DynAnyHelper.type", true),
                newImport("org.omg.DynamicAny.DynAnySeqHelper.type", true),
                newImport("org.omg.DynamicAny.DynArrayHelper.type", true),
                newImport("org.omg.DynamicAny.DynEnumHelper.type", true),
                newImport("org.omg.DynamicAny.DynFixedHelper.type", true),
                newImport("org.omg.DynamicAny.DynSequenceHelper.type", true),
                newImport("org.omg.DynamicAny.DynStructHelper.type", true),
                newImport("org.omg.DynamicAny.DynUnionHelper.type", true),
                newImport("org.omg.DynamicAny.DynValueHelper.type", true),
                newImport("org.omg.DynamicAny.FieldNameHelper.type", true),
                newImport("org.omg.DynamicAny.NameDynAnyPairHelper.type", true),
                newImport("org.omg.DynamicAny.NameDynAnyPairSeqHelper.type", true),
                newImport("org.omg.DynamicAny.NameValuePairHelper.type", true),
                newImport("org.omg.DynamicAny.NameValuePairSeqHelper.type", true),
                newImport(
                    "org.omg.DynamicAny.DynAnyFactoryPackage.InconsistentTypeCodeHelper.type",
                    true),
                newImport("org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.type", true),
                newImport("org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.type", true),
                newImport("org.omg.IOP.CodecFactoryHelper.type", true),
                newImport("org.omg.IOP.ComponentIdHelper.type", true),
                newImport("org.omg.IOP.IORHelper.type", true),
                newImport("org.omg.IOP.MultipleComponentProfileHelper.type", true),
                newImport("org.omg.IOP.ProfileIdHelper.type", true),
                newImport("org.omg.IOP.ServiceContextHelper.type", true),
                newImport("org.omg.IOP.ServiceContextListHelper.type", true),
                newImport("org.omg.IOP.ServiceIdHelper.type", true),
                newImport("org.omg.IOP.TaggedComponentHelper.type", true),
                newImport("org.omg.IOP.TaggedProfileHelper.type", true),
                newImport("org.omg.IOP.CodecFactoryPackage.UnknownEncodingHelper.type", true),
                newImport("org.omg.IOP.CodecPackage.FormatMismatchHelper.type", true),
                newImport("org.omg.IOP.CodecPackage.InvalidTypeForEncodingHelper.type", true),
                newImport("org.omg.IOP.CodecPackage.TypeMismatchHelper.type", true),
                newImport("org.omg.Messaging.SyncScopeHelper.type", true),
                newImport("org.omg.PortableInterceptor.AdapterManagerIdHelper.type", true),
                newImport("org.omg.PortableInterceptor.AdapterNameHelper.type", true),
                newImport("org.omg.PortableInterceptor.AdapterStateHelper.type", true),
                newImport("org.omg.PortableInterceptor.CurrentHelper.type", true),
                newImport("org.omg.PortableInterceptor.ForwardRequestHelper.type", true),
                newImport("org.omg.PortableInterceptor.IORInterceptor_3_0Helper.type", true),
                newImport("org.omg.PortableInterceptor.InvalidSlotHelper.type", true),
                newImport("org.omg.PortableInterceptor.ORBIdHelper.type", true),
                newImport("org.omg.PortableInterceptor.ObjectIdHelper.type", true),
                newImport("org.omg.PortableInterceptor.ObjectReferenceFactoryHelper.type", true),
                newImport("org.omg.PortableInterceptor.ObjectReferenceTemplateHelper.type", true),
                newImport(
                    "org.omg.PortableInterceptor.ObjectReferenceTemplateSeqHelper.type", true),
                newImport("org.omg.PortableInterceptor.ServerIdHelper.type", true),
                newImport(
                    "org.omg.PortableInterceptor.ORBInitInfoPackage.DuplicateNameHelper.type",
                    true),
                newImport(
                    "org.omg.PortableInterceptor.ORBInitInfoPackage.InvalidNameHelper.type", true),
                newImport(
                    "org.omg.PortableInterceptor.ORBInitInfoPackage.ObjectIdHelper.type", true),
                newImport("org.omg.PortableServer.CurrentHelper.type", true),
                newImport("org.omg.PortableServer.ForwardRequestHelper.type", true),
                newImport("org.omg.PortableServer.POAHelper.type", true),
                newImport("org.omg.PortableServer.ServantActivatorHelper.type", true),
                newImport("org.omg.PortableServer.ServantLocatorHelper.type", true),
                newImport("org.omg.PortableServer.CurrentPackage.NoContextHelper.type", true),
                newImport(
                    "org.omg.PortableServer.POAManagerPackage.AdapterInactiveHelper.type", true),
                newImport(
                    "org.omg.PortableServer.POAPackage.AdapterAlreadyExistsHelper.type", true),
                newImport("org.omg.PortableServer.POAPackage.AdapterNonExistentHelper.type", true),
                newImport("org.omg.PortableServer.POAPackage.InvalidPolicyHelper.type", true),
                newImport("org.omg.PortableServer.POAPackage.NoServantHelper.type", true),
                newImport("org.omg.PortableServer.POAPackage.ObjectAlreadyActiveHelper.type", true),
                newImport("org.omg.PortableServer.POAPackage.ObjectNotActiveHelper.type", true),
                newImport(
                    "org.omg.PortableServer.POAPackage.ServantAlreadyActiveHelper.type", true),
                newImport("org.omg.PortableServer.POAPackage.ServantNotActiveHelper.type", true),
                newImport("org.omg.PortableServer.POAPackage.WrongAdapterHelper.type", true),
                newImport("org.omg.PortableServer.POAPackage.WrongPolicyHelper.type", true),
              })
          .put(
              new Identifier("VK_DEAD_CEDILLA"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_DEAD_CEDILLA", true),
              })
          .put(
              new Identifier("getSequencer"),
              new Import[] {
                newImport("javax.sound.midi.MidiSystem.getSequencer", true),
              })
          .put(
              new Identifier("RunnableScheduledFuture"),
              new Import[] {
                newImport("java.util.concurrent.RunnableScheduledFuture", false),
              })
          .put(
              new Identifier("PANEL_UI"),
              new Import[] {
                newImport("javax.print.ServiceUIFactory.PANEL_UI", true),
              })
          .put(
              new Identifier("DASH_PUNCTUATION"),
              new Import[] {
                newImport("java.lang.Character.DASH_PUNCTUATION", true),
              })
          .put(
              new Identifier("PolicyListHelper"),
              new Import[] {
                newImport("org.omg.CORBA.PolicyListHelper", false),
              })
          .put(
              new Identifier("DecimalFormatSymbolsProvider"),
              new Import[] {
                newImport("java.text.spi.DecimalFormatSymbolsProvider", false),
              })
          .put(
              new Identifier("MARGIN_LEFT"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.MARGIN_LEFT", true),
              })
          .put(
              new Identifier("ImageOutputStream"),
              new Import[] {
                newImport("javax.imageio.stream.ImageOutputStream", false),
              })
          .put(
              new Identifier("ClosedChannelException"),
              new Import[] {
                newImport("java.nio.channels.ClosedChannelException", false),
              })
          .put(
              new Identifier("StatementEventListener"),
              new Import[] {
                newImport("javax.sql.StatementEventListener", false),
              })
          .put(
              new Identifier("InvalidSearchFilterException"),
              new Import[] {
                newImport("javax.naming.directory.InvalidSearchFilterException", false),
              })
          .put(
              new Identifier("getLayer"),
              new Import[] {
                newImport("javax.swing.JLayeredPane.getLayer", true),
              })
          .put(
              new Identifier("CookieHolder"),
              new Import[] {
                newImport("org.omg.PortableServer.ServantLocatorPackage.CookieHolder", false),
              })
          .put(
              new Identifier("TextListener"),
              new Import[] {
                newImport("java.awt.event.TextListener", false),
              })
          .put(
              new Identifier("SCROLLING"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.SCROLLING", true),
              })
          .put(
              new Identifier("BLOCK_INCREMENT"),
              new Import[] {
                newImport("java.awt.event.AdjustmentEvent.BLOCK_INCREMENT", true),
              })
          .put(
              new Identifier("parameterModifiers"),
              new Import[] {
                newImport("java.lang.reflect.Modifier.parameterModifiers", true),
              })
          .put(
              new Identifier("SubjectDelegationPermission"),
              new Import[] {
                newImport("javax.management.remote.SubjectDelegationPermission", false),
              })
          .put(
              new Identifier("XA_RETRY"),
              new Import[] {
                newImport("javax.transaction.xa.XAException.XA_RETRY", true),
              })
          .put(
              new Identifier("BeepAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.BeepAction", false),
              })
          .put(
              new Identifier("DOTALL"),
              new Import[] {
                newImport("java.util.regex.Pattern.DOTALL", true),
              })
          .put(
              new Identifier("systemNodeForPackage"),
              new Import[] {
                newImport("java.util.prefs.Preferences.systemNodeForPackage", true),
              })
          .put(
              new Identifier("functionResultUnknown"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.functionResultUnknown", true),
              })
          .put(
              new Identifier("MappedByteBuffer"),
              new Import[] {
                newImport("java.nio.MappedByteBuffer", false),
              })
          .put(
              new Identifier("ROLE_CARDINALITY_INFINITY"),
              new Import[] {
                newImport("javax.management.relation.RoleInfo.ROLE_CARDINALITY_INFINITY", true),
              })
          .put(
              new Identifier("SSLSessionBindingEvent"),
              new Import[] {
                newImport("javax.net.ssl.SSLSessionBindingEvent", false),
              })
          .put(
              new Identifier("TrustManagerFactorySpi"),
              new Import[] {
                newImport("javax.net.ssl.TrustManagerFactorySpi", false),
              })
          .put(
              new Identifier("SynthTabbedPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthTabbedPaneUI", false),
              })
          .put(
              new Identifier("UNDERFLOW"),
              new Import[] {
                newImport("java.nio.charset.CoderResult.UNDERFLOW", true),
              })
          .put(
              new Identifier("IllegalBlockingModeException"),
              new Import[] {
                newImport("java.nio.channels.IllegalBlockingModeException", false),
              })
          .put(
              new Identifier("dk_AbstractInterface"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind.dk_AbstractInterface", true),
              })
          .put(
              new Identifier("runFinalization"),
              new Import[] {
                newImport("java.lang.System.runFinalization", true),
              })
          .put(
              new Identifier("getRightIndent"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.getRightIndent", true),
              })
          .put(
              new Identifier("VK_DEAD_CIRCUMFLEX"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_DEAD_CIRCUMFLEX", true),
              })
          .put(
              new Identifier("showInternalConfirmDialog"),
              new Import[] {
                newImport("javax.swing.JOptionPane.showInternalConfirmDialog", true),
              })
          .put(
              new Identifier("COMMENT_NODE"),
              new Import[] {
                newImport("org.w3c.dom.Node.COMMENT_NODE", true),
              })
          .put(
              new Identifier("LOWER_LEADING_CORNER"),
              new Import[] {
                newImport("javax.swing.ScrollPaneConstants.LOWER_LEADING_CORNER", true),
              })
          .put(
              new Identifier("SINGLE_LINE"),
              new Import[] {
                newImport("javax.accessibility.AccessibleState.SINGLE_LINE", true),
              })
          .put(
              new Identifier("geq"),
              new Import[] {
                newImport("javax.management.Query.geq", true),
              })
          .put(
              new Identifier("MetalProgressBarUI"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalProgressBarUI", false),
              })
          .put(
              new Identifier("InvalidTypeForEncodingHelper"),
              new Import[] {
                newImport("org.omg.IOP.CodecPackage.InvalidTypeForEncodingHelper", false),
              })
          .put(
              new Identifier("FlatteningPathIterator"),
              new Import[] {
                newImport("java.awt.geom.FlatteningPathIterator", false),
              })
          .put(
              new Identifier("get"),
              new Import[] {
                newImport("java.lang.reflect.Array.get", true),
                newImport("java.nio.file.Paths.get", true),
                newImport("javax.swing.UIManager.get", true),
              })
          .put(
              new Identifier("emptyMap"),
              new Import[] {
                newImport("java.util.Collections.emptyMap", true),
              })
          .put(
              new Identifier("STAPLE_BOTTOM_LEFT"),
              new Import[] {
                newImport("javax.print.attribute.standard.Finishings.STAPLE_BOTTOM_LEFT", true),
              })
          .put(
              new Identifier("VERTICAL_TEXT_POSITION_CHANGED_PROPERTY"),
              new Import[] {
                newImport(
                    "javax.swing.AbstractButton.VERTICAL_TEXT_POSITION_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("MLetMBean"),
              new Import[] {
                newImport("javax.management.loading.MLetMBean", false),
              })
          .put(
              new Identifier("MUSICAL_SYMBOLS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.MUSICAL_SYMBOLS", true),
              })
          .put(
              new Identifier("setDefaultQueue"),
              new Import[] {
                newImport("javax.swing.text.LayoutQueue.setDefaultQueue", true),
              })
          .put(
              new Identifier("DescriptorSupport"),
              new Import[] {
                newImport("javax.management.modelmbean.DescriptorSupport", false),
              })
          .put(
              new Identifier("AUTO_RESIZE_LAST_COLUMN"),
              new Import[] {
                newImport("javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN", true),
              })
          .put(
              new Identifier("parseBase64Binary"),
              new Import[] {
                newImport("javax.xml.bind.DatatypeConverter.parseBase64Binary", true),
              })
          .put(
              new Identifier("JAVANESE"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.JAVANESE", true),
              })
          .put(
              new Identifier("DUMMY"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.DUMMY", true),
              })
          .put(
              new Identifier("lookupStreamPrintServices"),
              new Import[] {
                newImport("java.awt.print.PrinterJob.lookupStreamPrintServices", true),
              })
          .put(
              new Identifier("LOCTIM"),
              new Import[] {
                newImport("java.util.jar.JarEntry.LOCTIM", true),
                newImport("java.util.jar.JarFile.LOCTIM", true),
                newImport("java.util.jar.JarInputStream.LOCTIM", true),
                newImport("java.util.jar.JarOutputStream.LOCTIM", true),
                newImport("java.util.zip.ZipEntry.LOCTIM", true),
                newImport("java.util.zip.ZipFile.LOCTIM", true),
                newImport("java.util.zip.ZipInputStream.LOCTIM", true),
                newImport("java.util.zip.ZipOutputStream.LOCTIM", true),
              })
          .put(
              new Identifier("DataFormatException"),
              new Import[] {
                newImport("java.util.zip.DataFormatException", false),
              })
          .put(
              new Identifier("ButtonGroup"),
              new Import[] {
                newImport("javax.swing.ButtonGroup", false),
              })
          .put(
              new Identifier("ADDITION"),
              new Import[] {
                newImport("org.w3c.dom.events.MutationEvent.ADDITION", true),
              })
          .put(
              new Identifier("SecretKeyFactorySpi"),
              new Import[] {
                newImport("javax.crypto.SecretKeyFactorySpi", false),
              })
          .put(
              new Identifier("ParseException"),
              new Import[] {
                newImport("java.text.ParseException", false),
              })
          .put(
              new Identifier("tk_value_box"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind.tk_value_box", true),
              })
          .put(
              new Identifier("relativeCCW"),
              new Import[] {
                newImport("java.awt.geom.Line2D.relativeCCW", true),
              })
          .put(
              new Identifier("NUTOKEN"),
              new Import[] {
                newImport("javax.swing.text.html.parser.DTDConstants.NUTOKEN", true),
              })
          .put(
              new Identifier("MBeanServerNotification"),
              new Import[] {
                newImport("javax.management.MBeanServerNotification", false),
              })
          .put(
              new Identifier("RecursiveTask"),
              new Import[] {
                newImport("java.util.concurrent.RecursiveTask", false),
              })
          .put(
              new Identifier("ContextList"),
              new Import[] {
                newImport("org.omg.CORBA.ContextList", false),
              })
          .put(
              new Identifier("getInteger"),
              new Import[] {
                newImport("java.lang.Integer.getInteger", true),
              })
          .put(
              new Identifier("ClosedWatchServiceException"),
              new Import[] {
                newImport("java.nio.file.ClosedWatchServiceException", false),
              })
          .put(
              new Identifier("IMPLEMENTATION_TITLE"),
              new Import[] {
                newImport("java.util.jar.Attributes.Name.IMPLEMENTATION_TITLE", true),
              })
          .put(
              new Identifier("MultiDoc"),
              new Import[] {
                newImport("javax.print.MultiDoc", false),
              })
          .put(
              new Identifier("isLeftMouseButton"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.isLeftMouseButton", true),
              })
          .put(
              new Identifier("SC_EXTERNALIZABLE"),
              new Import[] {
                newImport("java.io.ObjectStreamConstants.SC_EXTERNALIZABLE", true),
              })
          .put(
              new Identifier("create"),
              new Import[] {
                newImport("java.beans.EventHandler.create", true),
                newImport("java.net.URI.create", true),
                newImport("javax.xml.ws.Endpoint.create", true),
                newImport("javax.xml.ws.Service.create", true),
              })
          .put(
              new Identifier("inheritedChannel"),
              new Import[] {
                newImport("java.lang.System.inheritedChannel", true),
              })
          .put(
              new Identifier("JUSTIFICATION_FULL"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.JUSTIFICATION_FULL", true),
              })
          .put(
              new Identifier("_SET_OVERRIDE"),
              new Import[] {
                newImport("org.omg.CORBA.SetOverrideType._SET_OVERRIDE", true),
              })
          .put(
              new Identifier("getControlTextFont"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalLookAndFeel.getControlTextFont", true),
              })
          .put(
              new Identifier("Character"),
              new Import[] {
                newImport("java.lang.Character", false),
              })
          .put(
              new Identifier("Resolver"),
              new Import[] {
                newImport("javax.naming.spi.Resolver", false),
              })
          .put(
              new Identifier("deepEquals"),
              new Import[] {
                newImport("java.util.Arrays.deepEquals", true),
                newImport("java.util.Objects.deepEquals", true),
              })
          .put(
              new Identifier("makeInputMap"),
              new Import[] {
                newImport("javax.swing.LookAndFeel.makeInputMap", true),
              })
          .put(
              new Identifier("Sequence"),
              new Import[] {
                newImport("javax.sound.midi.Sequence", false),
              })
          .put(
              new Identifier("insertTabAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.insertTabAction", true),
              })
          .put(
              new Identifier("VK_FIND"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_FIND", true),
              })
          .put(
              new Identifier("DateTimeParseException"),
              new Import[] {
                newImport("java.time.format.DateTimeParseException", false),
              })
          .put(
              new Identifier("beginLineAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.beginLineAction", true),
              })
          .put(
              new Identifier("MultipleMaster"),
              new Import[] {
                newImport("java.awt.font.MultipleMaster", false),
              })
          .put(
              new Identifier("FIRST_LINE_START"),
              new Import[] {
                newImport("java.awt.GridBagConstraints.FIRST_LINE_START", true),
              })
          .put(
              new Identifier("SPECIFICATION_VENDOR"),
              new Import[] {
                newImport("java.util.jar.Attributes.Name.SPECIFICATION_VENDOR", true),
              })
          .put(
              new Identifier("EMPTY_SET"),
              new Import[] {
                newImport("java.util.Collections.EMPTY_SET", true),
              })
          .put(
              new Identifier("installLookAndFeel"),
              new Import[] {
                newImport("javax.swing.UIManager.installLookAndFeel", true),
              })
          .put(
              new Identifier("NoPermissionException"),
              new Import[] {
                newImport("javax.naming.NoPermissionException", false),
              })
          .put(
              new Identifier("getFont"),
              new Import[] {
                newImport("java.awt.Font.getFont", true),
                newImport("javax.swing.UIManager.getFont", true),
              })
          .put(
              new Identifier("VARIATION_SELECTORS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.VARIATION_SELECTORS", true),
              })
          .put(
              new Identifier("getFontSize"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.getFontSize", true),
              })
          .put(
              new Identifier("scalb"),
              new Import[] {
                newImport("java.lang.Math.scalb", true),
                newImport("java.lang.StrictMath.scalb", true),
              })
          .put(
              new Identifier("EXECUTE_FAILED"),
              new Import[] {
                newImport("java.sql.Statement.EXECUTE_FAILED", true),
              })
          .put(
              new Identifier("scale"),
              new Import[] {
                newImport("javax.swing.Spring.scale", true),
              })
          .put(
              new Identifier("computeIntersection"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.computeIntersection", true),
              })
          .put(
              new Identifier("BasicPopupMenuUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicPopupMenuUI", false),
              })
          .put(
              new Identifier("encodeDataFlavor"),
              new Import[] {
                newImport("java.awt.datatransfer.SystemFlavorMap.encodeDataFlavor", true),
              })
          .put(
              new Identifier("HTTP_GATEWAY_TIMEOUT"),
              new Import[] {
                newImport("java.net.HttpURLConnection.HTTP_GATEWAY_TIMEOUT", true),
              })
          .put(
              new Identifier("subdivide"),
              new Import[] {
                newImport("java.awt.geom.CubicCurve2D.subdivide", true),
                newImport("java.awt.geom.QuadCurve2D.subdivide", true),
              })
          .put(
              new Identifier("MAX_VALUE_LENGTH"),
              new Import[] {
                newImport("java.util.prefs.Preferences.MAX_VALUE_LENGTH", true),
              })
          .put(
              new Identifier("JAPAN"),
              new Import[] {
                newImport("java.util.Locale.JAPAN", true),
              })
          .put(
              new Identifier("K2Div2Chrominance"),
              new Import[] {
                newImport("javax.imageio.plugins.jpeg.JPEGQTable.K2Div2Chrominance", true),
              })
          .put(
              new Identifier("TEXT_PLAIN_US_ASCII"),
              new Import[] {
                newImport("javax.print.DocFlavor.BYTE_ARRAY.TEXT_PLAIN_US_ASCII", true),
                newImport("javax.print.DocFlavor.INPUT_STREAM.TEXT_PLAIN_US_ASCII", true),
                newImport("javax.print.DocFlavor.URL.TEXT_PLAIN_US_ASCII", true),
              })
          .put(
              new Identifier("WebServiceException"),
              new Import[] {
                newImport("javax.xml.ws.WebServiceException", false),
              })
          .put(
              new Identifier("AutoCloseable"),
              new Import[] {
                newImport("java.lang.AutoCloseable", false),
              })
          .put(
              new Identifier("BasicTextFieldUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicTextFieldUI", false),
              })
          .put(
              new Identifier("MONARCH_ENVELOPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.MONARCH_ENVELOPE", true),
                newImport("javax.print.attribute.standard.MediaSizeName.MONARCH_ENVELOPE", true),
                newImport("javax.print.attribute.standard.MediaSize.Other.MONARCH_ENVELOPE", true),
              })
          .put(
              new Identifier("ConsoleHandler"),
              new Import[] {
                newImport("java.util.logging.ConsoleHandler", false),
              })
          .put(
              new Identifier("RejectedExecutionException"),
              new Import[] {
                newImport("java.util.concurrent.RejectedExecutionException", false),
              })
          .put(
              new Identifier("MBeanNotificationInfo"),
              new Import[] {
                newImport("javax.management.MBeanNotificationInfo", false),
              })
          .put(
              new Identifier("CLASS_INPUT"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.CLASS_INPUT", true),
              })
          .put(
              new Identifier("Signature"),
              new Import[] {
                newImport("java.security.Signature", false),
              })
          .put(
              new Identifier("MATH_SYMBOL"),
              new Import[] {
                newImport("java.lang.Character.MATH_SYMBOL", true),
              })
          .put(
              new Identifier("VK_BRACELEFT"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_BRACELEFT", true),
              })
          .put(
              new Identifier("FILTER_INTERRUPT"),
              new Import[] {
                newImport("org.w3c.dom.ls.LSParserFilter.FILTER_INTERRUPT", true),
              })
          .put(
              new Identifier("offsetByCodePoints"),
              new Import[] {
                newImport("java.lang.Character.offsetByCodePoints", true),
              })
          .put(
              new Identifier("printTime"),
              new Import[] {
                newImport("javax.xml.bind.DatatypeConverter.printTime", true),
              })
          .put(
              new Identifier("SHORT_FORMAT"),
              new Import[] {
                newImport("java.util.Calendar.SHORT_FORMAT", true),
              })
          .put(
              new Identifier("_dk_Module"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind._dk_Module", true),
              })
          .build();
}
