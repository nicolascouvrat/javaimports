// Code generated by GenerateStdlib.java. DO NOT EDIT.
package com.nikodoko.javaimports.stdlib.internal.api.v8;

import static com.nikodoko.javaimports.stdlib.internal.Stdlib.newImport;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.common.Identifier;
import com.nikodoko.javaimports.common.Import;
import java.util.Map;

public class Java8StdlibChunk2 {
  static final Map<Identifier, Import[]> CLASSES =
      new ImmutableMap.Builder<Identifier, Import[]>()
          .put(
              new Identifier("JDesktopPane"),
              new Import[] {
                newImport("javax.swing.JDesktopPane", false),
              })
          .put(
              new Identifier("Owner"),
              new Import[] {
                newImport("java.security.acl.Owner", false),
              })
          .put(
              new Identifier("ZoneRulesException"),
              new Import[] {
                newImport("java.time.zone.ZoneRulesException", false),
              })
          .put(
              new Identifier("JTextArea"),
              new Import[] {
                newImport("javax.swing.JTextArea", false),
              })
          .put(
              new Identifier("tk_union"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind.tk_union", true),
              })
          .put(
              new Identifier("Configuration"),
              new Import[] {
                newImport("javax.security.auth.login.Configuration", false),
              })
          .put(
              new Identifier("AlreadyConnectedException"),
              new Import[] {
                newImport("java.nio.channels.AlreadyConnectedException", false),
              })
          .put(
              new Identifier("newSetFromMap"),
              new Import[] {
                newImport("java.util.Collections.newSetFromMap", true),
              })
          .put(
              new Identifier("lastInMonth"),
              new Import[] {
                newImport("java.time.temporal.TemporalAdjusters.lastInMonth", true),
              })
          .put(
              new Identifier("DefaultKeyTypedAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.DefaultKeyTypedAction", false),
              })
          .put(
              new Identifier("Naming"),
              new Import[] {
                newImport("java.rmi.Naming", false),
              })
          .put(
              new Identifier("SpinnerModel"),
              new Import[] {
                newImport("javax.swing.SpinnerModel", false),
              })
          .put(
              new Identifier("INFORMATION_DIALOG"),
              new Import[] {
                newImport("javax.swing.JRootPane.INFORMATION_DIALOG", true),
              })
          .put(
              new Identifier("XmlList"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlList", false),
              })
          .put(
              new Identifier("SAXException"),
              new Import[] {
                newImport("org.xml.sax.SAXException", false),
              })
          .put(
              new Identifier("NotDirectoryException"),
              new Import[] {
                newImport("java.nio.file.NotDirectoryException", false),
              })
          .put(
              new Identifier("FUSER_OVER_TEMP"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.PrinterStateReason.FUSER_OVER_TEMP", true),
              })
          .put(
              new Identifier("LayeredHighlighter"),
              new Import[] {
                newImport("javax.swing.text.LayeredHighlighter", false),
              })
          .put(
              new Identifier("newOutputStream"),
              new Import[] {
                newImport("java.nio.channels.Channels.newOutputStream", true),
                newImport("java.nio.file.Files.newOutputStream", true),
              })
          .put(
              new Identifier("Popup"),
              new Import[] {
                newImport("javax.swing.Popup", false),
              })
          .put(
              new Identifier("CASE_INSENSITIVE"),
              new Import[] {
                newImport("java.util.regex.Pattern.CASE_INSENSITIVE", true),
              })
          .put(
              new Identifier("MetalTabbedPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalTabbedPaneUI", false),
              })
          .put(
              new Identifier("DOMURIReference"),
              new Import[] {
                newImport("javax.xml.crypto.dom.DOMURIReference", false),
              })
          .put(
              new Identifier("ID_ASSIGNMENT_POLICY_ID"),
              new Import[] {
                newImport("org.omg.PortableServer.ID_ASSIGNMENT_POLICY_ID", false),
              })
          .put(
              new Identifier("BasicAttribute"),
              new Import[] {
                newImport("javax.naming.directory.BasicAttribute", false),
              })
          .put(
              new Identifier("PRESSED_ICON_CHANGED_PROPERTY"),
              new Import[] {
                newImport("javax.swing.AbstractButton.PRESSED_ICON_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("GSSName"),
              new Import[] {
                newImport("org.ietf.jgss.GSSName", false),
              })
          .put(
              new Identifier("EGYPTIAN_HIEROGLYPHS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.EGYPTIAN_HIEROGLYPHS", true),
              })
          .put(
              new Identifier("VALUE_FRACTIONALMETRICS_ON"),
              new Import[] {
                newImport("java.awt.RenderingHints.VALUE_FRACTIONALMETRICS_ON", true),
              })
          .put(
              new Identifier("MEDIUM"),
              new Import[] {
                newImport("java.text.DateFormat.MEDIUM", true),
              })
          .put(
              new Identifier("VERTICAL_ALIGN"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.VERTICAL_ALIGN", true),
              })
          .put(
              new Identifier("TEXT_HTML_UTF_8"),
              new Import[] {
                newImport("javax.print.DocFlavor.BYTE_ARRAY.TEXT_HTML_UTF_8", true),
                newImport("javax.print.DocFlavor.INPUT_STREAM.TEXT_HTML_UTF_8", true),
                newImport("javax.print.DocFlavor.URL.TEXT_HTML_UTF_8", true),
              })
          .put(
              new Identifier("StreamResult"),
              new Import[] {
                newImport("javax.xml.transform.stream.StreamResult", false),
              })
          .put(
              new Identifier("MIN_CODE_POINT"),
              new Import[] {
                newImport("java.lang.Character.MIN_CODE_POINT", true),
              })
          .put(
              new Identifier("GeneralSecurityException"),
              new Import[] {
                newImport("java.security.GeneralSecurityException", false),
              })
          .put(
              new Identifier("TransactionalWriter"),
              new Import[] {
                newImport("javax.sql.rowset.spi.TransactionalWriter", false),
              })
          .put(
              new Identifier("selectionDownAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.selectionDownAction", true),
              })
          .put(
              new Identifier("createInterleaved"),
              new Import[] {
                newImport("javax.imageio.ImageTypeSpecifier.createInterleaved", true),
              })
          .put(
              new Identifier("getSystemResourceAsStream"),
              new Import[] {
                newImport("java.lang.ClassLoader.getSystemResourceAsStream", true),
              })
          .put(
              new Identifier("AccountException"),
              new Import[] {
                newImport("javax.security.auth.login.AccountException", false),
              })
          .put(
              new Identifier("TransferHandler"),
              new Import[] {
                newImport("javax.swing.TransferHandler", false),
              })
          .put(
              new Identifier("PaintContext"),
              new Import[] {
                newImport("java.awt.PaintContext", false),
                newImport("javax.swing.plaf.nimbus.AbstractRegionPainter.PaintContext", false),
              })
          .put(
              new Identifier("installProperty"),
              new Import[] {
                newImport("javax.swing.LookAndFeel.installProperty", true),
              })
          .put(
              new Identifier("TC_BLOCKDATA"),
              new Import[] {
                newImport("java.io.ObjectStreamConstants.TC_BLOCKDATA", true),
              })
          .put(
              new Identifier("compare"),
              new Import[] {
                newImport("java.lang.Boolean.compare", true),
                newImport("java.lang.Byte.compare", true),
                newImport("java.lang.Character.compare", true),
                newImport("java.lang.Double.compare", true),
                newImport("java.lang.Float.compare", true),
                newImport("java.lang.Integer.compare", true),
                newImport("java.lang.Long.compare", true),
                newImport("java.lang.Short.compare", true),
                newImport("java.util.Objects.compare", true),
              })
          .put(
              new Identifier("AttributeNotFoundException"),
              new Import[] {
                newImport("javax.management.AttributeNotFoundException", false),
              })
          .put(
              new Identifier("Set"),
              new Import[] {
                newImport("java.util.Set", false),
              })
          .put(
              new Identifier("HeadlessException"),
              new Import[] {
                newImport("java.awt.HeadlessException", false),
              })
          .put(
              new Identifier("RowIdLifetime"),
              new Import[] {
                newImport("java.sql.RowIdLifetime", false),
              })
          .put(
              new Identifier("ScriptEngineManager"),
              new Import[] {
                newImport("javax.script.ScriptEngineManager", false),
              })
          .put(
              new Identifier("DefaultHighlighter"),
              new Import[] {
                newImport("javax.swing.text.DefaultHighlighter", false),
              })
          .put(
              new Identifier("NoSuchFieldException"),
              new Import[] {
                newImport("java.lang.NoSuchFieldException", false),
              })
          .put(
              new Identifier("lineSeparator"),
              new Import[] {
                newImport("java.lang.System.lineSeparator", true),
              })
          .put(
              new Identifier("tk_char"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind.tk_char", true),
              })
          .put(
              new Identifier("SECURITY_CREDENTIALS"),
              new Import[] {
                newImport("javax.naming.Context.SECURITY_CREDENTIALS", true),
              })
          .put(
              new Identifier("TOLEFT_TOBOTTOM"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.PresentationDirection.TOLEFT_TOBOTTOM", true),
              })
          .put(
              new Identifier("DatagramSocketImplFactory"),
              new Import[] {
                newImport("java.net.DatagramSocketImplFactory", false),
              })
          .put(
              new Identifier("JdbcRowSet"),
              new Import[] {
                newImport("javax.sql.rowset.JdbcRowSet", false),
              })
          .put(
              new Identifier("BadStringOperationException"),
              new Import[] {
                newImport("javax.management.BadStringOperationException", false),
              })
          .put(
              new Identifier("URI_SOAP_1_2_ROLE_ULTIMATE_RECEIVER"),
              new Import[] {
                newImport("javax.xml.soap.SOAPConstants.URI_SOAP_1_2_ROLE_ULTIMATE_RECEIVER", true),
              })
          .put(
              new Identifier("OutputKeys"),
              new Import[] {
                newImport("javax.xml.transform.OutputKeys", false),
              })
          .put(
              new Identifier("getThreadMXBean"),
              new Import[] {
                newImport("java.lang.management.ManagementFactory.getThreadMXBean", true),
              })
          .put(
              new Identifier("TYPE_5CLR"),
              new Import[] {
                newImport("java.awt.color.ColorSpace.TYPE_5CLR", true),
              })
          .put(
              new Identifier("COLUMN_HEADER"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.COLUMN_HEADER", true),
                newImport("javax.swing.ScrollPaneConstants.COLUMN_HEADER", true),
              })
          .put(
              new Identifier("getenv"),
              new Import[] {
                newImport("java.lang.System.getenv", true),
              })
          .put(
              new Identifier("IdentityScope"),
              new Import[] {
                newImport("java.security.IdentityScope", false),
              })
          .put(
              new Identifier("createRaisedBevelBorder"),
              new Import[] {
                newImport("javax.swing.BorderFactory.createRaisedBevelBorder", true),
              })
          .put(
              new Identifier("TRACKING_TIGHT"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.TRACKING_TIGHT", true),
              })
          .put(
              new Identifier("SinglePixelPackedSampleModel"),
              new Import[] {
                newImport("java.awt.image.SinglePixelPackedSampleModel", false),
              })
          .put(
              new Identifier("afterOffset"),
              new Import[] {
                newImport("java.awt.font.TextHitInfo.afterOffset", true),
              })
          .put(
              new Identifier("AUX_SEND"),
              new Import[] {
                newImport("javax.sound.sampled.FloatControl.Type.AUX_SEND", true),
              })
          .put(
              new Identifier("DragSource"),
              new Import[] {
                newImport("java.awt.dnd.DragSource", false),
              })
          .put(
              new Identifier("FONT"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.FONT", true),
                newImport("javax.swing.text.html.CSS.Attribute.FONT", true),
                newImport("javax.swing.text.html.HTML.Tag.FONT", true),
              })
          .put(
              new Identifier("AbstractSelectableChannel"),
              new Import[] {
                newImport("java.nio.channels.spi.AbstractSelectableChannel", false),
              })
          .put(
              new Identifier("getDefaultSSLSocketFactory"),
              new Import[] {
                newImport("javax.net.ssl.HttpsURLConnection.getDefaultSSLSocketFactory", true),
              })
          .put(
              new Identifier("DragSourceMotionListener"),
              new Import[] {
                newImport("java.awt.dnd.DragSourceMotionListener", false),
              })
          .put(
              new Identifier("toString"),
              new Import[] {
                newImport("java.lang.Boolean.toString", true),
                newImport("java.lang.Byte.toString", true),
                newImport("java.lang.Character.toString", true),
                newImport("java.lang.Double.toString", true),
                newImport("java.lang.Float.toString", true),
                newImport("java.lang.Integer.toString", true),
                newImport("java.lang.Long.toString", true),
                newImport("java.lang.Short.toString", true),
                newImport("java.lang.invoke.MethodHandleInfo.toString", true),
                newImport("java.lang.reflect.Modifier.toString", true),
                newImport("java.nio.file.attribute.PosixFilePermissions.toString", true),
                newImport("java.util.Arrays.toString", true),
                newImport("java.util.Objects.toString", true),
              })
          .put(
              new Identifier("bitCount"),
              new Import[] {
                newImport("java.lang.Integer.bitCount", true),
                newImport("java.lang.Long.bitCount", true),
              })
          .put(
              new Identifier("JRootPane"),
              new Import[] {
                newImport("javax.swing.JRootPane", false),
              })
          .put(
              new Identifier("MonitorSettingException"),
              new Import[] {
                newImport("javax.management.monitor.MonitorSettingException", false),
              })
          .put(
              new Identifier("getUIInputMap"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.getUIInputMap", true),
              })
          .put(
              new Identifier("InputSource"),
              new Import[] {
                newImport("org.xml.sax.InputSource", false),
              })
          .put(
              new Identifier("OUT_RIGHT"),
              new Import[] {
                newImport("java.awt.geom.Rectangle2D.OUT_RIGHT", true),
              })
          .put(
              new Identifier("JTextComponent"),
              new Import[] {
                newImport("javax.swing.text.JTextComponent", false),
              })
          .put(
              new Identifier("icHdrPlatform"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icHdrPlatform", true),
              })
          .put(
              new Identifier("DescriptorAccess"),
              new Import[] {
                newImport("javax.management.DescriptorAccess", false),
              })
          .put(
              new Identifier("TYPE_GENERAL_ROTATION"),
              new Import[] {
                newImport("java.awt.geom.AffineTransform.TYPE_GENERAL_ROTATION", true),
              })
          .put(
              new Identifier("CustomValue"),
              new Import[] {
                newImport("org.omg.CORBA.portable.CustomValue", false),
              })
          .put(
              new Identifier("VolatileCallSite"),
              new Import[] {
                newImport("java.lang.invoke.VolatileCallSite", false),
              })
          .put(
              new Identifier("UnresolvedPermission"),
              new Import[] {
                newImport("java.security.UnresolvedPermission", false),
              })
          .put(
              new Identifier("EmptyStackException"),
              new Import[] {
                newImport("java.util.EmptyStackException", false),
              })
          .put(
              new Identifier("div"),
              new Import[] {
                newImport("javax.management.Query.div", true),
              })
          .put(
              new Identifier("ofLocalizedDate"),
              new Import[] {
                newImport("java.time.format.DateTimeFormatter.ofLocalizedDate", true),
              })
          .put(
              new Identifier("DeclHandler"),
              new Import[] {
                newImport("org.xml.sax.ext.DeclHandler", false),
              })
          .put(
              new Identifier("Point2D"),
              new Import[] {
                newImport("java.awt.geom.Point2D", false),
              })
          .put(
              new Identifier("TextStyle"),
              new Import[] {
                newImport("java.time.format.TextStyle", false),
              })
          .put(
              new Identifier("MIN_TIMEZONE_OFFSET"),
              new Import[] {
                newImport("javax.xml.datatype.DatatypeConstants.MIN_TIMEZONE_OFFSET", true),
              })
          .put(
              new Identifier("PREFERRED"),
              new Import[] {
                newImport("java.awt.GraphicsConfigTemplate.PREFERRED", true),
              })
          .put(
              new Identifier("ColorType"),
              new Import[] {
                newImport("java.awt.PageAttributes.ColorType", false),
                newImport("javax.swing.plaf.synth.ColorType", false),
              })
          .put(
              new Identifier("CertPathValidatorResult"),
              new Import[] {
                newImport("java.security.cert.CertPathValidatorResult", false),
              })
          .put(
              new Identifier("BasicSeparatorUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicSeparatorUI", false),
              })
          .put(
              new Identifier("CRITICAL"),
              new Import[] {
                newImport("javax.naming.ldap.Control.CRITICAL", true),
              })
          .put(
              new Identifier("Completions"),
              new Import[] {
                newImport("javax.annotation.processing.Completions", false),
              })
          .put(
              new Identifier("PolicyHelper"),
              new Import[] {
                newImport("org.omg.CORBA.PolicyHelper", false),
              })
          .put(
              new Identifier("DoubleBuffer"),
              new Import[] {
                newImport("java.nio.DoubleBuffer", false),
              })
          .put(
              new Identifier("FilteringMode"),
              new Import[] {
                newImport("java.util.Locale.FilteringMode", false),
              })
          .put(
              new Identifier("_tk_array"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind._tk_array", true),
              })
          .put(
              new Identifier("isSupplementaryCodePoint"),
              new Import[] {
                newImport("java.lang.Character.isSupplementaryCodePoint", true),
              })
          .put(
              new Identifier("ScheduledExecutorService"),
              new Import[] {
                newImport("java.util.concurrent.ScheduledExecutorService", false),
              })
          .put(
              new Identifier("ImageInputStream"),
              new Import[] {
                newImport("javax.imageio.stream.ImageInputStream", false),
              })
          .put(
              new Identifier("NoSuchFieldError"),
              new Import[] {
                newImport("java.lang.NoSuchFieldError", false),
              })
          .put(
              new Identifier("createTempFile"),
              new Import[] {
                newImport("java.io.File.createTempFile", true),
                newImport("java.nio.file.Files.createTempFile", true),
              })
          .put(
              new Identifier("DiagnosticListener"),
              new Import[] {
                newImport("javax.tools.DiagnosticListener", false),
              })
          .put(
              new Identifier("GraphicAttribute"),
              new Import[] {
                newImport("java.awt.font.GraphicAttribute", false),
              })
          .put(
              new Identifier("getImageReadersByFormatName"),
              new Import[] {
                newImport("javax.imageio.ImageIO.getImageReadersByFormatName", true),
              })
          .put(
              new Identifier("TypeInfo"),
              new Import[] {
                newImport("org.w3c.dom.TypeInfo", false),
              })
          .put(
              new Identifier("URL_PKG_PREFIXES"),
              new Import[] {
                newImport("javax.naming.Context.URL_PKG_PREFIXES", true),
              })
          .put(
              new Identifier("Area"),
              new Import[] {
                newImport("java.awt.geom.Area", false),
              })
          .put(
              new Identifier("ActionListener"),
              new Import[] {
                newImport("java.awt.event.ActionListener", false),
              })
          .put(
              new Identifier("JOB_COMPLETE"),
              new Import[] {
                newImport("javax.print.event.PrintJobEvent.JOB_COMPLETE", true),
              })
          .put(
              new Identifier("PAINT"),
              new Import[] {
                newImport("java.awt.event.PaintEvent.PAINT", true),
              })
          .put(
              new Identifier("ulp"),
              new Import[] {
                newImport("java.lang.Math.ulp", true), newImport("java.lang.StrictMath.ulp", true),
              })
          .put(
              new Identifier("asLifoQueue"),
              new Import[] {
                newImport("java.util.Collections.asLifoQueue", true),
              })
          .put(
              new Identifier("JSplitPane"),
              new Import[] {
                newImport("javax.swing.JSplitPane", false),
              })
          .put(
              new Identifier("BASIC_ISO_DATE"),
              new Import[] {
                newImport("java.time.format.DateTimeFormatter.BASIC_ISO_DATE", true),
              })
          .put(
              new Identifier("HOUR0_FIELD"),
              new Import[] {
                newImport("java.text.DateFormat.HOUR0_FIELD", true),
              })
          .put(
              new Identifier("JCOMPONENT_UI"),
              new Import[] {
                newImport("javax.print.ServiceUIFactory.JCOMPONENT_UI", true),
              })
          .put(
              new Identifier("NA_10x14_ENVELOPE"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSize.NA.NA_10x14_ENVELOPE", true),
              })
          .put(
              new Identifier("CASE_INSENSITIVE_ORDER"),
              new Import[] {
                newImport("java.lang.String.CASE_INSENSITIVE_ORDER", true),
              })
          .put(
              new Identifier("RelationServiceNotRegisteredException"),
              new Import[] {
                newImport("javax.management.relation.RelationServiceNotRegisteredException", false),
              })
          .put(
              new Identifier("Soundbank"),
              new Import[] {
                newImport("javax.sound.midi.Soundbank", false),
              })
          .put(
              new Identifier("PolicyFactory"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.PolicyFactory", false),
              })
          .put(
              new Identifier("BAMUM"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.BAMUM", true),
              })
          .put(
              new Identifier("isDragImageSupported"),
              new Import[] {
                newImport("java.awt.dnd.DragSource.isDragImageSupported", true),
              })
          .put(
              new Identifier("isVolatile"),
              new Import[] {
                newImport("java.lang.reflect.Modifier.isVolatile", true),
              })
          .put(
              new Identifier("lineLimitAttribute"),
              new Import[] {
                newImport("javax.swing.text.PlainDocument.lineLimitAttribute", true),
              })
          .put(
              new Identifier("ServiceConfigurationError"),
              new Import[] {
                newImport("java.util.ServiceConfigurationError", false),
              })
          .put(
              new Identifier("PipedOutputStream"),
              new Import[] {
                newImport("java.io.PipedOutputStream", false),
              })
          .put(
              new Identifier("createBanded"),
              new Import[] {
                newImport("javax.imageio.ImageTypeSpecifier.createBanded", true),
              })
          .put(
              new Identifier("INPUT_METHOD_LAST"),
              new Import[] {
                newImport("java.awt.event.InputMethodEvent.INPUT_METHOD_LAST", true),
              })
          .put(
              new Identifier("registerServiceProvider"),
              new Import[] {
                newImport("javax.print.PrintServiceLookup.registerServiceProvider", true),
              })
          .put(
              new Identifier("getTie"),
              new Import[] {
                newImport("javax.rmi.CORBA.Util.getTie", true),
              })
          .put(
              new Identifier("load"),
              new Import[] {
                newImport("java.lang.System.load", true),
                newImport("java.util.ServiceLoader.load", true),
              })
          .put(
              new Identifier("GSSException"),
              new Import[] {
                newImport("org.ietf.jgss.GSSException", false),
              })
          .put(
              new Identifier("LSResourceResolver"),
              new Import[] {
                newImport("org.w3c.dom.ls.LSResourceResolver", false),
              })
          .put(
              new Identifier("ImageProducer"),
              new Import[] {
                newImport("java.awt.image.ImageProducer", false),
              })
          .put(
              new Identifier("printInteger"),
              new Import[] {
                newImport("javax.xml.bind.DatatypeConverter.printInteger", true),
              })
          .put(
              new Identifier("PBEParameterSpec"),
              new Import[] {
                newImport("javax.crypto.spec.PBEParameterSpec", false),
              })
          .put(
              new Identifier("toASCII"),
              new Import[] {
                newImport("java.net.IDN.toASCII", true),
              })
          .put(
              new Identifier("EXCLUSIVE"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.CanonicalizationMethod.EXCLUSIVE", true),
              })
          .put(
              new Identifier("FORM"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.FORM", true),
              })
          .put(
              new Identifier("TYPE_RASTER_SCREEN"),
              new Import[] {
                newImport("java.awt.GraphicsDevice.TYPE_RASTER_SCREEN", true),
              })
          .put(
              new Identifier("getDefaultFlavorMap"),
              new Import[] {
                newImport("java.awt.datatransfer.SystemFlavorMap.getDefaultFlavorMap", true),
              })
          .put(
              new Identifier("MultiLabelUI"),
              new Import[] {
                newImport("javax.swing.plaf.multi.MultiLabelUI", false),
              })
          .put(
              new Identifier("TEXT_INACTIVE_TEXT"),
              new Import[] {
                newImport("java.awt.SystemColor.TEXT_INACTIVE_TEXT", true),
              })
          .put(
              new Identifier("unconfigurableScheduledExecutorService"),
              new Import[] {
                newImport(
                    "java.util.concurrent.Executors.unconfigurableScheduledExecutorService", true),
              })
          .put(
              new Identifier("RMIJRMPServerImpl"),
              new Import[] {
                newImport("javax.management.remote.rmi.RMIJRMPServerImpl", false),
              })
          .put(
              new Identifier("setSpaceAbove"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.setSpaceAbove", true),
              })
          .put(
              new Identifier("REMOVE_ATTRIBUTE"),
              new Import[] {
                newImport("javax.naming.directory.DirContext.REMOVE_ATTRIBUTE", true),
              })
          .put(
              new Identifier("updateStyles"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthLookAndFeel.updateStyles", true),
              })
          .put(
              new Identifier("DocumentBuilder"),
              new Import[] {
                newImport("javax.xml.parsers.DocumentBuilder", false),
              })
          .put(
              new Identifier("MetalBorders"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalBorders", false),
              })
          .put(
              new Identifier("procedureColumnUnknown"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.procedureColumnUnknown", true),
              })
          .put(
              new Identifier("VK_ADD"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_ADD", true),
              })
          .put(
              new Identifier("LONG_DESCRIPTION"),
              new Import[] {
                newImport("javax.swing.Action.LONG_DESCRIPTION", true),
              })
          .put(
              new Identifier("ROWID"),
              new Import[] {
                newImport("java.sql.Types.ROWID", true),
              })
          .put(
              new Identifier("HOUR_OF_DAY0"),
              new Import[] {
                newImport("java.text.DateFormat.Field.HOUR_OF_DAY0", true),
              })
          .put(
              new Identifier("NClob"),
              new Import[] {
                newImport("java.sql.NClob", false),
              })
          .put(
              new Identifier("unescapeValue"),
              new Import[] {
                newImport("javax.naming.ldap.Rdn.unescapeValue", true),
              })
          .put(
              new Identifier("HOUR_OF_DAY1"),
              new Import[] {
                newImport("java.text.DateFormat.Field.HOUR_OF_DAY1", true),
              })
          .put(
              new Identifier("callable"),
              new Import[] {
                newImport("java.util.concurrent.Executors.callable", true),
              })
          .put(
              new Identifier("DURATION_DAYTIME"),
              new Import[] {
                newImport("javax.xml.datatype.DatatypeConstants.DURATION_DAYTIME", true),
              })
          .put(
              new Identifier("lookupProviders"),
              new Import[] {
                newImport("javax.imageio.spi.ServiceRegistry.lookupProviders", true),
              })
          .put(
              new Identifier("ORBIdHelper"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.ORBIdHelper", false),
              })
          .put(
              new Identifier("MouseMotionListener"),
              new Import[] {
                newImport("java.awt.event.MouseMotionListener", false),
              })
          .put(
              new Identifier("StreamPrintService"),
              new Import[] {
                newImport("javax.print.StreamPrintService", false),
              })
          .put(
              new Identifier("SoftReference"),
              new Import[] {
                newImport("java.lang.ref.SoftReference", false),
              })
          .put(
              new Identifier("AccessibleExtendedTable"),
              new Import[] {
                newImport("javax.accessibility.AccessibleExtendedTable", false),
              })
          .put(
              new Identifier("HOUR1_FIELD"),
              new Import[] {
                newImport("java.text.DateFormat.HOUR1_FIELD", true),
              })
          .put(
              new Identifier("XmlNs"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlNs", false),
              })
          .put(
              new Identifier("text"),
              new Import[] {
                newImport("java.awt.SystemColor.text", true),
              })
          .put(
              new Identifier("ARABIC_PRESENTATION_FORMS_A"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.ARABIC_PRESENTATION_FORMS_A", true),
              })
          .put(
              new Identifier("HAND_CURSOR"),
              new Import[] {
                newImport("java.awt.Cursor.HAND_CURSOR", true),
                newImport("java.awt.Frame.HAND_CURSOR", true),
              })
          .put(
              new Identifier("KeyAgreement"),
              new Import[] {
                newImport("javax.crypto.KeyAgreement", false),
              })
          .put(
              new Identifier("DEFECTIVE_CREDENTIAL"),
              new Import[] {
                newImport("org.ietf.jgss.GSSException.DEFECTIVE_CREDENTIAL", true),
              })
          .put(
              new Identifier("Accessible"),
              new Import[] {
                newImport("javax.accessibility.Accessible", false),
              })
          .put(
              new Identifier("ROUND_DOWN"),
              new Import[] {
                newImport("java.math.BigDecimal.ROUND_DOWN", true),
              })
          .put(
              new Identifier("inactiveCaptionText"),
              new Import[] {
                newImport("java.awt.SystemColor.inactiveCaptionText", true),
              })
          .put(
              new Identifier("ARABIC_PRESENTATION_FORMS_B"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.ARABIC_PRESENTATION_FORMS_B", true),
              })
          .put(
              new Identifier("NO_FLUSH"),
              new Import[] {
                newImport("java.util.zip.Deflater.NO_FLUSH", true),
              })
          .put(
              new Identifier("syncAll"),
              new Import[] {
                newImport("java.lang.invoke.MutableCallSite.syncAll", true),
              })
          .put(
              new Identifier("TypeVisitor"),
              new Import[] {
                newImport("javax.lang.model.type.TypeVisitor", false),
              })
          .put(
              new Identifier("INCLUSIVE"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.CanonicalizationMethod.INCLUSIVE", true),
              })
          .put(
              new Identifier("JAXBElement"),
              new Import[] {
                newImport("javax.xml.bind.JAXBElement", false),
              })
          .put(
              new Identifier("_dk_all"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind._dk_all", true),
              })
          .put(
              new Identifier("CHECK_BOX_MENU_ITEM"),
              new Import[] {
                newImport("javax.swing.plaf.synth.Region.CHECK_BOX_MENU_ITEM", true),
              })
          .put(
              new Identifier("TitleProperty"),
              new Import[] {
                newImport("javax.swing.text.Document.TitleProperty", true),
              })
          .put(
              new Identifier("KEY_COLOR_RENDERING"),
              new Import[] {
                newImport("java.awt.RenderingHints.KEY_COLOR_RENDERING", true),
              })
          .put(
              new Identifier("TOP"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaTray.TOP", true),
                newImport("javax.swing.JSplitPane.TOP", true),
                newImport("javax.swing.SwingConstants.TOP", true),
                newImport("javax.swing.border.TitledBorder.TOP", true),
              })
          .put(
              new Identifier("Printable"),
              new Import[] {
                newImport("java.awt.print.Printable", false),
              })
          .put(
              new Identifier("TIMEOUT"),
              new Import[] {
                newImport("org.omg.CORBA.TIMEOUT", false),
              })
          .put(
              new Identifier("ofInstant"),
              new Import[] {
                newImport("java.time.LocalDateTime.ofInstant", true),
                newImport("java.time.OffsetDateTime.ofInstant", true),
                newImport("java.time.OffsetTime.ofInstant", true),
                newImport("java.time.ZonedDateTime.ofInstant", true),
              })
          .put(
              new Identifier("flashTime"),
              new Import[] {
                newImport("javax.swing.DebugGraphics.flashTime", true),
              })
          .put(
              new Identifier("PREVIEW_PANEL_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JColorChooser.PREVIEW_PANEL_PROPERTY", true),
              })
          .put(
              new Identifier("DefinitionKind"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind", false),
              })
          .put(
              new Identifier("importedKeyInitiallyImmediate"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.importedKeyInitiallyImmediate", true),
              })
          .put(
              new Identifier("FRIDAY"),
              new Import[] {
                newImport("java.util.Calendar.FRIDAY", true),
              })
          .put(
              new Identifier("intBitsToFloat"),
              new Import[] {
                newImport("java.lang.Float.intBitsToFloat", true),
              })
          .put(
              new Identifier("CYRILLIC"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.CYRILLIC", true),
              })
          .put(
              new Identifier("DataBufferInt"),
              new Import[] {
                newImport("java.awt.image.DataBufferInt", false),
              })
          .put(
              new Identifier("ServiceDetail"),
              new Import[] {
                newImport("org.omg.CORBA.ServiceDetail", false),
              })
          .put(
              new Identifier("FilteredRowSet"),
              new Import[] {
                newImport("javax.sql.rowset.FilteredRowSet", false),
              })
          .put(
              new Identifier("stream"),
              new Import[] {
                newImport("java.util.Arrays.stream", true),
                newImport("java.util.stream.StreamSupport.stream", true),
              })
          .put(
              new Identifier("TEXT_INDENT"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.TEXT_INDENT", true),
              })
          .put(
              new Identifier("GSSManager"),
              new Import[] {
                newImport("org.ietf.jgss.GSSManager", false),
              })
          .put(
              new Identifier("AudioFileReader"),
              new Import[] {
                newImport("javax.sound.sampled.spi.AudioFileReader", false),
              })
          .put(
              new Identifier("IMPLEMENTATION_VENDOR"),
              new Import[] {
                newImport("java.util.jar.Attributes.Name.IMPLEMENTATION_VENDOR", true),
              })
          .put(
              new Identifier("CRLException"),
              new Import[] {
                newImport("java.security.cert.CRLException", false),
              })
          .put(
              new Identifier("VK_DEAD_ABOVERING"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_DEAD_ABOVERING", true),
              })
          .put(
              new Identifier("BreakIteratorProvider"),
              new Import[] {
                newImport("java.text.spi.BreakIteratorProvider", false),
              })
          .put(
              new Identifier("ProtocolException"),
              new Import[] {
                newImport("java.net.ProtocolException", false),
                newImport("javax.xml.ws.ProtocolException", false),
              })
          .put(
              new Identifier("CollapsedStringAdapter"),
              new Import[] {
                newImport("javax.xml.bind.annotation.adapters.CollapsedStringAdapter", false),
              })
          .put(
              new Identifier("PHOENICIAN"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.PHOENICIAN", true),
              })
          .put(
              new Identifier("MouseAdapter"),
              new Import[] {
                newImport("java.awt.event.MouseAdapter", false),
              })
          .put(
              new Identifier("LEAD_SELECTION_PATH_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JTree.LEAD_SELECTION_PATH_PROPERTY", true),
              })
          .put(
              new Identifier("AuthProvider"),
              new Import[] {
                newImport("java.security.AuthProvider", false),
              })
          .put(
              new Identifier("SAMPLE_RATE"),
              new Import[] {
                newImport("javax.sound.sampled.FloatControl.Type.SAMPLE_RATE", true),
              })
          .put(
              new Identifier("JNDI_REBIND_ATTRIBUTE"),
              new Import[] {
                newImport(
                    "javax.management.remote.rmi.RMIConnectorServer.JNDI_REBIND_ATTRIBUTE", true),
              })
          .put(
              new Identifier("CAPTURING_PHASE"),
              new Import[] {
                newImport("org.w3c.dom.events.Event.CAPTURING_PHASE", true),
              })
          .put(
              new Identifier("BOUND_SERVER_NAME"),
              new Import[] {
                newImport("javax.security.sasl.Sasl.BOUND_SERVER_NAME", true),
              })
          .put(
              new Identifier("URLClassLoader"),
              new Import[] {
                newImport("java.net.URLClassLoader", false),
              })
          .put(
              new Identifier("loadClass"),
              new Import[] {
                newImport("java.rmi.server.RMIClassLoader.loadClass", true),
                newImport("javax.management.DefaultLoaderRepository.loadClass", true),
                newImport("javax.management.loading.DefaultLoaderRepository.loadClass", true),
                newImport("javax.rmi.CORBA.Util.loadClass", true),
              })
          .put(
              new Identifier("parameterNoNulls"),
              new Import[] {
                newImport("java.sql.ParameterMetaData.parameterNoNulls", true),
              })
          .put(
              new Identifier("CPE"),
              new Import[] {
                newImport("javax.naming.spi.NamingManager.CPE", true),
              })
          .put(
              new Identifier("SwingWorker"),
              new Import[] {
                newImport("javax.swing.SwingWorker", false),
              })
          .put(
              new Identifier("LineMetrics"),
              new Import[] {
                newImport("java.awt.font.LineMetrics", false),
              })
          .put(
              new Identifier("getBorder"),
              new Import[] {
                newImport("javax.swing.UIManager.getBorder", true),
              })
          .put(
              new Identifier("CHANNEL_PRESSURE"),
              new Import[] {
                newImport("javax.sound.midi.ShortMessage.CHANNEL_PRESSURE", true),
              })
          .put(
              new Identifier("TC_EXCEPTION"),
              new Import[] {
                newImport("java.io.ObjectStreamConstants.TC_EXCEPTION", true),
              })
          .put(
              new Identifier("newInputStream"),
              new Import[] {
                newImport("java.nio.channels.Channels.newInputStream", true),
                newImport("java.nio.file.Files.newInputStream", true),
              })
          .put(
              new Identifier("not_object"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextPackage.NotFoundReason.not_object", true),
              })
          .put(
              new Identifier("tk_enum"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind.tk_enum", true),
              })
          .put(
              new Identifier("Void"),
              new Import[] {
                newImport("java.lang.Void", false),
              })
          .put(
              new Identifier("SocketAddress"),
              new Import[] {
                newImport("java.net.SocketAddress", false),
              })
          .put(
              new Identifier("LookAndFeelInfo"),
              new Import[] {
                newImport("javax.swing.UIManager.LookAndFeelInfo", false),
              })
          .put(
              new Identifier("Box"),
              new Import[] {
                newImport("javax.swing.Box", false),
              })
          .put(
              new Identifier("PlainDocument"),
              new Import[] {
                newImport("javax.swing.text.PlainDocument", false),
              })
          .put(
              new Identifier("separator"),
              new Import[] {
                newImport("java.io.File.separator", true),
              })
          .put(
              new Identifier("tabSizeAttribute"),
              new Import[] {
                newImport("javax.swing.text.PlainDocument.tabSizeAttribute", true),
              })
          .put(
              new Identifier("getForeground"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.getForeground", true),
              })
          .put(
              new Identifier("CaretListener"),
              new Import[] {
                newImport("javax.swing.event.CaretListener", false),
              })
          .put(
              new Identifier("createBlackLineBorder"),
              new Import[] {
                newImport("javax.swing.border.LineBorder.createBlackLineBorder", true),
              })
          .put(
              new Identifier("OpenMBeanConstructorInfoSupport"),
              new Import[] {
                newImport("javax.management.openmbean.OpenMBeanConstructorInfoSupport", false),
              })
          .put(
              new Identifier("Collection"),
              new Import[] {
                newImport("java.util.Collection", false),
              })
          .put(
              new Identifier("ToIntFunction"),
              new Import[] {
                newImport("java.util.function.ToIntFunction", false),
              })
          .put(
              new Identifier("THAI"),
              new Import[] {
                newImport("java.awt.font.NumericShaper.THAI", true),
                newImport("java.lang.Character.UnicodeBlock.THAI", true),
              })
          .put(
              new Identifier("CRL"),
              new Import[] {
                newImport("java.security.cert.CRL", false),
              })
          .put(
              new Identifier("loadKeyBindings"),
              new Import[] {
                newImport("javax.swing.LookAndFeel.loadKeyBindings", true),
              })
          .put(
              new Identifier("RANGE"),
              new Import[] {
                newImport("java.awt.JobAttributes.DefaultSelectionType.RANGE", true),
              })
          .put(
              new Identifier("PLUS"),
              new Import[] {
                newImport("javax.management.Query.PLUS", true),
              })
          .put(
              new Identifier("NO_LOCATION"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlSchema.NO_LOCATION", true),
              })
          .put(
              new Identifier("SCROLL_LINE_DOWN"),
              new Import[] {
                newImport("java.awt.Event.SCROLL_LINE_DOWN", true),
              })
          .put(
              new Identifier("HEAD"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.HEAD", true),
              })
          .put(
              new Identifier("ObjectInputValidation"),
              new Import[] {
                newImport("java.io.ObjectInputValidation", false),
              })
          .put(
              new Identifier("STORED"),
              new Import[] {
                newImport("java.util.zip.ZipEntry.STORED", true),
                newImport("java.util.zip.ZipOutputStream.STORED", true),
              })
          .put(
              new Identifier("Src"),
              new Import[] {
                newImport("java.awt.AlphaComposite.Src", true),
              })
          .put(
              new Identifier("isISOControl"),
              new Import[] {
                newImport("java.lang.Character.isISOControl", true),
              })
          .put(
              new Identifier("VK_DEAD_MACRON"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_DEAD_MACRON", true),
              })
          .put(
              new Identifier("DIRECTIONALITY_ARABIC_NUMBER"),
              new Import[] {
                newImport("java.lang.Character.DIRECTIONALITY_ARABIC_NUMBER", true),
              })
          .put(
              new Identifier("ObjectAlreadyActiveHelper"),
              new Import[] {
                newImport("org.omg.PortableServer.POAPackage.ObjectAlreadyActiveHelper", false),
              })
          .put(
              new Identifier("PolicyErrorCodeHelper"),
              new Import[] {
                newImport("org.omg.CORBA.PolicyErrorCodeHelper", false),
              })
          .put(
              new Identifier("Clear"),
              new Import[] {
                newImport("java.awt.AlphaComposite.Clear", true),
              })
          .put(
              new Identifier("IMPLICIT_ACTIVATION_POLICY_ID"),
              new Import[] {
                newImport("org.omg.PortableServer.IMPLICIT_ACTIVATION_POLICY_ID", false),
              })
          .put(
              new Identifier("SynthUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthUI", false),
              })
          .put(
              new Identifier("FINAL_QUOTE_PUNCTUATION"),
              new Import[] {
                newImport("java.lang.Character.FINAL_QUOTE_PUNCTUATION", true),
              })
          .put(
              new Identifier("ThaiBuddhistChronology"),
              new Import[] {
                newImport("java.time.chrono.ThaiBuddhistChronology", false),
              })
          .put(
              new Identifier("WriteAbortedException"),
              new Import[] {
                newImport("java.io.WriteAbortedException", false),
              })
          .put(
              new Identifier("PrinterInfo"),
              new Import[] {
                newImport("javax.print.attribute.standard.PrinterInfo", false),
              })
          .put(
              new Identifier("CLASS_COLORSPACECONVERSION"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.CLASS_COLORSPACECONVERSION", true),
              })
          .put(
              new Identifier("ConnectException"),
              new Import[] {
                newImport("java.net.ConnectException", false),
                newImport("java.rmi.ConnectException", false),
              })
          .put(
              new Identifier("MTOM"),
              new Import[] {
                newImport("javax.xml.ws.soap.MTOM", false),
              })
          .put(
              new Identifier("CSS"),
              new Import[] {
                newImport("javax.swing.text.html.CSS", false),
              })
          .put(
              new Identifier("BeanContextProxy"),
              new Import[] {
                newImport("java.beans.beancontext.BeanContextProxy", false),
              })
          .put(
              new Identifier("COMPLETED_NO"),
              new Import[] {
                newImport("org.omg.CORBA.CompletionStatus.COMPLETED_NO", true),
              })
          .put(
              new Identifier("KANNADA"),
              new Import[] {
                newImport("java.awt.font.NumericShaper.KANNADA", true),
                newImport("java.lang.Character.UnicodeBlock.KANNADA", true),
              })
          .put(
              new Identifier("XPATH2"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.Transform.XPATH2", true),
              })
          .put(
              new Identifier("XPathFunction"),
              new Import[] {
                newImport("javax.xml.xpath.XPathFunction", false),
              })
          .put(
              new Identifier("insertArguments"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandles.insertArguments", true),
              })
          .put(
              new Identifier("TransferSupport"),
              new Import[] {
                newImport("javax.swing.TransferHandler.TransferSupport", false),
              })
          .put(
              new Identifier("getAvailableChronologies"),
              new Import[] {
                newImport("java.time.chrono.Chronology.getAvailableChronologies", true),
              })
          .put(
              new Identifier("JToolBar"),
              new Import[] {
                newImport("javax.swing.JToolBar", false),
              })
          .put(
              new Identifier("MIN_VALUE"),
              new Import[] {
                newImport("java.lang.Byte.MIN_VALUE", true),
                newImport("java.lang.Character.MIN_VALUE", true),
                newImport("java.lang.Double.MIN_VALUE", true),
                newImport("java.lang.Float.MIN_VALUE", true),
                newImport("java.lang.Integer.MIN_VALUE", true),
                newImport("java.lang.Long.MIN_VALUE", true),
                newImport("java.lang.Short.MIN_VALUE", true),
                newImport("java.time.Year.MIN_VALUE", true),
              })
          .put(
              new Identifier("isSubscript"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.isSubscript", true),
              })
          .put(
              new Identifier("getTag"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.getTag", true),
              })
          .put(
              new Identifier("COMBINING_MARKS_FOR_SYMBOLS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.COMBINING_MARKS_FOR_SYMBOLS", true),
              })
          .put(
              new Identifier("MetalSliderUI"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalSliderUI", false),
              })
          .put(
              new Identifier("LINE_OUT"),
              new Import[] {
                newImport("javax.sound.sampled.Port.Info.LINE_OUT", true),
              })
          .put(
              new Identifier("SocketOption"),
              new Import[] {
                newImport("java.net.SocketOption", false),
              })
          .put(
              new Identifier("ServiceDelegate"),
              new Import[] {
                newImport("javax.xml.ws.spi.ServiceDelegate", false),
              })
          .put(
              new Identifier("Track"),
              new Import[] {
                newImport("javax.sound.midi.Track", false),
              })
          .build();
}
