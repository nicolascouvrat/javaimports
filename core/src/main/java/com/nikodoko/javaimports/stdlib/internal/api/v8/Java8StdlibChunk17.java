// Code generated by GenerateStdlib.java. DO NOT EDIT.
package com.nikodoko.javaimports.stdlib.internal.api.v8;

import static com.nikodoko.javaimports.stdlib.internal.Stdlib.newImport;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.common.Identifier;
import com.nikodoko.javaimports.common.Import;
import java.util.Map;

public class Java8StdlibChunk17 {
  static final Map<Identifier, Import[]> CLASSES =
      new ImmutableMap.Builder<Identifier, Import[]>()
          .put(
              new Identifier("ofEpochSecond"),
              new Import[] {
                newImport("java.time.Instant.ofEpochSecond", true),
                newImport("java.time.LocalDateTime.ofEpochSecond", true),
              })
          .put(
              new Identifier("ExecutableType"),
              new Import[] {
                newImport("javax.lang.model.type.ExecutableType", false),
              })
          .put(
              new Identifier("DosFileAttributeView"),
              new Import[] {
                newImport("java.nio.file.attribute.DosFileAttributeView", false),
              })
          .put(
              new Identifier("MultiSliderUI"),
              new Import[] {
                newImport("javax.swing.plaf.multi.MultiSliderUI", false),
              })
          .put(
              new Identifier("BUTTON1_MASK"),
              new Import[] {
                newImport("java.awt.event.InputEvent.BUTTON1_MASK", true),
              })
          .put(
              new Identifier("SSLSocket"),
              new Import[] {
                newImport("javax.net.ssl.SSLSocket", false),
              })
          .put(
              new Identifier("LINE_IN"),
              new Import[] {
                newImport("javax.sound.sampled.Port.Info.LINE_IN", true),
              })
          .put(
              new Identifier("icSigPs2CRD0Tag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigPs2CRD0Tag", true),
              })
          .put(
              new Identifier("Util"),
              new Import[] {
                newImport("javax.rmi.CORBA.Util", false),
              })
          .put(
              new Identifier("ToLongFunction"),
              new Import[] {
                newImport("java.util.function.ToLongFunction", false),
              })
          .put(
              new Identifier("bind"),
              new Import[] {
                newImport("java.rmi.Naming.bind", true),
              })
          .put(
              new Identifier("Button"),
              new Import[] {
                newImport("java.awt.Button", false),
              })
          .put(
              new Identifier("MarshalledObject"),
              new Import[] {
                newImport("java.rmi.MarshalledObject", false),
              })
          .put(
              new Identifier("RADIO_BUTTON_MENU_ITEM"),
              new Import[] {
                newImport("javax.swing.plaf.synth.Region.RADIO_BUTTON_MENU_ITEM", true),
              })
          .put(
              new Identifier("_ACTIVE"),
              new Import[] {
                newImport("org.omg.PortableServer.POAManagerPackage.State._ACTIVE", true),
              })
          .put(
              new Identifier("NNTP"),
              new Import[] {
                newImport("javax.print.attribute.standard.ReferenceUriSchemesSupported.NNTP", true),
              })
          .put(
              new Identifier("getPlatformMBeanServer"),
              new Import[] {
                newImport("java.lang.management.ManagementFactory.getPlatformMBeanServer", true),
              })
          .put(
              new Identifier("BasicHighlighter"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicTextUI.BasicHighlighter", false),
              })
          .put(
              new Identifier("divideUnsigned"),
              new Import[] {
                newImport("java.lang.Integer.divideUnsigned", true),
                newImport("java.lang.Long.divideUnsigned", true),
              })
          .put(
              new Identifier("OLD_TURKIC"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.OLD_TURKIC", true),
              })
          .put(
              new Identifier("NA_NUMBER_9_ENVELOPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.NA_NUMBER_9_ENVELOPE", true),
                newImport(
                    "javax.print.attribute.standard.MediaSizeName.NA_NUMBER_9_ENVELOPE", true),
                newImport("javax.print.attribute.standard.MediaSize.NA.NA_NUMBER_9_ENVELOPE", true),
              })
          .put(
              new Identifier("dateFilter"),
              new Import[] {
                newImport("javax.swing.RowFilter.dateFilter", true),
              })
          .put(
              new Identifier("Line"),
              new Import[] {
                newImport("javax.sound.sampled.Line", false),
              })
          .put(
              new Identifier("bestRowUnknown"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.bestRowUnknown", true),
              })
          .put(
              new Identifier("AccessibleStreamable"),
              new Import[] {
                newImport("javax.accessibility.AccessibleStreamable", false),
              })
          .put(
              new Identifier("malformedForLength"),
              new Import[] {
                newImport("java.nio.charset.CoderResult.malformedForLength", true),
              })
          .put(
              new Identifier("ComparisonType"),
              new Import[] {
                newImport("javax.swing.RowFilter.ComparisonType", false),
              })
          .put(
              new Identifier("getReaderFormatNames"),
              new Import[] {
                newImport("javax.imageio.ImageIO.getReaderFormatNames", true),
              })
          .put(
              new Identifier("RunTime"),
              new Import[] {
                newImport("org.omg.SendingContext.RunTime", false),
              })
          .put(
              new Identifier("getCharacterInstance"),
              new Import[] {
                newImport("java.text.BreakIterator.getCharacterInstance", true),
              })
          .put(
              new Identifier("ColorSupported"),
              new Import[] {
                newImport("javax.print.attribute.standard.ColorSupported", false),
              })
          .put(
              new Identifier("POSTURE_OBLIQUE"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.POSTURE_OBLIQUE", true),
              })
          .put(
              new Identifier("CallerRunsPolicy"),
              new Import[] {
                newImport("java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy", false),
              })
          .put(
              new Identifier("InterruptedNamingException"),
              new Import[] {
                newImport("javax.naming.InterruptedNamingException", false),
              })
          .put(
              new Identifier("InvalidAttributesException"),
              new Import[] {
                newImport("javax.naming.directory.InvalidAttributesException", false),
              })
          .put(
              new Identifier("TYPE_USHORT_555_RGB"),
              new Import[] {
                newImport("java.awt.image.BufferedImage.TYPE_USHORT_555_RGB", true),
              })
          .put(
              new Identifier("JTabbedPane"),
              new Import[] {
                newImport("javax.swing.JTabbedPane", false),
              })
          .put(
              new Identifier("DirectoryStream"),
              new Import[] {
                newImport("java.nio.file.DirectoryStream", false),
              })
          .put(
              new Identifier("defaultCharset"),
              new Import[] {
                newImport("java.nio.charset.Charset.defaultCharset", true),
              })
          .put(
              new Identifier("NamedValue"),
              new Import[] {
                newImport("org.omg.CORBA.NamedValue", false),
              })
          .put(
              new Identifier("WebServiceContext"),
              new Import[] {
                newImport("javax.xml.ws.WebServiceContext", false),
              })
          .put(
              new Identifier("TYPE_HSV"),
              new Import[] {
                newImport("java.awt.color.ColorSpace.TYPE_HSV", true),
              })
          .put(
              new Identifier("INDENT"),
              new Import[] {
                newImport("javax.xml.transform.OutputKeys.INDENT", true),
              })
          .put(
              new Identifier("FilenameFilter"),
              new Import[] {
                newImport("java.io.FilenameFilter", false),
              })
          .put(
              new Identifier("PipedWriter"),
              new Import[] {
                newImport("java.io.PipedWriter", false),
              })
          .put(
              new Identifier("NonReadableChannelException"),
              new Import[] {
                newImport("java.nio.channels.NonReadableChannelException", false),
              })
          .put(
              new Identifier("LongLongSeqHolder"),
              new Import[] {
                newImport("org.omg.CORBA.LongLongSeqHolder", false),
              })
          .put(
              new Identifier("ServantRetentionPolicy"),
              new Import[] {
                newImport("org.omg.PortableServer.ServantRetentionPolicy", false),
              })
          .put(
              new Identifier("icSigSpaceFCLR"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigSpaceFCLR", true),
              })
          .put(
              new Identifier("StringReader"),
              new Import[] {
                newImport("java.io.StringReader", false),
              })
          .put(
              new Identifier("EventListenerList"),
              new Import[] {
                newImport("javax.swing.event.EventListenerList", false),
              })
          .put(
              new Identifier("HEADER_VALUE_PROPERTY"),
              new Import[] {
                newImport("javax.swing.table.TableColumn.HEADER_VALUE_PROPERTY", true),
              })
          .put(
              new Identifier("InflaterOutputStream"),
              new Import[] {
                newImport("java.util.zip.InflaterOutputStream", false),
              })
          .put(
              new Identifier("ParserConfigurationException"),
              new Import[] {
                newImport("javax.xml.parsers.ParserConfigurationException", false),
              })
          .put(
              new Identifier("RESOURCES_ARE_NOT_READY"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.JobStateReason.RESOURCES_ARE_NOT_READY", true),
              })
          .put(
              new Identifier("REGISTRATION_NOTIFICATION"),
              new Import[] {
                newImport(
                    "javax.management.MBeanServerNotification.REGISTRATION_NOTIFICATION", true),
              })
          .put(
              new Identifier("ARMED"),
              new Import[] {
                newImport("javax.accessibility.AccessibleState.ARMED", true),
                newImport("javax.swing.DefaultButtonModel.ARMED", true),
              })
          .put(
              new Identifier("ClassFileTransformer"),
              new Import[] {
                newImport("java.lang.instrument.ClassFileTransformer", false),
              })
          .put(
              new Identifier("ProtocolFamily"),
              new Import[] {
                newImport("java.net.ProtocolFamily", false),
              })
          .put(
              new Identifier("ORIGINAL_TYPE_FIELD"),
              new Import[] {
                newImport("javax.management.JMX.ORIGINAL_TYPE_FIELD", true),
              })
          .put(
              new Identifier("GZIP_MAGIC"),
              new Import[] {
                newImport("java.util.zip.GZIPInputStream.GZIP_MAGIC", true),
              })
          .put(
              new Identifier("K2Chrominance"),
              new Import[] {
                newImport("javax.imageio.plugins.jpeg.JPEGQTable.K2Chrominance", true),
              })
          .put(
              new Identifier("AtomicReference"),
              new Import[] {
                newImport("java.util.concurrent.atomic.AtomicReference", false),
              })
          .put(
              new Identifier("DELETE_ROW_CONFLICT"),
              new Import[] {
                newImport("javax.sql.rowset.spi.SyncResolver.DELETE_ROW_CONFLICT", true),
              })
          .put(
              new Identifier("TableUI"),
              new Import[] {
                newImport("javax.swing.plaf.TableUI", false),
              })
          .put(
              new Identifier("ENTRY_MODIFY"),
              new Import[] {
                newImport("java.nio.file.StandardWatchEventKinds.ENTRY_MODIFY", true),
              })
          .put(
              new Identifier("DEVANAGARI"),
              new Import[] {
                newImport("java.awt.font.NumericShaper.DEVANAGARI", true),
                newImport("java.lang.Character.UnicodeBlock.DEVANAGARI", true),
              })
          .put(
              new Identifier("requiresBidi"),
              new Import[] {
                newImport("java.text.Bidi.requiresBidi", true),
              })
          .put(
              new Identifier("SUFFICIENT"),
              new Import[] {
                newImport(
                    "javax.security.auth.login.AppConfigurationEntry.LoginModuleControlFlag.SUFFICIENT",
                    true),
              })
          .put(
              new Identifier("EventFilter"),
              new Import[] {
                newImport("javax.xml.stream.EventFilter", false),
              })
          .put(
              new Identifier("_IMPLICIT_ACTIVATION"),
              new Import[] {
                newImport(
                    "org.omg.PortableServer.ImplicitActivationPolicyValue._IMPLICIT_ACTIVATION",
                    true),
              })
          .put(
              new Identifier("COMPACT"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.COMPACT", true),
              })
          .put(
              new Identifier("NotificationEmitter"),
              new Import[] {
                newImport("javax.management.NotificationEmitter", false),
              })
          .put(
              new Identifier("FIELD_ATTRIBUTE_PFX"),
              new Import[] {
                newImport("java.util.jar.Pack200.Packer.FIELD_ATTRIBUTE_PFX", true),
              })
          .put(
              new Identifier("floorDiv"),
              new Import[] {
                newImport("java.lang.Math.floorDiv", true),
                newImport("java.lang.StrictMath.floorDiv", true),
              })
          .put(
              new Identifier("DIRECTIONALITY_LEFT_TO_RIGHT"),
              new Import[] {
                newImport("java.lang.Character.DIRECTIONALITY_LEFT_TO_RIGHT", true),
              })
          .put(
              new Identifier("SO_BROADCAST"),
              new Import[] {
                newImport("java.net.SocketOptions.SO_BROADCAST", true),
                newImport("java.net.StandardSocketOptions.SO_BROADCAST", true),
              })
          .put(
              new Identifier("minBy"),
              new Import[] {
                newImport("java.util.function.BinaryOperator.minBy", true),
                newImport("java.util.stream.Collectors.minBy", true),
              })
          .put(
              new Identifier("WebServiceFeature"),
              new Import[] {
                newImport("javax.xml.ws.WebServiceFeature", false),
              })
          .put(
              new Identifier("LimitExceededException"),
              new Import[] {
                newImport("javax.naming.LimitExceededException", false),
              })
          .put(
              new Identifier("MultiInternalFrameUI"),
              new Import[] {
                newImport("javax.swing.plaf.multi.MultiInternalFrameUI", false),
              })
          .put(
              new Identifier("RasterFormatException"),
              new Import[] {
                newImport("java.awt.image.RasterFormatException", false),
              })
          .put(
              new Identifier("InterruptedIOException"),
              new Import[] {
                newImport("java.io.InterruptedIOException", false),
              })
          .put(
              new Identifier("RSAKey"),
              new Import[] {
                newImport("java.security.interfaces.RSAKey", false),
              })
          .put(
              new Identifier("SHOWS_ROOT_HANDLES_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JTree.SHOWS_ROOT_HANDLES_PROPERTY", true),
              })
          .put(
              new Identifier("GEORGIAN_SUPPLEMENT"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.GEORGIAN_SUPPLEMENT", true),
              })
          .put(
              new Identifier("HTTP_NOT_ACCEPTABLE"),
              new Import[] {
                newImport("java.net.HttpURLConnection.HTTP_NOT_ACCEPTABLE", true),
              })
          .put(
              new Identifier("getSpaceAbove"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.getSpaceAbove", true),
              })
          .put(
              new Identifier("FIELD_UNDEFINED"),
              new Import[] {
                newImport("javax.xml.datatype.DatatypeConstants.FIELD_UNDEFINED", true),
              })
          .put(
              new Identifier("MenuContainer"),
              new Import[] {
                newImport("java.awt.MenuContainer", false),
              })
          .put(
              new Identifier("dk_Typedef"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind.dk_Typedef", true),
              })
          .put(
              new Identifier("BELOW_BASELINE"),
              new Import[] {
                newImport("java.awt.GridBagConstraints.BELOW_BASELINE", true),
              })
          .put(
              new Identifier("importedKeySetDefault"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.importedKeySetDefault", true),
              })
          .put(
              new Identifier("checkedNavigableSet"),
              new Import[] {
                newImport("java.util.Collections.checkedNavigableSet", true),
              })
          .put(
              new Identifier("SpinnerNumberModel"),
              new Import[] {
                newImport("javax.swing.SpinnerNumberModel", false),
              })
          .put(
              new Identifier("ISO_C5_ENVELOPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_C5_ENVELOPE", true),
              })
          .put(
              new Identifier("DateTimeException"),
              new Import[] {
                newImport("java.time.DateTimeException", false),
              })
          .put(
              new Identifier("CannotUndoException"),
              new Import[] {
                newImport("javax.swing.undo.CannotUndoException", false),
              })
          .put(
              new Identifier("List"),
              new Import[] {
                newImport("java.awt.List", false), newImport("java.util.List", false),
              })
          .put(
              new Identifier("GERMAN"),
              new Import[] {
                newImport("java.util.Locale.GERMAN", true),
              })
          .put(
              new Identifier("FIRST_LINE_END"),
              new Import[] {
                newImport("java.awt.GridBagConstraints.FIRST_LINE_END", true),
              })
          .put(
              new Identifier("info"),
              new Import[] {
                newImport("java.awt.SystemColor.info", true),
              })
          .put(
              new Identifier("baseWireHandle"),
              new Import[] {
                newImport("java.io.ObjectStreamConstants.baseWireHandle", true),
              })
          .put(
              new Identifier("NO_IMPLICIT_ACTIVATION"),
              new Import[] {
                newImport(
                    "org.omg.PortableServer.ImplicitActivationPolicyValue.NO_IMPLICIT_ACTIVATION",
                    true),
              })
          .put(
              new Identifier("ObjectAlreadyActive"),
              new Import[] {
                newImport("org.omg.PortableServer.POAPackage.ObjectAlreadyActive", false),
              })
          .put(
              new Identifier("ITALY"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ITALY", true),
                newImport("java.util.Locale.ITALY", true),
              })
          .put(
              new Identifier("createEditorKitForContentType"),
              new Import[] {
                newImport("javax.swing.JEditorPane.createEditorKitForContentType", true),
              })
          .put(
              new Identifier("PolicyQualifierInfo"),
              new Import[] {
                newImport("java.security.cert.PolicyQualifierInfo", false),
              })
          .put(
              new Identifier("LETTER_SPACING"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.LETTER_SPACING", true),
              })
          .put(
              new Identifier("PriorityQueue"),
              new Import[] {
                newImport("java.util.PriorityQueue", false),
              })
          .put(
              new Identifier("CURRENT"),
              new Import[] {
                newImport("javax.swing.text.html.parser.DTDConstants.CURRENT", true),
              })
          .put(
              new Identifier("setLineSpacing"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.setLineSpacing", true),
              })
          .put(
              new Identifier("getRegion"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthLookAndFeel.getRegion", true),
              })
          .put(
              new Identifier("privilegedCallable"),
              new Import[] {
                newImport("java.util.concurrent.Executors.privilegedCallable", true),
              })
          .put(
              new Identifier("CodecFactory"),
              new Import[] {
                newImport("org.omg.IOP.CodecFactory", false),
              })
          .put(
              new Identifier("REF_invokeStatic"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandleInfo.REF_invokeStatic", true),
              })
          .put(
              new Identifier("FIDELITY_TRUE"),
              new Import[] {
                newImport("javax.print.attribute.standard.Fidelity.FIDELITY_TRUE", true),
              })
          .put(
              new Identifier("setInstance"),
              new Import[] {
                newImport("javax.swing.LayoutStyle.setInstance", true),
              })
          .put(
              new Identifier("MonitorNotification"),
              new Import[] {
                newImport("javax.management.monitor.MonitorNotification", false),
              })
          .put(
              new Identifier("MARGINWIDTH"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.MARGINWIDTH", true),
              })
          .put(
              new Identifier("nobject"),
              new Import[] {
                newImport("org.omg.CosNaming.BindingType.nobject", true),
              })
          .put(
              new Identifier("textInactiveText"),
              new Import[] {
                newImport("java.awt.SystemColor.textInactiveText", true),
              })
          .put(
              new Identifier("ofPattern"),
              new Import[] {
                newImport("java.time.format.DateTimeFormatter.ofPattern", true),
              })
          .put(
              new Identifier("ComboBoxEditor"),
              new Import[] {
                newImport("javax.swing.ComboBoxEditor", false),
              })
          .put(
              new Identifier("MultiToolTipUI"),
              new Import[] {
                newImport("javax.swing.plaf.multi.MultiToolTipUI", false),
              })
          .put(
              new Identifier("JAXBResult"),
              new Import[] {
                newImport("javax.xml.bind.util.JAXBResult", false),
              })
          .put(
              new Identifier("NONNULL"),
              new Import[] {
                newImport("java.util.Spliterator.NONNULL", true),
              })
          .put(
              new Identifier("CLOSED_OPTION"),
              new Import[] {
                newImport("javax.swing.JOptionPane.CLOSED_OPTION", true),
              })
          .put(
              new Identifier("hashCode"),
              new Import[] {
                newImport("java.lang.Boolean.hashCode", true),
                newImport("java.lang.Byte.hashCode", true),
                newImport("java.lang.Character.hashCode", true),
                newImport("java.lang.Double.hashCode", true),
                newImport("java.lang.Float.hashCode", true),
                newImport("java.lang.Integer.hashCode", true),
                newImport("java.lang.Long.hashCode", true),
                newImport("java.lang.Short.hashCode", true),
                newImport("java.util.Arrays.hashCode", true),
                newImport("java.util.Objects.hashCode", true),
              })
          .put(
              new Identifier("RowSetProvider"),
              new Import[] {
                newImport("javax.sql.rowset.RowSetProvider", false),
              })
          .put(
              new Identifier("controlShadow"),
              new Import[] {
                newImport("java.awt.SystemColor.controlShadow", true),
              })
          .put(
              new Identifier("AT_TARGET"),
              new Import[] {
                newImport("org.w3c.dom.events.Event.AT_TARGET", true),
              })
          .put(
              new Identifier("UserDataHandler"),
              new Import[] {
                newImport("org.w3c.dom.UserDataHandler", false),
              })
          .put(
              new Identifier("JarException"),
              new Import[] {
                newImport("java.util.jar.JarException", false),
              })
          .put(
              new Identifier("NoSuchPaddingException"),
              new Import[] {
                newImport("javax.crypto.NoSuchPaddingException", false),
              })
          .put(
              new Identifier("printDateTime"),
              new Import[] {
                newImport("javax.xml.bind.DatatypeConverter.printDateTime", true),
              })
          .put(
              new Identifier("PARAM"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.PARAM", true),
              })
          .put(
              new Identifier("CAP_SQUARE"),
              new Import[] {
                newImport("java.awt.BasicStroke.CAP_SQUARE", true),
              })
          .put(
              new Identifier("insertContentAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.insertContentAction", true),
              })
          .put(
              new Identifier("LEFT_ALIGNMENT"),
              new Import[] {
                newImport("java.awt.Component.LEFT_ALIGNMENT", true),
              })
          .put(
              new Identifier("LEDGER"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.LEDGER", true),
                newImport("javax.print.attribute.standard.MediaSizeName.LEDGER", true),
                newImport("javax.print.attribute.standard.MediaSize.Other.LEDGER", true),
              })
          .put(
              new Identifier("DAY_OF_WEEK_FIELD"),
              new Import[] {
                newImport("java.text.DateFormat.DAY_OF_WEEK_FIELD", true),
              })
          .put(
              new Identifier("DESKeySpec"),
              new Import[] {
                newImport("javax.crypto.spec.DESKeySpec", false),
              })
          .put(
              new Identifier("ForwardingFileObject"),
              new Import[] {
                newImport("javax.tools.ForwardingFileObject", false),
              })
          .put(
              new Identifier("parseUnsignedShort"),
              new Import[] {
                newImport("javax.xml.bind.DatatypeConverter.parseUnsignedShort", true),
              })
          .put(
              new Identifier("JPEGImageReadParam"),
              new Import[] {
                newImport("javax.imageio.plugins.jpeg.JPEGImageReadParam", false),
              })
          .put(
              new Identifier("Filler"),
              new Import[] {
                newImport("javax.swing.Box.Filler", false),
              })
          .put(
              new Identifier("DEFAULT"),
              new Import[] {
                newImport("java.security.spec.PSSParameterSpec.DEFAULT", true),
                newImport("java.text.DateFormat.DEFAULT", true),
                newImport("javax.crypto.spec.OAEPParameterSpec.DEFAULT", true),
                newImport("javax.crypto.spec.PSource.PSpecified.DEFAULT", true),
                newImport("javax.swing.Action.DEFAULT", true),
                newImport("javax.swing.plaf.synth.SynthConstants.DEFAULT", true),
                newImport("javax.swing.text.html.parser.DTDConstants.DEFAULT", true),
                newImport("javax.xml.bind.annotation.XmlElement.DEFAULT", false),
                newImport("javax.xml.bind.annotation.XmlElementRef.DEFAULT", false),
                newImport("javax.xml.bind.annotation.XmlSchemaType.DEFAULT", false),
                newImport("javax.xml.bind.annotation.XmlType.DEFAULT", false),
                newImport("javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter.DEFAULT", false),
                newImport("javax.xml.crypto.dsig.spec.ExcC14NParameterSpec.DEFAULT", true),
              })
          .put(
              new Identifier("JAXB_FORMATTED_OUTPUT"),
              new Import[] {
                newImport("javax.xml.bind.Marshaller.JAXB_FORMATTED_OUTPUT", true),
              })
          .put(
              new Identifier("AcceptPendingException"),
              new Import[] {
                newImport("java.nio.channels.AcceptPendingException", false),
              })
          .put(
              new Identifier("getRootPane"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.getRootPane", true),
              })
          .put(
              new Identifier("ORB_CTRL_MODEL"),
              new Import[] {
                newImport("org.omg.PortableServer.ThreadPolicyValue.ORB_CTRL_MODEL", true),
              })
          .put(
              new Identifier("setDesignTime"),
              new Import[] {
                newImport("java.beans.Beans.setDesignTime", true),
              })
          .put(
              new Identifier("getSystem"),
              new Import[] {
                newImport("java.rmi.activation.ActivationGroup.getSystem", true),
              })
          .put(
              new Identifier("PLAIN"),
              new Import[] {
                newImport("java.awt.Font.PLAIN", true),
              })
          .put(
              new Identifier("init"),
              new Import[] {
                newImport("org.omg.CORBA.ORB.init", true),
              })
          .put(
              new Identifier("UNNECESSARY"),
              new Import[] {
                newImport("java.awt.GraphicsConfigTemplate.UNNECESSARY", true),
              })
          .put(
              new Identifier("DatatypeFactory"),
              new Import[] {
                newImport("javax.xml.datatype.DatatypeFactory", false),
              })
          .put(
              new Identifier("EDITABLE_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JTree.EDITABLE_PROPERTY", true),
              })
          .put(
              new Identifier("isRectangleContainingRectangle"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.isRectangleContainingRectangle", true),
              })
          .put(
              new Identifier("LAYOUT_RIGHT_TO_LEFT"),
              new Import[] {
                newImport("java.awt.Font.LAYOUT_RIGHT_TO_LEFT", true),
              })
          .put(
              new Identifier("Adjustable"),
              new Import[] {
                newImport("java.awt.Adjustable", false),
              })
          .put(
              new Identifier("XA_RBEND"),
              new Import[] {
                newImport("javax.transaction.xa.XAException.XA_RBEND", true),
              })
          .put(
              new Identifier("NotYetBoundException"),
              new Import[] {
                newImport("java.nio.channels.NotYetBoundException", false),
              })
          .put(
              new Identifier("JCheckBox"),
              new Import[] {
                newImport("javax.swing.JCheckBox", false),
              })
          .put(
              new Identifier("registerDriver"),
              new Import[] {
                newImport("java.sql.DriverManager.registerDriver", true),
              })
          .put(
              new Identifier("SINGLEPASS"),
              new Import[] {
                newImport("java.awt.image.ImageConsumer.SINGLEPASS", true),
              })
          .put(
              new Identifier("allocate"),
              new Import[] {
                newImport("java.nio.ByteBuffer.allocate", true),
                newImport("java.nio.CharBuffer.allocate", true),
                newImport("java.nio.DoubleBuffer.allocate", true),
                newImport("java.nio.FloatBuffer.allocate", true),
                newImport("java.nio.IntBuffer.allocate", true),
                newImport("java.nio.LongBuffer.allocate", true),
                newImport("java.nio.ShortBuffer.allocate", true),
              })
          .put(
              new Identifier("complementOf"),
              new Import[] {
                newImport("java.util.EnumSet.complementOf", true),
              })
          .put(
              new Identifier("icSigTechnologyTag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigTechnologyTag", true),
              })
          .put(
              new Identifier("PROTOCOL_PROVIDER_PACKAGES"),
              new Import[] {
                newImport(
                    "javax.management.remote.JMXConnectorFactory.PROTOCOL_PROVIDER_PACKAGES", true),
                newImport(
                    "javax.management.remote.JMXConnectorServerFactory.PROTOCOL_PROVIDER_PACKAGES",
                    true),
              })
          .put(
              new Identifier("MultipleComponentProfileHelper"),
              new Import[] {
                newImport("org.omg.IOP.MultipleComponentProfileHelper", false),
              })
          .put(
              new Identifier("darkGray"),
              new Import[] {
                newImport("java.awt.Color.darkGray", true),
              })
          .put(
              new Identifier("PrinterMessageFromOperator"),
              new Import[] {
                newImport("javax.print.attribute.standard.PrinterMessageFromOperator", false),
              })
          .put(
              new Identifier("RowSorterEvent"),
              new Import[] {
                newImport("javax.swing.event.RowSorterEvent", false),
              })
          .put(
              new Identifier("NA_7X9_ENVELOPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.NA_7X9_ENVELOPE", true),
                newImport("javax.print.attribute.standard.MediaSizeName.NA_7X9_ENVELOPE", true),
                newImport("javax.print.attribute.standard.MediaSize.NA.NA_7X9_ENVELOPE", true),
              })
          .put(
              new Identifier("FileTypeMap"),
              new Import[] {
                newImport("javax.activation.FileTypeMap", false),
              })
          .put(
              new Identifier("SwingUtilities"),
              new Import[] {
                newImport("javax.swing.SwingUtilities", false),
              })
          .put(
              new Identifier("printString"),
              new Import[] {
                newImport("javax.xml.bind.DatatypeConverter.printString", true),
              })
          .put(
              new Identifier("FocusListener"),
              new Import[] {
                newImport("java.awt.event.FocusListener", false),
              })
          .put(
              new Identifier("CHAR_UNDEFINED"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.CHAR_UNDEFINED", true),
              })
          .put(
              new Identifier("DSAPublicKeySpec"),
              new Import[] {
                newImport("java.security.spec.DSAPublicKeySpec", false),
              })
          .put(
              new Identifier("createEmptyFrameIcon"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicIconFactory.createEmptyFrameIcon", true),
              })
          .put(
              new Identifier("log"),
              new Import[] {
                newImport("java.lang.Math.log", true),
                newImport("java.lang.StrictMath.log", true),
                newImport("java.rmi.server.LogStream.log", true),
              })
          .put(
              new Identifier("HTMLDocument"),
              new Import[] {
                newImport("javax.swing.text.html.HTMLDocument", false),
              })
          .put(
              new Identifier("getInstalledLookAndFeels"),
              new Import[] {
                newImport("javax.swing.UIManager.getInstalledLookAndFeels", true),
              })
          .put(
              new Identifier("AM_PM"),
              new Import[] {
                newImport("java.text.DateFormat.Field.AM_PM", true),
                newImport("java.util.Calendar.AM_PM", true),
              })
          .put(
              new Identifier("LOST_FOCUS"),
              new Import[] {
                newImport("java.awt.Event.LOST_FOCUS", true),
              })
          .put(
              new Identifier("IS_REPAIRING_NAMESPACES"),
              new Import[] {
                newImport("javax.xml.stream.XMLOutputFactory.IS_REPAIRING_NAMESPACES", true),
              })
          .put(
              new Identifier("NotificationResult"),
              new Import[] {
                newImport("javax.management.remote.NotificationResult", false),
              })
          .put(
              new Identifier("FRAMESET"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.FRAMESET", true),
              })
          .put(
              new Identifier("printFloat"),
              new Import[] {
                newImport("javax.xml.bind.DatatypeConverter.printFloat", true),
              })
          .put(
              new Identifier("ParameterModeHelper"),
              new Import[] {
                newImport("org.omg.CORBA.ParameterModeHelper", false),
              })
          .put(
              new Identifier("CaretPolicy"),
              new Import[] {
                newImport("java.awt.font.TextLayout.CaretPolicy", false),
              })
          .put(
              new Identifier("FaultAction"),
              new Import[] {
                newImport("javax.xml.ws.FaultAction", false),
              })
          .put(
              new Identifier("UnknownFormatConversionException"),
              new Import[] {
                newImport("java.util.UnknownFormatConversionException", false),
              })
          .put(
              new Identifier("TAG_LCAR"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_LCAR", true),
              })
          .put(
              new Identifier("REMOVE"),
              new Import[] {
                newImport("javax.swing.event.DocumentEvent.EventType.REMOVE", true),
              })
          .put(
              new Identifier("setGuiAvailable"),
              new Import[] {
                newImport("java.beans.Beans.setGuiAvailable", true),
              })
          .put(
              new Identifier("TransformerException"),
              new Import[] {
                newImport("javax.xml.transform.TransformerException", false),
              })
          .put(
              new Identifier("PrintWriter"),
              new Import[] {
                newImport("java.io.PrintWriter", false),
              })
          .put(
              new Identifier("REQUEST_PROCESSING_POLICY_ID"),
              new Import[] {
                newImport("org.omg.PortableServer.REQUEST_PROCESSING_POLICY_ID", false),
              })
          .put(
              new Identifier("VK_PREVIOUS_CANDIDATE"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_PREVIOUS_CANDIDATE", true),
              })
          .put(
              new Identifier("DateEditor"),
              new Import[] {
                newImport("javax.swing.JSpinner.DateEditor", false),
              })
          .put(
              new Identifier("TABBED_PANE_TAB"),
              new Import[] {
                newImport("javax.swing.plaf.synth.Region.TABBED_PANE_TAB", true),
              })
          .put(
              new Identifier("PHYSICAL"),
              new Import[] {
                newImport("java.awt.PageAttributes.OriginType.PHYSICAL", true),
              })
          .put(
              new Identifier("FileChannel"),
              new Import[] {
                newImport("java.nio.channels.FileChannel", false),
              })
          .put(
              new Identifier("icSigGreenTRCTag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigGreenTRCTag", true),
              })
          .put(
              new Identifier("IDLType"),
              new Import[] {
                newImport("org.omg.CORBA.IDLType", false),
              })
          .put(
              new Identifier("unconfigurableExecutorService"),
              new Import[] {
                newImport("java.util.concurrent.Executors.unconfigurableExecutorService", true),
              })
          .put(
              new Identifier("ProgressMonitor"),
              new Import[] {
                newImport("javax.swing.ProgressMonitor", false),
              })
          .put(
              new Identifier("FirstLineIndent"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.FirstLineIndent", true),
              })
          .put(
              new Identifier("TYPE_INT_BGR"),
              new Import[] {
                newImport("java.awt.image.BufferedImage.TYPE_INT_BGR", true),
              })
          .put(
              new Identifier("ServicePermission"),
              new Import[] {
                newImport("javax.security.auth.kerberos.ServicePermission", false),
              })
          .put(
              new Identifier("_tk_value"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind._tk_value", true),
              })
          .put(
              new Identifier("TAG_RMI_CUSTOM_MAX_STREAM_FORMAT"),
              new Import[] {
                newImport("org.omg.IOP.TAG_RMI_CUSTOM_MAX_STREAM_FORMAT", false),
              })
          .put(
              new Identifier("BUFFER_SIZE_DEFAULT"),
              new Import[] {
                newImport("javax.swing.text.DefaultStyledDocument.BUFFER_SIZE_DEFAULT", true),
              })
          .put(
              new Identifier("AsyncBoxView"),
              new Import[] {
                newImport("javax.swing.text.AsyncBoxView", false),
              })
          .put(
              new Identifier("installedProviders"),
              new Import[] {
                newImport("java.nio.file.spi.FileSystemProvider.installedProviders", true),
              })
          .put(
              new Identifier("DynEnumOperations"),
              new Import[] {
                newImport("org.omg.DynamicAny.DynEnumOperations", false),
              })
          .put(
              new Identifier("CommandEnvironment"),
              new Import[] {
                newImport("java.rmi.activation.ActivationGroupDesc.CommandEnvironment", false),
              })
          .put(
              new Identifier("CertificateException"),
              new Import[] {
                newImport("java.security.cert.CertificateException", false),
                newImport("javax.security.cert.CertificateException", false),
              })
          .put(
              new Identifier("clearCache"),
              new Import[] {
                newImport("java.util.ResourceBundle.clearCache", true),
              })
          .put(
              new Identifier("FONT_STYLE"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.FONT_STYLE", true),
              })
          .put(
              new Identifier("ArrayType"),
              new Import[] {
                newImport("javax.lang.model.type.ArrayType", false),
                newImport("javax.management.openmbean.ArrayType", false),
              })
          .put(
              new Identifier("isStrict"),
              new Import[] {
                newImport("java.lang.reflect.Modifier.isStrict", true),
              })
          .put(
              new Identifier("KRB_NT_SRV_INST"),
              new Import[] {
                newImport("javax.security.auth.kerberos.KerberosPrincipal.KRB_NT_SRV_INST", true),
              })
          .put(
              new Identifier("VALUE_RANGE_MAX_INCLUSIVE"),
              new Import[] {
                newImport(
                    "javax.imageio.metadata.IIOMetadataFormat.VALUE_RANGE_MAX_INCLUSIVE", true),
              })
          .put(
              new Identifier("OpenMBeanAttributeInfo"),
              new Import[] {
                newImport("javax.management.openmbean.OpenMBeanAttributeInfo", false),
              })
          .put(
              new Identifier("zone"),
              new Import[] {
                newImport("java.time.temporal.TemporalQueries.zone", true),
              })
          .put(
              new Identifier("SEG_CUBICTO"),
              new Import[] {
                newImport("java.awt.geom.PathIterator.SEG_CUBICTO", true),
              })
          .put(
              new Identifier("LATIN_EXTENDED_A"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.LATIN_EXTENDED_A", true),
              })
          .put(
              new Identifier("LATIN_EXTENDED_B"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.LATIN_EXTENDED_B", true),
              })
          .put(
              new Identifier("SynchronousQueue"),
              new Import[] {
                newImport("java.util.concurrent.SynchronousQueue", false),
              })
          .put(
              new Identifier("LATIN_EXTENDED_C"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.LATIN_EXTENDED_C", true),
              })
          .put(
              new Identifier("LATIN_EXTENDED_D"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.LATIN_EXTENDED_D", true),
              })
          .put(
              new Identifier("TableHeaderUI"),
              new Import[] {
                newImport("javax.swing.plaf.TableHeaderUI", false),
              })
          .put(
              new Identifier("UnsupportedDataTypeException"),
              new Import[] {
                newImport("javax.activation.UnsupportedDataTypeException", false),
              })
          .put(
              new Identifier("TORIGHT_TOBOTTOM"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.PresentationDirection.TORIGHT_TOBOTTOM", true),
              })
          .put(
              new Identifier("ARABIC_EXTENDED_A"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.ARABIC_EXTENDED_A", true),
              })
          .put(
              new Identifier("ALIGN_RIGHT"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.ALIGN_RIGHT", true),
                newImport("javax.swing.text.TabStop.ALIGN_RIGHT", true),
              })
          .put(
              new Identifier("ANCESTOR_RESIZED"),
              new Import[] {
                newImport("java.awt.event.HierarchyEvent.ANCESTOR_RESIZED", true),
              })
          .put(
              new Identifier("BeanContextServices"),
              new Import[] {
                newImport("java.beans.beancontext.BeanContextServices", false),
              })
          .put(
              new Identifier("TimeoutException"),
              new Import[] {
                newImport("java.util.concurrent.TimeoutException", false),
              })
          .put(
              new Identifier("loadLibrary"),
              new Import[] {
                newImport("java.lang.System.loadLibrary", true),
              })
          .put(
              new Identifier("Blob"),
              new Import[] {
                newImport("java.sql.Blob", false),
              })
          .put(
              new Identifier("ServerException"),
              new Import[] {
                newImport("java.rmi.ServerException", false),
              })
          .put(
              new Identifier("CANONICAL"),
              new Import[] {
                newImport("javax.security.auth.x500.X500Principal.CANONICAL", true),
              })
          .put(
              new Identifier("SUPPLEMENTAL_PUNCTUATION"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.SUPPLEMENTAL_PUNCTUATION", true),
              })
          .put(
              new Identifier("KEEP"),
              new Import[] {
                newImport("java.util.jar.Pack200.Packer.KEEP", true),
                newImport("java.util.jar.Pack200.Unpacker.KEEP", true),
              })
          .put(
              new Identifier("RELATION_MBEAN_REMOVAL"),
              new Import[] {
                newImport(
                    "javax.management.relation.RelationNotification.RELATION_MBEAN_REMOVAL", true),
              })
          .put(
              new Identifier("VM_CUSTOM"),
              new Import[] {
                newImport("org.omg.CORBA.VM_CUSTOM", false),
              })
          .put(
              new Identifier("JarOutputStream"),
              new Import[] {
                newImport("java.util.jar.JarOutputStream", false),
              })
          .put(
              new Identifier("Handler"),
              new Import[] {
                newImport("java.util.logging.Handler", false),
                newImport("javax.xml.ws.handler.Handler", false),
              })
          .put(
              new Identifier("MutationEvent"),
              new Import[] {
                newImport("org.w3c.dom.events.MutationEvent", false),
              })
          .put(
              new Identifier("SyncFailedException"),
              new Import[] {
                newImport("java.io.SyncFailedException", false),
              })
          .put(
              new Identifier("ListIterator"),
              new Import[] {
                newImport("java.util.ListIterator", false),
              })
          .put(
              new Identifier("ScrollPaneConstants"),
              new Import[] {
                newImport("javax.swing.ScrollPaneConstants", false),
              })
          .put(
              new Identifier("DataTruncation"),
              new Import[] {
                newImport("java.sql.DataTruncation", false),
              })
          .put(
              new Identifier("ColorConvertOp"),
              new Import[] {
                newImport("java.awt.image.ColorConvertOp", false),
              })
          .put(
              new Identifier("ObjectStreamField"),
              new Import[] {
                newImport("java.io.ObjectStreamField", false),
              })
          .put(
              new Identifier("WrongAdapter"),
              new Import[] {
                newImport("org.omg.PortableServer.POAPackage.WrongAdapter", false),
              })
          .put(
              new Identifier("SERIALIZE_ERR"),
              new Import[] {
                newImport("org.w3c.dom.ls.LSException.SERIALIZE_ERR", true),
              })
          .put(
              new Identifier("LogicalMessage"),
              new Import[] {
                newImport("javax.xml.ws.LogicalMessage", false),
              })
          .put(
              new Identifier("TYPE_2CLR"),
              new Import[] {
                newImport("java.awt.color.ColorSpace.TYPE_2CLR", true),
              })
          .put(
              new Identifier("DECIMAL128"),
              new Import[] {
                newImport("java.math.MathContext.DECIMAL128", true),
              })
          .put(
              new Identifier("ObjectReferenceTemplateHolder"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.ObjectReferenceTemplateHolder", false),
              })
          .put(
              new Identifier("AbstractQueuedSynchronizer"),
              new Import[] {
                newImport("java.util.concurrent.locks.AbstractQueuedSynchronizer", false),
              })
          .put(
              new Identifier("CLOSED"),
              new Import[] {
                newImport("javax.management.remote.JMXConnectionNotification.CLOSED", true),
              })
          .put(
              new Identifier("RMI_SERVER_SOCKET_FACTORY_ATTRIBUTE"),
              new Import[] {
                newImport(
                    "javax.management.remote.rmi.RMIConnectorServer.RMI_SERVER_SOCKET_FACTORY_ATTRIBUTE",
                    true),
              })
          .put(
              new Identifier("SECURITY_AUTHENTICATION"),
              new Import[] {
                newImport("javax.naming.Context.SECURITY_AUTHENTICATION", true),
              })
          .put(
              new Identifier("HANGUL_JAMO"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.HANGUL_JAMO", true),
              })
          .put(
              new Identifier("TREE_MODEL_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JTree.TREE_MODEL_PROPERTY", true),
              })
          .put(
              new Identifier("Struct"),
              new Import[] {
                newImport("java.sql.Struct", false),
              })
          .put(
              new Identifier("KEY_EVENT_MASK"),
              new Import[] {
                newImport("java.awt.AWTEvent.KEY_EVENT_MASK", true),
              })
          .put(
              new Identifier("PAGE_AXIS"),
              new Import[] {
                newImport("javax.swing.BoxLayout.PAGE_AXIS", true),
              })
          .put(
              new Identifier("DECRYPT"),
              new Import[] {
                newImport("javax.xml.crypto.KeySelector.Purpose.DECRYPT", true),
              })
          .put(
              new Identifier("DSAKey"),
              new Import[] {
                newImport("java.security.interfaces.DSAKey", false),
              })
          .put(
              new Identifier("FOCUS_MANAGER_CLASS_PROPERTY"),
              new Import[] {
                newImport("javax.swing.FocusManager.FOCUS_MANAGER_CLASS_PROPERTY", true),
              })
          .put(
              new Identifier("CONTENT"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.CONTENT", true),
                newImport("javax.swing.text.html.HTML.Tag.CONTENT", true),
              })
          .put(
              new Identifier("MessageContext"),
              new Import[] {
                newImport("javax.xml.ws.handler.MessageContext", false),
              })
          .put(
              new Identifier("SMALL_FORM_VARIANTS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.SMALL_FORM_VARIANTS", true),
              })
          .put(
              new Identifier("ARABIC_SUPPLEMENT"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.ARABIC_SUPPLEMENT", true),
              })
          .put(
              new Identifier("park"),
              new Import[] {
                newImport("java.util.concurrent.locks.LockSupport.park", true),
              })
          .put(
              new Identifier("lookupStreamPrintServiceFactories"),
              new Import[] {
                newImport(
                    "javax.print.StreamPrintServiceFactory.lookupStreamPrintServiceFactories",
                    true),
              })
          .put(
              new Identifier("StreamSource"),
              new Import[] {
                newImport("javax.xml.transform.stream.StreamSource", false),
              })
          .put(
              new Identifier("getLine"),
              new Import[] {
                newImport("javax.sound.sampled.AudioSystem.getLine", true),
              })
          .put(
              new Identifier("isLightweightComponent"),
              new Import[] {
                newImport("javax.swing.JComponent.isLightweightComponent", true),
              })
          .put(
              new Identifier("Data"),
              new Import[] {
                newImport("javax.xml.crypto.Data", false),
              })
          .put(
              new Identifier("JarEntry"),
              new Import[] {
                newImport("java.util.jar.JarEntry", false),
              })
          .put(
              new Identifier("SELECTION_MODEL_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JColorChooser.SELECTION_MODEL_PROPERTY", true),
                newImport("javax.swing.JTree.SELECTION_MODEL_PROPERTY", true),
              })
          .put(
              new Identifier("Date"),
              new Import[] {
                newImport("java.sql.Date", false), newImport("java.util.Date", false),
              })
          .put(
              new Identifier("InputMethodDescriptor"),
              new Import[] {
                newImport("java.awt.im.spi.InputMethodDescriptor", false),
              })
          .put(
              new Identifier("WRONG_DOCUMENT_ERR"),
              new Import[] {
                newImport("org.w3c.dom.DOMException.WRONG_DOCUMENT_ERR", true),
              })
          .put(
              new Identifier("XMLStreamException"),
              new Import[] {
                newImport("javax.xml.stream.XMLStreamException", false),
              })
          .put(
              new Identifier("DefaultPersistenceDelegate"),
              new Import[] {
                newImport("java.beans.DefaultPersistenceDelegate", false),
              })
          .put(
              new Identifier("LookupTable"),
              new Import[] {
                newImport("java.awt.image.LookupTable", false),
              })
          .put(
              new Identifier("SCROLL_BAR_THUMB"),
              new Import[] {
                newImport("javax.swing.plaf.synth.Region.SCROLL_BAR_THUMB", true),
              })
          .put(
              new Identifier("WEIGHT_EXTRABOLD"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.WEIGHT_EXTRABOLD", true),
              })
          .put(
              new Identifier("PrinterIsAcceptingJobs"),
              new Import[] {
                newImport("javax.print.attribute.standard.PrinterIsAcceptingJobs", false),
              })
          .build();
}
