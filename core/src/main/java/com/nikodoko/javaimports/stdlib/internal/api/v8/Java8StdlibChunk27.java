// Code generated by GenerateStdlib.java. DO NOT EDIT.
package com.nikodoko.javaimports.stdlib.internal.api.v8;

import static com.nikodoko.javaimports.stdlib.internal.Stdlib.newImport;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.common.Identifier;
import com.nikodoko.javaimports.common.Import;
import java.util.Map;

public class Java8StdlibChunk27 {
  static final Map<Identifier, Import[]> CLASSES =
      new ImmutableMap.Builder<Identifier, Import[]>()
          .put(
              new Identifier("CharSeqHelper"),
              new Import[] {
                newImport("org.omg.CORBA.CharSeqHelper", false),
              })
          .put(
              new Identifier("icSigMeasurementTag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigMeasurementTag", true),
              })
          .put(
              new Identifier("ReadableByteChannel"),
              new Import[] {
                newImport("java.nio.channels.ReadableByteChannel", false),
              })
          .put(
              new Identifier("IIOMetadataController"),
              new Import[] {
                newImport("javax.imageio.metadata.IIOMetadataController", false),
              })
          .put(
              new Identifier("LIST_STYLE_IMAGE"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.LIST_STYLE_IMAGE", true),
              })
          .put(
              new Identifier("InetSocketAddress"),
              new Import[] {
                newImport("java.net.InetSocketAddress", false),
              })
          .put(
              new Identifier("fromMethodDescriptorString"),
              new Import[] {
                newImport("java.lang.invoke.MethodType.fromMethodDescriptorString", true),
              })
          .put(
              new Identifier("IllegalFormatConversionException"),
              new Import[] {
                newImport("java.util.IllegalFormatConversionException", false),
              })
          .put(
              new Identifier("TAI_LE"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.TAI_LE", true),
              })
          .put(
              new Identifier("quote"),
              new Import[] {
                newImport("java.util.regex.Pattern.quote", true),
                newImport("javax.management.ObjectName.quote", true),
              })
          .put(
              new Identifier("readAny"),
              new Import[] {
                newImport("javax.rmi.CORBA.Util.readAny", true),
              })
          .put(
              new Identifier("TreeSet"),
              new Import[] {
                newImport("java.util.TreeSet", false),
              })
          .put(
              new Identifier("XML_NS_PREFIX"),
              new Import[] {
                newImport("javax.xml.XMLConstants.XML_NS_PREFIX", true),
              })
          .put(
              new Identifier("SOAPException"),
              new Import[] {
                newImport("javax.xml.soap.SOAPException", false),
              })
          .put(
              new Identifier("LongToIntFunction"),
              new Import[] {
                newImport("java.util.function.LongToIntFunction", false),
              })
          .put(
              new Identifier("EDGE_NO_OP"),
              new Import[] {
                newImport("java.awt.image.ConvolveOp.EDGE_NO_OP", true),
              })
          .put(
              new Identifier("classattr"),
              new Import[] {
                newImport("javax.management.Query.classattr", true),
              })
          .put(
              new Identifier("KeyRep"),
              new Import[] {
                newImport("java.security.KeyRep", false),
              })
          .put(
              new Identifier("getISOLanguages"),
              new Import[] {
                newImport("java.util.Locale.getISOLanguages", true),
              })
          .put(
              new Identifier("MBeanRegistration"),
              new Import[] {
                newImport("javax.management.MBeanRegistration", false),
              })
          .put(
              new Identifier("MIDI_SYNC"),
              new Import[] {
                newImport("javax.sound.midi.Sequencer.SyncMode.MIDI_SYNC", true),
              })
          .put(
              new Identifier("A10"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.A10", true),
                newImport("javax.print.attribute.standard.MediaSize.ISO.A10", true),
              })
          .put(
              new Identifier("TABBED_PANE"),
              new Import[] {
                newImport("javax.swing.plaf.synth.Region.TABBED_PANE", true),
              })
          .put(
              new Identifier("MOVING_TO_PAUSED"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.PrinterStateReason.MOVING_TO_PAUSED", true),
              })
          .put(
              new Identifier("stringFlavor"),
              new Import[] {
                newImport("java.awt.datatransfer.DataFlavor.stringFlavor", true),
              })
          .put(
              new Identifier("NA_LETTER"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.NA_LETTER", true),
                newImport("javax.print.attribute.standard.MediaSizeName.NA_LETTER", true),
              })
          .put(
              new Identifier("logicalAnd"),
              new Import[] {
                newImport("java.lang.Boolean.logicalAnd", true),
              })
          .put(
              new Identifier("TYPE_BYTE"),
              new Import[] {
                newImport("java.awt.image.DataBuffer.TYPE_BYTE", true),
              })
          .put(
              new Identifier("DOMINO_TILES"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.DOMINO_TILES", true),
              })
          .put(
              new Identifier("copyObjects"),
              new Import[] {
                newImport("javax.rmi.CORBA.Util.copyObjects", true),
              })
          .put(
              new Identifier("emptyLongSpliterator"),
              new Import[] {
                newImport("java.util.Spliterators.emptyLongSpliterator", true),
              })
          .put(
              new Identifier("AlgorithmConstraints"),
              new Import[] {
                newImport("java.security.AlgorithmConstraints", false),
              })
          .put(
              new Identifier("CODE_ATTRIBUTE_PFX"),
              new Import[] {
                newImport("java.util.jar.Pack200.Packer.CODE_ATTRIBUTE_PFX", true),
              })
          .put(
              new Identifier("WildcardType"),
              new Import[] {
                newImport("java.lang.reflect.WildcardType", false),
                newImport("javax.lang.model.type.WildcardType", false),
              })
          .put(
              new Identifier("ServerRequestInfo"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.ServerRequestInfo", false),
              })
          .put(
              new Identifier("JobMessageFromOperator"),
              new Import[] {
                newImport("javax.print.attribute.standard.JobMessageFromOperator", false),
              })
          .put(
              new Identifier("TemporalAmount"),
              new Import[] {
                newImport("java.time.temporal.TemporalAmount", false),
              })
          .put(
              new Identifier("ElementFilter"),
              new Import[] {
                newImport("javax.lang.model.util.ElementFilter", false),
              })
          .put(
              new Identifier("printUnsignedInt"),
              new Import[] {
                newImport("javax.xml.bind.DatatypeConverter.printUnsignedInt", true),
              })
          .put(
              new Identifier("JMXConnectorServerMBean"),
              new Import[] {
                newImport("javax.management.remote.JMXConnectorServerMBean", false),
              })
          .put(
              new Identifier("_dk_Native"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind._dk_Native", true),
              })
          .put(
              new Identifier("ACCESS_EXTERNAL_DTD"),
              new Import[] {
                newImport("javax.xml.XMLConstants.ACCESS_EXTERNAL_DTD", true),
              })
          .put(
              new Identifier("SHARADA"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.SHARADA", true),
              })
          .put(
              new Identifier("DosFileAttributes"),
              new Import[] {
                newImport("java.nio.file.attribute.DosFileAttributes", false),
              })
          .put(
              new Identifier("dk_Repository"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind.dk_Repository", true),
              })
          .put(
              new Identifier("VALUE_TEXT_ANTIALIAS_DEFAULT"),
              new Import[] {
                newImport("java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_DEFAULT", true),
              })
          .put(
              new Identifier("OUTPUT_AREA_ALMOST_FULL"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.PrinterStateReason.OUTPUT_AREA_ALMOST_FULL",
                    true),
              })
          .put(
              new Identifier("RightIndent"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.RightIndent", true),
              })
          .put(
              new Identifier("STROKE"),
              new Import[] {
                newImport("java.awt.font.ShapeGraphicAttribute.STROKE", true),
              })
          .put(
              new Identifier("ParameterizedType"),
              new Import[] {
                newImport("java.lang.reflect.ParameterizedType", false),
              })
          .put(
              new Identifier("importedKeyNotDeferrable"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.importedKeyNotDeferrable", true),
              })
          .put(
              new Identifier("SAMP"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.SAMP", true),
              })
          .put(
              new Identifier("URLEncoder"),
              new Import[] {
                newImport("java.net.URLEncoder", false),
              })
          .put(
              new Identifier("PrinterStateReason"),
              new Import[] {
                newImport("javax.print.attribute.standard.PrinterStateReason", false),
              })
          .put(
              new Identifier("SOAPHeader"),
              new Import[] {
                newImport("javax.xml.soap.SOAPHeader", false),
              })
          .put(
              new Identifier("toHexString"),
              new Import[] {
                newImport("java.lang.Double.toHexString", true),
                newImport("java.lang.Float.toHexString", true),
                newImport("java.lang.Integer.toHexString", true),
                newImport("java.lang.Long.toHexString", true),
              })
          .put(
              new Identifier("icHdrSize"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icHdrSize", true),
              })
          .put(
              new Identifier("MinguoChronology"),
              new Import[] {
                newImport("java.time.chrono.MinguoChronology", false),
              })
          .put(
              new Identifier("getClassLoadingMXBean"),
              new Import[] {
                newImport("java.lang.management.ManagementFactory.getClassLoadingMXBean", true),
              })
          .put(
              new Identifier("NumberOfDocuments"),
              new Import[] {
                newImport("javax.print.attribute.standard.NumberOfDocuments", false),
              })
          .put(
              new Identifier("MenuComponent"),
              new Import[] {
                newImport("java.awt.MenuComponent", false),
              })
          .put(
              new Identifier("UPDATABLE_VIEW_SYNC"),
              new Import[] {
                newImport("javax.sql.rowset.spi.SyncProvider.UPDATABLE_VIEW_SYNC", true),
              })
          .put(
              new Identifier("EtchedBorder"),
              new Import[] {
                newImport("javax.swing.border.EtchedBorder", false),
              })
          .put(
              new Identifier("abs"),
              new Import[] {
                newImport("java.lang.Math.abs", true), newImport("java.lang.StrictMath.abs", true),
              })
          .put(
              new Identifier("AsynchronousSocketChannel"),
              new Import[] {
                newImport("java.nio.channels.AsynchronousSocketChannel", false),
              })
          .put(
              new Identifier("HandlerBase"),
              new Import[] {
                newImport("org.xml.sax.HandlerBase", false),
              })
          .put(
              new Identifier("Parameter"),
              new Import[] {
                newImport("java.lang.reflect.Parameter", false),
                newImport("org.omg.Dynamic.Parameter", false),
              })
          .put(
              new Identifier("SyncProvider"),
              new Import[] {
                newImport("javax.sql.rowset.spi.SyncProvider", false),
              })
          .put(
              new Identifier("groupingByConcurrent"),
              new Import[] {
                newImport("java.util.stream.Collectors.groupingByConcurrent", true),
              })
          .put(
              new Identifier("STAPLE_DUAL_BOTTOM"),
              new Import[] {
                newImport("javax.print.attribute.standard.Finishings.STAPLE_DUAL_BOTTOM", true),
              })
          .put(
              new Identifier("writeAny"),
              new Import[] {
                newImport("javax.rmi.CORBA.Util.writeAny", true),
              })
          .put(
              new Identifier("RCSID"),
              new Import[] {
                newImport("javax.swing.undo.StateEditable.RCSID", true),
              })
          .put(
              new Identifier("register"),
              new Import[] {
                newImport("java.rmi.activation.Activatable.register", true),
              })
          .put(
              new Identifier("XPathException"),
              new Import[] {
                newImport("javax.xml.xpath.XPathException", false),
              })
          .put(
              new Identifier("AnyHolder"),
              new Import[] {
                newImport("org.omg.CORBA.AnyHolder", false),
              })
          .put(
              new Identifier("IntrospectionException"),
              new Import[] {
                newImport("java.beans.IntrospectionException", false),
                newImport("javax.management.IntrospectionException", false),
              })
          .put(
              new Identifier("GuardedObject"),
              new Import[] {
                newImport("java.security.GuardedObject", false),
              })
          .put(
              new Identifier("UnmarshallerHandler"),
              new Import[] {
                newImport("javax.xml.bind.UnmarshallerHandler", false),
              })
          .put(
              new Identifier("SignatureException"),
              new Import[] {
                newImport("java.security.SignatureException", false),
              })
          .put(
              new Identifier("getFirstLineIndent"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.getFirstLineIndent", true),
              })
          .put(
              new Identifier("getAWTKeyStroke"),
              new Import[] {
                newImport("java.awt.AWTKeyStroke.getAWTKeyStroke", true),
              })
          .put(
              new Identifier("DragGestureRecognizer"),
              new Import[] {
                newImport("java.awt.dnd.DragGestureRecognizer", false),
              })
          .put(
              new Identifier("removeProvider"),
              new Import[] {
                newImport("java.security.Security.removeProvider", true),
              })
          .put(
              new Identifier("red"),
              new Import[] {
                newImport("java.awt.Color.red", true),
              })
          .put(
              new Identifier("getOrientation"),
              new Import[] {
                newImport("java.awt.ComponentOrientation.getOrientation", true),
              })
          .put(
              new Identifier("IllegalFormatPrecisionException"),
              new Import[] {
                newImport("java.util.IllegalFormatPrecisionException", false),
              })
          .put(
              new Identifier("TypeMirror"),
              new Import[] {
                newImport("javax.lang.model.type.TypeMirror", false),
              })
          .put(
              new Identifier("INITIATE_AND_ACCEPT"),
              new Import[] {
                newImport("org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT", true),
              })
          .put(
              new Identifier("LIST_DESELECT"),
              new Import[] {
                newImport("java.awt.Event.LIST_DESELECT", true),
              })
          .put(
              new Identifier("SerialRef"),
              new Import[] {
                newImport("javax.sql.rowset.serial.SerialRef", false),
              })
          .put(
              new Identifier("DEFAULT_CSS"),
              new Import[] {
                newImport("javax.swing.text.html.HTMLEditorKit.DEFAULT_CSS", true),
              })
          .put(
              new Identifier("VK_ESCAPE"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_ESCAPE", true),
              })
          .put(
              new Identifier("add"),
              new Import[] {
                newImport("java.awt.AWTEventMulticaster.add", true),
              })
          .put(
              new Identifier("InvalidAlgorithmParameterException"),
              new Import[] {
                newImport("java.security.InvalidAlgorithmParameterException", false),
              })
          .put(
              new Identifier("MBeanOperationInfo"),
              new Import[] {
                newImport("javax.management.MBeanOperationInfo", false),
              })
          .put(
              new Identifier("HashPrintJobAttributeSet"),
              new Import[] {
                newImport("javax.print.attribute.HashPrintJobAttributeSet", false),
              })
          .put(
              new Identifier("LIGHT"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalIconFactory.LIGHT", true),
              })
          .put(
              new Identifier("BAD_QOP"),
              new Import[] {
                newImport("org.ietf.jgss.GSSException.BAD_QOP", true),
              })
          .put(
              new Identifier("HTTP_UNAVAILABLE"),
              new Import[] {
                newImport("java.net.HttpURLConnection.HTTP_UNAVAILABLE", true),
              })
          .put(
              new Identifier("insertProviderAt"),
              new Import[] {
                newImport("java.security.Security.insertProviderAt", true),
              })
          .put(
              new Identifier("Encoding"),
              new Import[] {
                newImport("javax.sound.sampled.AudioFormat.Encoding", false),
                newImport("org.omg.IOP.Encoding", false),
              })
          .put(
              new Identifier("BAD_QOS"),
              new Import[] {
                newImport("org.omg.CORBA.BAD_QOS", false),
              })
          .put(
              new Identifier("AnnotatedParameterizedType"),
              new Import[] {
                newImport("java.lang.reflect.AnnotatedParameterizedType", false),
              })
          .put(
              new Identifier("MAXLENGTH"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.MAXLENGTH", true),
              })
          .put(
              new Identifier("tk_octet"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind.tk_octet", true),
              })
          .put(
              new Identifier("VK_KATAKANA"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_KATAKANA", true),
              })
          .put(
              new Identifier("JCheckBoxMenuItem"),
              new Import[] {
                newImport("javax.swing.JCheckBoxMenuItem", false),
              })
          .put(
              new Identifier("CookieStore"),
              new Import[] {
                newImport("java.net.CookieStore", false),
              })
          .put(
              new Identifier("ModificationItem"),
              new Import[] {
                newImport("javax.naming.directory.ModificationItem", false),
              })
          .put(
              new Identifier("CharSeqHolder"),
              new Import[] {
                newImport("org.omg.CORBA.CharSeqHolder", false),
              })
          .put(
              new Identifier("PropertyEditor"),
              new Import[] {
                newImport("java.beans.PropertyEditor", false),
              })
          .put(
              new Identifier("MAGENTA"),
              new Import[] {
                newImport("java.awt.Color.MAGENTA", true),
              })
          .put(
              new Identifier("StreamTokenizer"),
              new Import[] {
                newImport("java.io.StreamTokenizer", false),
              })
          .put(
              new Identifier("StructMemberHelper"),
              new Import[] {
                newImport("org.omg.CORBA.StructMemberHelper", false),
              })
          .put(
              new Identifier("GENERIC_FAILURE"),
              new Import[] {
                newImport("java.util.logging.ErrorManager.GENERIC_FAILURE", true),
              })
          .put(
              new Identifier("CaretEvent"),
              new Import[] {
                newImport("javax.swing.event.CaretEvent", false),
              })
          .put(
              new Identifier("WIND_EVEN_ODD"),
              new Import[] {
                newImport("java.awt.geom.Path2D.WIND_EVEN_ODD", true),
                newImport("java.awt.geom.PathIterator.WIND_EVEN_ODD", true),
              })
          .put(
              new Identifier("BOLD_ACTION"),
              new Import[] {
                newImport("javax.swing.text.html.HTMLEditorKit.BOLD_ACTION", true),
              })
          .put(
              new Identifier("ValidationException"),
              new Import[] {
                newImport("javax.xml.bind.ValidationException", false),
              })
          .put(
              new Identifier("OL_CHIKI"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.OL_CHIKI", true),
              })
          .put(
              new Identifier("ROOT"),
              new Import[] {
                newImport("java.util.Locale.ROOT", true),
              })
          .put(
              new Identifier("SUBWINDOW_OF"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRelation.SUBWINDOW_OF", true),
              })
          .put(
              new Identifier("LYDIAN"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.LYDIAN", true),
              })
          .put(
              new Identifier("ModelAttribute"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.ModelAttribute", true),
              })
          .put(
              new Identifier("runFinalizersOnExit"),
              new Import[] {
                newImport("java.lang.Runtime.runFinalizersOnExit", true),
                newImport("java.lang.System.runFinalizersOnExit", true),
              })
          .put(
              new Identifier("SUBTRACT"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.spec.XPathType.Filter.SUBTRACT", true),
              })
          .put(
              new Identifier("NUMBER_FORMS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.NUMBER_FORMS", true),
              })
          .put(
              new Identifier("MBeanConstructorInfo"),
              new Import[] {
                newImport("javax.management.MBeanConstructorInfo", false),
              })
          .put(
              new Identifier("TextMeasurer"),
              new Import[] {
                newImport("java.awt.font.TextMeasurer", false),
              })
          .put(
              new Identifier("BandedSampleModel"),
              new Import[] {
                newImport("java.awt.image.BandedSampleModel", false),
              })
          .put(
              new Identifier("getGarbageCollectorMXBeans"),
              new Import[] {
                newImport(
                    "java.lang.management.ManagementFactory.getGarbageCollectorMXBeans", true),
              })
          .put(
              new Identifier("IORInterceptor_3_0Operations"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.IORInterceptor_3_0Operations", false),
              })
          .put(
              new Identifier("XMLCryptoContext"),
              new Import[] {
                newImport("javax.xml.crypto.XMLCryptoContext", false),
              })
          .put(
              new Identifier("enumerate"),
              new Import[] {
                newImport("java.lang.Thread.enumerate", true),
              })
          .put(
              new Identifier("OBJECT_CHANGED"),
              new Import[] {
                newImport("javax.naming.event.NamingEvent.OBJECT_CHANGED", true),
              })
          .put(
              new Identifier("VALUE_ALPHA_INTERPOLATION_SPEED"),
              new Import[] {
                newImport("java.awt.RenderingHints.VALUE_ALPHA_INTERPOLATION_SPEED", true),
              })
          .put(
              new Identifier("intersect"),
              new Import[] {
                newImport("java.awt.geom.Rectangle2D.intersect", true),
              })
          .put(
              new Identifier("toIntExact"),
              new Import[] {
                newImport("java.lang.Math.toIntExact", true),
                newImport("java.lang.StrictMath.toIntExact", true),
              })
          .put(
              new Identifier("typePredChar"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.typePredChar", true),
              })
          .put(
              new Identifier("getKeymap"),
              new Import[] {
                newImport("javax.swing.text.JTextComponent.getKeymap", true),
              })
          .put(
              new Identifier("Holder"),
              new Import[] {
                newImport("javax.xml.ws.Holder", false),
              })
          .put(
              new Identifier("XMLObject"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.XMLObject", false),
              })
          .put(
              new Identifier("LayoutManager2"),
              new Import[] {
                newImport("java.awt.LayoutManager2", false),
              })
          .put(
              new Identifier("newBuilder"),
              new Import[] {
                newImport("java.nio.file.attribute.AclEntry.newBuilder", true),
              })
          .put(
              new Identifier("JPopupMenu"),
              new Import[] {
                newImport("javax.swing.JPopupMenu", false),
              })
          .put(
              new Identifier("tableIndexClustered"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.tableIndexClustered", true),
              })
          .put(
              new Identifier("NOT_SUPPORTED"),
              new Import[] {
                newImport("javax.print.attribute.standard.ColorSupported.NOT_SUPPORTED", true),
              })
          .put(
              new Identifier("ICC_ColorSpace"),
              new Import[] {
                newImport("java.awt.color.ICC_ColorSpace", false),
              })
          .put(
              new Identifier("controlDkShadow"),
              new Import[] {
                newImport("java.awt.SystemColor.controlDkShadow", true),
              })
          .put(
              new Identifier("getTextBorder"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalBorders.getTextBorder", true),
              })
          .put(
              new Identifier("HANGUL_JAMO_EXTENDED_A"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.HANGUL_JAMO_EXTENDED_A", true),
              })
          .put(
              new Identifier("JobKOctetsProcessed"),
              new Import[] {
                newImport("javax.print.attribute.standard.JobKOctetsProcessed", false),
              })
          .put(
              new Identifier("ConnectionEvent"),
              new Import[] {
                newImport("javax.sql.ConnectionEvent", false),
              })
          .put(
              new Identifier("ContainerListener"),
              new Import[] {
                newImport("java.awt.event.ContainerListener", false),
              })
          .put(
              new Identifier("SynthScrollPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthScrollPaneUI", false),
              })
          .put(
              new Identifier("BoxPainter"),
              new Import[] {
                newImport("javax.swing.text.html.StyleSheet.BoxPainter", false),
              })
          .put(
              new Identifier("NameAttribute"),
              new Import[] {
                newImport("javax.swing.text.AttributeSet.NameAttribute", true),
                newImport("javax.swing.text.StyleConstants.NameAttribute", true),
              })
          .put(
              new Identifier("HANGUL_JAMO_EXTENDED_B"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.HANGUL_JAMO_EXTENDED_B", true),
              })
          .put(
              new Identifier("STRONG"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.STRONG", true),
              })
          .put(
              new Identifier("StdACChrominance"),
              new Import[] {
                newImport("javax.imageio.plugins.jpeg.JPEGHuffmanTable.StdACChrominance", true),
              })
          .put(
              new Identifier("SourceChannel"),
              new Import[] {
                newImport("java.nio.channels.Pipe.SourceChannel", false),
              })
          .put(
              new Identifier("ACTIVE_CAPTION"),
              new Import[] {
                newImport("java.awt.SystemColor.ACTIVE_CAPTION", true),
              })
          .put(
              new Identifier("BACK_SPACE"),
              new Import[] {
                newImport("java.awt.Event.BACK_SPACE", true),
              })
          .put(
              new Identifier("TITLE_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JInternalFrame.TITLE_PROPERTY", true),
              })
          .put(
              new Identifier("ACTIVE_SENSING"),
              new Import[] {
                newImport("javax.sound.midi.ShortMessage.ACTIVE_SENSING", true),
              })
          .put(
              new Identifier("convertPointToScreen"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.convertPointToScreen", true),
              })
          .put(
              new Identifier("IP_MULTICAST_LOOP"),
              new Import[] {
                newImport("java.net.SocketOptions.IP_MULTICAST_LOOP", true),
                newImport("java.net.StandardSocketOptions.IP_MULTICAST_LOOP", true),
              })
          .put(
              new Identifier("IIOReadUpdateListener"),
              new Import[] {
                newImport("javax.imageio.event.IIOReadUpdateListener", false),
              })
          .put(
              new Identifier("INTERFACE"),
              new Import[] {
                newImport("java.lang.reflect.Modifier.INTERFACE", true),
              })
          .put(
              new Identifier("ZonedDateTime"),
              new Import[] {
                newImport("java.time.ZonedDateTime", false),
              })
          .put(
              new Identifier("DIRECTIONALITY_POP_DIRECTIONAL_FORMAT"),
              new Import[] {
                newImport("java.lang.Character.DIRECTIONALITY_POP_DIRECTIONAL_FORMAT", true),
              })
          .put(
              new Identifier("INTERNAL_FRAME_FIRST"),
              new Import[] {
                newImport("javax.swing.event.InternalFrameEvent.INTERNAL_FRAME_FIRST", true),
              })
          .put(
              new Identifier("UnexpectedException"),
              new Import[] {
                newImport("java.rmi.UnexpectedException", false),
              })
          .put(
              new Identifier("GatheringByteChannel"),
              new Import[] {
                newImport("java.nio.channels.GatheringByteChannel", false),
              })
          .put(
              new Identifier("setDefaultUncaughtExceptionHandler"),
              new Import[] {
                newImport("java.lang.Thread.setDefaultUncaughtExceptionHandler", true),
              })
          .put(
              new Identifier("lookupMultiDocPrintServices"),
              new Import[] {
                newImport("javax.print.PrintServiceLookup.lookupMultiDocPrintServices", true),
              })
          .put(
              new Identifier("FOCUS_LAST"),
              new Import[] {
                newImport("java.awt.event.FocusEvent.FOCUS_LAST", true),
              })
          .put(
              new Identifier("SOAPBinding"),
              new Import[] {
                newImport("javax.jws.soap.SOAPBinding", false),
                newImport("javax.xml.ws.soap.SOAPBinding", false),
              })
          .put(
              new Identifier("getUserTextFont"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalLookAndFeel.getUserTextFont", true),
              })
          .put(
              new Identifier("ACCESS_EXTERNAL_STYLESHEET"),
              new Import[] {
                newImport("javax.xml.XMLConstants.ACCESS_EXTERNAL_STYLESHEET", true),
              })
          .put(
              new Identifier("HostnameVerifier"),
              new Import[] {
                newImport("javax.net.ssl.HostnameVerifier", false),
              })
          .put(
              new Identifier("highSurrogate"),
              new Import[] {
                newImport("java.lang.Character.highSurrogate", true),
              })
          .put(
              new Identifier("DIRECTIONALITY_WHITESPACE"),
              new Import[] {
                newImport("java.lang.Character.DIRECTIONALITY_WHITESPACE", true),
              })
          .put(
              new Identifier("exit"),
              new Import[] {
                newImport("java.lang.System.exit", true),
              })
          .put(
              new Identifier("SNIMatcher"),
              new Import[] {
                newImport("javax.net.ssl.SNIMatcher", false),
              })
          .put(
              new Identifier("system"),
              new Import[] {
                newImport("java.time.Clock.system", true),
              })
          .put(
              new Identifier("inactiveCaptionBorder"),
              new Import[] {
                newImport("java.awt.SystemColor.inactiveCaptionBorder", true),
              })
          .put(
              new Identifier("EMOTICONS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.EMOTICONS", true),
              })
          .put(
              new Identifier("LoginException"),
              new Import[] {
                newImport("javax.security.auth.login.LoginException", false),
              })
          .put(
              new Identifier("mapSystemException"),
              new Import[] {
                newImport("javax.rmi.CORBA.Util.mapSystemException", true),
              })
          .put(
              new Identifier("DriverAction"),
              new Import[] {
                newImport("java.sql.DriverAction", false),
              })
          .put(
              new Identifier("BiPredicate"),
              new Import[] {
                newImport("java.util.function.BiPredicate", false),
              })
          .put(
              new Identifier("getReaderMIMETypes"),
              new Import[] {
                newImport("javax.imageio.ImageIO.getReaderMIMETypes", true),
              })
          .put(
              new Identifier("FileAttribute"),
              new Import[] {
                newImport("java.nio.file.attribute.FileAttribute", false),
              })
          .put(
              new Identifier("DeclaredType"),
              new Import[] {
                newImport("javax.lang.model.type.DeclaredType", false),
              })
          .put(
              new Identifier("CycleMethod"),
              new Import[] {
                newImport("java.awt.MultipleGradientPaint.CycleMethod", false),
              })
          .put(
              new Identifier("FocusAdapter"),
              new Import[] {
                newImport("java.awt.event.FocusAdapter", false),
              })
          .put(
              new Identifier("VK_DOWN"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_DOWN", true),
              })
          .put(
              new Identifier("UNDERLINE_LOW_ONE_PIXEL"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.UNDERLINE_LOW_ONE_PIXEL", true),
              })
          .put(
              new Identifier("ContentElementName"),
              new Import[] {
                newImport("javax.swing.text.AbstractDocument.ContentElementName", true),
              })
          .put(
              new Identifier("ColorChooserComponentFactory"),
              new Import[] {
                newImport("javax.swing.colorchooser.ColorChooserComponentFactory", false),
              })
          .put(
              new Identifier("TAG_DSIG"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_DSIG", true),
              })
          .put(
              new Identifier("VK_EQUALS"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_EQUALS", true),
              })
          .put(
              new Identifier("getOperatingSystemMXBean"),
              new Import[] {
                newImport("java.lang.management.ManagementFactory.getOperatingSystemMXBean", true),
              })
          .put(
              new Identifier("SpinnerDateModel"),
              new Import[] {
                newImport("javax.swing.SpinnerDateModel", false),
              })
          .put(
              new Identifier("NamingContext"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContext", false),
              })
          .put(
              new Identifier("NVARCHAR"),
              new Import[] {
                newImport("java.sql.Types.NVARCHAR", true),
              })
          .put(
              new Identifier("WSDL_OPERATION"),
              new Import[] {
                newImport("javax.xml.ws.handler.MessageContext.WSDL_OPERATION", true),
              })
          .put(
              new Identifier("PINK"),
              new Import[] {
                newImport("java.awt.Color.PINK", true),
              })
          .put(
              new Identifier("CUNEIFORM_NUMBERS_AND_PUNCTUATION"),
              new Import[] {
                newImport(
                    "java.lang.Character.UnicodeBlock.CUNEIFORM_NUMBERS_AND_PUNCTUATION", true),
              })
          .put(
              new Identifier("MetalInternalFrameTitlePane"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalInternalFrameTitlePane", false),
              })
          .put(
              new Identifier("TAG_ALTERNATE_IIOP_ADDRESS"),
              new Import[] {
                newImport("org.omg.IOP.TAG_ALTERNATE_IIOP_ADDRESS", false),
              })
          .put(
              new Identifier("UPDATE"),
              new Import[] {
                newImport("java.awt.event.PaintEvent.UPDATE", true),
                newImport("javax.accessibility.AccessibleTableModelChange.UPDATE", true),
                newImport("javax.swing.event.TableModelEvent.UPDATE", true),
              })
          .put(
              new Identifier("SAVE"),
              new Import[] {
                newImport("java.awt.FileDialog.SAVE", true),
              })
          .put(
              new Identifier("OfPrimitive"),
              new Import[] {
                newImport("java.util.Spliterator.OfPrimitive", false),
              })
          .put(
              new Identifier("icSigSpace8CLR"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigSpace8CLR", true),
              })
          .put(
              new Identifier("calculateTiledPositions"),
              new Import[] {
                newImport("javax.swing.SizeRequirements.calculateTiledPositions", true),
              })
          .put(
              new Identifier("_SINGLE_THREAD_MODEL"),
              new Import[] {
                newImport("org.omg.PortableServer.ThreadPolicyValue._SINGLE_THREAD_MODEL", true),
              })
          .put(
              new Identifier("FilterInputStream"),
              new Import[] {
                newImport("java.io.FilterInputStream", false),
              })
          .put(
              new Identifier("forName"),
              new Import[] {
                newImport("java.lang.Class.forName", true),
                newImport("java.lang.Character.UnicodeBlock.forName", true),
                newImport("java.lang.Character.UnicodeScript.forName", true),
                newImport("java.nio.charset.Charset.forName", true),
              })
          .put(
              new Identifier("synchronizedSet"),
              new Import[] {
                newImport("java.util.Collections.synchronizedSet", true),
              })
          .put(
              new Identifier("MessageFactory"),
              new Import[] {
                newImport("javax.xml.soap.MessageFactory", false),
              })
          .put(
              new Identifier("XmlJavaTypeAdapter"),
              new Import[] {
                newImport("javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter", false),
              })
          .put(
              new Identifier("Text"),
              new Import[] {
                newImport("javax.xml.soap.Text", false), newImport("org.w3c.dom.Text", false),
              })
          .put(
              new Identifier("Attributes2"),
              new Import[] {
                newImport("org.xml.sax.ext.Attributes2", false),
              })
          .put(
              new Identifier("SELECT"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.SELECT", true),
              })
          .put(
              new Identifier("IllegalAccessException"),
              new Import[] {
                newImport("java.lang.IllegalAccessException", false),
              })
          .put(
              new Identifier("Lock"),
              new Import[] {
                newImport("java.util.concurrent.locks.Lock", false),
              })
          .put(
              new Identifier("icSigSpaceCCLR"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigSpaceCCLR", true),
              })
          .put(
              new Identifier("unmodifiableSortedMap"),
              new Import[] {
                newImport("java.util.Collections.unmodifiableSortedMap", true),
              })
          .put(
              new Identifier("ResolveAttribute"),
              new Import[] {
                newImport("javax.swing.text.AttributeSet.ResolveAttribute", true),
                newImport("javax.swing.text.StyleConstants.ResolveAttribute", true),
              })
          .put(
              new Identifier("getSequence"),
              new Import[] {
                newImport("javax.sound.midi.MidiSystem.getSequence", true),
              })
          .put(
              new Identifier("NORMAL"),
              new Import[] {
                newImport("java.awt.Frame.NORMAL", true),
                newImport("java.awt.PageAttributes.PrintQualityType.NORMAL", true),
                newImport("javax.print.attribute.standard.PrintQuality.NORMAL", true),
              })
          .put(
              new Identifier("XPathFilter2ParameterSpec"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.spec.XPathFilter2ParameterSpec", false),
              })
          .put(
              new Identifier("BasicInternalFrameTitlePane"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicInternalFrameTitlePane", false),
              })
          .put(
              new Identifier("FilterWriter"),
              new Import[] {
                newImport("java.io.FilterWriter", false),
              })
          .put(
              new Identifier("TEXT_PLAIN_UTF_8"),
              new Import[] {
                newImport("javax.print.DocFlavor.BYTE_ARRAY.TEXT_PLAIN_UTF_8", true),
                newImport("javax.print.DocFlavor.INPUT_STREAM.TEXT_PLAIN_UTF_8", true),
                newImport("javax.print.DocFlavor.URL.TEXT_PLAIN_UTF_8", true),
              })
          .put(
              new Identifier("Compression"),
              new Import[] {
                newImport("javax.print.attribute.standard.Compression", false),
              })
          .put(
              new Identifier("ARRAY"),
              new Import[] {
                newImport("java.sql.Types.ARRAY", true),
              })
          .put(
              new Identifier("getTimeZone"),
              new Import[] {
                newImport("java.util.TimeZone.getTimeZone", true),
              })
          .put(
              new Identifier("AUTHORITATIVE"),
              new Import[] {
                newImport("javax.naming.Context.AUTHORITATIVE", true),
              })
          .put(
              new Identifier("ACCESSIBLE_TABLE_ROW_HEADER_CHANGED"),
              new Import[] {
                newImport(
                    "javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_ROW_HEADER_CHANGED",
                    true),
              })
          .put(
              new Identifier("RELATION_MBEAN_UPDATE"),
              new Import[] {
                newImport(
                    "javax.management.relation.RelationNotification.RELATION_MBEAN_UPDATE", true),
              })
          .put(
              new Identifier("RemoteRef"),
              new Import[] {
                newImport("java.rmi.server.RemoteRef", false),
              })
          .put(
              new Identifier("InternalFrameUI"),
              new Import[] {
                newImport("javax.swing.plaf.InternalFrameUI", false),
              })
          .put(
              new Identifier("TCKind"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind", false),
              })
          .put(
              new Identifier("PIPE"),
              new Import[] {
                newImport("java.lang.ProcessBuilder.Redirect.PIPE", true),
              })
          .put(
              new Identifier("DynamicImplementation"),
              new Import[] {
                newImport("org.omg.CORBA.DynamicImplementation", false),
                newImport("org.omg.PortableServer.DynamicImplementation", false),
              })
          .put(
              new Identifier("ParagraphElementName"),
              new Import[] {
                newImport("javax.swing.text.AbstractDocument.ParagraphElementName", true),
              })
          .put(
              new Identifier("RoleUnresolvedList"),
              new Import[] {
                newImport("javax.management.relation.RoleUnresolvedList", false),
              })
          .put(
              new Identifier("BasicComboBoxRenderer"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicComboBoxRenderer", false),
              })
          .put(
              new Identifier("COMBO_BOX"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.COMBO_BOX", true),
                newImport("javax.swing.plaf.synth.Region.COMBO_BOX", true),
              })
          .put(
              new Identifier("LifespanPolicyOperations"),
              new Import[] {
                newImport("org.omg.PortableServer.LifespanPolicyOperations", false),
              })
          .put(
              new Identifier("ID_UNIQUENESS_POLICY_ID"),
              new Import[] {
                newImport("org.omg.PortableServer.ID_UNIQUENESS_POLICY_ID", false),
              })
          .put(
              new Identifier("CHAR_REPLACEMENT"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.CHAR_REPLACEMENT", true),
              })
          .put(
              new Identifier("permuteArguments"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandles.permuteArguments", true),
              })
          .put(
              new Identifier("getVersions"),
              new Import[] {
                newImport("java.time.zone.ZoneRulesProvider.getVersions", true),
              })
          .put(
              new Identifier("EXTENSION_NAME"),
              new Import[] {
                newImport("java.util.jar.Attributes.Name.EXTENSION_NAME", true),
              })
          .put(
              new Identifier("OLD_TOKEN"),
              new Import[] {
                newImport("org.ietf.jgss.GSSException.OLD_TOKEN", true),
              })
          .put(
              new Identifier("ScrollPaneLayout"),
              new Import[] {
                newImport("javax.swing.ScrollPaneLayout", false),
              })
          .put(
              new Identifier("ROUND_UP"),
              new Import[] {
                newImport("java.math.BigDecimal.ROUND_UP", true),
              })
          .put(
              new Identifier("BeanContextServiceProviderBeanInfo"),
              new Import[] {
                newImport("java.beans.beancontext.BeanContextServiceProviderBeanInfo", false),
              })
          .put(
              new Identifier("TEXT_EVENT_MASK"),
              new Import[] {
                newImport("java.awt.AWTEvent.TEXT_EVENT_MASK", true),
              })
          .put(
              new Identifier("AUTO_RESIZE_NEXT_COLUMN"),
              new Import[] {
                newImport("javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN", true),
              })
          .put(
              new Identifier("POLICY_NODICTIONARY"),
              new Import[] {
                newImport("javax.security.sasl.Sasl.POLICY_NODICTIONARY", true),
              })
          .put(
              new Identifier("Option"),
              new Import[] {
                newImport("java.security.cert.PKIXRevocationChecker.Option", false),
                newImport("javax.swing.text.html.Option", false),
              })
          .put(
              new Identifier("setSocketFactory"),
              new Import[] {
                newImport("java.net.ServerSocket.setSocketFactory", true),
                newImport("java.rmi.server.RMISocketFactory.setSocketFactory", true),
              })
          .put(
              new Identifier("PermissionCollection"),
              new Import[] {
                newImport("java.security.PermissionCollection", false),
              })
          .put(
              new Identifier("CharsetProvider"),
              new Import[] {
                newImport("java.nio.charset.spi.CharsetProvider", false),
              })
          .put(
              new Identifier("LANDSCAPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.OrientationRequestedType.LANDSCAPE", true),
                newImport("java.awt.print.PageFormat.LANDSCAPE", true),
                newImport("javax.print.attribute.standard.OrientationRequested.LANDSCAPE", true),
              })
          .put(
              new Identifier("VK_ROMAN_CHARACTERS"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_ROMAN_CHARACTERS", true),
              })
          .put(
              new Identifier("JIS_B10"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.JIS_B10", true),
                newImport("javax.print.attribute.standard.MediaSizeName.JIS_B10", true),
              })
          .put(
              new Identifier("DOCUMENT_POSITION_CONTAINS"),
              new Import[] {
                newImport("org.w3c.dom.Node.DOCUMENT_POSITION_CONTAINS", true),
              })
          .put(
              new Identifier("createPacked"),
              new Import[] {
                newImport("javax.imageio.ImageTypeSpecifier.createPacked", true),
              })
          .put(
              new Identifier("SecondaryLoop"),
              new Import[] {
                newImport("java.awt.SecondaryLoop", false),
              })
          .put(
              new Identifier("ModelMBeanAttributeInfo"),
              new Import[] {
                newImport("javax.management.modelmbean.ModelMBeanAttributeInfo", false),
              })
          .put(
              new Identifier("Monitor"),
              new Import[] {
                newImport("javax.management.monitor.Monitor", false),
              })
          .put(
              new Identifier("DERIVATION_EXTENSION"),
              new Import[] {
                newImport("org.w3c.dom.TypeInfo.DERIVATION_EXTENSION", true),
              })
          .put(
              new Identifier("KEY_ALPHA_INTERPOLATION"),
              new Import[] {
                newImport("java.awt.RenderingHints.KEY_ALPHA_INTERPOLATION", true),
              })
          .put(
              new Identifier("and"),
              new Import[] {
                newImport("javax.management.Query.and", true),
              })
          .put(
              new Identifier("RIGHT_ALIGNMENT"),
              new Import[] {
                newImport("java.awt.Component.RIGHT_ALIGNMENT", true),
              })
          .put(
              new Identifier("InternalFrameFocusTraversalPolicy"),
              new Import[] {
                newImport("javax.swing.InternalFrameFocusTraversalPolicy", false),
              })
          .put(
              new Identifier("Modifier"),
              new Import[] {
                newImport("java.lang.reflect.Modifier", false),
                newImport("java.nio.file.WatchEvent.Modifier", false),
                newImport("javax.lang.model.element.Modifier", false),
              })
          .put(
              new Identifier("DefaultHighlightPainter"),
              new Import[] {
                newImport("javax.swing.text.DefaultHighlighter.DefaultHighlightPainter", false),
              })
          .put(
              new Identifier("ROLLOVER"),
              new Import[] {
                newImport("javax.swing.DefaultButtonModel.ROLLOVER", true),
              })
          .put(
              new Identifier("CancelablePrintJob"),
              new Import[] {
                newImport("javax.print.CancelablePrintJob", false),
              })
          .put(
              new Identifier("setAccessible"),
              new Import[] {
                newImport("java.lang.reflect.AccessibleObject.setAccessible", true),
              })
          .put(
              new Identifier("isFocusManagerEnabled"),
              new Import[] {
                newImport("javax.swing.FocusManager.isFocusManagerEnabled", true),
              })
          .put(
              new Identifier("Transferable"),
              new Import[] {
                newImport("java.awt.datatransfer.Transferable", false),
              })
          .put(
              new Identifier("UNKNOWN_NUMBER_OF_PAGES"),
              new Import[] {
                newImport("java.awt.print.Pageable.UNKNOWN_NUMBER_OF_PAGES", true),
              })
          .put(
              new Identifier("PrivilegedExceptionAction"),
              new Import[] {
                newImport("java.security.PrivilegedExceptionAction", false),
              })
          .put(
              new Identifier("findEditor"),
              new Import[] {
                newImport("java.beans.PropertyEditorManager.findEditor", true),
              })
          .put(
              new Identifier("QOP"),
              new Import[] {
                newImport("javax.security.sasl.Sasl.QOP", true),
              })
          .put(
              new Identifier("WrongTransactionHelper"),
              new Import[] {
                newImport("org.omg.CORBA.WrongTransactionHelper", false),
              })
          .put(
              new Identifier("ScriptEngineFactory"),
              new Import[] {
                newImport("javax.script.ScriptEngineFactory", false),
              })
          .put(
              new Identifier("AdjustmentListener"),
              new Import[] {
                newImport("java.awt.event.AdjustmentListener", false),
              })
          .put(
              new Identifier("DTDConstants"),
              new Import[] {
                newImport("javax.swing.text.html.parser.DTDConstants", false),
              })
          .put(
              new Identifier("RMIConnectionImpl"),
              new Import[] {
                newImport("javax.management.remote.rmi.RMIConnectionImpl", false),
              })
          .put(
              new Identifier("MBeanServerFactory"),
              new Import[] {
                newImport("javax.management.MBeanServerFactory", false),
              })
          .put(
              new Identifier("ROWS"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.ROWS", true),
              })
          .build();
}
