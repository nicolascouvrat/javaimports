// Code generated by GenerateStdlib.java. DO NOT EDIT.
package com.nikodoko.javaimports.stdlib.internal.api.v8;

import static com.nikodoko.javaimports.stdlib.internal.Stdlib.newImport;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.common.Identifier;
import com.nikodoko.javaimports.common.Import;
import java.util.Map;

public class Java8StdlibChunk15 {
  static final Map<Identifier, Import[]> CLASSES =
      new ImmutableMap.Builder<Identifier, Import[]>()
          .put(
              new Identifier("VK_QUOTEDBL"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_QUOTEDBL", true),
              })
          .put(
              new Identifier("CertificateFactorySpi"),
              new Import[] {
                newImport("java.security.cert.CertificateFactorySpi", false),
              })
          .put(
              new Identifier("summarizingInt"),
              new Import[] {
                newImport("java.util.stream.Collectors.summarizingInt", true),
              })
          .put(
              new Identifier("WEEK_OF_MONTH"),
              new Import[] {
                newImport("java.text.DateFormat.Field.WEEK_OF_MONTH", true),
                newImport("java.util.Calendar.WEEK_OF_MONTH", true),
              })
          .put(
              new Identifier("PreferencesFactory"),
              new Import[] {
                newImport("java.util.prefs.PreferencesFactory", false),
              })
          .put(
              new Identifier("isDescendingFrom"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.isDescendingFrom", true),
              })
          .put(
              new Identifier("setOwner"),
              new Import[] {
                newImport("java.nio.file.Files.setOwner", true),
              })
          .put(
              new Identifier("OrientationRequested"),
              new Import[] {
                newImport("javax.print.attribute.standard.OrientationRequested", false),
              })
          .put(
              new Identifier("OpenDataException"),
              new Import[] {
                newImport("javax.management.openmbean.OpenDataException", false),
              })
          .put(
              new Identifier("nextOrSame"),
              new Import[] {
                newImport("java.time.temporal.TemporalAdjusters.nextOrSame", true),
              })
          .put(
              new Identifier("InitialLdapContext"),
              new Import[] {
                newImport("javax.naming.ldap.InitialLdapContext", false),
              })
          .put(
              new Identifier("SynthButtonUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthButtonUI", false),
              })
          .put(
              new Identifier("MAXBQUALSIZE"),
              new Import[] {
                newImport("javax.transaction.xa.Xid.MAXBQUALSIZE", true),
              })
          .put(
              new Identifier("MessageDigest"),
              new Import[] {
                newImport("java.security.MessageDigest", false),
              })
          .put(
              new Identifier("typePredBasic"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.typePredBasic", true),
              })
          .put(
              new Identifier("KeySelectionManager"),
              new Import[] {
                newImport("javax.swing.JComboBox.KeySelectionManager", false),
              })
          .put(
              new Identifier("showConfirmDialog"),
              new Import[] {
                newImport("javax.swing.JOptionPane.showConfirmDialog", true),
              })
          .put(
              new Identifier("SecureRandom"),
              new Import[] {
                newImport("java.security.SecureRandom", false),
              })
          .put(
              new Identifier("SecretKeyEntry"),
              new Import[] {
                newImport("java.security.KeyStore.SecretKeyEntry", false),
              })
          .put(
              new Identifier("getPrimitiveArrayType"),
              new Import[] {
                newImport("javax.management.openmbean.ArrayType.getPrimitiveArrayType", true),
              })
          .put(
              new Identifier("DatatypeConverter"),
              new Import[] {
                newImport("javax.xml.bind.DatatypeConverter", false),
              })
          .put(
              new Identifier("SAVE_FILE"),
              new Import[] {
                newImport("java.awt.Event.SAVE_FILE", true),
              })
          .put(
              new Identifier("PropertyVetoException"),
              new Import[] {
                newImport("java.beans.PropertyVetoException", false),
              })
          .put(
              new Identifier("ORIYA"),
              new Import[] {
                newImport("java.awt.font.NumericShaper.ORIYA", true),
                newImport("java.lang.Character.UnicodeBlock.ORIYA", true),
              })
          .put(
              new Identifier("SOAP_VERSIONMISMATCH_FAULT"),
              new Import[] {
                newImport("javax.xml.soap.SOAPConstants.SOAP_VERSIONMISMATCH_FAULT", true),
              })
          .put(
              new Identifier("size"),
              new Import[] {
                newImport("java.nio.file.Files.size", true),
              })
          .put(
              new Identifier("URLPermission"),
              new Import[] {
                newImport("java.net.URLPermission", false),
              })
          .put(
              new Identifier("getWriterFileSuffixes"),
              new Import[] {
                newImport("javax.imageio.ImageIO.getWriterFileSuffixes", true),
              })
          .put(
              new Identifier("InvalidApplicationException"),
              new Import[] {
                newImport("javax.management.InvalidApplicationException", false),
              })
          .put(
              new Identifier("getLogManager"),
              new Import[] {
                newImport("java.util.logging.LogManager.getLogManager", true),
              })
          .put(
              new Identifier("ShortBuffer"),
              new Import[] {
                newImport("java.nio.ShortBuffer", false),
              })
          .put(
              new Identifier("icHdrProfileID"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icHdrProfileID", true),
              })
          .put(
              new Identifier("FieldView"),
              new Import[] {
                newImport("javax.swing.text.FieldView", false),
              })
          .put(
              new Identifier("AddressingFeature"),
              new Import[] {
                newImport("javax.xml.ws.soap.AddressingFeature", false),
              })
          .put(
              new Identifier("UnknownServiceException"),
              new Import[] {
                newImport("java.net.UnknownServiceException", false),
              })
          .put(
              new Identifier("PKIXReason"),
              new Import[] {
                newImport("java.security.cert.PKIXReason", false),
              })
          .put(
              new Identifier("DataHandler"),
              new Import[] {
                newImport("javax.activation.DataHandler", false),
              })
          .put(
              new Identifier("WrongTransaction"),
              new Import[] {
                newImport("org.omg.CORBA.WrongTransaction", false),
              })
          .put(
              new Identifier("ObjectReferenceFactoryHolder"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.ObjectReferenceFactoryHolder", false),
              })
          .put(
              new Identifier("synchronizedView"),
              new Import[] {
                newImport("javax.print.attribute.AttributeSetUtilities.synchronizedView", true),
              })
          .put(
              new Identifier("TMENDRSCAN"),
              new Import[] {
                newImport("javax.transaction.xa.XAResource.TMENDRSCAN", true),
              })
          .put(
              new Identifier("createValueHandler"),
              new Import[] {
                newImport("javax.rmi.CORBA.Util.createValueHandler", true),
              })
          .put(
              new Identifier("RespectBindingFeature"),
              new Import[] {
                newImport("javax.xml.ws.RespectBindingFeature", false),
              })
          .put(
              new Identifier("ObjectReferenceTemplateHelper"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.ObjectReferenceTemplateHelper", false),
              })
          .put(
              new Identifier("DESedeKeySpec"),
              new Import[] {
                newImport("javax.crypto.spec.DESedeKeySpec", false),
              })
          .put(
              new Identifier("GapContent"),
              new Import[] {
                newImport("javax.swing.text.GapContent", false),
              })
          .put(
              new Identifier("OverlappingFileLockException"),
              new Import[] {
                newImport("java.nio.channels.OverlappingFileLockException", false),
              })
          .put(
              new Identifier("COMPONENT_MOVED"),
              new Import[] {
                newImport("java.awt.event.ComponentEvent.COMPONENT_MOVED", true),
              })
          .put(
              new Identifier("CJK_COMPATIBILITY_FORMS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.CJK_COMPATIBILITY_FORMS", true),
              })
          .put(
              new Identifier("_USE_ACTIVE_OBJECT_MAP_ONLY"),
              new Import[] {
                newImport(
                    "org.omg.PortableServer.RequestProcessingPolicyValue._USE_ACTIVE_OBJECT_MAP_ONLY",
                    true),
              })
          .put(
              new Identifier("MULTISELECTABLE"),
              new Import[] {
                newImport("javax.accessibility.AccessibleState.MULTISELECTABLE", true),
              })
          .put(
              new Identifier("getLoggingMXBean"),
              new Import[] {
                newImport("java.util.logging.LogManager.getLoggingMXBean", true),
              })
          .put(
              new Identifier("InvalidKeyException"),
              new Import[] {
                newImport("java.security.InvalidKeyException", false),
                newImport("javax.management.openmbean.InvalidKeyException", false),
              })
          .put(
              new Identifier("JarFile"),
              new Import[] {
                newImport("java.util.jar.JarFile", false),
              })
          .put(
              new Identifier("CheckedInputStream"),
              new Import[] {
                newImport("java.util.zip.CheckedInputStream", false),
              })
          .put(
              new Identifier("TEXT_PLAIN_UTF_16BE"),
              new Import[] {
                newImport("javax.print.DocFlavor.BYTE_ARRAY.TEXT_PLAIN_UTF_16BE", true),
                newImport("javax.print.DocFlavor.INPUT_STREAM.TEXT_PLAIN_UTF_16BE", true),
                newImport("javax.print.DocFlavor.URL.TEXT_PLAIN_UTF_16BE", true),
              })
          .put(
              new Identifier("AtomicLong"),
              new Import[] {
                newImport("java.util.concurrent.atomic.AtomicLong", false),
              })
          .put(
              new Identifier("SELECTED_FILE_CHANGED_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JFileChooser.SELECTED_FILE_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("ComponentView"),
              new Import[] {
                newImport("javax.swing.text.ComponentView", false),
              })
          .put(
              new Identifier("isBmpCodePoint"),
              new Import[] {
                newImport("java.lang.Character.isBmpCodePoint", true),
              })
          .put(
              new Identifier("RegisterableService"),
              new Import[] {
                newImport("javax.imageio.spi.RegisterableService", false),
              })
          .put(
              new Identifier("InternalFrameAdapter"),
              new Import[] {
                newImport("javax.swing.event.InternalFrameAdapter", false),
              })
          .put(
              new Identifier("isTransient"),
              new Import[] {
                newImport("java.lang.reflect.Modifier.isTransient", true),
              })
          .put(
              new Identifier("ElementKindVisitor7"),
              new Import[] {
                newImport("javax.lang.model.util.ElementKindVisitor7", false),
              })
          .put(
              new Identifier("ElementKindVisitor6"),
              new Import[] {
                newImport("javax.lang.model.util.ElementKindVisitor6", false),
              })
          .put(
              new Identifier("ElementKindVisitor8"),
              new Import[] {
                newImport("javax.lang.model.util.ElementKindVisitor8", false),
              })
          .put(
              new Identifier("Comparable"),
              new Import[] {
                newImport("java.lang.Comparable", false),
              })
          .put(
              new Identifier("ParameterStyle"),
              new Import[] {
                newImport("javax.jws.soap.SOAPBinding.ParameterStyle", false),
              })
          .put(
              new Identifier("RowSetEvent"),
              new Import[] {
                newImport("javax.sql.RowSetEvent", false),
              })
          .put(
              new Identifier("icSigColorantOrderTag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigColorantOrderTag", true),
              })
          .put(
              new Identifier("GarbageCollectorMXBean"),
              new Import[] {
                newImport("java.lang.management.GarbageCollectorMXBean", false),
              })
          .put(
              new Identifier("Transmitter"),
              new Import[] {
                newImport("javax.sound.midi.Transmitter", false),
              })
          .put(
              new Identifier("UIManager"),
              new Import[] {
                newImport("javax.swing.UIManager", false),
              })
          .put(
              new Identifier("functionReturn"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.functionReturn", true),
              })
          .put(
              new Identifier("invokeLater"),
              new Import[] {
                newImport("java.awt.EventQueue.invokeLater", true),
                newImport("javax.swing.SwingUtilities.invokeLater", true),
              })
          .put(
              new Identifier("replaceUIActionMap"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.replaceUIActionMap", true),
              })
          .put(
              new Identifier("Checkbox"),
              new Import[] {
                newImport("java.awt.Checkbox", false),
              })
          .put(
              new Identifier("OPTIONS_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JOptionPane.OPTIONS_PROPERTY", true),
              })
          .put(
              new Identifier("getDimension"),
              new Import[] {
                newImport("javax.swing.UIManager.getDimension", true),
              })
          .put(
              new Identifier("isExecutable"),
              new Import[] {
                newImport("java.nio.file.Files.isExecutable", true),
              })
          .put(
              new Identifier("WebResult"),
              new Import[] {
                newImport("javax.jws.WebResult", false),
              })
          .put(
              new Identifier("parseInteger"),
              new Import[] {
                newImport("javax.xml.bind.DatatypeConverter.parseInteger", true),
              })
          .put(
              new Identifier("BasicProgressBarUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicProgressBarUI", false),
              })
          .put(
              new Identifier("MessageType"),
              new Import[] {
                newImport("java.awt.TrayIcon.MessageType", false),
              })
          .put(
              new Identifier("ContentHandlerFactory"),
              new Import[] {
                newImport("java.net.ContentHandlerFactory", false),
              })
          .put(
              new Identifier("ZoneOffsetTransitionRule"),
              new Import[] {
                newImport("java.time.zone.ZoneOffsetTransitionRule", false),
              })
          .put(
              new Identifier("LabelView"),
              new Import[] {
                newImport("javax.swing.text.LabelView", false),
              })
          .put(
              new Identifier("TAG_POST"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_POST", true),
              })
          .put(
              new Identifier("IIOException"),
              new Import[] {
                newImport("javax.imageio.IIOException", false),
              })
          .put(
              new Identifier("ServantLocator"),
              new Import[] {
                newImport("org.omg.PortableServer.ServantLocator", false),
              })
          .put(
              new Identifier("AbstractIntSpliterator"),
              new Import[] {
                newImport("java.util.Spliterators.AbstractIntSpliterator", false),
              })
          .put(
              new Identifier("HandshakeCompletedListener"),
              new Import[] {
                newImport("javax.net.ssl.HandshakeCompletedListener", false),
              })
          .put(
              new Identifier("PADDING_LEFT"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.PADDING_LEFT", true),
              })
          .put(
              new Identifier("BufferPoolMXBean"),
              new Import[] {
                newImport("java.lang.management.BufferPoolMXBean", false),
              })
          .put(
              new Identifier("ObjID"),
              new Import[] {
                newImport("java.rmi.server.ObjID", false),
              })
          .put(
              new Identifier("SheetCollate"),
              new Import[] {
                newImport("javax.print.attribute.standard.SheetCollate", false),
              })
          .put(
              new Identifier("BigDecimalLayoutForm"),
              new Import[] {
                newImport("java.util.Formatter.BigDecimalLayoutForm", false),
              })
          .put(
              new Identifier("SHA512"),
              new Import[] {
                newImport("java.security.spec.MGF1ParameterSpec.SHA512", true),
                newImport("javax.xml.crypto.dsig.DigestMethod.SHA512", true),
              })
          .put(
              new Identifier("AlgorithmParameters"),
              new Import[] {
                newImport("java.security.AlgorithmParameters", false),
              })
          .put(
              new Identifier("createUnresolved"),
              new Import[] {
                newImport("java.net.InetSocketAddress.createUnresolved", true),
              })
          .put(
              new Identifier("CertificateNotYetValidException"),
              new Import[] {
                newImport("java.security.cert.CertificateNotYetValidException", false),
                newImport("javax.security.cert.CertificateNotYetValidException", false),
              })
          .put(
              new Identifier("NavigableSet"),
              new Import[] {
                newImport("java.util.NavigableSet", false),
              })
          .put(
              new Identifier("TYPE_INT_ARGB_PRE"),
              new Import[] {
                newImport("java.awt.image.BufferedImage.TYPE_INT_ARGB_PRE", true),
              })
          .put(
              new Identifier("SAURASHTRA"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.SAURASHTRA", true),
              })
          .put(
              new Identifier("AlgorithmParameterGenerator"),
              new Import[] {
                newImport("java.security.AlgorithmParameterGenerator", false),
              })
          .put(
              new Identifier("DirectoryNotEmptyException"),
              new Import[] {
                newImport("java.nio.file.DirectoryNotEmptyException", false),
              })
          .put(
              new Identifier("SOAPMessageHandlers"),
              new Import[] {
                newImport("javax.jws.soap.SOAPMessageHandlers", false),
              })
          .put(
              new Identifier("MetalLookAndFeel"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalLookAndFeel", false),
              })
          .put(
              new Identifier("ListPainter"),
              new Import[] {
                newImport("javax.swing.text.html.StyleSheet.ListPainter", false),
              })
          .put(
              new Identifier("XmlAnyAttribute"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlAnyAttribute", false),
              })
          .put(
              new Identifier("MENU_TEXT"),
              new Import[] {
                newImport("java.awt.SystemColor.MENU_TEXT", true),
              })
          .put(
              new Identifier("VirtualMachineError"),
              new Import[] {
                newImport("java.lang.VirtualMachineError", false),
              })
          .put(
              new Identifier("Skeleton"),
              new Import[] {
                newImport("java.rmi.server.Skeleton", false),
              })
          .put(
              new Identifier("ComponentAdapter"),
              new Import[] {
                newImport("java.awt.event.ComponentAdapter", false),
              })
          .put(
              new Identifier("singleton"),
              new Import[] {
                newImport("java.util.Collections.singleton", true),
              })
          .put(
              new Identifier("ParagraphAttribute"),
              new Import[] {
                newImport("javax.swing.text.AttributeSet.ParagraphAttribute", false),
              })
          .put(
              new Identifier("JAXB_ENCODING"),
              new Import[] {
                newImport("javax.xml.bind.Marshaller.JAXB_ENCODING", true),
              })
          .put(
              new Identifier("TaggedProfileHelper"),
              new Import[] {
                newImport("org.omg.IOP.TaggedProfileHelper", false),
              })
          .put(
              new Identifier("ATTEMPTED"),
              new Import[] {
                newImport("javax.print.attribute.standard.PDLOverrideSupported.ATTEMPTED", true),
              })
          .put(
              new Identifier("NamedNodeMap"),
              new Import[] {
                newImport("org.w3c.dom.NamedNodeMap", false),
              })
          .put(
              new Identifier("ReferenceQueue"),
              new Import[] {
                newImport("java.lang.ref.ReferenceQueue", false),
              })
          .put(
              new Identifier("getDeepestComponentAt"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.getDeepestComponentAt", true),
              })
          .put(
              new Identifier("GLASS_PANE"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.GLASS_PANE", true),
              })
          .put(
              new Identifier("GenericArrayType"),
              new Import[] {
                newImport("java.lang.reflect.GenericArrayType", false),
              })
          .put(
              new Identifier("DEFAULT_MODALITY_TYPE"),
              new Import[] {
                newImport("java.awt.Dialog.DEFAULT_MODALITY_TYPE", true),
              })
          .put(
              new Identifier("ByteBuffer"),
              new Import[] {
                newImport("java.nio.ByteBuffer", false),
              })
          .put(
              new Identifier("InitialContext"),
              new Import[] {
                newImport("javax.naming.InitialContext", false),
              })
          .put(
              new Identifier("Subject"),
              new Import[] {
                newImport("javax.security.auth.Subject", false),
              })
          .put(
              new Identifier("DEFLATE"),
              new Import[] {
                newImport("javax.print.attribute.standard.Compression.DEFLATE", true),
              })
          .put(
              new Identifier("AbstractBorder"),
              new Import[] {
                newImport("javax.swing.border.AbstractBorder", false),
              })
          .put(
              new Identifier("UnknownTag"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.UnknownTag", false),
              })
          .put(
              new Identifier("CONCUR_UPDATABLE"),
              new Import[] {
                newImport("java.sql.ResultSet.CONCUR_UPDATABLE", true),
              })
          .put(
              new Identifier("PrinterGraphics"),
              new Import[] {
                newImport("java.awt.print.PrinterGraphics", false),
              })
          .put(
              new Identifier("AccessController"),
              new Import[] {
                newImport("java.security.AccessController", false),
              })
          .put(
              new Identifier("JDesktopIcon"),
              new Import[] {
                newImport("javax.swing.JInternalFrame.JDesktopIcon", false),
              })
          .put(
              new Identifier("_TRANSIENT"),
              new Import[] {
                newImport("org.omg.PortableServer.LifespanPolicyValue._TRANSIENT", true),
              })
          .put(
              new Identifier("JIS"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSize.JIS", false),
              })
          .put(
              new Identifier("FATAL_ERROR"),
              new Import[] {
                newImport("javax.xml.bind.ValidationEvent.FATAL_ERROR", true),
              })
          .put(
              new Identifier("TAG_INTERNET_IOP"),
              new Import[] {
                newImport("org.omg.IOP.TAG_INTERNET_IOP", false),
              })
          .put(
              new Identifier("ProxyLazyValue"),
              new Import[] {
                newImport("javax.swing.UIDefaults.ProxyLazyValue", false),
              })
          .put(
              new Identifier("procedureColumnReturn"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.procedureColumnReturn", true),
              })
          .put(
              new Identifier("MULTI_SELECTION_ENABLED_CHANGED_PROPERTY"),
              new Import[] {
                newImport(
                    "javax.swing.JFileChooser.MULTI_SELECTION_ENABLED_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("DynFixed"),
              new Import[] {
                newImport("org.omg.CORBA.DynFixed", false),
                newImport("org.omg.DynamicAny.DynFixed", false),
              })
          .put(
              new Identifier("ParameterModeHolder"),
              new Import[] {
                newImport("org.omg.CORBA.ParameterModeHolder", false),
              })
          .put(
              new Identifier("MetalMenuBarUI"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalMenuBarUI", false),
              })
          .put(
              new Identifier("ThreadPoolExecutor"),
              new Import[] {
                newImport("java.util.concurrent.ThreadPoolExecutor", false),
              })
          .put(
              new Identifier("JOB_COMPLETED_WITH_ERRORS"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.JobStateReason.JOB_COMPLETED_WITH_ERRORS",
                    true),
              })
          .put(
              new Identifier("ServerRuntimeException"),
              new Import[] {
                newImport("java.rmi.ServerRuntimeException", false),
              })
          .put(
              new Identifier("DATATYPE_STRING"),
              new Import[] {
                newImport("javax.imageio.metadata.IIOMetadataFormat.DATATYPE_STRING", true),
              })
          .put(
              new Identifier("TYPE_Yxy"),
              new Import[] {
                newImport("java.awt.color.ColorSpace.TYPE_Yxy", true),
              })
          .put(
              new Identifier("ActivationMonitor"),
              new Import[] {
                newImport("java.rmi.activation.ActivationMonitor", false),
              })
          .put(
              new Identifier("isMXBeanInterface"),
              new Import[] {
                newImport("javax.management.JMX.isMXBeanInterface", true),
              })
          .put(
              new Identifier("PARAM_OUT"),
              new Import[] {
                newImport("org.omg.CORBA.ParameterMode.PARAM_OUT", true),
              })
          .put(
              new Identifier("deepToString"),
              new Import[] {
                newImport("java.util.Arrays.deepToString", true),
              })
          .put(
              new Identifier("newWriter"),
              new Import[] {
                newImport("java.nio.channels.Channels.newWriter", true),
              })
          .put(
              new Identifier("ECPrivateKeySpec"),
              new Import[] {
                newImport("java.security.spec.ECPrivateKeySpec", false),
              })
          .put(
              new Identifier("copySign"),
              new Import[] {
                newImport("java.lang.Math.copySign", true),
                newImport("java.lang.StrictMath.copySign", true),
              })
          .put(
              new Identifier("XMLEventConsumer"),
              new Import[] {
                newImport("javax.xml.stream.util.XMLEventConsumer", false),
              })
          .put(
              new Identifier("ACTIVE_CAPTION_TEXT"),
              new Import[] {
                newImport("java.awt.SystemColor.ACTIVE_CAPTION_TEXT", true),
              })
          .put(
              new Identifier("ImageTranscoder"),
              new Import[] {
                newImport("javax.imageio.ImageTranscoder", false),
              })
          .put(
              new Identifier("getExtendedKeyCodeForChar"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.getExtendedKeyCodeForChar", true),
              })
          .put(
              new Identifier("getTreeFolderIcon"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalIconFactory.getTreeFolderIcon", true),
              })
          .put(
              new Identifier("TableColumnModel"),
              new Import[] {
                newImport("javax.swing.table.TableColumnModel", false),
              })
          .put(
              new Identifier("NULL_NS_URI"),
              new Import[] {
                newImport("javax.xml.XMLConstants.NULL_NS_URI", true),
              })
          .put(
              new Identifier("PartialResultException"),
              new Import[] {
                newImport("javax.naming.PartialResultException", false),
              })
          .put(
              new Identifier("CENNAM"),
              new Import[] {
                newImport("java.util.jar.JarEntry.CENNAM", true),
                newImport("java.util.jar.JarFile.CENNAM", true),
                newImport("java.util.jar.JarInputStream.CENNAM", true),
                newImport("java.util.jar.JarOutputStream.CENNAM", true),
                newImport("java.util.zip.ZipEntry.CENNAM", true),
                newImport("java.util.zip.ZipFile.CENNAM", true),
                newImport("java.util.zip.ZipInputStream.CENNAM", true),
                newImport("java.util.zip.ZipOutputStream.CENNAM", true),
              })
          .put(
              new Identifier("TAG_JAVA_CODEBASE"),
              new Import[] {
                newImport("org.omg.IOP.TAG_JAVA_CODEBASE", false),
              })
          .put(
              new Identifier("AbstractMap"),
              new Import[] {
                newImport("java.util.AbstractMap", false),
              })
          .put(
              new Identifier("UNSELECTED_CONVERTED_TEXT_HIGHLIGHT"),
              new Import[] {
                newImport(
                    "java.awt.im.InputMethodHighlight.UNSELECTED_CONVERTED_TEXT_HIGHLIGHT", true),
              })
          .put(
              new Identifier("NA_9x12_ENVELOPE"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSize.NA.NA_9x12_ENVELOPE", true),
              })
          .put(
              new Identifier("defaultManager"),
              new Import[] {
                newImport("javax.swing.MenuSelectionManager.defaultManager", true),
              })
          .put(
              new Identifier("AtomicLongFieldUpdater"),
              new Import[] {
                newImport("java.util.concurrent.atomic.AtomicLongFieldUpdater", false),
              })
          .put(
              new Identifier("Alignment"),
              new Import[] {
                newImport("javax.swing.GroupLayout.Alignment", false),
                newImport("javax.swing.text.StyleConstants.Alignment", true),
              })
          .put(
              new Identifier("VALIDATION_ERR"),
              new Import[] {
                newImport("org.w3c.dom.DOMException.VALIDATION_ERR", true),
              })
          .put(
              new Identifier("ColorModel"),
              new Import[] {
                newImport("java.awt.image.ColorModel", false),
              })
          .put(
              new Identifier("Checksum"),
              new Import[] {
                newImport("java.util.zip.Checksum", false),
              })
          .put(
              new Identifier("TYPE_3CLR"),
              new Import[] {
                newImport("java.awt.color.ColorSpace.TYPE_3CLR", true),
              })
          .put(
              new Identifier("StackOverflowError"),
              new Import[] {
                newImport("java.lang.StackOverflowError", false),
              })
          .put(
              new Identifier("between"),
              new Import[] {
                newImport("java.time.Duration.between", true),
                newImport("java.time.Period.between", true),
                newImport("java.time.chrono.ChronoPeriod.between", true),
                newImport("javax.management.Query.between", true),
              })
          .put(
              new Identifier("BORDER_RIGHT_COLOR"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.BORDER_RIGHT_COLOR", true),
              })
          .put(
              new Identifier("ElementSpec"),
              new Import[] {
                newImport("javax.swing.text.DefaultStyledDocument.ElementSpec", false),
              })
          .put(
              new Identifier("getInstanceStrong"),
              new Import[] {
                newImport("java.security.SecureRandom.getInstanceStrong", true),
              })
          .put(
              new Identifier("VK_BACK_SPACE"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_BACK_SPACE", true),
              })
          .put(
              new Identifier("ListDataListener"),
              new Import[] {
                newImport("javax.swing.event.ListDataListener", false),
              })
          .put(
              new Identifier("ScatteringByteChannel"),
              new Import[] {
                newImport("java.nio.channels.ScatteringByteChannel", false),
              })
          .put(
              new Identifier("UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED"),
              new Import[] {
                newImport(
                    "java.lang.Character.UnicodeBlock.UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED",
                    true),
              })
          .put(
              new Identifier("ServiceLoader"),
              new Import[] {
                newImport("java.util.ServiceLoader", false),
              })
          .put(
              new Identifier("getSaslServerFactories"),
              new Import[] {
                newImport("javax.security.sasl.Sasl.getSaslServerFactories", true),
              })
          .put(
              new Identifier("Resources"),
              new Import[] {
                newImport("javax.annotation.Resources", false),
              })
          .put(
              new Identifier("logicalOr"),
              new Import[] {
                newImport("java.lang.Boolean.logicalOr", true),
              })
          .put(
              new Identifier("getAlgorithms"),
              new Import[] {
                newImport("java.security.Security.getAlgorithms", true),
              })
          .put(
              new Identifier("CompoundBorderUIResource"),
              new Import[] {
                newImport("javax.swing.plaf.BorderUIResource.CompoundBorderUIResource", false),
              })
          .put(
              new Identifier("StdDCChrominance"),
              new Import[] {
                newImport("javax.imageio.plugins.jpeg.JPEGHuffmanTable.StdDCChrominance", true),
              })
          .put(
              new Identifier("AttachmentMarshaller"),
              new Import[] {
                newImport("javax.xml.bind.attachment.AttachmentMarshaller", false),
              })
          .put(
              new Identifier("SynthTableUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthTableUI", false),
              })
          .put(
              new Identifier("PolicyTypeHelper"),
              new Import[] {
                newImport("org.omg.CORBA.PolicyTypeHelper", false),
              })
          .put(
              new Identifier("tk_abstract_interface"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind.tk_abstract_interface", true),
              })
          .put(
              new Identifier("FOCUS"),
              new Import[] {
                newImport("javax.swing.plaf.synth.ColorType.FOCUS", true),
              })
          .put(
              new Identifier("PERSONAL"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.PERSONAL", true),
              })
          .put(
              new Identifier("DataBufferShort"),
              new Import[] {
                newImport("java.awt.image.DataBufferShort", false),
              })
          .put(
              new Identifier("AccessibleTableModelChange"),
              new Import[] {
                newImport("javax.accessibility.AccessibleTableModelChange", false),
              })
          .put(
              new Identifier("CANVAS"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.CANVAS", true),
              })
          .put(
              new Identifier("ResolutionSyntax"),
              new Import[] {
                newImport("javax.print.attribute.ResolutionSyntax", false),
              })
          .put(
              new Identifier("AppletStub"),
              new Import[] {
                newImport("java.applet.AppletStub", false),
              })
          .put(
              new Identifier("EventListener"),
              new Import[] {
                newImport("java.util.EventListener", false),
                newImport("org.w3c.dom.events.EventListener", false),
              })
          .put(
              new Identifier("JAXB_FRAGMENT"),
              new Import[] {
                newImport("javax.xml.bind.Marshaller.JAXB_FRAGMENT", true),
              })
          .put(
              new Identifier("JMRuntimeException"),
              new Import[] {
                newImport("javax.management.JMRuntimeException", false),
              })
          .put(
              new Identifier("INDEFINITE_LIFETIME"),
              new Import[] {
                newImport("org.ietf.jgss.GSSContext.INDEFINITE_LIFETIME", true),
                newImport("org.ietf.jgss.GSSCredential.INDEFINITE_LIFETIME", true),
              })
          .put(
              new Identifier("ContainerEvent"),
              new Import[] {
                newImport("java.awt.event.ContainerEvent", false),
              })
          .put(
              new Identifier("referenceKindToString"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandleInfo.referenceKindToString", true),
              })
          .put(
              new Identifier("DomainManagerOperations"),
              new Import[] {
                newImport("org.omg.CORBA.DomainManagerOperations", false),
              })
          .put(
              new Identifier("SEG_QUADTO"),
              new Import[] {
                newImport("java.awt.geom.PathIterator.SEG_QUADTO", true),
              })
          .put(
              new Identifier("CompoundEdit"),
              new Import[] {
                newImport("javax.swing.undo.CompoundEdit", false),
              })
          .put(
              new Identifier("Reference"),
              new Import[] {
                newImport("java.lang.ref.Reference", false),
                newImport("javax.naming.Reference", false),
                newImport("javax.xml.crypto.dsig.Reference", false),
              })
          .put(
              new Identifier("createEmptyBorder"),
              new Import[] {
                newImport("javax.swing.BorderFactory.createEmptyBorder", true),
              })
          .put(
              new Identifier("bestRowPseudo"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.bestRowPseudo", true),
              })
          .put(
              new Identifier("AlignmentAction"),
              new Import[] {
                newImport("javax.swing.text.StyledEditorKit.AlignmentAction", false),
              })
          .put(
              new Identifier("setLastModifiedTime"),
              new Import[] {
                newImport("java.nio.file.Files.setLastModifiedTime", true),
              })
          .put(
              new Identifier("copyOf"),
              new Import[] {
                newImport("java.util.Arrays.copyOf", true),
                newImport("java.util.EnumSet.copyOf", true),
              })
          .put(
              new Identifier("DialogTypeSelection"),
              new Import[] {
                newImport("javax.print.attribute.standard.DialogTypeSelection", false),
              })
          .put(
              new Identifier("getIcon"),
              new Import[] {
                newImport("javax.swing.UIManager.getIcon", true),
                newImport("javax.swing.text.StyleConstants.getIcon", true),
              })
          .put(
              new Identifier("IMG_ALIGN_MIDDLE"),
              new Import[] {
                newImport("javax.swing.text.html.HTMLEditorKit.IMG_ALIGN_MIDDLE", true),
              })
          .put(
              new Identifier("POLY_PRESSURE"),
              new Import[] {
                newImport("javax.sound.midi.ShortMessage.POLY_PRESSURE", true),
              })
          .put(
              new Identifier("SequenceInputStream"),
              new Import[] {
                newImport("java.io.SequenceInputStream", false),
              })
          .put(
              new Identifier("JMX"),
              new Import[] {
                newImport("javax.management.JMX", false),
              })
          .put(
              new Identifier("TYPE_INT_RGB"),
              new Import[] {
                newImport("java.awt.image.BufferedImage.TYPE_INT_RGB", true),
              })
          .put(
              new Identifier("VALUE_INTERPOLATION_NEAREST_NEIGHBOR"),
              new Import[] {
                newImport("java.awt.RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR", true),
              })
          .put(
              new Identifier("SONG_SELECT"),
              new Import[] {
                newImport("javax.sound.midi.ShortMessage.SONG_SELECT", true),
              })
          .put(
              new Identifier("E_RESIZE_CURSOR"),
              new Import[] {
                newImport("java.awt.Cursor.E_RESIZE_CURSOR", true),
                newImport("java.awt.Frame.E_RESIZE_CURSOR", true),
              })
          .put(
              new Identifier("AttributeInUseException"),
              new Import[] {
                newImport("javax.naming.directory.AttributeInUseException", false),
              })
          .put(
              new Identifier("NA_NUMBER_11_ENVELOPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.NA_NUMBER_11_ENVELOPE", true),
                newImport(
                    "javax.print.attribute.standard.MediaSizeName.NA_NUMBER_11_ENVELOPE", true),
                newImport(
                    "javax.print.attribute.standard.MediaSize.NA.NA_NUMBER_11_ENVELOPE", true),
              })
          .put(
              new Identifier("Policy"),
              new Import[] {
                newImport("java.security.Policy", false),
                newImport("javax.security.auth.Policy", false),
                newImport("org.omg.CORBA.Policy", false),
              })
          .put(
              new Identifier("managedBlock"),
              new Import[] {
                newImport("java.util.concurrent.ForkJoinPool.managedBlock", true),
              })
          .put(
              new Identifier("LazyValue"),
              new Import[] {
                newImport("javax.swing.UIDefaults.LazyValue", false),
              })
          .put(
              new Identifier("CertificateParsingException"),
              new Import[] {
                newImport("java.security.cert.CertificateParsingException", false),
                newImport("javax.security.cert.CertificateParsingException", false),
              })
          .put(
              new Identifier("AttributeContext"),
              new Import[] {
                newImport("javax.swing.text.AbstractDocument.AttributeContext", false),
              })
          .put(
              new Identifier("DATE_EDITOR"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.DATE_EDITOR", true),
              })
          .put(
              new Identifier("Mixer"),
              new Import[] {
                newImport("javax.sound.sampled.Mixer", false),
              })
          .put(
              new Identifier("ForkJoinTask"),
              new Import[] {
                newImport("java.util.concurrent.ForkJoinTask", false),
              })
          .put(
              new Identifier("BeanContextServiceRevokedEvent"),
              new Import[] {
                newImport("java.beans.beancontext.BeanContextServiceRevokedEvent", false),
              })
          .put(
              new Identifier("ACCESSIBLE_CHILD_PROPERTY"),
              new Import[] {
                newImport("javax.accessibility.AccessibleContext.ACCESSIBLE_CHILD_PROPERTY", true),
              })
          .put(
              new Identifier("isJavaLetter"),
              new Import[] {
                newImport("java.lang.Character.isJavaLetter", true),
              })
          .put(
              new Identifier("importedKeyCascade"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.importedKeyCascade", true),
              })
          .put(
              new Identifier("UnsupportedAudioFileException"),
              new Import[] {
                newImport("javax.sound.sampled.UnsupportedAudioFileException", false),
              })
          .put(
              new Identifier("InvalidName"),
              new Import[] {
                newImport("org.omg.CORBA.ORBPackage.InvalidName", false),
                newImport("org.omg.CosNaming.NamingContextPackage.InvalidName", false),
                newImport("org.omg.PortableInterceptor.ORBInitInfoPackage.InvalidName", false),
              })
          .put(
              new Identifier("computeStringWidth"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.computeStringWidth", true),
              })
          .put(
              new Identifier("Encoder"),
              new Import[] {
                newImport("java.beans.Encoder", false),
                newImport("java.util.Base64.Encoder", false),
              })
          .put(
              new Identifier("_tk_except"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind._tk_except", true),
              })
          .put(
              new Identifier("TRANSFORM"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.TRANSFORM", true),
              })
          .put(
              new Identifier("NamingException"),
              new Import[] {
                newImport("javax.naming.NamingException", false),
              })
          .put(
              new Identifier("ACCESSIBLE_TABLE_COLUMN_HEADER_CHANGED"),
              new Import[] {
                newImport(
                    "javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_COLUMN_HEADER_CHANGED",
                    true),
              })
          .put(
              new Identifier("SYNCHRONIZED"),
              new Import[] {
                newImport("java.lang.reflect.Modifier.SYNCHRONIZED", true),
              })
          .put(
              new Identifier("RowSetWriter"),
              new Import[] {
                newImport("javax.sql.RowSetWriter", false),
              })
          .put(
              new Identifier("FORMATTED_TEXT_FIELD"),
              new Import[] {
                newImport("javax.swing.plaf.synth.Region.FORMATTED_TEXT_FIELD", true),
              })
          .put(
              new Identifier("icSigAbstractClass"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigAbstractClass", true),
              })
          .put(
              new Identifier("ValidationEventHandler"),
              new Import[] {
                newImport("javax.xml.bind.ValidationEventHandler", false),
              })
          .put(
              new Identifier("ISO_C4_ENVELOPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_C4_ENVELOPE", true),
              })
          .put(
              new Identifier("SIMPLIFIED_HANZI"),
              new Import[] {
                newImport("java.awt.im.InputSubset.SIMPLIFIED_HANZI", true),
              })
          .put(
              new Identifier("SetOfIntegerSyntax"),
              new Import[] {
                newImport("javax.print.attribute.SetOfIntegerSyntax", false),
              })
          .put(
              new Identifier("VK_DECIMAL"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_DECIMAL", true),
              })
          .put(
              new Identifier("BeanContextServiceAvailableEvent"),
              new Import[] {
                newImport("java.beans.beancontext.BeanContextServiceAvailableEvent", false),
              })
          .put(
              new Identifier("IDENTICAL"),
              new Import[] {
                newImport("java.text.Collator.IDENTICAL", true),
              })
          .put(
              new Identifier("comparing"),
              new Import[] {
                newImport("java.util.Comparator.comparing", true),
              })
          .put(
              new Identifier("SynthProgressBarUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthProgressBarUI", false),
              })
          .put(
              new Identifier("IS_VALIDATING"),
              new Import[] {
                newImport("javax.xml.stream.XMLInputFactory.IS_VALIDATING", true),
              })
          .put(
              new Identifier("LongConsumer"),
              new Import[] {
                newImport("java.util.function.LongConsumer", false),
              })
          .put(
              new Identifier("NetPermission"),
              new Import[] {
                newImport("java.net.NetPermission", false),
              })
          .put(
              new Identifier("PostConstruct"),
              new Import[] {
                newImport("javax.annotation.PostConstruct", false),
              })
          .put(
              new Identifier("icSigMediaBlackPointTag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigMediaBlackPointTag", true),
              })
          .put(
              new Identifier("MouseInputAdapter"),
              new Import[] {
                newImport("javax.swing.event.MouseInputAdapter", false),
              })
          .put(
              new Identifier("HandshakeStatus"),
              new Import[] {
                newImport("javax.net.ssl.SSLEngineResult.HandshakeStatus", false),
              })
          .put(
              new Identifier("BasicAttributes"),
              new Import[] {
                newImport("javax.naming.directory.BasicAttributes", false),
              })
          .put(
              new Identifier("PALETTE_LAYER"),
              new Import[] {
                newImport("javax.swing.JLayeredPane.PALETTE_LAYER", true),
              })
          .put(
              new Identifier("BindingTypeHelper"),
              new Import[] {
                newImport("org.omg.CosNaming.BindingTypeHelper", false),
              })
          .put(
              new Identifier("X509Extension"),
              new Import[] {
                newImport("java.security.cert.X509Extension", false),
              })
          .put(
              new Identifier("RoundRectangle2D"),
              new Import[] {
                newImport("java.awt.geom.RoundRectangle2D", false),
              })
          .put(
              new Identifier("BeanContextChild"),
              new Import[] {
                newImport("java.beans.beancontext.BeanContextChild", false),
              })
          .put(
              new Identifier("BEST_SPEED"),
              new Import[] {
                newImport("java.util.zip.Deflater.BEST_SPEED", true),
              })
          .put(
              new Identifier("ENTITY_DECLARATION"),
              new Import[] {
                newImport("javax.xml.stream.XMLStreamConstants.ENTITY_DECLARATION", true),
              })
          .put(
              new Identifier("versionColumnPseudo"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.versionColumnPseudo", true),
              })
          .put(
              new Identifier("SwingConstants"),
              new Import[] {
                newImport("javax.swing.SwingConstants", false),
              })
          .put(
              new Identifier("UndoManager"),
              new Import[] {
                newImport("javax.swing.undo.UndoManager", false),
              })
          .put(
              new Identifier("SyncResolver"),
              new Import[] {
                newImport("javax.sql.rowset.spi.SyncResolver", false),
              })
          .put(
              new Identifier("BORDER_RIGHT_WIDTH"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.BORDER_RIGHT_WIDTH", true),
              })
          .put(
              new Identifier("ICC_ProfileRGB"),
              new Import[] {
                newImport("java.awt.color.ICC_ProfileRGB", false),
              })
          .put(
              new Identifier("AccessibleContext"),
              new Import[] {
                newImport("javax.accessibility.AccessibleContext", false),
              })
          .put(
              new Identifier("getShort"),
              new Import[] {
                newImport("java.lang.reflect.Array.getShort", true),
              })
          .put(
              new Identifier("DirStateFactory"),
              new Import[] {
                newImport("javax.naming.spi.DirStateFactory", false),
              })
          .put(
              new Identifier("EnumSet"),
              new Import[] {
                newImport("java.util.EnumSet", false),
              })
          .put(
              new Identifier("getObjectInstance"),
              new Import[] {
                newImport("javax.naming.spi.DirectoryManager.getObjectInstance", true),
                newImport("javax.naming.spi.NamingManager.getObjectInstance", true),
              })
          .put(
              new Identifier("match"),
              new Import[] {
                newImport("javax.management.Query.match", true),
              })
          .put(
              new Identifier("CanonicalizationMethod"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.CanonicalizationMethod", false),
              })
          .put(
              new Identifier("EDITBAR"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.EDITBAR", true),
              })
          .put(
              new Identifier("DATATYPEFACTORY_IMPLEMENTATION_CLASS"),
              new Import[] {
                newImport(
                    "javax.xml.datatype.DatatypeFactory.DATATYPEFACTORY_IMPLEMENTATION_CLASS",
                    true),
              })
          .put(
              new Identifier("ServantActivatorOperations"),
              new Import[] {
                newImport("org.omg.PortableServer.ServantActivatorOperations", false),
              })
          .put(
              new Identifier("ZipOutputStream"),
              new Import[] {
                newImport("java.util.zip.ZipOutputStream", false),
              })
          .put(
              new Identifier("PROCESSING_INSTRUCTION"),
              new Import[] {
                newImport("javax.xml.stream.XMLStreamConstants.PROCESSING_INSTRUCTION", true),
              })
          .put(
              new Identifier("DATASOURCE_TABLE_LOCK"),
              new Import[] {
                newImport("javax.sql.rowset.spi.SyncProvider.DATASOURCE_TABLE_LOCK", true),
              })
          .put(
              new Identifier("AccessMode"),
              new Import[] {
                newImport("java.nio.file.AccessMode", false),
              })
          .put(
              new Identifier("NameComponentHolder"),
              new Import[] {
                newImport("org.omg.CosNaming.NameComponentHolder", false),
              })
          .build();
}
