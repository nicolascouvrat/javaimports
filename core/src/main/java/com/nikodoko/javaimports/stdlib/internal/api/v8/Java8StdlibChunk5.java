// Code generated by GenerateStdlib.java. DO NOT EDIT.
package com.nikodoko.javaimports.stdlib.internal.api.v8;

import static com.nikodoko.javaimports.stdlib.internal.Stdlib.newImport;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.common.Identifier;
import com.nikodoko.javaimports.common.Import;
import java.util.Map;

public class Java8StdlibChunk5 {
  static final Map<Identifier, Import[]> CLASSES =
      new ImmutableMap.Builder<Identifier, Import[]>()
          .put(
              new Identifier("IconAttribute"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.IconAttribute", true),
              })
          .put(
              new Identifier("ENTITY_REFERENCE_NODE"),
              new Import[] {
                newImport("org.w3c.dom.Node.ENTITY_REFERENCE_NODE", true),
              })
          .put(
              new Identifier("TreeModelEvent"),
              new Import[] {
                newImport("javax.swing.event.TreeModelEvent", false),
              })
          .put(
              new Identifier("XA_OK"),
              new Import[] {
                newImport("javax.transaction.xa.XAResource.XA_OK", true),
              })
          .put(
              new Identifier("SQLTransientException"),
              new Import[] {
                newImport("java.sql.SQLTransientException", false),
              })
          .put(
              new Identifier("FINEST"),
              new Import[] {
                newImport("java.util.logging.Level.FINEST", true),
              })
          .put(
              new Identifier("uninstallBorder"),
              new Import[] {
                newImport("javax.swing.LookAndFeel.uninstallBorder", true),
              })
          .put(
              new Identifier("XA_RDONLY"),
              new Import[] {
                newImport("javax.transaction.xa.XAException.XA_RDONLY", true),
                newImport("javax.transaction.xa.XAResource.XA_RDONLY", true),
              })
          .put(
              new Identifier("LineBreakMeasurer"),
              new Import[] {
                newImport("java.awt.font.LineBreakMeasurer", false),
              })
          .put(
              new Identifier("isItalic"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.isItalic", true),
              })
          .put(
              new Identifier("UTF_16"),
              new Import[] {
                newImport("java.nio.charset.StandardCharsets.UTF_16", true),
              })
          .put(
              new Identifier("WriteLock"),
              new Import[] {
                newImport("java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock", false),
              })
          .put(
              new Identifier("LoginContext"),
              new Import[] {
                newImport("javax.security.auth.login.LoginContext", false),
              })
          .put(
              new Identifier("Consumer"),
              new Import[] {
                newImport("java.util.function.Consumer", false),
              })
          .put(
              new Identifier("getMaskForButton"),
              new Import[] {
                newImport("java.awt.event.InputEvent.getMaskForButton", true),
              })
          .put(
              new Identifier("getNumberOfButtons"),
              new Import[] {
                newImport("java.awt.MouseInfo.getNumberOfButtons", true),
              })
          .put(
              new Identifier("exp"),
              new Import[] {
                newImport("java.lang.Math.exp", true), newImport("java.lang.StrictMath.exp", true),
              })
          .put(
              new Identifier("MIDDLE"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaTray.MIDDLE", true),
              })
          .put(
              new Identifier("ONE_DAY"),
              new Import[] {
                newImport("javax.management.timer.Timer.ONE_DAY", true),
              })
          .put(
              new Identifier("ScrollBarUI"),
              new Import[] {
                newImport("javax.swing.plaf.ScrollBarUI", false),
              })
          .put(
              new Identifier("getMenuItemArrowIcon"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicIconFactory.getMenuItemArrowIcon", true),
                newImport("javax.swing.plaf.metal.MetalIconFactory.getMenuItemArrowIcon", true),
              })
          .put(
              new Identifier("TableCellRenderer"),
              new Import[] {
                newImport("javax.swing.table.TableCellRenderer", false),
              })
          .put(
              new Identifier("CurrentHolder"),
              new Import[] {
                newImport("org.omg.CORBA.CurrentHolder", false),
              })
          .put(
              new Identifier("FINER"),
              new Import[] {
                newImport("java.util.logging.Level.FINER", true),
              })
          .put(
              new Identifier("XmlAccessOrder"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlAccessOrder", false),
              })
          .put(
              new Identifier("ImageOutputStreamSpi"),
              new Import[] {
                newImport("javax.imageio.spi.ImageOutputStreamSpi", false),
              })
          .put(
              new Identifier("isSpaceChar"),
              new Import[] {
                newImport("java.lang.Character.isSpaceChar", true),
              })
          .put(
              new Identifier("AWTEventMulticaster"),
              new Import[] {
                newImport("java.awt.AWTEventMulticaster", false),
              })
          .put(
              new Identifier("CHAR_ARRAY"),
              new Import[] {
                newImport("javax.print.DocFlavor.CHAR_ARRAY", false),
              })
          .put(
              new Identifier("GraphicsEnvironment"),
              new Import[] {
                newImport("java.awt.GraphicsEnvironment", false),
              })
          .put(
              new Identifier("getLineInstance"),
              new Import[] {
                newImport("java.text.BreakIterator.getLineInstance", true),
              })
          .put(
              new Identifier("DIRECTIONALITY_NONSPACING_MARK"),
              new Import[] {
                newImport("java.lang.Character.DIRECTIONALITY_NONSPACING_MARK", true),
              })
          .put(
              new Identifier("DropTargetAdapter"),
              new Import[] {
                newImport("java.awt.dnd.DropTargetAdapter", false),
              })
          .put(
              new Identifier("GRADE_LOCK_WHEN_LOADED"),
              new Import[] {
                newImport("javax.sql.rowset.spi.SyncProvider.GRADE_LOCK_WHEN_LOADED", true),
              })
          .put(
              new Identifier("getTargetDataLine"),
              new Import[] {
                newImport("javax.sound.sampled.AudioSystem.getTargetDataLine", true),
              })
          .put(
              new Identifier("JUSTIFICATION"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.JUSTIFICATION", true),
              })
          .put(
              new Identifier("AccountExpiredException"),
              new Import[] {
                newImport("javax.security.auth.login.AccountExpiredException", false),
              })
          .put(
              new Identifier("ENV_ITALY"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ENV_ITALY", true),
              })
          .put(
              new Identifier("MUTE"),
              new Import[] {
                newImport("javax.sound.sampled.BooleanControl.Type.MUTE", true),
              })
          .put(
              new Identifier("NumberFormatter"),
              new Import[] {
                newImport("javax.swing.text.NumberFormatter", false),
              })
          .put(
              new Identifier("ValidationEventImpl"),
              new Import[] {
                newImport("javax.xml.bind.helpers.ValidationEventImpl", false),
              })
          .put(
              new Identifier("POAOperations"),
              new Import[] {
                newImport("org.omg.PortableServer.POAOperations", false),
              })
          .put(
              new Identifier("ParserFactory"),
              new Import[] {
                newImport("org.xml.sax.helpers.ParserFactory", false),
              })
          .put(
              new Identifier("BindingIteratorHelper"),
              new Import[] {
                newImport("org.omg.CosNaming.BindingIteratorHelper", false),
              })
          .put(
              new Identifier("DefaultBoundedRangeModel"),
              new Import[] {
                newImport("javax.swing.DefaultBoundedRangeModel", false),
              })
          .put(
              new Identifier("gray"),
              new Import[] {
                newImport("java.awt.Color.gray", true),
              })
          .put(
              new Identifier("DIRECTION_DEFAULT_RIGHT_TO_LEFT"),
              new Import[] {
                newImport("java.text.Bidi.DIRECTION_DEFAULT_RIGHT_TO_LEFT", true),
              })
          .put(
              new Identifier("isInfinite"),
              new Import[] {
                newImport("java.lang.Double.isInfinite", true),
                newImport("java.lang.Float.isInfinite", true),
              })
          .put(
              new Identifier("AbstractSelector"),
              new Import[] {
                newImport("java.nio.channels.spi.AbstractSelector", false),
              })
          .put(
              new Identifier("ResponseCache"),
              new Import[] {
                newImport("java.net.ResponseCache", false),
              })
          .put(
              new Identifier("UPPER_RIGHT_CORNER"),
              new Import[] {
                newImport("javax.swing.ScrollPaneConstants.UPPER_RIGHT_CORNER", true),
              })
          .put(
              new Identifier("ADJUSTMENT_VALUE_CHANGED"),
              new Import[] {
                newImport("java.awt.event.AdjustmentEvent.ADJUSTMENT_VALUE_CHANGED", true),
              })
          .put(
              new Identifier("SSLSessionContext"),
              new Import[] {
                newImport("javax.net.ssl.SSLSessionContext", false),
              })
          .put(
              new Identifier("ExceptionInInitializerError"),
              new Import[] {
                newImport("java.lang.ExceptionInInitializerError", false),
              })
          .put(
              new Identifier("setFirstLineIndent"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.setFirstLineIndent", true),
              })
          .put(
              new Identifier("DIRECTIONALITY_PARAGRAPH_SEPARATOR"),
              new Import[] {
                newImport("java.lang.Character.DIRECTIONALITY_PARAGRAPH_SEPARATOR", true),
              })
          .put(
              new Identifier("singletonList"),
              new Import[] {
                newImport("java.util.Collections.singletonList", true),
              })
          .put(
              new Identifier("getTreeFloppyDriveIcon"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalIconFactory.getTreeFloppyDriveIcon", true),
              })
          .put(
              new Identifier("black"),
              new Import[] {
                newImport("java.awt.Color.black", true),
              })
          .put(
              new Identifier("TC_NULL"),
              new Import[] {
                newImport("java.io.ObjectStreamConstants.TC_NULL", true),
              })
          .put(
              new Identifier("JFormattedTextField"),
              new Import[] {
                newImport("javax.swing.JFormattedTextField", false),
              })
          .put(
              new Identifier("InvalidRoleValueException"),
              new Import[] {
                newImport("javax.management.relation.InvalidRoleValueException", false),
              })
          .put(
              new Identifier("SignedInfo"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.SignedInfo", false),
              })
          .put(
              new Identifier("IdentifierHelper"),
              new Import[] {
                newImport("org.omg.CORBA.IdentifierHelper", false),
              })
          .put(
              new Identifier("TD"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.TD", true),
              })
          .put(
              new Identifier("TH"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.TH", true),
              })
          .put(
              new Identifier("ACTION_EVENT_MASK"),
              new Import[] {
                newImport("java.awt.AWTEvent.ACTION_EVENT_MASK", true),
              })
          .put(
              new Identifier("ItemListener"),
              new Import[] {
                newImport("java.awt.event.ItemListener", false),
              })
          .put(
              new Identifier("Writer"),
              new Import[] {
                newImport("java.io.Writer", false),
              })
          .put(
              new Identifier("TR"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.TR", true),
              })
          .put(
              new Identifier("DURATION"),
              new Import[] {
                newImport("javax.xml.datatype.DatatypeConstants.DURATION", true),
              })
          .put(
              new Identifier("Other"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSize.Other", false),
              })
          .put(
              new Identifier("getStyleFactory"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthLookAndFeel.getStyleFactory", true),
              })
          .put(
              new Identifier("TT"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.TT", true),
              })
          .put(
              new Identifier("DEFAULT_CLASS_LOADER"),
              new Import[] {
                newImport("javax.management.remote.JMXConnectorFactory.DEFAULT_CLASS_LOADER", true),
                newImport(
                    "javax.management.remote.JMXConnectorServerFactory.DEFAULT_CLASS_LOADER", true),
              })
          .put(
              new Identifier("ComponentElementName"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.ComponentElementName", true),
              })
          .put(
              new Identifier("DragSourceDragEvent"),
              new Import[] {
                newImport("java.awt.dnd.DragSourceDragEvent", false),
              })
          .put(
              new Identifier("Label"),
              new Import[] {
                newImport("java.awt.Label", false),
              })
          .put(
              new Identifier("PropertyChangeSupport"),
              new Import[] {
                newImport("java.beans.PropertyChangeSupport", false),
              })
          .put(
              new Identifier("MinimumWidth"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicOptionPaneUI.MinimumWidth", true),
              })
          .put(
              new Identifier("ComponentSampleModel"),
              new Import[] {
                newImport("java.awt.image.ComponentSampleModel", false),
              })
          .put(
              new Identifier("JapaneseDate"),
              new Import[] {
                newImport("java.time.chrono.JapaneseDate", false),
              })
          .put(
              new Identifier("NT_ANONYMOUS"),
              new Import[] {
                newImport("org.ietf.jgss.GSSName.NT_ANONYMOUS", true),
              })
          .put(
              new Identifier("escapeValue"),
              new Import[] {
                newImport("javax.naming.ldap.Rdn.escapeValue", true),
              })
          .put(
              new Identifier("AuthorizeCallback"),
              new Import[] {
                newImport("javax.security.sasl.AuthorizeCallback", false),
              })
          .put(
              new Identifier("ImageIO"),
              new Import[] {
                newImport("javax.imageio.ImageIO", false),
              })
          .put(
              new Identifier("BORDER_LEFT"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.BORDER_LEFT", true),
              })
          .put(
              new Identifier("SynthPasswordFieldUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthPasswordFieldUI", false),
              })
          .put(
              new Identifier("JobImpressionsSupported"),
              new Import[] {
                newImport("javax.print.attribute.standard.JobImpressionsSupported", false),
              })
          .put(
              new Identifier("JApplet"),
              new Import[] {
                newImport("javax.swing.JApplet", false),
              })
          .put(
              new Identifier("white"),
              new Import[] {
                newImport("java.awt.Color.white", true),
              })
          .put(
              new Identifier("VK_CUT"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_CUT", true),
              })
          .put(
              new Identifier("UK"),
              new Import[] {
                newImport("java.util.Locale.UK", true),
              })
          .put(
              new Identifier("readAttributes"),
              new Import[] {
                newImport("java.nio.file.Files.readAttributes", true),
              })
          .put(
              new Identifier("UL"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.UL", true),
              })
          .put(
              new Identifier("UP"),
              new Import[] {
                newImport("java.awt.Event.UP", true),
              })
          .put(
              new Identifier("makeParser"),
              new Import[] {
                newImport("org.xml.sax.helpers.ParserFactory.makeParser", true),
              })
          .put(
              new Identifier("FilerException"),
              new Import[] {
                newImport("javax.annotation.processing.FilerException", false),
              })
          .put(
              new Identifier("US"),
              new Import[] {
                newImport("java.util.Locale.US", true),
              })
          .put(
              new Identifier("ChronoLocalDate"),
              new Import[] {
                newImport("java.time.chrono.ChronoLocalDate", false),
              })
          .put(
              new Identifier("BorderFactory"),
              new Import[] {
                newImport("javax.swing.BorderFactory", false),
              })
          .put(
              new Identifier("DropTargetDragEvent"),
              new Import[] {
                newImport("java.awt.dnd.DropTargetDragEvent", false),
              })
          .put(
              new Identifier("FOCUS_GAINED"),
              new Import[] {
                newImport("java.awt.event.FocusEvent.FOCUS_GAINED", true),
              })
          .put(
              new Identifier("DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR"),
              new Import[] {
                newImport("java.lang.Character.DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR", true),
              })
          .put(
              new Identifier("ISO_C10_ENVELOPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_C10_ENVELOPE", true),
              })
          .put(
              new Identifier("icSigDisplayClass"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigDisplayClass", true),
              })
          .put(
              new Identifier("InterfaceAddress"),
              new Import[] {
                newImport("java.net.InterfaceAddress", false),
              })
          .put(
              new Identifier("CANON_EQ"),
              new Import[] {
                newImport("java.util.regex.Pattern.CANON_EQ", true),
              })
          .put(
              new Identifier("BitSet"),
              new Import[] {
                newImport("java.util.BitSet", false),
              })
          .put(
              new Identifier("FINAL"),
              new Import[] {
                newImport("java.lang.reflect.Modifier.FINAL", true),
              })
          .put(
              new Identifier("REVERB_SEND"),
              new Import[] {
                newImport("javax.sound.sampled.FloatControl.Type.REVERB_SEND", true),
              })
          .put(
              new Identifier("DEFAULT_STRATEGY"),
              new Import[] {
                newImport("java.util.zip.Deflater.DEFAULT_STRATEGY", true),
              })
          .put(
              new Identifier("InvocationEvent"),
              new Import[] {
                newImport("java.awt.event.InvocationEvent", false),
              })
          .put(
              new Identifier("MethodHandleProxies"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandleProxies", false),
              })
          .put(
              new Identifier("FULL_DECOMPOSITION"),
              new Import[] {
                newImport("java.text.Collator.FULL_DECOMPOSITION", true),
              })
          .put(
              new Identifier("LongAdder"),
              new Import[] {
                newImport("java.util.concurrent.atomic.LongAdder", false),
              })
          .put(
              new Identifier("NoContextHelper"),
              new Import[] {
                newImport("org.omg.PortableServer.CurrentPackage.NoContextHelper", false),
              })
          .put(
              new Identifier("JColorChooser"),
              new Import[] {
                newImport("javax.swing.JColorChooser", false),
              })
          .put(
              new Identifier("ONE_SECOND"),
              new Import[] {
                newImport("javax.management.timer.Timer.ONE_SECOND", true),
              })
          .put(
              new Identifier("next"),
              new Import[] {
                newImport("java.time.temporal.TemporalAdjusters.next", true),
              })
          .put(
              new Identifier("TRANSPORT_RETRY"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.TRANSPORT_RETRY", false),
              })
          .put(
              new Identifier("ModelMBeanOperationInfo"),
              new Import[] {
                newImport("javax.management.modelmbean.ModelMBeanOperationInfo", false),
              })
          .put(
              new Identifier("LAYER_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JLayeredPane.LAYER_PROPERTY", true),
              })
          .put(
              new Identifier("WINDOW_EXPOSE"),
              new Import[] {
                newImport("java.awt.Event.WINDOW_EXPOSE", true),
              })
          .put(
              new Identifier("System"),
              new Import[] {
                newImport("java.lang.System", false),
              })
          .put(
              new Identifier("UPPER_TRAILING_CORNER"),
              new Import[] {
                newImport("javax.swing.ScrollPaneConstants.UPPER_TRAILING_CORNER", true),
              })
          .put(
              new Identifier("VK_KP_UP"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_KP_UP", true),
              })
          .put(
              new Identifier("WAVE"),
              new Import[] {
                newImport("javax.sound.sampled.AudioFileFormat.Type.WAVE", true),
              })
          .put(
              new Identifier("DOMException"),
              new Import[] {
                newImport("org.w3c.dom.DOMException", false),
              })
          .put(
              new Identifier("RemoteStub"),
              new Import[] {
                newImport("java.rmi.server.RemoteStub", false),
              })
          .put(
              new Identifier("HOUR1"),
              new Import[] {
                newImport("java.text.DateFormat.Field.HOUR1", true),
              })
          .put(
              new Identifier("HOUR0"),
              new Import[] {
                newImport("java.text.DateFormat.Field.HOUR0", true),
              })
          .put(
              new Identifier("VK_DIVIDE"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_DIVIDE", true),
              })
          .put(
              new Identifier("GLOBAL"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlElementDecl.GLOBAL", false),
              })
          .put(
              new Identifier("STARTTAG"),
              new Import[] {
                newImport("javax.swing.text.html.parser.DTDConstants.STARTTAG", true),
              })
          .put(
              new Identifier("SinkChannel"),
              new Import[] {
                newImport("java.nio.channels.Pipe.SinkChannel", false),
              })
          .put(
              new Identifier("FIDELITY_FALSE"),
              new Import[] {
                newImport("javax.print.attribute.standard.Fidelity.FIDELITY_FALSE", true),
              })
          .put(
              new Identifier("green"),
              new Import[] {
                newImport("java.awt.Color.green", true),
              })
          .put(
              new Identifier("MOUSE_MOVED"),
              new Import[] {
                newImport("java.awt.event.MouseEvent.MOUSE_MOVED", true),
              })
          .put(
              new Identifier("HTMLWriter"),
              new Import[] {
                newImport("javax.swing.text.html.HTMLWriter", false),
              })
          .put(
              new Identifier("AttachmentUnmarshaller"),
              new Import[] {
                newImport("javax.xml.bind.attachment.AttachmentUnmarshaller", false),
              })
          .put(
              new Identifier("_tk_long"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind._tk_long", true),
              })
          .put(
              new Identifier("InheritableThreadLocal"),
              new Import[] {
                newImport("java.lang.InheritableThreadLocal", false),
              })
          .put(
              new Identifier("HTTP_REQUEST_METHOD"),
              new Import[] {
                newImport("javax.xml.ws.handler.MessageContext.HTTP_REQUEST_METHOD", true),
              })
          .put(
              new Identifier("TIME"),
              new Import[] {
                newImport("java.sql.Types.TIME", true),
                newImport("javax.xml.datatype.DatatypeConstants.TIME", true),
              })
          .put(
              new Identifier("ValueFactory"),
              new Import[] {
                newImport("org.omg.CORBA.portable.ValueFactory", false),
              })
          .put(
              new Identifier("VK_PAGE_UP"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_PAGE_UP", true),
              })
          .put(
              new Identifier("KeyManagerFactory"),
              new Import[] {
                newImport("javax.net.ssl.KeyManagerFactory", false),
              })
          .put(
              new Identifier("RoundEnvironment"),
              new Import[] {
                newImport("javax.annotation.processing.RoundEnvironment", false),
              })
          .put(
              new Identifier("isSurrogate"),
              new Import[] {
                newImport("java.lang.Character.isSurrogate", true),
              })
          .put(
              new Identifier("GenericSignatureFormatError"),
              new Import[] {
                newImport("java.lang.reflect.GenericSignatureFormatError", false),
              })
          .put(
              new Identifier("TEXT_HIGHLIGHT"),
              new Import[] {
                newImport("java.awt.SystemColor.TEXT_HIGHLIGHT", true),
              })
          .put(
              new Identifier("ALT_GRAPH_DOWN_MASK"),
              new Import[] {
                newImport("java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK", true),
              })
          .put(
              new Identifier("VALUE_RANGE"),
              new Import[] {
                newImport("javax.imageio.metadata.IIOMetadataFormat.VALUE_RANGE", true),
              })
          .put(
              new Identifier("HOURS"),
              new Import[] {
                newImport("javax.xml.datatype.DatatypeConstants.HOURS", true),
              })
          .put(
              new Identifier("Scope"),
              new Import[] {
                newImport("javax.xml.ws.handler.MessageContext.Scope", false),
              })
          .put(
              new Identifier("Filter"),
              new Import[] {
                newImport("java.nio.file.DirectoryStream.Filter", false),
                newImport("java.util.logging.Filter", false),
                newImport("javax.imageio.spi.ServiceRegistry.Filter", false),
                newImport("javax.xml.crypto.dsig.spec.XPathType.Filter", false),
              })
          .put(
              new Identifier("collectingAndThen"),
              new Import[] {
                newImport("java.util.stream.Collectors.collectingAndThen", true),
              })
          .put(
              new Identifier("PseudoColumnUsage"),
              new Import[] {
                newImport("java.sql.PseudoColumnUsage", false),
              })
          .put(
              new Identifier("RelationServiceMBean"),
              new Import[] {
                newImport("javax.management.relation.RelationServiceMBean", false),
              })
          .put(
              new Identifier("PagesPerMinuteColor"),
              new Import[] {
                newImport("javax.print.attribute.standard.PagesPerMinuteColor", false),
              })
          .put(
              new Identifier("window"),
              new Import[] {
                newImport("java.awt.SystemColor.window", true),
              })
          .put(
              new Identifier("toTitleCase"),
              new Import[] {
                newImport("java.lang.Character.toTitleCase", true),
              })
          .put(
              new Identifier("createHorizontalBox"),
              new Import[] {
                newImport("javax.swing.Box.createHorizontalBox", true),
              })
          .put(
              new Identifier("setInstalledLookAndFeels"),
              new Import[] {
                newImport("javax.swing.UIManager.setInstalledLookAndFeels", true),
              })
          .put(
              new Identifier("createInterleavedRaster"),
              new Import[] {
                newImport("java.awt.image.Raster.createInterleavedRaster", true),
              })
          .put(
              new Identifier("ArrayIndexOutOfBoundsException"),
              new Import[] {
                newImport("java.lang.ArrayIndexOutOfBoundsException", false),
              })
          .put(
              new Identifier("VAI"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.VAI", true),
              })
          .put(
              new Identifier("NumberFormat"),
              new Import[] {
                newImport("java.text.NumberFormat", false),
              })
          .put(
              new Identifier("LSLoadEvent"),
              new Import[] {
                newImport("org.w3c.dom.ls.LSLoadEvent", false),
              })
          .put(
              new Identifier("ButtonBorder"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicBorders.ButtonBorder", false),
                newImport("javax.swing.plaf.metal.MetalBorders.ButtonBorder", false),
              })
          .put(
              new Identifier("VAR"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.VAR", true),
              })
          .put(
              new Identifier("DuplicateName"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.ORBInitInfoPackage.DuplicateName", false),
              })
          .put(
              new Identifier("getDesktopPropertyValue"),
              new Import[] {
                newImport("javax.swing.LookAndFeel.getDesktopPropertyValue", true),
              })
          .put(
              new Identifier("MultiSplitPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.multi.MultiSplitPaneUI", false),
              })
          .put(
              new Identifier("NoRouteToHostException"),
              new Import[] {
                newImport("java.net.NoRouteToHostException", false),
              })
          .put(
              new Identifier("DefaultTreeCellRenderer"),
              new Import[] {
                newImport("javax.swing.tree.DefaultTreeCellRenderer", false),
              })
          .put(
              new Identifier("AbstractRegionPainter"),
              new Import[] {
                newImport("javax.swing.plaf.nimbus.AbstractRegionPainter", false),
              })
          .put(
              new Identifier("InvalidParameterException"),
              new Import[] {
                newImport("java.security.InvalidParameterException", false),
              })
          .put(
              new Identifier("AbstractDocument"),
              new Import[] {
                newImport("javax.swing.text.AbstractDocument", false),
              })
          .put(
              new Identifier("UnmappableCharacterException"),
              new Import[] {
                newImport("java.nio.charset.UnmappableCharacterException", false),
              })
          .put(
              new Identifier("NameHolder"),
              new Import[] {
                newImport("org.omg.CosNaming.NameHolder", false),
              })
          .put(
              new Identifier("INV_OBJREF"),
              new Import[] {
                newImport("org.omg.CORBA.INV_OBJREF", false),
              })
          .put(
              new Identifier("ServantManager"),
              new Import[] {
                newImport("org.omg.PortableServer.ServantManager", false),
              })
          .put(
              new Identifier("isInterface"),
              new Import[] {
                newImport("java.lang.reflect.Modifier.isInterface", true),
              })
          .put(
              new Identifier("ClosedSelectorException"),
              new Import[] {
                newImport("java.nio.channels.ClosedSelectorException", false),
              })
          .put(
              new Identifier("SPOOL_AREA_FULL"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.PrinterStateReason.SPOOL_AREA_FULL", true),
              })
          .put(
              new Identifier("AbstractMethodError"),
              new Import[] {
                newImport("java.lang.AbstractMethodError", false),
              })
          .put(
              new Identifier("NULLORDER"),
              new Import[] {
                newImport("java.text.CollationElementIterator.NULLORDER", true),
              })
          .put(
              new Identifier("PARA_INDENT_RIGHT"),
              new Import[] {
                newImport("javax.swing.text.html.HTMLEditorKit.PARA_INDENT_RIGHT", true),
              })
          .put(
              new Identifier("parsedExcessDays"),
              new Import[] {
                newImport("java.time.format.DateTimeFormatter.parsedExcessDays", true),
              })
          .put(
              new Identifier("BindingIteratorHolder"),
              new Import[] {
                newImport("org.omg.CosNaming.BindingIteratorHolder", false),
              })
          .put(
              new Identifier("KEEP_CURRENT_RESULT"),
              new Import[] {
                newImport("java.sql.Statement.KEEP_CURRENT_RESULT", true),
              })
          .put(
              new Identifier("INSTANCE"),
              new Import[] {
                newImport("java.time.chrono.HijrahChronology.INSTANCE", true),
                newImport("java.time.chrono.IsoChronology.INSTANCE", true),
                newImport("java.time.chrono.JapaneseChronology.INSTANCE", true),
                newImport("java.time.chrono.MinguoChronology.INSTANCE", true),
                newImport("java.time.chrono.ThaiBuddhistChronology.INSTANCE", true),
              })
          .put(
              new Identifier("SerialClob"),
              new Import[] {
                newImport("javax.sql.rowset.serial.SerialClob", false),
              })
          .put(
              new Identifier("TEXT_HIGHLIGHT_TEXT"),
              new Import[] {
                newImport("java.awt.SystemColor.TEXT_HIGHLIGHT_TEXT", true),
              })
          .put(
              new Identifier("ETHIOPIC_EXTENDED"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.ETHIOPIC_EXTENDED", true),
              })
          .put(
              new Identifier("CYAN"),
              new Import[] {
                newImport("java.awt.Color.CYAN", true),
              })
          .put(
              new Identifier("SQLType"),
              new Import[] {
                newImport("java.sql.SQLType", false),
              })
          .put(
              new Identifier("WAIT_CURSOR"),
              new Import[] {
                newImport("java.awt.Cursor.WAIT_CURSOR", true),
                newImport("java.awt.Frame.WAIT_CURSOR", true),
              })
          .put(
              new Identifier("CENSIG"),
              new Import[] {
                newImport("java.util.jar.JarEntry.CENSIG", true),
                newImport("java.util.jar.JarFile.CENSIG", true),
                newImport("java.util.jar.JarInputStream.CENSIG", true),
                newImport("java.util.jar.JarOutputStream.CENSIG", true),
                newImport("java.util.zip.ZipEntry.CENSIG", true),
                newImport("java.util.zip.ZipFile.CENSIG", true),
                newImport("java.util.zip.ZipInputStream.CENSIG", true),
                newImport("java.util.zip.ZipOutputStream.CENSIG", true),
              })
          .put(
              new Identifier("parseFloat"),
              new Import[] {
                newImport("java.lang.Float.parseFloat", true),
                newImport("javax.xml.bind.DatatypeConverter.parseFloat", true),
              })
          .put(
              new Identifier("Transparency"),
              new Import[] {
                newImport("java.awt.Transparency", false),
              })
          .put(
              new Identifier("BENGALI"),
              new Import[] {
                newImport("java.awt.font.NumericShaper.BENGALI", true),
                newImport("java.lang.Character.UnicodeBlock.BENGALI", true),
              })
          .put(
              new Identifier("PropertyPermission"),
              new Import[] {
                newImport("java.util.PropertyPermission", false),
              })
          .put(
              new Identifier("JLayeredPane"),
              new Import[] {
                newImport("javax.swing.JLayeredPane", false),
              })
          .put(
              new Identifier("ZipEntry"),
              new Import[] {
                newImport("java.util.zip.ZipEntry", false),
              })
          .put(
              new Identifier("CHAR"),
              new Import[] {
                newImport("java.sql.Types.CHAR", true),
              })
          .put(
              new Identifier("WEIGHT_REGULAR"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.WEIGHT_REGULAR", true),
              })
          .put(
              new Identifier("CHAKMA"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.CHAKMA", true),
              })
          .put(
              new Identifier("X509CertSelector"),
              new Import[] {
                newImport("java.security.cert.X509CertSelector", false),
              })
          .put(
              new Identifier("SortedSet"),
              new Import[] {
                newImport("java.util.SortedSet", false),
              })
          .put(
              new Identifier("CHAM"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.CHAM", true),
              })
          .put(
              new Identifier("VERTICAL_SCROLLBAR_AS_NEEDED"),
              new Import[] {
                newImport("javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED", true),
              })
          .put(
              new Identifier("SOAPMessageHandler"),
              new Import[] {
                newImport("javax.jws.soap.SOAPMessageHandler", false),
              })
          .put(
              new Identifier("UTF_8"),
              new Import[] {
                newImport("java.nio.charset.StandardCharsets.UTF_8", true),
              })
          .put(
              new Identifier("SliderUI"),
              new Import[] {
                newImport("javax.swing.plaf.SliderUI", false),
              })
          .put(
              new Identifier("FontMetrics"),
              new Import[] {
                newImport("java.awt.FontMetrics", false),
              })
          .put(
              new Identifier("ListResourceBundle"),
              new Import[] {
                newImport("java.util.ListResourceBundle", false),
              })
          .put(
              new Identifier("SOAP_1_1_PROTOCOL"),
              new Import[] {
                newImport("javax.xml.soap.SOAPConstants.SOAP_1_1_PROTOCOL", true),
              })
          .put(
              new Identifier("ENVELOPE"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaTray.ENVELOPE", true),
              })
          .put(
              new Identifier("LIST_STYLE_POSITION"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.LIST_STYLE_POSITION", true),
              })
          .put(
              new Identifier("isJavaLetterOrDigit"),
              new Import[] {
                newImport("java.lang.Character.isJavaLetterOrDigit", true),
              })
          .put(
              new Identifier("SAVE_DIALOG"),
              new Import[] {
                newImport("javax.swing.JFileChooser.SAVE_DIALOG", true),
              })
          .put(
              new Identifier("CENSIZ"),
              new Import[] {
                newImport("java.util.jar.JarEntry.CENSIZ", true),
                newImport("java.util.jar.JarFile.CENSIZ", true),
                newImport("java.util.jar.JarInputStream.CENSIZ", true),
                newImport("java.util.jar.JarOutputStream.CENSIZ", true),
                newImport("java.util.zip.ZipEntry.CENSIZ", true),
                newImport("java.util.zip.ZipFile.CENSIZ", true),
                newImport("java.util.zip.ZipInputStream.CENSIZ", true),
                newImport("java.util.zip.ZipOutputStream.CENSIZ", true),
              })
          .put(
              new Identifier("WINDOW_FOCUS_EVENT_MASK"),
              new Import[] {
                newImport("java.awt.AWTEvent.WINDOW_FOCUS_EVENT_MASK", true),
              })
          .put(
              new Identifier("MenuEvent"),
              new Import[] {
                newImport("javax.swing.event.MenuEvent", false),
              })
          .put(
              new Identifier("TreeWillExpandListener"),
              new Import[] {
                newImport("javax.swing.event.TreeWillExpandListener", false),
              })
          .put(
              new Identifier("ShortLookupTable"),
              new Import[] {
                newImport("java.awt.image.ShortLookupTable", false),
              })
          .put(
              new Identifier("CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JFileChooser.CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("isGuiAvailable"),
              new Import[] {
                newImport("java.beans.Beans.isGuiAvailable", true),
              })
          .put(
              new Identifier("icSigGamutTag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigGamutTag", true),
              })
          .put(
              new Identifier("getSystemClassLoader"),
              new Import[] {
                newImport("java.lang.ClassLoader.getSystemClassLoader", true),
              })
          .put(
              new Identifier("IMPLEMENTATION_VERSION"),
              new Import[] {
                newImport("java.util.jar.Attributes.Name.IMPLEMENTATION_VERSION", true),
              })
          .put(
              new Identifier("icHdrCreator"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icHdrCreator", true),
              })
          .put(
              new Identifier("getAnonymousLogger"),
              new Import[] {
                newImport("java.util.logging.Logger.getAnonymousLogger", true),
              })
          .put(
              new Identifier("ACCESSIBLE_DESCRIPTION_PROPERTY"),
              new Import[] {
                newImport(
                    "javax.accessibility.AccessibleContext.ACCESSIBLE_DESCRIPTION_PROPERTY", true),
              })
          .put(
              new Identifier("SynthCheckBoxMenuItemUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthCheckBoxMenuItemUI", false),
              })
          .put(
              new Identifier("NOT_ATTEMPTED"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.PDLOverrideSupported.NOT_ATTEMPTED", true),
              })
          .put(
              new Identifier("SOUTH_WEST"),
              new Import[] {
                newImport("javax.swing.SwingConstants.SOUTH_WEST", true),
              })
          .put(
              new Identifier("ENTRY_DELETE"),
              new Import[] {
                newImport("java.nio.file.StandardWatchEventKinds.ENTRY_DELETE", true),
              })
          .put(
              new Identifier("SignStyle"),
              new Import[] {
                newImport("java.time.format.SignStyle", false),
              })
          .put(
              new Identifier("nonNull"),
              new Import[] {
                newImport("java.util.Objects.nonNull", true),
              })
          .put(
              new Identifier("BYTES"),
              new Import[] {
                newImport("java.lang.Byte.BYTES", true),
                newImport("java.lang.Character.BYTES", true),
                newImport("java.lang.Double.BYTES", true),
                newImport("java.lang.Float.BYTES", true),
                newImport("java.lang.Integer.BYTES", true),
                newImport("java.lang.Long.BYTES", true),
                newImport("java.lang.Short.BYTES", true),
              })
          .put(
              new Identifier("BrokenBarrierException"),
              new Import[] {
                newImport("java.util.concurrent.BrokenBarrierException", false),
              })
          .put(
              new Identifier("TreeFolderIcon"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalIconFactory.TreeFolderIcon", false),
              })
          .put(
              new Identifier("upAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.upAction", true),
              })
          .put(
              new Identifier("REQUEST_KEY_SIZE"),
              new Import[] {
                newImport("javax.xml.ws.spi.http.HttpExchange.REQUEST_KEY_SIZE", true),
              })
          .put(
              new Identifier("isUnique"),
              new Import[] {
                newImport("java.rmi.dgc.VMID.isUnique", true),
              })
          .put(
              new Identifier("Attributes"),
              new Import[] {
                newImport("java.util.jar.Attributes", false),
                newImport("javax.naming.directory.Attributes", false),
                newImport("org.xml.sax.Attributes", false),
              })
          .put(
              new Identifier("MaskFormatter"),
              new Import[] {
                newImport("javax.swing.text.MaskFormatter", false),
              })
          .put(
              new Identifier("ToolTipUI"),
              new Import[] {
                newImport("javax.swing.plaf.ToolTipUI", false),
              })
          .put(
              new Identifier("TC_ARRAY"),
              new Import[] {
                newImport("java.io.ObjectStreamConstants.TC_ARRAY", true),
              })
          .put(
              new Identifier("Pageable"),
              new Import[] {
                newImport("java.awt.print.Pageable", false),
              })
          .put(
              new Identifier("TTL_DONT_CACHE"),
              new Import[] {
                newImport("java.util.ResourceBundle.Control.TTL_DONT_CACHE", true),
              })
          .put(
              new Identifier("functionNoNulls"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.functionNoNulls", true),
              })
          .put(
              new Identifier("ObjectStreamException"),
              new Import[] {
                newImport("java.io.ObjectStreamException", false),
              })
          .put(
              new Identifier("DriverManager"),
              new Import[] {
                newImport("java.sql.DriverManager", false),
              })
          .put(
              new Identifier("selectAllAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.selectAllAction", true),
              })
          .put(
              new Identifier("LINE_SEPARATOR"),
              new Import[] {
                newImport("java.lang.Character.LINE_SEPARATOR", true),
              })
          .put(
              new Identifier("TypeConstraintException"),
              new Import[] {
                newImport("javax.xml.bind.TypeConstraintException", false),
              })
          .put(
              new Identifier("SOUTHEAST"),
              new Import[] {
                newImport("java.awt.GridBagConstraints.SOUTHEAST", true),
              })
          .put(
              new Identifier("MXBean"),
              new Import[] {
                newImport("javax.management.MXBean", false),
              })
          .put(
              new Identifier("SocketImplFactory"),
              new Import[] {
                newImport("java.net.SocketImplFactory", false),
              })
          .put(
              new Identifier("Inet6Address"),
              new Import[] {
                newImport("java.net.Inet6Address", false),
              })
          .put(
              new Identifier("DefaultTreeModel"),
              new Import[] {
                newImport("javax.swing.tree.DefaultTreeModel", false),
              })
          .put(
              new Identifier("setSocketImplFactory"),
              new Import[] {
                newImport("java.net.Socket.setSocketImplFactory", true),
              })
          .put(
              new Identifier("ofOffset"),
              new Import[] {
                newImport("java.time.ZoneId.ofOffset", true),
              })
          .put(
              new Identifier("CommandObject"),
              new Import[] {
                newImport("javax.activation.CommandObject", false),
              })
          .put(
              new Identifier("EventDirContext"),
              new Import[] {
                newImport("javax.naming.event.EventDirContext", false),
              })
          .put(
              new Identifier("drawBezel"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicGraphicsUtils.drawBezel", true),
              })
          .put(
              new Identifier("FREE_STANDING_PROP"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalScrollBarUI.FREE_STANDING_PROP", true),
              })
          .put(
              new Identifier("ManagerFactoryParameters"),
              new Import[] {
                newImport("javax.net.ssl.ManagerFactoryParameters", false),
              })
          .put(
              new Identifier("SimpleElementVisitor7"),
              new Import[] {
                newImport("javax.lang.model.util.SimpleElementVisitor7", false),
              })
          .put(
              new Identifier("SimpleElementVisitor6"),
              new Import[] {
                newImport("javax.lang.model.util.SimpleElementVisitor6", false),
              })
          .put(
              new Identifier("SimpleElementVisitor8"),
              new Import[] {
                newImport("javax.lang.model.util.SimpleElementVisitor8", false),
              })
          .put(
              new Identifier("TreeLeafIcon"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalIconFactory.TreeLeafIcon", false),
              })
          .put(
              new Identifier("JProgressBar"),
              new Import[] {
                newImport("javax.swing.JProgressBar", false),
              })
          .put(
              new Identifier("ServiceUnavailableException"),
              new Import[] {
                newImport("javax.naming.ServiceUnavailableException", false),
              })
          .put(
              new Identifier("invokeAndWait"),
              new Import[] {
                newImport("java.awt.EventQueue.invokeAndWait", true),
                newImport("javax.swing.SwingUtilities.invokeAndWait", true),
              })
          .put(
              new Identifier("KeyEvent"),
              new Import[] {
                newImport("java.awt.event.KeyEvent", false),
              })
          .put(
              new Identifier("VetoableChangeListenerProxy"),
              new Import[] {
                newImport("java.beans.VetoableChangeListenerProxy", false),
              })
          .put(
              new Identifier("MEROITIC_CURSIVE"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.MEROITIC_CURSIVE", true),
              })
          .put(
              new Identifier("WeakReference"),
              new Import[] {
                newImport("java.lang.ref.WeakReference", false),
              })
          .put(
              new Identifier("Collector"),
              new Import[] {
                newImport("java.util.stream.Collector", false),
              })
          .put(
              new Identifier("ENCLOSED_CJK_LETTERS_AND_MONTHS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.ENCLOSED_CJK_LETTERS_AND_MONTHS", true),
              })
          .put(
              new Identifier("CurrentHelper"),
              new Import[] {
                newImport("org.omg.CORBA.CurrentHelper", false),
                newImport("org.omg.PortableInterceptor.CurrentHelper", false),
                newImport("org.omg.PortableServer.CurrentHelper", false),
              })
          .put(
              new Identifier("TIMES"),
              new Import[] {
                newImport("javax.management.Query.TIMES", true),
              })
          .put(
              new Identifier("AclEntryType"),
              new Import[] {
                newImport("java.nio.file.attribute.AclEntryType", false),
              })
          .put(
              new Identifier("selectWordAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.selectWordAction", true),
              })
          .put(
              new Identifier("forDigit"),
              new Import[] {
                newImport("java.lang.Character.forDigit", true),
              })
          .put(
              new Identifier("CertPathChecker"),
              new Import[] {
                newImport("java.security.cert.CertPathChecker", false),
              })
          .put(
              new Identifier("DATATYPEFACTORY_PROPERTY"),
              new Import[] {
                newImport("javax.xml.datatype.DatatypeFactory.DATATYPEFACTORY_PROPERTY", true),
              })
          .put(
              new Identifier("getDefault"),
              new Import[] {
                newImport("java.net.CookieHandler.getDefault", true),
                newImport("java.net.ProxySelector.getDefault", true),
                newImport("java.net.ResponseCache.getDefault", true),
                newImport("java.nio.file.FileSystems.getDefault", true),
                newImport("java.util.Locale.getDefault", true),
                newImport("java.util.TimeZone.getDefault", true),
                newImport("javax.net.ServerSocketFactory.getDefault", true),
                newImport("javax.net.SocketFactory.getDefault", true),
                newImport("javax.net.ssl.SSLContext.getDefault", true),
                newImport("javax.net.ssl.SSLServerSocketFactory.getDefault", true),
                newImport("javax.net.ssl.SSLSocketFactory.getDefault", true),
              })
          .put(
              new Identifier("ParagraphView"),
              new Import[] {
                newImport("javax.swing.text.ParagraphView", false),
                newImport("javax.swing.text.html.ParagraphView", false),
              })
          .put(
              new Identifier("FlipContents"),
              new Import[] {
                newImport("java.awt.BufferCapabilities.FlipContents", false),
              })
          .put(
              new Identifier("showInternalMessageDialog"),
              new Import[] {
                newImport("javax.swing.JOptionPane.showInternalMessageDialog", true),
              })
          .put(
              new Identifier("BUTTON2_DOWN_MASK"),
              new Import[] {
                newImport("java.awt.event.InputEvent.BUTTON2_DOWN_MASK", true),
              })
          .put(
              new Identifier("PRINTER"),
              new Import[] {
                newImport("java.awt.JobAttributes.DestinationType.PRINTER", true),
              })
          .put(
              new Identifier("VK_JAPANESE_HIRAGANA"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_JAPANESE_HIRAGANA", true),
              })
          .build();
}
