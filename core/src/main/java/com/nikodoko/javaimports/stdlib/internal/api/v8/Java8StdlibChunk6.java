// Code generated by GenerateStdlib.java. DO NOT EDIT.
package com.nikodoko.javaimports.stdlib.internal.api.v8;

import static com.nikodoko.javaimports.stdlib.internal.Stdlib.newImport;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.common.Identifier;
import com.nikodoko.javaimports.common.Import;
import java.util.Map;

public class Java8StdlibChunk6 {
  static final Map<Identifier, Import[]> CLASSES =
      new ImmutableMap.Builder<Identifier, Import[]>()
          .put(
              new Identifier("ENDSIZ"),
              new Import[] {
                newImport("java.util.jar.JarEntry.ENDSIZ", true),
                newImport("java.util.jar.JarFile.ENDSIZ", true),
                newImport("java.util.jar.JarInputStream.ENDSIZ", true),
                newImport("java.util.jar.JarOutputStream.ENDSIZ", true),
                newImport("java.util.zip.ZipEntry.ENDSIZ", true),
                newImport("java.util.zip.ZipFile.ENDSIZ", true),
                newImport("java.util.zip.ZipInputStream.ENDSIZ", true),
                newImport("java.util.zip.ZipOutputStream.ENDSIZ", true),
              })
          .put(
              new Identifier("DST_OUT"),
              new Import[] {
                newImport("java.awt.AlphaComposite.DST_OUT", true),
              })
          .put(
              new Identifier("getControlDisabled"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalLookAndFeel.getControlDisabled", true),
              })
          .put(
              new Identifier("ENV_INVITE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ENV_INVITE", true),
              })
          .put(
              new Identifier("SYSTEM_PORT"),
              new Import[] {
                newImport("java.rmi.activation.ActivationSystem.SYSTEM_PORT", true),
              })
          .put(
              new Identifier("CancelledKeyException"),
              new Import[] {
                newImport("java.nio.channels.CancelledKeyException", false),
              })
          .put(
              new Identifier("LATIN_DIGITS"),
              new Import[] {
                newImport("java.awt.im.InputSubset.LATIN_DIGITS", true),
              })
          .put(
              new Identifier("TTL_NO_EXPIRATION_CONTROL"),
              new Import[] {
                newImport("java.util.ResourceBundle.Control.TTL_NO_EXPIRATION_CONTROL", true),
              })
          .put(
              new Identifier("BAD_PARAM"),
              new Import[] {
                newImport("org.omg.CORBA.BAD_PARAM", false),
              })
          .put(
              new Identifier("VK_BRACERIGHT"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_BRACERIGHT", true),
              })
          .put(
              new Identifier("ToolBarUI"),
              new Import[] {
                newImport("javax.swing.plaf.ToolBarUI", false),
              })
          .put(
              new Identifier("firstDayOfNextYear"),
              new Import[] {
                newImport("java.time.temporal.TemporalAdjusters.firstDayOfNextYear", true),
              })
          .put(
              new Identifier("ONE_SIDED"),
              new Import[] {
                newImport("java.awt.JobAttributes.SidesType.ONE_SIDED", true),
                newImport("javax.print.attribute.standard.Sides.ONE_SIDED", true),
              })
          .put(
              new Identifier("KATAKANA_PHONETIC_EXTENSIONS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.KATAKANA_PHONETIC_EXTENSIONS", true),
              })
          .put(
              new Identifier("from_int"),
              new Import[] {
                newImport("org.omg.CORBA.CompletionStatus.from_int", true),
                newImport("org.omg.CORBA.DefinitionKind.from_int", true),
                newImport("org.omg.CORBA.ParameterMode.from_int", true),
                newImport("org.omg.CORBA.SetOverrideType.from_int", true),
                newImport("org.omg.CORBA.TCKind.from_int", true),
                newImport("org.omg.CosNaming.BindingType.from_int", true),
                newImport("org.omg.CosNaming.NamingContextPackage.NotFoundReason.from_int", true),
                newImport("org.omg.PortableServer.IdAssignmentPolicyValue.from_int", true),
                newImport("org.omg.PortableServer.IdUniquenessPolicyValue.from_int", true),
                newImport("org.omg.PortableServer.ImplicitActivationPolicyValue.from_int", true),
                newImport("org.omg.PortableServer.LifespanPolicyValue.from_int", true),
                newImport("org.omg.PortableServer.RequestProcessingPolicyValue.from_int", true),
                newImport("org.omg.PortableServer.ServantRetentionPolicyValue.from_int", true),
                newImport("org.omg.PortableServer.ThreadPolicyValue.from_int", true),
                newImport("org.omg.PortableServer.POAManagerPackage.State.from_int", true),
              })
          .put(
              new Identifier("INVOCATION_EVENT_MASK"),
              new Import[] {
                newImport("java.awt.AWTEvent.INVOCATION_EVENT_MASK", true),
              })
          .put(
              new Identifier("SSLProtocolException"),
              new Import[] {
                newImport("javax.net.ssl.SSLProtocolException", false),
              })
          .put(
              new Identifier("JAVA_OBJECT"),
              new Import[] {
                newImport("java.sql.Types.JAVA_OBJECT", true),
              })
          .put(
              new Identifier("DecimalStyle"),
              new Import[] {
                newImport("java.time.format.DecimalStyle", false),
              })
          .put(
              new Identifier("CompositeView"),
              new Import[] {
                newImport("javax.swing.text.CompositeView", false),
              })
          .put(
              new Identifier("DynSequence"),
              new Import[] {
                newImport("org.omg.CORBA.DynSequence", false),
                newImport("org.omg.DynamicAny.DynSequence", false),
              })
          .put(
              new Identifier("TAG_LOCA"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_LOCA", true),
              })
          .put(
              new Identifier("SignedObject"),
              new Import[] {
                newImport("java.security.SignedObject", false),
              })
          .put(
              new Identifier("getAvailableLocales"),
              new Import[] {
                newImport("java.text.BreakIterator.getAvailableLocales", true),
                newImport("java.text.Collator.getAvailableLocales", true),
                newImport("java.text.DateFormat.getAvailableLocales", true),
                newImport("java.text.DateFormatSymbols.getAvailableLocales", true),
                newImport("java.text.DecimalFormatSymbols.getAvailableLocales", true),
                newImport("java.text.NumberFormat.getAvailableLocales", true),
                newImport("java.time.format.DecimalStyle.getAvailableLocales", true),
                newImport("java.util.Calendar.getAvailableLocales", true),
                newImport("java.util.Locale.getAvailableLocales", true),
              })
          .put(
              new Identifier("getHSBColor"),
              new Import[] {
                newImport("java.awt.Color.getHSBColor", true),
              })
          .put(
              new Identifier("emptyEnumeration"),
              new Import[] {
                newImport("java.util.Collections.emptyEnumeration", true),
              })
          .put(
              new Identifier("BufferedImageFilter"),
              new Import[] {
                newImport("java.awt.image.BufferedImageFilter", false),
              })
          .put(
              new Identifier("Parameters"),
              new Import[] {
                newImport("java.security.Policy.Parameters", false),
                newImport("javax.security.auth.login.Configuration.Parameters", false),
              })
          .put(
              new Identifier("andFilter"),
              new Import[] {
                newImport("javax.swing.RowFilter.andFilter", true),
              })
          .put(
              new Identifier("MAX_BUFFER"),
              new Import[] {
                newImport("javax.security.sasl.Sasl.MAX_BUFFER", true),
              })
          .put(
              new Identifier("VOLUME"),
              new Import[] {
                newImport("javax.sound.sampled.FloatControl.Type.VOLUME", true),
              })
          .put(
              new Identifier("JWindow"),
              new Import[] {
                newImport("javax.swing.JWindow", false),
              })
          .put(
              new Identifier("CompositeName"),
              new Import[] {
                newImport("javax.naming.CompositeName", false),
              })
          .put(
              new Identifier("MemoryImageSource"),
              new Import[] {
                newImport("java.awt.image.MemoryImageSource", false),
              })
          .put(
              new Identifier("layoutCompoundLabel"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.layoutCompoundLabel", true),
              })
          .put(
              new Identifier("OLD_PERSIAN"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.OLD_PERSIAN", true),
              })
          .put(
              new Identifier("_tk_any"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind._tk_any", true),
              })
          .put(
              new Identifier("_dk_none"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind._dk_none", true),
              })
          .put(
              new Identifier("ParameterMode"),
              new Import[] {
                newImport("org.omg.CORBA.ParameterMode", false),
              })
          .put(
              new Identifier("YES_NO_CANCEL_OPTION"),
              new Import[] {
                newImport(
                    "javax.security.auth.callback.ConfirmationCallback.YES_NO_CANCEL_OPTION", true),
                newImport("javax.swing.JOptionPane.YES_NO_CANCEL_OPTION", true),
              })
          .put(
              new Identifier("getType"),
              new Import[] {
                newImport("java.lang.Character.getType", true),
              })
          .put(
              new Identifier("PAGE_TAB"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.PAGE_TAB", true),
              })
          .put(
              new Identifier("W3CEndpointReference"),
              new Import[] {
                newImport("javax.xml.ws.wsaddressing.W3CEndpointReference", false),
              })
          .put(
              new Identifier("getMenuSelectedBackground"),
              new Import[] {
                newImport(
                    "javax.swing.plaf.metal.MetalLookAndFeel.getMenuSelectedBackground", true),
              })
          .put(
              new Identifier("ABORTED"),
              new Import[] {
                newImport("java.awt.MediaTracker.ABORTED", true),
                newImport("javax.print.attribute.standard.JobState.ABORTED", true),
              })
          .put(
              new Identifier("ImageWriterSpi"),
              new Import[] {
                newImport("javax.imageio.spi.ImageWriterSpi", false),
              })
          .put(
              new Identifier("NORESIZE"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.NORESIZE", true),
              })
          .put(
              new Identifier("ENDSIG"),
              new Import[] {
                newImport("java.util.jar.JarEntry.ENDSIG", true),
                newImport("java.util.jar.JarFile.ENDSIG", true),
                newImport("java.util.jar.JarInputStream.ENDSIG", true),
                newImport("java.util.jar.JarOutputStream.ENDSIG", true),
                newImport("java.util.zip.ZipEntry.ENDSIG", true),
                newImport("java.util.zip.ZipFile.ENDSIG", true),
                newImport("java.util.zip.ZipInputStream.ENDSIG", true),
                newImport("java.util.zip.ZipOutputStream.ENDSIG", true),
              })
          .put(
              new Identifier("ACTION_MOVE"),
              new Import[] {
                newImport("java.awt.dnd.DnDConstants.ACTION_MOVE", true),
              })
          .put(
              new Identifier("DOMError"),
              new Import[] {
                newImport("org.w3c.dom.DOMError", false),
              })
          .put(
              new Identifier("SYSTEM_ID"),
              new Import[] {
                newImport("org.omg.PortableServer.IdAssignmentPolicyValue.SYSTEM_ID", true),
              })
          .put(
              new Identifier("SMPTE_30DROP"),
              new Import[] {
                newImport("javax.sound.midi.Sequence.SMPTE_30DROP", true),
              })
          .put(
              new Identifier("isProtected"),
              new Import[] {
                newImport("java.lang.reflect.Modifier.isProtected", true),
              })
          .put(
              new Identifier("SupportedAnnotationTypes"),
              new Import[] {
                newImport("javax.annotation.processing.SupportedAnnotationTypes", false),
              })
          .put(
              new Identifier("selectionBeginLineAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.selectionBeginLineAction", true),
              })
          .put(
              new Identifier("SOAPElement"),
              new Import[] {
                newImport("javax.xml.soap.SOAPElement", false),
              })
          .put(
              new Identifier("XA_RBPROTO"),
              new Import[] {
                newImport("javax.transaction.xa.XAException.XA_RBPROTO", true),
              })
          .put(
              new Identifier("KEY_RELEASED"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.KEY_RELEASED", true),
              })
          .put(
              new Identifier("StartTlsRequest"),
              new Import[] {
                newImport("javax.naming.ldap.StartTlsRequest", false),
              })
          .put(
              new Identifier("ParseConversionEvent"),
              new Import[] {
                newImport("javax.xml.bind.ParseConversionEvent", false),
              })
          .put(
              new Identifier("Enumeration"),
              new Import[] {
                newImport("java.util.Enumeration", false),
              })
          .put(
              new Identifier("DynFixedHelper"),
              new Import[] {
                newImport("org.omg.DynamicAny.DynFixedHelper", false),
              })
          .put(
              new Identifier("INVALID_TRANSACTION"),
              new Import[] {
                newImport("org.omg.CORBA.INVALID_TRANSACTION", false),
              })
          .put(
              new Identifier("GREATER"),
              new Import[] {
                newImport("javax.xml.datatype.DatatypeConstants.GREATER", true),
              })
          .put(
              new Identifier("isSynchronized"),
              new Import[] {
                newImport("java.lang.reflect.Modifier.isSynchronized", true),
              })
          .put(
              new Identifier("TreeControlIcon"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalIconFactory.TreeControlIcon", false),
              })
          .put(
              new Identifier("ToggleButtonModel"),
              new Import[] {
                newImport("javax.swing.JToggleButton.ToggleButtonModel", false),
              })
          .put(
              new Identifier("ISO_TIME"),
              new Import[] {
                newImport("java.time.format.DateTimeFormatter.ISO_TIME", true),
              })
          .put(
              new Identifier("BORDER_RIGHT_STYLE"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.BORDER_RIGHT_STYLE", true),
              })
          .put(
              new Identifier("DSAPublicKey"),
              new Import[] {
                newImport("java.security.interfaces.DSAPublicKey", false),
              })
          .put(
              new Identifier("DEFAULT_COMPRESSION"),
              new Import[] {
                newImport("java.util.zip.Deflater.DEFAULT_COMPRESSION", true),
              })
          .put(
              new Identifier("AppConfigurationEntry"),
              new Import[] {
                newImport("javax.security.auth.login.AppConfigurationEntry", false),
              })
          .put(
              new Identifier("WebServiceProvider"),
              new Import[] {
                newImport("javax.xml.ws.WebServiceProvider", false),
              })
          .put(
              new Identifier("DatagramSocketImpl"),
              new Import[] {
                newImport("java.net.DatagramSocketImpl", false),
              })
          .put(
              new Identifier("UNKNOWN_LENGTH"),
              new Import[] {
                newImport("javax.sound.midi.MidiFileFormat.UNKNOWN_LENGTH", true),
              })
          .put(
              new Identifier("XmlEnumValue"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlEnumValue", false),
              })
          .put(
              new Identifier("COMMON_INDIC_NUMBER_FORMS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.COMMON_INDIC_NUMBER_FORMS", true),
              })
          .put(
              new Identifier("probablePrime"),
              new Import[] {
                newImport("java.math.BigInteger.probablePrime", true),
              })
          .put(
              new Identifier("SecureRandomSpi"),
              new Import[] {
                newImport("java.security.SecureRandomSpi", false),
              })
          .put(
              new Identifier("PrintGraphics"),
              new Import[] {
                newImport("java.awt.PrintGraphics", false),
              })
          .put(
              new Identifier("encode"),
              new Import[] {
                newImport("java.net.URLEncoder.encode", true),
              })
          .put(
              new Identifier("ENTITY_REFERENCE"),
              new Import[] {
                newImport("javax.xml.stream.XMLStreamConstants.ENTITY_REFERENCE", true),
              })
          .put(
              new Identifier("VALUE_TEXT_ANTIALIAS_LCD_VBGR"),
              new Import[] {
                newImport("java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_VBGR", true),
              })
          .put(
              new Identifier("ACTIVE_CAPTION_BORDER"),
              new Import[] {
                newImport("java.awt.SystemColor.ACTIVE_CAPTION_BORDER", true),
              })
          .put(
              new Identifier("EndElement"),
              new Import[] {
                newImport("javax.xml.stream.events.EndElement", false),
              })
          .put(
              new Identifier("verifyAttributeCategory"),
              new Import[] {
                newImport(
                    "javax.print.attribute.AttributeSetUtilities.verifyAttributeCategory", true),
              })
          .put(
              new Identifier("SEGMENT_LIMIT"),
              new Import[] {
                newImport("java.util.jar.Pack200.Packer.SEGMENT_LIMIT", true),
              })
          .put(
              new Identifier("Port"),
              new Import[] {
                newImport("javax.sound.sampled.Port", false),
              })
          .put(
              new Identifier("URI_NS_SOAP_ENVELOPE"),
              new Import[] {
                newImport("javax.xml.soap.SOAPConstants.URI_NS_SOAP_ENVELOPE", true),
              })
          .put(
              new Identifier("TOTOP_TORIGHT"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.PresentationDirection.TOTOP_TORIGHT", true),
              })
          .put(
              new Identifier("XMLStructure"),
              new Import[] {
                newImport("javax.xml.crypto.XMLStructure", false),
              })
          .put(
              new Identifier("CHECKED"),
              new Import[] {
                newImport("javax.accessibility.AccessibleState.CHECKED", true),
                newImport("javax.swing.text.html.HTML.Attribute.CHECKED", true),
              })
          .put(
              new Identifier("CENATT"),
              new Import[] {
                newImport("java.util.jar.JarEntry.CENATT", true),
                newImport("java.util.jar.JarFile.CENATT", true),
                newImport("java.util.jar.JarInputStream.CENATT", true),
                newImport("java.util.jar.JarOutputStream.CENATT", true),
                newImport("java.util.zip.ZipEntry.CENATT", true),
                newImport("java.util.zip.ZipFile.CENATT", true),
                newImport("java.util.zip.ZipInputStream.CENATT", true),
                newImport("java.util.zip.ZipOutputStream.CENATT", true),
              })
          .put(
              new Identifier("GraphicsDevice"),
              new Import[] {
                newImport("java.awt.GraphicsDevice", false),
              })
          .put(
              new Identifier("LYCIAN"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.LYCIAN", true),
              })
          .put(
              new Identifier("VK_BACK_QUOTE"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_BACK_QUOTE", true),
              })
          .put(
              new Identifier("NO_OPTION"),
              new Import[] {
                newImport("javax.swing.JOptionPane.NO_OPTION", true),
              })
          .put(
              new Identifier("CENATX"),
              new Import[] {
                newImport("java.util.jar.JarEntry.CENATX", true),
                newImport("java.util.jar.JarFile.CENATX", true),
                newImport("java.util.jar.JarInputStream.CENATX", true),
                newImport("java.util.jar.JarOutputStream.CENATX", true),
                newImport("java.util.zip.ZipEntry.CENATX", true),
                newImport("java.util.zip.ZipFile.CENATX", true),
                newImport("java.util.zip.ZipInputStream.CENATX", true),
                newImport("java.util.zip.ZipOutputStream.CENATX", true),
              })
          .put(
              new Identifier("XA_RBCOMMFAIL"),
              new Import[] {
                newImport("javax.transaction.xa.XAException.XA_RBCOMMFAIL", true),
              })
          .put(
              new Identifier("NOPOS"),
              new Import[] {
                newImport("javax.tools.Diagnostic.NOPOS", true),
              })
          .put(
              new Identifier("DOCUMENT_NODE"),
              new Import[] {
                newImport("org.w3c.dom.Node.DOCUMENT_NODE", true),
              })
          .put(
              new Identifier("ConnectIOException"),
              new Import[] {
                newImport("java.rmi.ConnectIOException", false),
              })
          .put(
              new Identifier("REQUIRED"),
              new Import[] {
                newImport("java.awt.GraphicsConfigTemplate.REQUIRED", true),
                newImport(
                    "javax.security.auth.login.AppConfigurationEntry.LoginModuleControlFlag.REQUIRED",
                    true),
                newImport("javax.swing.text.html.parser.DTDConstants.REQUIRED", true),
              })
          .put(
              new Identifier("UnsupportedEncodingException"),
              new Import[] {
                newImport("java.io.UnsupportedEncodingException", false),
              })
          .put(
              new Identifier("ACTIVITY_COMPLETED"),
              new Import[] {
                newImport("org.omg.CORBA.ACTIVITY_COMPLETED", false),
              })
          .put(
              new Identifier("BindingListHelper"),
              new Import[] {
                newImport("org.omg.CosNaming.BindingListHelper", false),
              })
          .put(
              new Identifier("VALUE_DITHER_DEFAULT"),
              new Import[] {
                newImport("java.awt.RenderingHints.VALUE_DITHER_DEFAULT", true),
              })
          .put(
              new Identifier("SCROLL_PANE"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.SCROLL_PANE", true),
                newImport("javax.swing.plaf.synth.Region.SCROLL_PANE", true),
              })
          .put(
              new Identifier("Paint"),
              new Import[] {
                newImport("java.awt.Paint", false),
              })
          .put(
              new Identifier("getMimeEncoder"),
              new Import[] {
                newImport("java.util.Base64.getMimeEncoder", true),
              })
          .put(
              new Identifier("BACKGROUND"),
              new Import[] {
                newImport("java.awt.BufferCapabilities.FlipContents.BACKGROUND", true),
                newImport("java.awt.font.TextAttribute.BACKGROUND", true),
                newImport("javax.swing.plaf.synth.ColorType.BACKGROUND", true),
                newImport("javax.swing.text.html.CSS.Attribute.BACKGROUND", true),
                newImport("javax.swing.text.html.HTML.Attribute.BACKGROUND", true),
              })
          .put(
              new Identifier("eq"),
              new Import[] {
                newImport("javax.management.Query.eq", true),
              })
          .put(
              new Identifier("OptionChecker"),
              new Import[] {
                newImport("javax.tools.OptionChecker", false),
              })
          .put(
              new Identifier("REQUIRES_ATTENTION"),
              new Import[] {
                newImport("javax.print.event.PrintJobEvent.REQUIRES_ATTENTION", true),
              })
          .put(
              new Identifier("THRESHOLD_LOW_VALUE_EXCEEDED"),
              new Import[] {
                newImport(
                    "javax.management.monitor.MonitorNotification.THRESHOLD_LOW_VALUE_EXCEEDED",
                    true),
              })
          .put(
              new Identifier("getMenuTextFont"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalLookAndFeel.getMenuTextFont", true),
              })
          .put(
              new Identifier("MessageProp"),
              new Import[] {
                newImport("org.ietf.jgss.MessageProp", false),
              })
          .put(
              new Identifier("END"),
              new Import[] {
                newImport("java.awt.Event.END", true),
              })
          .put(
              new Identifier("LOCCRC"),
              new Import[] {
                newImport("java.util.jar.JarEntry.LOCCRC", true),
                newImport("java.util.jar.JarFile.LOCCRC", true),
                newImport("java.util.jar.JarInputStream.LOCCRC", true),
                newImport("java.util.jar.JarOutputStream.LOCCRC", true),
                newImport("java.util.zip.ZipEntry.LOCCRC", true),
                newImport("java.util.zip.ZipFile.LOCCRC", true),
                newImport("java.util.zip.ZipInputStream.LOCCRC", true),
                newImport("java.util.zip.ZipOutputStream.LOCCRC", true),
              })
          .put(
              new Identifier("RealmCallback"),
              new Import[] {
                newImport("javax.security.sasl.RealmCallback", false),
              })
          .put(
              new Identifier("LocalDateTime"),
              new Import[] {
                newImport("java.time.LocalDateTime", false),
              })
          .put(
              new Identifier("ValueExp"),
              new Import[] {
                newImport("javax.management.ValueExp", false),
              })
          .put(
              new Identifier("NATIVE"),
              new Import[] {
                newImport("java.awt.JobAttributes.DialogType.NATIVE", true),
                newImport("java.lang.reflect.Modifier.NATIVE", true),
                newImport("javax.print.attribute.standard.DialogTypeSelection.NATIVE", true),
              })
          .put(
              new Identifier("SuppressWarnings"),
              new Import[] {
                newImport("java.lang.SuppressWarnings", false),
              })
          .put(
              new Identifier("OpenMBeanParameterInfoSupport"),
              new Import[] {
                newImport("javax.management.openmbean.OpenMBeanParameterInfoSupport", false),
              })
          .put(
              new Identifier("KOREA"),
              new Import[] {
                newImport("java.util.Locale.KOREA", true),
              })
          .put(
              new Identifier("MatchResult"),
              new Import[] {
                newImport("java.util.regex.MatchResult", false),
              })
          .put(
              new Identifier("drawString"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicGraphicsUtils.drawString", true),
              })
          .put(
              new Identifier("icSigCharTargetTag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigCharTargetTag", true),
              })
          .put(
              new Identifier("SO_BINDADDR"),
              new Import[] {
                newImport("java.net.SocketOptions.SO_BINDADDR", true),
              })
          .put(
              new Identifier("SYSTEM_EXCEPTION"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.SYSTEM_EXCEPTION", false),
              })
          .put(
              new Identifier("desktop"),
              new Import[] {
                newImport("java.awt.SystemColor.desktop", true),
              })
          .put(
              new Identifier("Number"),
              new Import[] {
                newImport("java.lang.Number", false),
              })
          .put(
              new Identifier("BasicRootPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicRootPaneUI", false),
              })
          .put(
              new Identifier("LAYERED_PANE"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.LAYERED_PANE", true),
              })
          .put(
              new Identifier("DateTimeSyntax"),
              new Import[] {
                newImport("javax.print.attribute.DateTimeSyntax", false),
              })
          .put(
              new Identifier("PasswordCallback"),
              new Import[] {
                newImport("javax.security.auth.callback.PasswordCallback", false),
              })
          .put(
              new Identifier("AccessibleObject"),
              new Import[] {
                newImport("java.lang.reflect.AccessibleObject", false),
              })
          .put(
              new Identifier("gc"),
              new Import[] {
                newImport("java.lang.System.gc", true),
              })
          .put(
              new Identifier("JMenuItem"),
              new Import[] {
                newImport("javax.swing.JMenuItem", false),
              })
          .put(
              new Identifier("BAD_BINDINGS"),
              new Import[] {
                newImport("org.ietf.jgss.GSSException.BAD_BINDINGS", true),
              })
          .put(
              new Identifier("getAccessibleChildrenCount"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.getAccessibleChildrenCount", true),
              })
          .put(
              new Identifier("COMPONENT_FIRST"),
              new Import[] {
                newImport("java.awt.event.ComponentEvent.COMPONENT_FIRST", true),
              })
          .put(
              new Identifier("FORMAT_PROPERTIES"),
              new Import[] {
                newImport("java.util.ResourceBundle.Control.FORMAT_PROPERTIES", true),
              })
          .put(
              new Identifier("F10"),
              new Import[] {
                newImport("java.awt.Event.F10", true),
              })
          .put(
              new Identifier("IORInterceptor_3_0Holder"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.IORInterceptor_3_0Holder", false),
              })
          .put(
              new Identifier("F12"),
              new Import[] {
                newImport("java.awt.Event.F12", true),
              })
          .put(
              new Identifier("LINE_START"),
              new Import[] {
                newImport("java.awt.BorderLayout.LINE_START", true),
                newImport("java.awt.GridBagConstraints.LINE_START", true),
              })
          .put(
              new Identifier("F11"),
              new Import[] {
                newImport("java.awt.Event.F11", true),
              })
          .put(
              new Identifier("HttpContext"),
              new Import[] {
                newImport("javax.xml.ws.spi.http.HttpContext", false),
              })
          .put(
              new Identifier("parseLevel"),
              new Import[] {
                newImport("java.rmi.server.LogStream.parseLevel", true),
              })
          .put(
              new Identifier("RelationNotification"),
              new Import[] {
                newImport("javax.management.relation.RelationNotification", false),
              })
          .put(
              new Identifier("FILTER_SKIP"),
              new Import[] {
                newImport("org.w3c.dom.ls.LSParserFilter.FILTER_SKIP", true),
              })
          .put(
              new Identifier("MethodDescriptor"),
              new Import[] {
                newImport("java.beans.MethodDescriptor", false),
              })
          .put(
              new Identifier("gt"),
              new Import[] {
                newImport("javax.management.Query.gt", true),
              })
          .put(
              new Identifier("TAG_GPOS"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_GPOS", true),
              })
          .put(
              new Identifier("parseByte"),
              new Import[] {
                newImport("java.lang.Byte.parseByte", true),
                newImport("javax.xml.bind.DatatypeConverter.parseByte", true),
              })
          .put(
              new Identifier("WEIGHT_DEMIBOLD"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.WEIGHT_DEMIBOLD", true),
              })
          .put(
              new Identifier("ObjectNotActiveHelper"),
              new Import[] {
                newImport("org.omg.PortableServer.POAPackage.ObjectNotActiveHelper", false),
              })
          .put(
              new Identifier("META_MASK"),
              new Import[] {
                newImport("java.awt.Event.META_MASK", true),
                newImport("java.awt.event.ActionEvent.META_MASK", true),
                newImport("java.awt.event.InputEvent.META_MASK", true),
              })
          .put(
              new Identifier("DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"),
              new Import[] {
                newImport("org.w3c.dom.Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC", true),
              })
          .put(
              new Identifier("REVERB_RETURN"),
              new Import[] {
                newImport("javax.sound.sampled.FloatControl.Type.REVERB_RETURN", true),
              })
          .put(
              new Identifier("NotFound"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextPackage.NotFound", false),
              })
          .put(
              new Identifier("LinkedBlockingQueue"),
              new Import[] {
                newImport("java.util.concurrent.LinkedBlockingQueue", false),
              })
          .put(
              new Identifier("X509IssuerSerial"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.keyinfo.X509IssuerSerial", false),
              })
          .put(
              new Identifier("regexFilter"),
              new Import[] {
                newImport("javax.swing.RowFilter.regexFilter", true),
              })
          .put(
              new Identifier("sqlStateSQL"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.sqlStateSQL", true),
              })
          .put(
              new Identifier("Doc"),
              new Import[] {
                newImport("javax.print.Doc", false),
              })
          .put(
              new Identifier("id"),
              new Import[] {
                newImport("org.omg.CORBA.AnySeqHelper.id", true),
                newImport("org.omg.CORBA.BooleanSeqHelper.id", true),
                newImport("org.omg.CORBA.CharSeqHelper.id", true),
                newImport("org.omg.CORBA.CompletionStatusHelper.id", true),
                newImport("org.omg.CORBA.CurrentHelper.id", true),
                newImport("org.omg.CORBA.DefinitionKindHelper.id", true),
                newImport("org.omg.CORBA.DoubleSeqHelper.id", true),
                newImport("org.omg.CORBA.FieldNameHelper.id", true),
                newImport("org.omg.CORBA.FloatSeqHelper.id", true),
                newImport("org.omg.CORBA.IDLTypeHelper.id", true),
                newImport("org.omg.CORBA.IdentifierHelper.id", true),
                newImport("org.omg.CORBA.LongLongSeqHelper.id", true),
                newImport("org.omg.CORBA.LongSeqHelper.id", true),
                newImport("org.omg.CORBA.NameValuePairHelper.id", true),
                newImport("org.omg.CORBA.ObjectHelper.id", true),
                newImport("org.omg.CORBA.OctetSeqHelper.id", true),
                newImport("org.omg.CORBA.ParameterModeHelper.id", true),
                newImport("org.omg.CORBA.PolicyErrorCodeHelper.id", true),
                newImport("org.omg.CORBA.PolicyErrorHelper.id", true),
                newImport("org.omg.CORBA.PolicyHelper.id", true),
                newImport("org.omg.CORBA.PolicyListHelper.id", true),
                newImport("org.omg.CORBA.PolicyTypeHelper.id", true),
                newImport("org.omg.CORBA.RepositoryIdHelper.id", true),
                newImport("org.omg.CORBA.ServiceDetailHelper.id", true),
                newImport("org.omg.CORBA.ServiceInformationHelper.id", true),
                newImport("org.omg.CORBA.SetOverrideTypeHelper.id", true),
                newImport("org.omg.CORBA.ShortSeqHelper.id", true),
                newImport("org.omg.CORBA.StringSeqHelper.id", true),
                newImport("org.omg.CORBA.StringValueHelper.id", true),
                newImport("org.omg.CORBA.StructMemberHelper.id", true),
                newImport("org.omg.CORBA.ULongLongSeqHelper.id", true),
                newImport("org.omg.CORBA.ULongSeqHelper.id", true),
                newImport("org.omg.CORBA.UShortSeqHelper.id", true),
                newImport("org.omg.CORBA.UnionMemberHelper.id", true),
                newImport("org.omg.CORBA.UnknownUserExceptionHelper.id", true),
                newImport("org.omg.CORBA.ValueBaseHelper.id", true),
                newImport("org.omg.CORBA.ValueMemberHelper.id", true),
                newImport("org.omg.CORBA.VersionSpecHelper.id", true),
                newImport("org.omg.CORBA.VisibilityHelper.id", true),
                newImport("org.omg.CORBA.WCharSeqHelper.id", true),
                newImport("org.omg.CORBA.WStringSeqHelper.id", true),
                newImport("org.omg.CORBA.WStringValueHelper.id", true),
                newImport("org.omg.CORBA.WrongTransactionHelper.id", true),
                newImport("org.omg.CosNaming.BindingHelper.id", true),
                newImport("org.omg.CosNaming.BindingIteratorHelper.id", true),
                newImport("org.omg.CosNaming.BindingListHelper.id", true),
                newImport("org.omg.CosNaming.BindingTypeHelper.id", true),
                newImport("org.omg.CosNaming.IstringHelper.id", true),
                newImport("org.omg.CosNaming.NameComponentHelper.id", true),
                newImport("org.omg.CosNaming.NameHelper.id", true),
                newImport("org.omg.CosNaming.NamingContextExtHelper.id", true),
                newImport("org.omg.CosNaming.NamingContextHelper.id", true),
                newImport("org.omg.CosNaming.NamingContextExtPackage.AddressHelper.id", true),
                newImport(
                    "org.omg.CosNaming.NamingContextExtPackage.InvalidAddressHelper.id", true),
                newImport("org.omg.CosNaming.NamingContextExtPackage.StringNameHelper.id", true),
                newImport("org.omg.CosNaming.NamingContextExtPackage.URLStringHelper.id", true),
                newImport("org.omg.CosNaming.NamingContextPackage.AlreadyBoundHelper.id", true),
                newImport("org.omg.CosNaming.NamingContextPackage.CannotProceedHelper.id", true),
                newImport("org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.id", true),
                newImport("org.omg.CosNaming.NamingContextPackage.NotEmptyHelper.id", true),
                newImport("org.omg.CosNaming.NamingContextPackage.NotFoundHelper.id", true),
                newImport("org.omg.CosNaming.NamingContextPackage.NotFoundReasonHelper.id", true),
                newImport("org.omg.DynamicAny.AnySeqHelper.id", true),
                newImport("org.omg.DynamicAny.DynAnyFactoryHelper.id", true),
                newImport("org.omg.DynamicAny.DynAnyHelper.id", true),
                newImport("org.omg.DynamicAny.DynAnySeqHelper.id", true),
                newImport("org.omg.DynamicAny.DynArrayHelper.id", true),
                newImport("org.omg.DynamicAny.DynEnumHelper.id", true),
                newImport("org.omg.DynamicAny.DynFixedHelper.id", true),
                newImport("org.omg.DynamicAny.DynSequenceHelper.id", true),
                newImport("org.omg.DynamicAny.DynStructHelper.id", true),
                newImport("org.omg.DynamicAny.DynUnionHelper.id", true),
                newImport("org.omg.DynamicAny.DynValueHelper.id", true),
                newImport("org.omg.DynamicAny.FieldNameHelper.id", true),
                newImport("org.omg.DynamicAny.NameDynAnyPairHelper.id", true),
                newImport("org.omg.DynamicAny.NameDynAnyPairSeqHelper.id", true),
                newImport("org.omg.DynamicAny.NameValuePairHelper.id", true),
                newImport("org.omg.DynamicAny.NameValuePairSeqHelper.id", true),
                newImport(
                    "org.omg.DynamicAny.DynAnyFactoryPackage.InconsistentTypeCodeHelper.id", true),
                newImport("org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.id", true),
                newImport("org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.id", true),
                newImport("org.omg.IOP.CodecFactoryHelper.id", true),
                newImport("org.omg.IOP.ComponentIdHelper.id", true),
                newImport("org.omg.IOP.IORHelper.id", true),
                newImport("org.omg.IOP.MultipleComponentProfileHelper.id", true),
                newImport("org.omg.IOP.ProfileIdHelper.id", true),
                newImport("org.omg.IOP.ServiceContextHelper.id", true),
                newImport("org.omg.IOP.ServiceContextListHelper.id", true),
                newImport("org.omg.IOP.ServiceIdHelper.id", true),
                newImport("org.omg.IOP.TaggedComponentHelper.id", true),
                newImport("org.omg.IOP.TaggedProfileHelper.id", true),
                newImport("org.omg.IOP.CodecFactoryPackage.UnknownEncodingHelper.id", true),
                newImport("org.omg.IOP.CodecPackage.FormatMismatchHelper.id", true),
                newImport("org.omg.IOP.CodecPackage.InvalidTypeForEncodingHelper.id", true),
                newImport("org.omg.IOP.CodecPackage.TypeMismatchHelper.id", true),
                newImport("org.omg.Messaging.SyncScopeHelper.id", true),
                newImport("org.omg.PortableInterceptor.AdapterManagerIdHelper.id", true),
                newImport("org.omg.PortableInterceptor.AdapterNameHelper.id", true),
                newImport("org.omg.PortableInterceptor.AdapterStateHelper.id", true),
                newImport("org.omg.PortableInterceptor.CurrentHelper.id", true),
                newImport("org.omg.PortableInterceptor.ForwardRequestHelper.id", true),
                newImport("org.omg.PortableInterceptor.IORInterceptor_3_0Helper.id", true),
                newImport("org.omg.PortableInterceptor.InvalidSlotHelper.id", true),
                newImport("org.omg.PortableInterceptor.ORBIdHelper.id", true),
                newImport("org.omg.PortableInterceptor.ObjectIdHelper.id", true),
                newImport("org.omg.PortableInterceptor.ObjectReferenceFactoryHelper.id", true),
                newImport("org.omg.PortableInterceptor.ObjectReferenceTemplateHelper.id", true),
                newImport("org.omg.PortableInterceptor.ObjectReferenceTemplateSeqHelper.id", true),
                newImport("org.omg.PortableInterceptor.ServerIdHelper.id", true),
                newImport(
                    "org.omg.PortableInterceptor.ORBInitInfoPackage.DuplicateNameHelper.id", true),
                newImport(
                    "org.omg.PortableInterceptor.ORBInitInfoPackage.InvalidNameHelper.id", true),
                newImport("org.omg.PortableInterceptor.ORBInitInfoPackage.ObjectIdHelper.id", true),
                newImport("org.omg.PortableServer.CurrentHelper.id", true),
                newImport("org.omg.PortableServer.ForwardRequestHelper.id", true),
                newImport("org.omg.PortableServer.POAHelper.id", true),
                newImport("org.omg.PortableServer.ServantActivatorHelper.id", true),
                newImport("org.omg.PortableServer.ServantLocatorHelper.id", true),
                newImport("org.omg.PortableServer.CurrentPackage.NoContextHelper.id", true),
                newImport(
                    "org.omg.PortableServer.POAManagerPackage.AdapterInactiveHelper.id", true),
                newImport("org.omg.PortableServer.POAPackage.AdapterAlreadyExistsHelper.id", true),
                newImport("org.omg.PortableServer.POAPackage.AdapterNonExistentHelper.id", true),
                newImport("org.omg.PortableServer.POAPackage.InvalidPolicyHelper.id", true),
                newImport("org.omg.PortableServer.POAPackage.NoServantHelper.id", true),
                newImport("org.omg.PortableServer.POAPackage.ObjectAlreadyActiveHelper.id", true),
                newImport("org.omg.PortableServer.POAPackage.ObjectNotActiveHelper.id", true),
                newImport("org.omg.PortableServer.POAPackage.ServantAlreadyActiveHelper.id", true),
                newImport("org.omg.PortableServer.POAPackage.ServantNotActiveHelper.id", true),
                newImport("org.omg.PortableServer.POAPackage.WrongAdapterHelper.id", true),
                newImport("org.omg.PortableServer.POAPackage.WrongPolicyHelper.id", true),
              })
          .put(
              new Identifier("DIRECTIONALITY_COMMON_NUMBER_SEPARATOR"),
              new Import[] {
                newImport("java.lang.Character.DIRECTIONALITY_COMMON_NUMBER_SEPARATOR", true),
              })
          .put(
              new Identifier("LANGUAGE"),
              new Import[] {
                newImport("java.text.AttributedCharacterIterator.Attribute.LANGUAGE", true),
                newImport("javax.naming.Context.LANGUAGE", true),
                newImport("javax.script.ScriptEngine.LANGUAGE", true),
                newImport("javax.swing.text.html.HTML.Attribute.LANGUAGE", true),
              })
          .put(
              new Identifier("getMaxAllowedParameterSpec"),
              new Import[] {
                newImport("javax.crypto.Cipher.getMaxAllowedParameterSpec", true),
              })
          .put(
              new Identifier("drawDashedRect"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicGraphicsUtils.drawDashedRect", true),
              })
          .put(
              new Identifier("OriginType"),
              new Import[] {
                newImport("java.awt.PageAttributes.OriginType", false),
              })
          .put(
              new Identifier("Messager"),
              new Import[] {
                newImport("javax.annotation.processing.Messager", false),
              })
          .put(
              new Identifier("in"),
              new Import[] {
                newImport("java.io.FileDescriptor.in", true),
                newImport("java.lang.System.in", true),
                newImport("javax.management.Query.in", true),
              })
          .put(
              new Identifier("Position"),
              new Import[] {
                newImport("javax.swing.text.Position", false),
              })
          .put(
              new Identifier("Compilable"),
              new Import[] {
                newImport("javax.script.Compilable", false),
              })
          .put(
              new Identifier("KERNING_ON"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.KERNING_ON", true),
              })
          .put(
              new Identifier("FLUSH_FAILURE"),
              new Import[] {
                newImport("java.util.logging.ErrorManager.FLUSH_FAILURE", true),
              })
          .put(
              new Identifier("TT_WORD"),
              new Import[] {
                newImport("java.io.StreamTokenizer.TT_WORD", true),
              })
          .put(
              new Identifier("StructMember"),
              new Import[] {
                newImport("org.omg.CORBA.StructMember", false),
              })
          .put(
              new Identifier("getDefaultUncaughtExceptionHandler"),
              new Import[] {
                newImport("java.lang.Thread.getDefaultUncaughtExceptionHandler", true),
              })
          .put(
              new Identifier("MARGIN_RIGHT"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.MARGIN_RIGHT", true),
              })
          .put(
              new Identifier("ERA"),
              new Import[] {
                newImport("java.text.DateFormat.Field.ERA", true),
                newImport("java.util.Calendar.ERA", true),
              })
          .put(
              new Identifier("FETCH_FORWARD"),
              new Import[] {
                newImport("java.sql.ResultSet.FETCH_FORWARD", true),
              })
          .put(
              new Identifier("DOOR_OPEN"),
              new Import[] {
                newImport("javax.print.attribute.standard.PrinterStateReason.DOOR_OPEN", true),
              })
          .put(
              new Identifier("REPLACE_ATTRIBUTE"),
              new Import[] {
                newImport("javax.naming.directory.DirContext.REPLACE_ATTRIBUTE", true),
              })
          .put(
              new Identifier("getNetworkInterfaces"),
              new Import[] {
                newImport("java.net.NetworkInterface.getNetworkInterfaces", true),
              })
          .put(
              new Identifier("XmlWriter"),
              new Import[] {
                newImport("javax.sql.rowset.spi.XmlWriter", false),
              })
          .put(
              new Identifier("_DynEnumStub"),
              new Import[] {
                newImport("org.omg.DynamicAny._DynEnumStub", false),
              })
          .put(
              new Identifier("FileLockInterruptionException"),
              new Import[] {
                newImport("java.nio.channels.FileLockInterruptionException", false),
              })
          .put(
              new Identifier("_dk_Fixed"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind._dk_Fixed", true),
              })
          .put(
              new Identifier("ENTER"),
              new Import[] {
                newImport("java.awt.Event.ENTER", true),
              })
          .put(
              new Identifier("SOAPConnection"),
              new Import[] {
                newImport("javax.xml.soap.SOAPConnection", false),
              })
          .put(
              new Identifier("ServiceDetailHelper"),
              new Import[] {
                newImport("org.omg.CORBA.ServiceDetailHelper", false),
              })
          .put(
              new Identifier("DirContext"),
              new Import[] {
                newImport("javax.naming.directory.DirContext", false),
              })
          .put(
              new Identifier("URIOtherProblem"),
              new Import[] {
                newImport("javax.print.URIException.URIOtherProblem", true),
              })
          .put(
              new Identifier("JScrollBar"),
              new Import[] {
                newImport("javax.swing.JScrollBar", false),
              })
          .put(
              new Identifier("ISO_DESIGNATED_LONG_ENVELOPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_DESIGNATED_LONG_ENVELOPE", true),
              })
          .put(
              new Identifier("MenuKeyListener"),
              new Import[] {
                newImport("javax.swing.event.MenuKeyListener", false),
              })
          .put(
              new Identifier("FLAG_MASK"),
              new Import[] {
                newImport("java.awt.font.GlyphVector.FLAG_MASK", true),
              })
          .put(
              new Identifier("REVERSE_LANDSCAPE"),
              new Import[] {
                newImport("java.awt.print.PageFormat.REVERSE_LANDSCAPE", true),
                newImport(
                    "javax.print.attribute.standard.OrientationRequested.REVERSE_LANDSCAPE", true),
              })
          .put(
              new Identifier("ActivityCompletedException"),
              new Import[] {
                newImport("javax.activity.ActivityCompletedException", false),
              })
          .put(
              new Identifier("RIGHT"),
              new Import[] {
                newImport("java.awt.Event.RIGHT", true),
                newImport("java.awt.FlowLayout.RIGHT", true),
                newImport("java.awt.Label.RIGHT", true),
                newImport("javax.swing.JSplitPane.RIGHT", true),
                newImport("javax.swing.SwingConstants.RIGHT", true),
                newImport("javax.swing.border.TitledBorder.RIGHT", true),
              })
          .put(
              new Identifier("ACCESSIBLE_STATE_PROPERTY"),
              new Import[] {
                newImport("javax.accessibility.AccessibleContext.ACCESSIBLE_STATE_PROPERTY", true),
              })
          .put(
              new Identifier("WILDCARD"),
              new Import[] {
                newImport("javax.management.ObjectName.WILDCARD", true),
              })
          .put(
              new Identifier("getSeed"),
              new Import[] {
                newImport("java.security.SecureRandom.getSeed", true),
              })
          .put(
              new Identifier("TemporalUnit"),
              new Import[] {
                newImport("java.time.temporal.TemporalUnit", false),
              })
          .put(
              new Identifier("Use"),
              new Import[] {
                newImport("javax.jws.soap.SOAPBinding.Use", false),
              })
          .put(
              new Identifier("UGARITIC"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.UGARITIC", true),
              })
          .put(
              new Identifier("InvalidValue"),
              new Import[] {
                newImport("org.omg.CORBA.DynAnyPackage.InvalidValue", false),
                newImport("org.omg.DynamicAny.DynAnyPackage.InvalidValue", false),
              })
          .put(
              new Identifier("DERIVATION_RESTRICTION"),
              new Import[] {
                newImport("org.w3c.dom.TypeInfo.DERIVATION_RESTRICTION", true),
              })
          .put(
              new Identifier("KEY_FIRST"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.KEY_FIRST", true),
              })
          .put(
              new Identifier("INCREMENT"),
              new Import[] {
                newImport("javax.accessibility.AccessibleAction.INCREMENT", true),
              })
          .put(
              new Identifier("CurrentOperations"),
              new Import[] {
                newImport("org.omg.CORBA.CurrentOperations", false),
                newImport("org.omg.PortableInterceptor.CurrentOperations", false),
                newImport("org.omg.PortableServer.CurrentOperations", false),
              })
          .put(
              new Identifier("getEditorSearchPath"),
              new Import[] {
                newImport("java.beans.PropertyEditorManager.getEditorSearchPath", true),
              })
          .put(
              new Identifier("equals"),
              new Import[] {
                newImport("java.util.Arrays.equals", true),
                newImport("java.util.Objects.equals", true),
              })
          .put(
              new Identifier("getCurrentManager"),
              new Import[] {
                newImport("javax.swing.FocusManager.getCurrentManager", true),
              })
          .put(
              new Identifier("MENU"),
              new Import[] {
                newImport("java.awt.SystemColor.MENU", true),
                newImport("javax.accessibility.AccessibleRole.MENU", true),
                newImport("javax.swing.plaf.synth.Region.MENU", true),
                newImport("javax.swing.text.html.HTML.Tag.MENU", true),
              })
          .put(
              new Identifier("KOREAN"),
              new Import[] {
                newImport("java.util.Locale.KOREAN", true),
              })
          .put(
              new Identifier("icSigSpace9CLR"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigSpace9CLR", true),
              })
          .put(
              new Identifier("drawTabbedText"),
              new Import[] {
                newImport("javax.swing.text.Utilities.drawTabbedText", true),
              })
          .put(
              new Identifier("ZoneRulesProvider"),
              new Import[] {
                newImport("java.time.zone.ZoneRulesProvider", false),
              })
          .put(
              new Identifier("HashMap"),
              new Import[] {
                newImport("java.util.HashMap", false),
              })
          .put(
              new Identifier("Closeable"),
              new Import[] {
                newImport("java.io.Closeable", false),
              })
          .put(
              new Identifier("NoSuchFileException"),
              new Import[] {
                newImport("java.nio.file.NoSuchFileException", false),
              })
          .put(
              new Identifier("NumberFormatProvider"),
              new Import[] {
                newImport("java.text.spi.NumberFormatProvider", false),
              })
          .put(
              new Identifier("lt"),
              new Import[] {
                newImport("javax.management.Query.lt", true),
              })
          .put(
              new Identifier("getDefaults"),
              new Import[] {
                newImport("javax.swing.UIManager.getDefaults", true),
              })
          .put(
              new Identifier("SSLException"),
              new Import[] {
                newImport("javax.net.ssl.SSLException", false),
              })
          .put(
              new Identifier("setOut"),
              new Import[] {
                newImport("java.lang.System.setOut", true),
              })
          .put(
              new Identifier("icSigSpaceDCLR"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigSpaceDCLR", true),
              })
          .put(
              new Identifier("ofLocal"),
              new Import[] {
                newImport("java.time.ZonedDateTime.ofLocal", true),
              })
          .put(
              new Identifier("floatToRawIntBits"),
              new Import[] {
                newImport("java.lang.Float.floatToRawIntBits", true),
              })
          .put(
              new Identifier("ACCESSIBLE_ACTIVE_DESCENDANT_PROPERTY"),
              new Import[] {
                newImport(
                    "javax.accessibility.AccessibleContext.ACCESSIBLE_ACTIVE_DESCENDANT_PROPERTY",
                    true),
              })
          .put(
              new Identifier("UnionMemberHelper"),
              new Import[] {
                newImport("org.omg.CORBA.UnionMemberHelper", false),
              })
          .put(
              new Identifier("AppletInitializer"),
              new Import[] {
                newImport("java.beans.AppletInitializer", false),
              })
          .put(
              new Identifier("Dst"),
              new Import[] {
                newImport("java.awt.AlphaComposite.Dst", true),
              })
          .put(
              new Identifier("TransactionService"),
              new Import[] {
                newImport("org.omg.IOP.TransactionService", false),
              })
          .put(
              new Identifier("SC_BLOCK_DATA"),
              new Import[] {
                newImport("java.io.ObjectStreamConstants.SC_BLOCK_DATA", true),
              })
          .put(
              new Identifier("ObjectIdHelper"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.ObjectIdHelper", false),
                newImport("org.omg.PortableInterceptor.ORBInitInfoPackage.ObjectIdHelper", false),
              })
          .put(
              new Identifier("TrustAnchor"),
              new Import[] {
                newImport("java.security.cert.TrustAnchor", false),
              })
          .put(
              new Identifier("EMBEDDED_BY_PROPERTY"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRelation.EMBEDDED_BY_PROPERTY", true),
              })
          .put(
              new Identifier("Range"),
              new Import[] {
                newImport("java.awt.font.NumericShaper.Range", false),
              })
          .put(
              new Identifier("ENDSUB"),
              new Import[] {
                newImport("java.util.jar.JarEntry.ENDSUB", true),
                newImport("java.util.jar.JarFile.ENDSUB", true),
                newImport("java.util.jar.JarInputStream.ENDSUB", true),
                newImport("java.util.jar.JarOutputStream.ENDSUB", true),
                newImport("java.util.zip.ZipEntry.ENDSUB", true),
                newImport("java.util.zip.ZipFile.ENDSUB", true),
                newImport("java.util.zip.ZipInputStream.ENDSUB", true),
                newImport("java.util.zip.ZipOutputStream.ENDSUB", true),
              })
          .put(
              new Identifier("LEAD_UNDERLINE"),
              new Import[] {
                newImport("javax.swing.text.TabStop.LEAD_UNDERLINE", true),
              })
          .put(
              new Identifier("plus"),
              new Import[] {
                newImport("javax.management.Query.plus", true),
              })
          .put(
              new Identifier("UIResource"),
              new Import[] {
                newImport("javax.swing.DefaultListCellRenderer.UIResource", false),
                newImport("javax.swing.ScrollPaneLayout.UIResource", false),
                newImport("javax.swing.plaf.UIResource", false),
                newImport("javax.swing.plaf.basic.BasicComboBoxEditor.UIResource", false),
                newImport("javax.swing.plaf.basic.BasicComboBoxRenderer.UIResource", false),
                newImport("javax.swing.plaf.metal.MetalComboBoxEditor.UIResource", false),
                newImport("javax.swing.table.DefaultTableCellRenderer.UIResource", false),
              })
          .put(
              new Identifier("VK_SHIFT"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_SHIFT", true),
              })
          .put(
              new Identifier("ALL_RANGES"),
              new Import[] {
                newImport("java.awt.font.NumericShaper.ALL_RANGES", true),
              })
          .put(
              new Identifier("ofWeeks"),
              new Import[] {
                newImport("java.time.Period.ofWeeks", true),
              })
          .put(
              new Identifier("Constraints"),
              new Import[] {
                newImport("javax.swing.SpringLayout.Constraints", false),
              })
          .put(
              new Identifier("ObjectInput"),
              new Import[] {
                newImport("java.io.ObjectInput", false),
              })
          .put(
              new Identifier("ModalityType"),
              new Import[] {
                newImport("java.awt.Dialog.ModalityType", false),
              })
          .put(
              new Identifier("CDATA"),
              new Import[] {
                newImport("javax.swing.text.html.parser.DTDConstants.CDATA", true),
                newImport("javax.xml.stream.XMLStreamConstants.CDATA", true),
              })
          .put(
              new Identifier("SOAPElementFactory"),
              new Import[] {
                newImport("javax.xml.soap.SOAPElementFactory", false),
              })
          .put(
              new Identifier("guessContentTypeFromName"),
              new Import[] {
                newImport("java.net.URLConnection.guessContentTypeFromName", true),
              })
          .put(
              new Identifier("textHighlight"),
              new Import[] {
                newImport("java.awt.SystemColor.textHighlight", true),
              })
          .put(
              new Identifier("THRESHOLD_ERROR"),
              new Import[] {
                newImport("javax.management.monitor.MonitorNotification.THRESHOLD_ERROR", true),
              })
          .put(
              new Identifier("XAER_INVAL"),
              new Import[] {
                newImport("javax.transaction.xa.XAException.XAER_INVAL", true),
              })
          .put(
              new Identifier("MenuBar"),
              new Import[] {
                newImport("java.awt.MenuBar", false),
              })
          .put(
              new Identifier("XmlElementDecl"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlElementDecl", false),
              })
          .put(
              new Identifier("MonthDay"),
              new Import[] {
                newImport("java.time.MonthDay", false),
              })
          .put(
              new Identifier("KeyInfoFactory"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.keyinfo.KeyInfoFactory", false),
              })
          .put(
              new Identifier("parseDouble"),
              new Import[] {
                newImport("java.lang.Double.parseDouble", true),
                newImport("javax.xml.bind.DatatypeConverter.parseDouble", true),
              })
          .put(
              new Identifier("name2type"),
              new Import[] {
                newImport("javax.swing.text.html.parser.AttributeList.name2type", true),
                newImport("javax.swing.text.html.parser.Element.name2type", true),
                newImport("javax.swing.text.html.parser.Entity.name2type", true),
              })
          .put(
              new Identifier("getRowStart"),
              new Import[] {
                newImport("javax.swing.text.Utilities.getRowStart", true),
              })
          .put(
              new Identifier("VK_SCROLL_LOCK"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_SCROLL_LOCK", true),
              })
          .put(
              new Identifier("of"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.of", true),
                newImport("java.lang.Character.UnicodeScript.of", true),
                newImport("java.time.DayOfWeek.of", true),
                newImport("java.time.Duration.of", true),
                newImport("java.time.LocalDate.of", true),
                newImport("java.time.LocalDateTime.of", true),
                newImport("java.time.LocalTime.of", true),
                newImport("java.time.Month.of", true),
                newImport("java.time.MonthDay.of", true),
                newImport("java.time.OffsetDateTime.of", true),
                newImport("java.time.OffsetTime.of", true),
                newImport("java.time.Period.of", true),
                newImport("java.time.Year.of", true),
                newImport("java.time.YearMonth.of", true),
                newImport("java.time.ZoneId.of", true),
                newImport("java.time.ZoneOffset.of", true),
                newImport("java.time.ZonedDateTime.of", true),
                newImport("java.time.chrono.Chronology.of", true),
                newImport("java.time.chrono.HijrahDate.of", true),
                newImport("java.time.chrono.HijrahEra.of", true),
                newImport("java.time.chrono.IsoEra.of", true),
                newImport("java.time.chrono.JapaneseDate.of", true),
                newImport("java.time.chrono.JapaneseEra.of", true),
                newImport("java.time.chrono.MinguoDate.of", true),
                newImport("java.time.chrono.MinguoEra.of", true),
                newImport("java.time.chrono.ThaiBuddhistDate.of", true),
                newImport("java.time.chrono.ThaiBuddhistEra.of", true),
                newImport("java.time.format.DecimalStyle.of", true),
                newImport("java.time.temporal.ValueRange.of", true),
                newImport("java.time.temporal.WeekFields.of", true),
                newImport("java.time.zone.ZoneOffsetTransition.of", true),
                newImport("java.time.zone.ZoneOffsetTransitionRule.of", true),
                newImport("java.time.zone.ZoneRules.of", true),
                newImport("java.util.EnumSet.of", true),
                newImport("java.util.Optional.of", true),
                newImport("java.util.OptionalDouble.of", true),
                newImport("java.util.OptionalInt.of", true),
                newImport("java.util.OptionalLong.of", true),
                newImport("java.util.stream.Collector.of", true),
                newImport("java.util.stream.DoubleStream.of", true),
                newImport("java.util.stream.IntStream.of", true),
                newImport("java.util.stream.LongStream.of", true),
                newImport("java.util.stream.Stream.of", true),
                newImport("javax.annotation.processing.Completions.of", true),
              })
          .put(
              new Identifier("createHorizontalStrut"),
              new Import[] {
                newImport("javax.swing.Box.createHorizontalStrut", true),
              })
          .put(
              new Identifier("systemDefaultZone"),
              new Import[] {
                newImport("java.time.Clock.systemDefaultZone", true),
              })
          .put(
              new Identifier("EntityReference"),
              new Import[] {
                newImport("javax.xml.stream.events.EntityReference", false),
                newImport("org.w3c.dom.EntityReference", false),
              })
          .put(
              new Identifier("NumberEditor"),
              new Import[] {
                newImport("javax.swing.JSpinner.NumberEditor", false),
              })
          .put(
              new Identifier("_tk_sequence"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind._tk_sequence", true),
              })
          .put(
              new Identifier("NamingContextExtOperations"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextExtOperations", false),
              })
          .put(
              new Identifier("notFilter"),
              new Import[] {
                newImport("javax.swing.RowFilter.notFilter", true),
              })
          .put(
              new Identifier("StandardWatchEventKinds"),
              new Import[] {
                newImport("java.nio.file.StandardWatchEventKinds", false),
              })
          .put(
              new Identifier("makeIcon"),
              new Import[] {
                newImport("javax.swing.LookAndFeel.makeIcon", true),
              })
          .put(
              new Identifier("or"),
              new Import[] {
                newImport("javax.management.Query.or", true),
              })
          .put(
              new Identifier("VK_TAB"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_TAB", true),
              })
          .put(
              new Identifier("ShapeGraphicAttribute"),
              new Import[] {
                newImport("java.awt.font.ShapeGraphicAttribute", false),
              })
          .put(
              new Identifier("TAG_FMTX"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_FMTX", true),
              })
          .put(
              new Identifier("StartDocument"),
              new Import[] {
                newImport("javax.xml.stream.events.StartDocument", false),
              })
          .put(
              new Identifier("DomainCombiner"),
              new Import[] {
                newImport("java.security.DomainCombiner", false),
              })
          .put(
              new Identifier("GDAY"),
              new Import[] {
                newImport("javax.xml.datatype.DatatypeConstants.GDAY", true),
              })
          .put(
              new Identifier("MAX_HIGH_SURROGATE"),
              new Import[] {
                newImport("java.lang.Character.MAX_HIGH_SURROGATE", true),
              })
          .put(
              new Identifier("UNKNOWN_ATTRIBUTE"),
              new Import[] {
                newImport("java.util.jar.Pack200.Packer.UNKNOWN_ATTRIBUTE", true),
              })
          .put(
              new Identifier("CharacterIterator"),
              new Import[] {
                newImport("java.text.CharacterIterator", false),
              })
          .put(
              new Identifier("getMemoryPoolMXBeans"),
              new Import[] {
                newImport("java.lang.management.ManagementFactory.getMemoryPoolMXBeans", true),
              })
          .put(
              new Identifier("SMALLINT"),
              new Import[] {
                newImport("java.sql.Types.SMALLINT", true),
              })
          .put(
              new Identifier("FILE_SYSTEM_VIEW_CHANGED_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JFileChooser.FILE_SYSTEM_VIEW_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("getPredefinedCursor"),
              new Import[] {
                newImport("java.awt.Cursor.getPredefinedCursor", true),
              })
          .put(
              new Identifier("MODE_COPY_FROM_METADATA"),
              new Import[] {
                newImport("javax.imageio.ImageWriteParam.MODE_COPY_FROM_METADATA", true),
              })
          .put(
              new Identifier("BaselineResizeBehavior"),
              new Import[] {
                newImport("java.awt.Component.BaselineResizeBehavior", false),
              })
          .put(
              new Identifier("SimpleDateFormat"),
              new Import[] {
                newImport("java.text.SimpleDateFormat", false),
              })
          .put(
              new Identifier("THREAD_POLICY_ID"),
              new Import[] {
                newImport("org.omg.PortableServer.THREAD_POLICY_ID", false),
              })
          .put(
              new Identifier("TOGGLE_BUTTON"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.TOGGLE_BUTTON", true),
                newImport("javax.swing.plaf.synth.Region.TOGGLE_BUTTON", true),
              })
          .put(
              new Identifier("DriverPropertyInfo"),
              new Import[] {
                newImport("java.sql.DriverPropertyInfo", false),
              })
          .put(
              new Identifier("LINEAR_B_SYLLABARY"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.LINEAR_B_SYLLABARY", true),
              })
          .build();
}
