// Code generated by GenerateStdlib.java. DO NOT EDIT.
package com.nikodoko.javaimports.stdlib.internal.api.v8;

import static com.nikodoko.javaimports.stdlib.internal.Stdlib.newImport;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.common.Identifier;
import com.nikodoko.javaimports.common.Import;
import java.util.Map;

public class Java8StdlibChunk13 {
  static final Map<Identifier, Import[]> CLASSES =
      new ImmutableMap.Builder<Identifier, Import[]>()
          .put(
              new Identifier("ABOVE_BASELINE_TRAILING"),
              new Import[] {
                newImport("java.awt.GridBagConstraints.ABOVE_BASELINE_TRAILING", true),
              })
          .put(
              new Identifier("VK_UNDEFINED"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_UNDEFINED", true),
              })
          .put(
              new Identifier("KEY_FRACTIONALMETRICS"),
              new Import[] {
                newImport("java.awt.RenderingHints.KEY_FRACTIONALMETRICS", true),
              })
          .put(
              new Identifier("ThreadPolicy"),
              new Import[] {
                newImport("org.omg.PortableServer.ThreadPolicy", false),
              })
          .put(
              new Identifier("ParameterDescriptor"),
              new Import[] {
                newImport("java.beans.ParameterDescriptor", false),
              })
          .put(
              new Identifier("DYNAMIC_SOAP_PROTOCOL"),
              new Import[] {
                newImport("javax.xml.soap.SOAPConstants.DYNAMIC_SOAP_PROTOCOL", true),
              })
          .put(
              new Identifier("MALAYALAM"),
              new Import[] {
                newImport("java.awt.font.NumericShaper.MALAYALAM", true),
                newImport("java.lang.Character.UnicodeBlock.MALAYALAM", true),
              })
          .put(
              new Identifier("ALINK"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.ALINK", true),
              })
          .put(
              new Identifier("ptLineDist"),
              new Import[] {
                newImport("java.awt.geom.Line2D.ptLineDist", true),
              })
          .put(
              new Identifier("UnknownUserExceptionHelper"),
              new Import[] {
                newImport("org.omg.CORBA.UnknownUserExceptionHelper", false),
              })
          .put(
              new Identifier("getHighlightedTextColor"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalLookAndFeel.getHighlightedTextColor", true),
              })
          .put(
              new Identifier("ClosedByInterruptException"),
              new Import[] {
                newImport("java.nio.channels.ClosedByInterruptException", false),
              })
          .put(
              new Identifier("STANDALONE"),
              new Import[] {
                newImport("javax.xml.transform.OutputKeys.STANDALONE", true),
              })
          .put(
              new Identifier("Codec"),
              new Import[] {
                newImport("org.omg.IOP.Codec", false),
              })
          .put(
              new Identifier("setSpaceBelow"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.setSpaceBelow", true),
              })
          .put(
              new Identifier("COPIED"),
              new Import[] {
                newImport("java.awt.BufferCapabilities.FlipContents.COPIED", true),
              })
          .put(
              new Identifier("XmlNsForm"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlNsForm", false),
              })
          .put(
              new Identifier("Phaser"),
              new Import[] {
                newImport("java.util.concurrent.Phaser", false),
              })
          .put(
              new Identifier("EDITOR_PANE"),
              new Import[] {
                newImport("javax.swing.plaf.synth.Region.EDITOR_PANE", true),
              })
          .put(
              new Identifier("FileOwnerAttributeView"),
              new Import[] {
                newImport("java.nio.file.attribute.FileOwnerAttributeView", false),
              })
          .put(
              new Identifier("IMPLICIT_ACTIVATION"),
              new Import[] {
                newImport(
                    "org.omg.PortableServer.ImplicitActivationPolicyValue.IMPLICIT_ACTIVATION",
                    true),
              })
          .put(
              new Identifier("BIND"),
              new Import[] {
                newImport("javax.print.attribute.standard.Finishings.BIND", true),
              })
          .put(
              new Identifier("ITEM_STATE_CHANGED"),
              new Import[] {
                newImport("java.awt.event.ItemEvent.ITEM_STATE_CHANGED", true),
              })
          .put(
              new Identifier("SynthFormattedTextFieldUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthFormattedTextFieldUI", false),
              })
          .put(
              new Identifier("SOAP11HTTP_BINDING"),
              new Import[] {
                newImport("javax.xml.ws.soap.SOAPBinding.SOAP11HTTP_BINDING", true),
              })
          .put(
              new Identifier("InvalidClassException"),
              new Import[] {
                newImport("java.io.InvalidClassException", false),
              })
          .put(
              new Identifier("getImageReader"),
              new Import[] {
                newImport("javax.imageio.ImageIO.getImageReader", true),
              })
          .put(
              new Identifier("ValueOutputStream"),
              new Import[] {
                newImport("org.omg.CORBA.portable.ValueOutputStream", false),
              })
          .put(
              new Identifier("createDialog"),
              new Import[] {
                newImport("javax.swing.JColorChooser.createDialog", true),
              })
          .put(
              new Identifier("ICONIFIED"),
              new Import[] {
                newImport("java.awt.Frame.ICONIFIED", true),
                newImport("javax.accessibility.AccessibleState.ICONIFIED", true),
              })
          .put(
              new Identifier("XmlRegistry"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlRegistry", false),
              })
          .put(
              new Identifier("CUSTOM_DIALOG"),
              new Import[] {
                newImport("javax.swing.JFileChooser.CUSTOM_DIALOG", true),
              })
          .put(
              new Identifier("IMPERIAL_ARAMAIC"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.IMPERIAL_ARAMAIC", true),
              })
          .put(
              new Identifier("VK_ALT_GRAPH"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_ALT_GRAPH", true),
              })
          .put(
              new Identifier("AbstractMarshallerImpl"),
              new Import[] {
                newImport("javax.xml.bind.helpers.AbstractMarshallerImpl", false),
              })
          .put(
              new Identifier("Watchable"),
              new Import[] {
                newImport("java.nio.file.Watchable", false),
              })
          .put(
              new Identifier("PASS"),
              new Import[] {
                newImport("java.util.jar.Pack200.Packer.PASS", true),
              })
          .put(
              new Identifier("FileSystemNotFoundException"),
              new Import[] {
                newImport("java.nio.file.FileSystemNotFoundException", false),
              })
          .put(
              new Identifier("NotificationFilterSupport"),
              new Import[] {
                newImport("javax.management.NotificationFilterSupport", false),
              })
          .put(
              new Identifier("XPathFactoryConfigurationException"),
              new Import[] {
                newImport("javax.xml.xpath.XPathFactoryConfigurationException", false),
              })
          .put(
              new Identifier("OMGVMCID"),
              new Import[] {
                newImport("org.omg.CORBA.OMGVMCID", false),
              })
          .put(
              new Identifier("icSigGreenColorantTag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigGreenColorantTag", true),
              })
          .put(
              new Identifier("TYPE_PRINTER"),
              new Import[] {
                newImport("java.awt.GraphicsDevice.TYPE_PRINTER", true),
              })
          .put(
              new Identifier("_tk_value_box"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind._tk_value_box", true),
              })
          .put(
              new Identifier("partitioningBy"),
              new Import[] {
                newImport("java.util.stream.Collectors.partitioningBy", true),
              })
          .put(
              new Identifier("LARGE_KEY"),
              new Import[] {
                newImport("javax.swing.plaf.nimbus.NimbusStyle.LARGE_KEY", true),
              })
          .put(
              new Identifier("SupportedSourceVersion"),
              new Import[] {
                newImport("javax.annotation.processing.SupportedSourceVersion", false),
              })
          .put(
              new Identifier("setBold"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.setBold", true),
              })
          .put(
              new Identifier("SHA512_224"),
              new Import[] {
                newImport("java.security.spec.MGF1ParameterSpec.SHA512_224", true),
              })
          .put(
              new Identifier("WEIGHT_LIGHT"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.WEIGHT_LIGHT", true),
              })
          .put(
              new Identifier("Entry"),
              new Import[] {
                newImport("java.security.KeyStore.Entry", false),
                newImport("java.util.Map.Entry", false),
                newImport("javax.swing.RowFilter.Entry", false),
              })
          .put(
              new Identifier("_ServantActivatorStub"),
              new Import[] {
                newImport("org.omg.PortableServer._ServantActivatorStub", false),
              })
          .put(
              new Identifier("MAHJONG_TILES"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.MAHJONG_TILES", true),
              })
          .put(
              new Identifier("BORDER_BOTTOM_WIDTH"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.BORDER_BOTTOM_WIDTH", true),
              })
          .put(
              new Identifier("infoText"),
              new Import[] {
                newImport("java.awt.SystemColor.infoText", true),
              })
          .put(
              new Identifier("MethodType"),
              new Import[] {
                newImport("java.lang.invoke.MethodType", false),
                newImport("javax.swing.text.html.FormSubmitEvent.MethodType", false),
              })
          .put(
              new Identifier("_dk_Value"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind._dk_Value", true),
              })
          .put(
              new Identifier("packagePrefix"),
              new Import[] {
                newImport("java.rmi.server.LoaderHandler.packagePrefix", true),
                newImport("java.rmi.server.RemoteRef.packagePrefix", true),
              })
          .put(
              new Identifier("ISO"),
              new Import[] {
                newImport("java.time.temporal.WeekFields.ISO", true),
                newImport("javax.print.attribute.standard.MediaSize.ISO", false),
              })
          .put(
              new Identifier("getAlignedSizeRequirements"),
              new Import[] {
                newImport("javax.swing.SizeRequirements.getAlignedSizeRequirements", true),
              })
          .put(
              new Identifier("getDefaultStyleContext"),
              new Import[] {
                newImport("javax.swing.text.StyleContext.getDefaultStyleContext", true),
              })
          .put(
              new Identifier("DESKTOP"),
              new Import[] {
                newImport("java.awt.SystemColor.DESKTOP", true),
              })
          .put(
              new Identifier("INCH"),
              new Import[] {
                newImport("javax.print.attribute.Size2DSyntax.INCH", true),
                newImport("javax.print.attribute.standard.MediaPrintableArea.INCH", true),
              })
          .put(
              new Identifier("tk_longdouble"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind.tk_longdouble", true),
              })
          .put(
              new Identifier("icSigXYZData"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigXYZData", true),
              })
          .put(
              new Identifier("DefaultStyledDocument"),
              new Import[] {
                newImport("javax.swing.text.DefaultStyledDocument", false),
              })
          .put(
              new Identifier("RUNIC"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.RUNIC", true),
              })
          .put(
              new Identifier("TextInputCallback"),
              new Import[] {
                newImport("javax.security.auth.callback.TextInputCallback", false),
              })
          .put(
              new Identifier("icTagType"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icTagType", true),
              })
          .put(
              new Identifier("CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B"),
              new Import[] {
                newImport(
                    "java.lang.Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B", true),
              })
          .put(
              new Identifier("CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A"),
              new Import[] {
                newImport(
                    "java.lang.Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A", true),
              })
          .put(
              new Identifier("CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D"),
              new Import[] {
                newImport(
                    "java.lang.Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D", true),
              })
          .put(
              new Identifier("CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C"),
              new Import[] {
                newImport(
                    "java.lang.Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C", true),
              })
          .put(
              new Identifier("getSpaceBelow"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.getSpaceBelow", true),
              })
          .put(
              new Identifier("StringRefAddr"),
              new Import[] {
                newImport("javax.naming.StringRefAddr", false),
              })
          .put(
              new Identifier("OptionalLong"),
              new Import[] {
                newImport("java.util.OptionalLong", false),
              })
          .put(
              new Identifier("TYPE_4BYTE_ABGR_PRE"),
              new Import[] {
                newImport("java.awt.image.BufferedImage.TYPE_4BYTE_ABGR_PRE", true),
              })
          .put(
              new Identifier("IORInterceptor_3_0"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.IORInterceptor_3_0", false),
              })
          .put(
              new Identifier("Separator"),
              new Import[] {
                newImport("javax.swing.JPopupMenu.Separator", false),
                newImport("javax.swing.JToolBar.Separator", false),
              })
          .put(
              new Identifier("DialogType"),
              new Import[] {
                newImport("java.awt.JobAttributes.DialogType", false),
              })
          .put(
              new Identifier("DOWN"),
              new Import[] {
                newImport("java.awt.Event.DOWN", true),
              })
          .put(
              new Identifier("PROPERTIES"),
              new Import[] {
                newImport("java.awt.image.ImageObserver.PROPERTIES", true),
              })
          .put(
              new Identifier("WINDOW_CLOSED"),
              new Import[] {
                newImport("java.awt.event.WindowEvent.WINDOW_CLOSED", true),
              })
          .put(
              new Identifier("IP_MULTICAST_IF2"),
              new Import[] {
                newImport("java.net.SocketOptions.IP_MULTICAST_IF2", true),
              })
          .put(
              new Identifier("INFO"),
              new Import[] {
                newImport("java.awt.SystemColor.INFO", true),
                newImport("java.util.logging.Level.INFO", true),
                newImport("javax.management.MBeanOperationInfo.INFO", true),
              })
          .put(
              new Identifier("DefaultTextUI"),
              new Import[] {
                newImport("javax.swing.text.DefaultTextUI", false),
              })
          .put(
              new Identifier("NARROW_FORMAT"),
              new Import[] {
                newImport("java.util.Calendar.NARROW_FORMAT", true),
              })
          .put(
              new Identifier("FileSystemException"),
              new Import[] {
                newImport("java.nio.file.FileSystemException", false),
              })
          .put(
              new Identifier("HTTP_NOT_MODIFIED"),
              new Import[] {
                newImport("java.net.HttpURLConnection.HTTP_NOT_MODIFIED", true),
              })
          .put(
              new Identifier("LEAD_DOTS"),
              new Import[] {
                newImport("javax.swing.text.TabStop.LEAD_DOTS", true),
              })
          .put(
              new Identifier("Underline"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.Underline", true),
              })
          .put(
              new Identifier("BLOCKQUOTE"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.BLOCKQUOTE", true),
              })
          .put(
              new Identifier("ListenerNotFoundException"),
              new Import[] {
                newImport("javax.management.ListenerNotFoundException", false),
              })
          .put(
              new Identifier("Collections"),
              new Import[] {
                newImport("java.util.Collections", false),
              })
          .put(
              new Identifier("Override"),
              new Import[] {
                newImport("java.lang.Override", false),
              })
          .put(
              new Identifier("ENDOFF"),
              new Import[] {
                newImport("java.util.jar.JarEntry.ENDOFF", true),
                newImport("java.util.jar.JarFile.ENDOFF", true),
                newImport("java.util.jar.JarInputStream.ENDOFF", true),
                newImport("java.util.jar.JarOutputStream.ENDOFF", true),
                newImport("java.util.zip.ZipEntry.ENDOFF", true),
                newImport("java.util.zip.ZipFile.ENDOFF", true),
                newImport("java.util.zip.ZipInputStream.ENDOFF", true),
                newImport("java.util.zip.ZipOutputStream.ENDOFF", true),
              })
          .put(
              new Identifier("icSigAToB2Tag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigAToB2Tag", true),
              })
          .put(
              new Identifier("ProtectionParameter"),
              new Import[] {
                newImport("java.security.KeyStore.ProtectionParameter", false),
              })
          .put(
              new Identifier("AdapterNameHelper"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.AdapterNameHelper", false),
              })
          .put(
              new Identifier("ObjectReferenceFactory"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.ObjectReferenceFactory", false),
              })
          .put(
              new Identifier("ATTRIBUTE"),
              new Import[] {
                newImport("javax.xml.stream.XMLStreamConstants.ATTRIBUTE", true),
              })
          .put(
              new Identifier("MARGIN_CHANGED_PROPERTY"),
              new Import[] {
                newImport("javax.swing.AbstractButton.MARGIN_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("META_DOWN_MASK"),
              new Import[] {
                newImport("java.awt.event.InputEvent.META_DOWN_MASK", true),
              })
          .put(
              new Identifier("getDefaultChooserPanels"),
              new Import[] {
                newImport(
                    "javax.swing.colorchooser.ColorChooserComponentFactory.getDefaultChooserPanels",
                    true),
              })
          .put(
              new Identifier("getDefaultQueue"),
              new Import[] {
                newImport("javax.swing.text.LayoutQueue.getDefaultQueue", true),
              })
          .put(
              new Identifier("SAXNotSupportedException"),
              new Import[] {
                newImport("org.xml.sax.SAXNotSupportedException", false),
              })
          .put(
              new Identifier("FLASH_OPTION"),
              new Import[] {
                newImport("javax.swing.DebugGraphics.FLASH_OPTION", true),
              })
          .put(
              new Identifier("EndTagType"),
              new Import[] {
                newImport("javax.swing.text.DefaultStyledDocument.ElementSpec.EndTagType", true),
              })
          .put(
              new Identifier("FontSize"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.FontSize", true),
              })
          .put(
              new Identifier("isDigit"),
              new Import[] {
                newImport("java.lang.Character.isDigit", true),
              })
          .put(
              new Identifier("Objects"),
              new Import[] {
                newImport("java.util.Objects", false),
              })
          .put(
              new Identifier("BinaryRefAddr"),
              new Import[] {
                newImport("javax.naming.BinaryRefAddr", false),
              })
          .put(
              new Identifier("ServiceUIFactory"),
              new Import[] {
                newImport("javax.print.ServiceUIFactory", false),
              })
          .put(
              new Identifier("JUSTIFICATION_NONE"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.JUSTIFICATION_NONE", true),
              })
          .put(
              new Identifier("getAttributeKey"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.getAttributeKey", true),
              })
          .put(
              new Identifier("SecurityManager"),
              new Import[] {
                newImport("java.lang.SecurityManager", false),
              })
          .put(
              new Identifier("withCachedThreadPool"),
              new Import[] {
                newImport("java.nio.channels.AsynchronousChannelGroup.withCachedThreadPool", true),
              })
          .put(
              new Identifier("DigestMethod"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.DigestMethod", false),
              })
          .put(
              new Identifier("MISCELLANEOUS_SYMBOLS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.MISCELLANEOUS_SYMBOLS", true),
              })
          .put(
              new Identifier("ALL_STYLES"),
              new Import[] {
                newImport("java.util.Calendar.ALL_STYLES", true),
              })
          .put(
              new Identifier("comparingByValue"),
              new Import[] {
                newImport("java.util.Map.Entry.comparingByValue", true),
              })
          .put(
              new Identifier("SSLHandshakeException"),
              new Import[] {
                newImport("javax.net.ssl.SSLHandshakeException", false),
              })
          .put(
              new Identifier("CONTENT_PANE_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JInternalFrame.CONTENT_PANE_PROPERTY", true),
              })
          .put(
              new Identifier("StandardProtocolFamily"),
              new Import[] {
                newImport("java.net.StandardProtocolFamily", false),
              })
          .put(
              new Identifier("allOf"),
              new Import[] {
                newImport("java.util.EnumSet.allOf", true),
                newImport("java.util.concurrent.CompletableFuture.allOf", true),
              })
          .put(
              new Identifier("ScrollPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.ScrollPaneUI", false),
              })
          .put(
              new Identifier("CODEBASE"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.CODEBASE", true),
              })
          .put(
              new Identifier("unmappableForLength"),
              new Import[] {
                newImport("java.nio.charset.CoderResult.unmappableForLength", true),
              })
          .put(
              new Identifier("TimerTask"),
              new Import[] {
                newImport("java.util.TimerTask", false),
              })
          .put(
              new Identifier("UnmarshalException"),
              new Import[] {
                newImport("java.rmi.UnmarshalException", false),
                newImport("javax.xml.bind.UnmarshalException", false),
              })
          .put(
              new Identifier("KANA_SUPPLEMENT"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.KANA_SUPPLEMENT", true),
              })
          .put(
              new Identifier("SOAP12HTTP_MTOM_BINDING"),
              new Import[] {
                newImport("javax.xml.ws.soap.SOAPBinding.SOAP12HTTP_MTOM_BINDING", true),
              })
          .put(
              new Identifier("controlLtHighlight"),
              new Import[] {
                newImport("java.awt.SystemColor.controlLtHighlight", true),
              })
          .put(
              new Identifier("getImageWriters"),
              new Import[] {
                newImport("javax.imageio.ImageIO.getImageWriters", true),
              })
          .put(
              new Identifier("NotificationBroadcasterSupport"),
              new Import[] {
                newImport("javax.management.NotificationBroadcasterSupport", false),
              })
          .put(
              new Identifier("PCM_FLOAT"),
              new Import[] {
                newImport("javax.sound.sampled.AudioFormat.Encoding.PCM_FLOAT", true),
              })
          .put(
              new Identifier("ofDateAdjuster"),
              new Import[] {
                newImport("java.time.temporal.TemporalAdjusters.ofDateAdjuster", true),
              })
          .put(
              new Identifier("IIOMetadataFormat"),
              new Import[] {
                newImport("javax.imageio.metadata.IIOMetadataFormat", false),
              })
          .put(
              new Identifier("QName"),
              new Import[] {
                newImport("javax.xml.namespace.QName", false),
              })
          .put(
              new Identifier("JOB_INCOMING"),
              new Import[] {
                newImport("javax.print.attribute.standard.JobStateReason.JOB_INCOMING", true),
              })
          .put(
              new Identifier("supplyAsync"),
              new Import[] {
                newImport("java.util.concurrent.CompletableFuture.supplyAsync", true),
              })
          .put(
              new Identifier("FILLER"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.FILLER", true),
              })
          .put(
              new Identifier("AttributeModificationException"),
              new Import[] {
                newImport("javax.naming.directory.AttributeModificationException", false),
              })
          .put(
              new Identifier("COMBINING_SPACING_MARK"),
              new Import[] {
                newImport("java.lang.Character.COMBINING_SPACING_MARK", true),
              })
          .put(
              new Identifier("ActivityRequiredException"),
              new Import[] {
                newImport("javax.activity.ActivityRequiredException", false),
              })
          .put(
              new Identifier("NONE_OPTION"),
              new Import[] {
                newImport("javax.swing.DebugGraphics.NONE_OPTION", true),
              })
          .put(
              new Identifier("AccessibleHypertext"),
              new Import[] {
                newImport("javax.accessibility.AccessibleHypertext", false),
              })
          .put(
              new Identifier("MIAO"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.MIAO", true),
              })
          .put(
              new Identifier("InvalidRelationServiceException"),
              new Import[] {
                newImport("javax.management.relation.InvalidRelationServiceException", false),
              })
          .put(
              new Identifier("OTHER_PUNCTUATION"),
              new Import[] {
                newImport("java.lang.Character.OTHER_PUNCTUATION", true),
              })
          .put(
              new Identifier("getWindowTitleFont"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleFont", true),
              })
          .put(
              new Identifier("YOU_3"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSize.JIS.YOU_3", true),
              })
          .put(
              new Identifier("YOU_2"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSize.JIS.YOU_2", true),
              })
          .put(
              new Identifier("YOU_1"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSize.JIS.YOU_1", true),
              })
          .put(
              new Identifier("YOU_7"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSize.JIS.YOU_7", true),
              })
          .put(
              new Identifier("WORD_SPACING"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.WORD_SPACING", true),
              })
          .put(
              new Identifier("YOU_6"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSize.JIS.YOU_6", true),
              })
          .put(
              new Identifier("YOU_5"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSize.JIS.YOU_5", true),
              })
          .put(
              new Identifier("YOU_4"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSize.JIS.YOU_4", true),
              })
          .put(
              new Identifier("LineSpacing"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.LineSpacing", true),
              })
          .put(
              new Identifier("BORDER_TOP_COLOR"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.BORDER_TOP_COLOR", true),
              })
          .put(
              new Identifier("SystemTray"),
              new Import[] {
                newImport("java.awt.SystemTray", false),
              })
          .put(
              new Identifier("URIDereferencer"),
              new Import[] {
                newImport("javax.xml.crypto.URIDereferencer", false),
              })
          .put(
              new Identifier("PrintService"),
              new Import[] {
                newImport("javax.print.PrintService", false),
              })
          .put(
              new Identifier("MAXIMIZED_BOTH"),
              new Import[] {
                newImport("java.awt.Frame.MAXIMIZED_BOTH", true),
              })
          .put(
              new Identifier("intStream"),
              new Import[] {
                newImport("java.util.stream.StreamSupport.intStream", true),
              })
          .put(
              new Identifier("getPrimaryControl"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControl", true),
              })
          .put(
              new Identifier("EditorKit"),
              new Import[] {
                newImport("javax.swing.text.EditorKit", false),
              })
          .put(
              new Identifier("MissingFormatArgumentException"),
              new Import[] {
                newImport("java.util.MissingFormatArgumentException", false),
              })
          .put(
              new Identifier("MetalPopupMenuSeparatorUI"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalPopupMenuSeparatorUI", false),
              })
          .put(
              new Identifier("MetaMessage"),
              new Import[] {
                newImport("javax.sound.midi.MetaMessage", false),
              })
          .put(
              new Identifier("ofYearDay"),
              new Import[] {
                newImport("java.time.LocalDate.ofYearDay", true),
              })
          .put(
              new Identifier("MARKER_SUPPLY_LOW"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.PrinterStateReason.MARKER_SUPPLY_LOW", true),
              })
          .put(
              new Identifier("Unmarshaller"),
              new Import[] {
                newImport("javax.xml.bind.Unmarshaller", false),
              })
          .put(
              new Identifier("HTTP_MOVED_PERM"),
              new Import[] {
                newImport("java.net.HttpURLConnection.HTTP_MOVED_PERM", true),
              })
          .put(
              new Identifier("EnumConstantNotPresentException"),
              new Import[] {
                newImport("java.lang.EnumConstantNotPresentException", false),
              })
          .put(
              new Identifier("DIRECTIONALITY_EUROPEAN_NUMBER"),
              new Import[] {
                newImport("java.lang.Character.DIRECTIONALITY_EUROPEAN_NUMBER", true),
              })
          .put(
              new Identifier("RelationSupport"),
              new Import[] {
                newImport("javax.management.relation.RelationSupport", false),
              })
          .put(
              new Identifier("SCROLLS_ON_EXPAND_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JTree.SCROLLS_ON_EXPAND_PROPERTY", true),
              })
          .put(
              new Identifier("RMI_CLIENT_SOCKET_FACTORY_ATTRIBUTE"),
              new Import[] {
                newImport(
                    "javax.management.remote.rmi.RMIConnectorServer.RMI_CLIENT_SOCKET_FACTORY_ATTRIBUTE",
                    true),
              })
          .put(
              new Identifier("REBIND"),
              new Import[] {
                newImport("org.omg.CORBA.REBIND", false),
              })
          .put(
              new Identifier("VK_CLEAR"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_CLEAR", true),
              })
          .put(
              new Identifier("MEDIA_NEEDED"),
              new Import[] {
                newImport("javax.print.attribute.standard.PrinterStateReason.MEDIA_NEEDED", true),
              })
          .put(
              new Identifier("MultiDesktopIconUI"),
              new Import[] {
                newImport("javax.swing.plaf.multi.MultiDesktopIconUI", false),
              })
          .put(
              new Identifier("Flushable"),
              new Import[] {
                newImport("java.io.Flushable", false),
              })
          .put(
              new Identifier("InputMismatchException"),
              new Import[] {
                newImport("java.util.InputMismatchException", false),
              })
          .put(
              new Identifier("LEADING"),
              new Import[] {
                newImport("java.awt.FlowLayout.LEADING", true),
                newImport("javax.swing.SwingConstants.LEADING", true),
                newImport("javax.swing.border.TitledBorder.LEADING", true),
              })
          .put(
              new Identifier("WRITE_FAILURE"),
              new Import[] {
                newImport("java.util.logging.ErrorManager.WRITE_FAILURE", true),
              })
          .put(
              new Identifier("menuText"),
              new Import[] {
                newImport("java.awt.SystemColor.menuText", true),
              })
          .put(
              new Identifier("ClosedFileSystemException"),
              new Import[] {
                newImport("java.nio.file.ClosedFileSystemException", false),
              })
          .put(
              new Identifier("MONTH_FIELD"),
              new Import[] {
                newImport("java.text.DateFormat.MONTH_FIELD", true),
              })
          .put(
              new Identifier("createVerticalBox"),
              new Import[] {
                newImport("javax.swing.Box.createVerticalBox", true),
              })
          .put(
              new Identifier("VK_PAGE_DOWN"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_PAGE_DOWN", true),
              })
          .put(
              new Identifier("LOCHOW"),
              new Import[] {
                newImport("java.util.jar.JarEntry.LOCHOW", true),
                newImport("java.util.jar.JarFile.LOCHOW", true),
                newImport("java.util.jar.JarInputStream.LOCHOW", true),
                newImport("java.util.jar.JarOutputStream.LOCHOW", true),
                newImport("java.util.zip.ZipEntry.LOCHOW", true),
                newImport("java.util.zip.ZipFile.LOCHOW", true),
                newImport("java.util.zip.ZipInputStream.LOCHOW", true),
                newImport("java.util.zip.ZipOutputStream.LOCHOW", true),
              })
          .put(
              new Identifier("HORIZONTAL_CENTER"),
              new Import[] {
                newImport("javax.swing.SpringLayout.HORIZONTAL_CENTER", true),
              })
          .put(
              new Identifier("ATTRIBUTE_NODE"),
              new Import[] {
                newImport("org.w3c.dom.Node.ATTRIBUTE_NODE", true),
              })
          .put(
              new Identifier("FETCH_REVERSE"),
              new Import[] {
                newImport("java.sql.ResultSet.FETCH_REVERSE", true),
              })
          .put(
              new Identifier("BadLocationException"),
              new Import[] {
                newImport("javax.swing.text.BadLocationException", false),
              })
          .put(
              new Identifier("getShearInstance"),
              new Import[] {
                newImport("java.awt.geom.AffineTransform.getShearInstance", true),
              })
          .put(
              new Identifier("RemoteCall"),
              new Import[] {
                newImport("java.rmi.server.RemoteCall", false),
              })
          .put(
              new Identifier("MODIFICATION_TIME"),
              new Import[] {
                newImport("java.util.jar.Pack200.Packer.MODIFICATION_TIME", true),
              })
          .put(
              new Identifier("NAMES"),
              new Import[] {
                newImport("javax.swing.text.html.parser.DTDConstants.NAMES", true),
              })
          .put(
              new Identifier("Shape"),
              new Import[] {
                newImport("java.awt.Shape", false),
              })
          .put(
              new Identifier("TAG_BDAT"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_BDAT", true),
              })
          .put(
              new Identifier("PROPERTYNAME"),
              new Import[] {
                newImport("java.beans.DesignMode.PROPERTYNAME", true),
              })
          .put(
              new Identifier("TRANSACTION_UNAVAILABLE"),
              new Import[] {
                newImport("org.omg.CORBA.TRANSACTION_UNAVAILABLE", false),
              })
          .put(
              new Identifier("JTextPane"),
              new Import[] {
                newImport("javax.swing.JTextPane", false),
              })
          .put(
              new Identifier("getEtchedBorderUIResource"),
              new Import[] {
                newImport("javax.swing.plaf.BorderUIResource.getEtchedBorderUIResource", true),
              })
          .put(
              new Identifier("SplashScreen"),
              new Import[] {
                newImport("java.awt.SplashScreen", false),
              })
          .put(
              new Identifier("JobMediaSheetsCompleted"),
              new Import[] {
                newImport("javax.print.attribute.standard.JobMediaSheetsCompleted", false),
              })
          .put(
              new Identifier("BufferOverflowException"),
              new Import[] {
                newImport("java.nio.BufferOverflowException", false),
              })
          .put(
              new Identifier("DefaultTreeCellEditor"),
              new Import[] {
                newImport("javax.swing.tree.DefaultTreeCellEditor", false),
              })
          .put(
              new Identifier("DropMode"),
              new Import[] {
                newImport("javax.swing.DropMode", false),
              })
          .put(
              new Identifier("_DynUnionStub"),
              new Import[] {
                newImport("org.omg.DynamicAny._DynUnionStub", false),
              })
          .put(
              new Identifier("setBidiLevel"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.setBidiLevel", true),
              })
          .put(
              new Identifier("DynArrayHelper"),
              new Import[] {
                newImport("org.omg.DynamicAny.DynArrayHelper", false),
              })
          .put(
              new Identifier("MAX_WEIGHT"),
              new Import[] {
                newImport("java.util.Locale.LanguageRange.MAX_WEIGHT", true),
              })
          .put(
              new Identifier("LOWER_RIGHT_CORNER"),
              new Import[] {
                newImport("javax.swing.ScrollPaneConstants.LOWER_RIGHT_CORNER", true),
              })
          .put(
              new Identifier("MediaName"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaName", false),
              })
          .put(
              new Identifier("getBeanInfo"),
              new Import[] {
                newImport("java.beans.Introspector.getBeanInfo", true),
              })
          .put(
              new Identifier("OperationsException"),
              new Import[] {
                newImport("javax.management.OperationsException", false),
              })
          .put(
              new Identifier("CalendarDataProvider"),
              new Import[] {
                newImport("java.util.spi.CalendarDataProvider", false),
              })
          .put(
              new Identifier("HTTP_REQUEST_HEADERS"),
              new Import[] {
                newImport("javax.xml.ws.handler.MessageContext.HTTP_REQUEST_HEADERS", true),
              })
          .put(
              new Identifier("AsynchronousChannelGroup"),
              new Import[] {
                newImport("java.nio.channels.AsynchronousChannelGroup", false),
              })
          .put(
              new Identifier("ButtonAreaLayout"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicOptionPaneUI.ButtonAreaLayout", false),
              })
          .put(
              new Identifier("IllegalMonitorStateException"),
              new Import[] {
                newImport("java.lang.IllegalMonitorStateException", false),
              })
          .put(
              new Identifier("Principal"),
              new Import[] {
                newImport("java.security.Principal", false),
                newImport("org.omg.CORBA.Principal", false),
              })
          .put(
              new Identifier("GridBagConstraints"),
              new Import[] {
                newImport("java.awt.GridBagConstraints", false),
              })
          .put(
              new Identifier("DefaultButtonModel"),
              new Import[] {
                newImport("javax.swing.DefaultButtonModel", false),
              })
          .put(
              new Identifier("InsetsUIResource"),
              new Import[] {
                newImport("javax.swing.plaf.InsetsUIResource", false),
              })
          .put(
              new Identifier("listRoots"),
              new Import[] {
                newImport("java.io.File.listRoots", true),
              })
          .put(
              new Identifier("INPUT"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.INPUT", true),
              })
          .put(
              new Identifier("getRuntimeMXBean"),
              new Import[] {
                newImport("java.lang.management.ManagementFactory.getRuntimeMXBean", true),
              })
          .put(
              new Identifier("SELECTED_RAW_TEXT_HIGHLIGHT"),
              new Import[] {
                newImport("java.awt.im.InputMethodHighlight.SELECTED_RAW_TEXT_HIGHLIGHT", true),
              })
          .put(
              new Identifier("getCurrencyInstance"),
              new Import[] {
                newImport("java.text.NumberFormat.getCurrencyInstance", true),
              })
          .put(
              new Identifier("FOCUS_PAINTED_CHANGED_PROPERTY"),
              new Import[] {
                newImport("javax.swing.AbstractButton.FOCUS_PAINTED_CHANGED_PROPERTY", true),
              })
          .put(
              new Identifier("NA_LETTER_WHITE"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaName.NA_LETTER_WHITE", true),
              })
          .put(
              new Identifier("RMISocketFactory"),
              new Import[] {
                newImport("java.rmi.server.RMISocketFactory", false),
              })
          .put(
              new Identifier("setDouble"),
              new Import[] {
                newImport("java.lang.reflect.Array.setDouble", true),
              })
          .put(
              new Identifier("NO_ROLE_WITH_NAME"),
              new Import[] {
                newImport("javax.management.relation.RoleStatus.NO_ROLE_WITH_NAME", true),
              })
          .put(
              new Identifier("AssertionError"),
              new Import[] {
                newImport("java.lang.AssertionError", false),
              })
          .put(
              new Identifier("AccessibleExtendedComponent"),
              new Import[] {
                newImport("javax.accessibility.AccessibleExtendedComponent", false),
              })
          .put(
              new Identifier("AnySeqHolder"),
              new Import[] {
                newImport("org.omg.CORBA.AnySeqHolder", false),
              })
          .put(
              new Identifier("JSlider"),
              new Import[] {
                newImport("javax.swing.JSlider", false),
              })
          .put(
              new Identifier("MultiSeparatorUI"),
              new Import[] {
                newImport("javax.swing.plaf.multi.MultiSeparatorUI", false),
              })
          .put(
              new Identifier("tertiaryOrder"),
              new Import[] {
                newImport("java.text.CollationElementIterator.tertiaryOrder", true),
              })
          .put(
              new Identifier("TC_CLASS"),
              new Import[] {
                newImport("java.io.ObjectStreamConstants.TC_CLASS", true),
              })
          .put(
              new Identifier("HORIZONTAL_SCROLLBAR_NEVER"),
              new Import[] {
                newImport("javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER", true),
              })
          .put(
              new Identifier("DynArray"),
              new Import[] {
                newImport("org.omg.CORBA.DynArray", false),
                newImport("org.omg.DynamicAny.DynArray", false),
              })
          .put(
              new Identifier("DONE"),
              new Import[] {
                newImport("java.text.BreakIterator.DONE", true),
                newImport("java.text.CharacterIterator.DONE", true),
              })
          .put(
              new Identifier("IMG"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.IMG", true),
              })
          .put(
              new Identifier("Channel"),
              new Import[] {
                newImport("java.nio.channels.Channel", false),
              })
          .put(
              new Identifier("AclEntry"),
              new Import[] {
                newImport("java.nio.file.attribute.AclEntry", false),
                newImport("java.security.acl.AclEntry", false),
              })
          .put(
              new Identifier("TIME_WITH_TIMEZONE"),
              new Import[] {
                newImport("java.sql.Types.TIME_WITH_TIMEZONE", true),
              })
          .put(
              new Identifier("DOMLocator"),
              new Import[] {
                newImport("javax.xml.transform.dom.DOMLocator", false),
                newImport("org.w3c.dom.DOMLocator", false),
              })
          .put(
              new Identifier("TimerNotification"),
              new Import[] {
                newImport("javax.management.timer.TimerNotification", false),
              })
          .put(
              new Identifier("SynthTextAreaUI"),
              new Import[] {
                newImport("javax.swing.plaf.synth.SynthTextAreaUI", false),
              })
          .put(
              new Identifier("DSAPrivateKeySpec"),
              new Import[] {
                newImport("java.security.spec.DSAPrivateKeySpec", false),
              })
          .put(
              new Identifier("PUSH_BUTTON"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.PUSH_BUTTON", true),
              })
          .put(
              new Identifier("WHEN_ANCESTOR_OF_FOCUSED_COMPONENT"),
              new Import[] {
                newImport("javax.swing.JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT", true),
              })
          .put(
              new Identifier("NMTOKENS"),
              new Import[] {
                newImport("javax.swing.text.html.parser.DTDConstants.NMTOKENS", true),
              })
          .put(
              new Identifier("ShortBufferException"),
              new Import[] {
                newImport("javax.crypto.ShortBufferException", false),
              })
          .put(
              new Identifier("ArrayStoreException"),
              new Import[] {
                newImport("java.lang.ArrayStoreException", false),
              })
          .put(
              new Identifier("JOB_CANCELED_BY_USER"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.JobStateReason.JOB_CANCELED_BY_USER", true),
              })
          .put(
              new Identifier("IS_MAXIMUM_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JInternalFrame.IS_MAXIMUM_PROPERTY", true),
              })
          .put(
              new Identifier("HTTP_CLIENT_TIMEOUT"),
              new Import[] {
                newImport("java.net.HttpURLConnection.HTTP_CLIENT_TIMEOUT", true),
              })
          .put(
              new Identifier("IMG_BORDER"),
              new Import[] {
                newImport("javax.swing.text.html.HTMLEditorKit.IMG_BORDER", true),
              })
          .put(
              new Identifier("EntityDeclaration"),
              new Import[] {
                newImport("javax.xml.stream.events.EntityDeclaration", false),
              })
          .put(
              new Identifier("TEXT_HTML_HOST"),
              new Import[] {
                newImport("javax.print.DocFlavor.BYTE_ARRAY.TEXT_HTML_HOST", true),
                newImport("javax.print.DocFlavor.INPUT_STREAM.TEXT_HTML_HOST", true),
                newImport("javax.print.DocFlavor.URL.TEXT_HTML_HOST", true),
              })
          .put(
              new Identifier("MetalInternalFrameUI"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalInternalFrameUI", false),
              })
          .put(
              new Identifier("getAttribute"),
              new Import[] {
                newImport("java.nio.file.Files.getAttribute", true),
                newImport("javax.swing.text.html.CSS.getAttribute", true),
              })
          .put(
              new Identifier("arrayElementSetter"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandles.arrayElementSetter", true),
              })
          .put(
              new Identifier("AclEntryFlag"),
              new Import[] {
                newImport("java.nio.file.attribute.AclEntryFlag", false),
              })
          .put(
              new Identifier("ServantActivatorPOA"),
              new Import[] {
                newImport("org.omg.PortableServer.ServantActivatorPOA", false),
              })
          .put(
              new Identifier("textText"),
              new Import[] {
                newImport("java.awt.SystemColor.textText", true),
              })
          .put(
              new Identifier("ChangeListener"),
              new Import[] {
                newImport("javax.swing.event.ChangeListener", false),
              })
          .put(
              new Identifier("EAST"),
              new Import[] {
                newImport("java.awt.BorderLayout.EAST", true),
                newImport("java.awt.GridBagConstraints.EAST", true),
                newImport("javax.swing.SpringLayout.EAST", true),
                newImport("javax.swing.SwingConstants.EAST", true),
              })
          .put(
              new Identifier("setAll"),
              new Import[] {
                newImport("java.util.Arrays.setAll", true),
              })
          .put(
              new Identifier("INDETERMINATE"),
              new Import[] {
                newImport("javax.accessibility.AccessibleState.INDETERMINATE", true),
                newImport("javax.xml.datatype.DatatypeConstants.INDETERMINATE", true),
              })
          .put(
              new Identifier("TEXT_HTML_UTF_16"),
              new Import[] {
                newImport("javax.print.DocFlavor.BYTE_ARRAY.TEXT_HTML_UTF_16", true),
                newImport("javax.print.DocFlavor.INPUT_STREAM.TEXT_HTML_UTF_16", true),
                newImport("javax.print.DocFlavor.URL.TEXT_HTML_UTF_16", true),
              })
          .put(
              new Identifier("BORDER_BOTTOM_COLOR"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.BORDER_BOTTOM_COLOR", true),
              })
          .put(
              new Identifier("getProperty"),
              new Import[] {
                newImport("java.awt.Toolkit.getProperty", true),
                newImport("java.lang.System.getProperty", true),
                newImport("java.security.Security.getProperty", true),
              })
          .put(
              new Identifier("CLOB"),
              new Import[] {
                newImport("java.sql.Types.CLOB", true),
              })
          .put(
              new Identifier("CENOFF"),
              new Import[] {
                newImport("java.util.jar.JarEntry.CENOFF", true),
                newImport("java.util.jar.JarFile.CENOFF", true),
                newImport("java.util.jar.JarInputStream.CENOFF", true),
                newImport("java.util.jar.JarOutputStream.CENOFF", true),
                newImport("java.util.zip.ZipEntry.CENOFF", true),
                newImport("java.util.zip.ZipFile.CENOFF", true),
                newImport("java.util.zip.ZipInputStream.CENOFF", true),
                newImport("java.util.zip.ZipOutputStream.CENOFF", true),
              })
          .put(
              new Identifier("LogicalHandler"),
              new Import[] {
                newImport("javax.xml.ws.handler.LogicalHandler", false),
              })
          .put(
              new Identifier("setBeanInfoSearchPath"),
              new Import[] {
                newImport("java.beans.Introspector.setBeanInfoSearchPath", true),
              })
          .put(
              new Identifier("AsynchronousServerSocketChannel"),
              new Import[] {
                newImport("java.nio.channels.AsynchronousServerSocketChannel", false),
              })
          .put(
              new Identifier("importedKeySetNull"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.importedKeySetNull", true),
              })
          .put(
              new Identifier("FileNameExtensionFilter"),
              new Import[] {
                newImport("javax.swing.filechooser.FileNameExtensionFilter", false),
              })
          .put(
              new Identifier("XmlSchemaType"),
              new Import[] {
                newImport("javax.xml.bind.annotation.XmlSchemaType", false),
              })
          .put(
              new Identifier("IOR"),
              new Import[] {
                newImport("org.omg.IOP.IOR", false),
              })
          .put(
              new Identifier("FileDescriptor"),
              new Import[] {
                newImport("java.io.FileDescriptor", false),
              })
          .put(
              new Identifier("ChangeEvent"),
              new Import[] {
                newImport("javax.swing.event.ChangeEvent", false),
              })
          .put(
              new Identifier("TreeCellEditor"),
              new Import[] {
                newImport("javax.swing.tree.TreeCellEditor", false),
              })
          .put(
              new Identifier("DHPrivateKeySpec"),
              new Import[] {
                newImport("javax.crypto.spec.DHPrivateKeySpec", false),
              })
          .put(
              new Identifier("X500Principal"),
              new Import[] {
                newImport("javax.security.auth.x500.X500Principal", false),
              })
          .put(
              new Identifier("DEFAULT_OBJECT_MODEL_URI"),
              new Import[] {
                newImport("javax.xml.xpath.XPathFactory.DEFAULT_OBJECT_MODEL_URI", true),
              })
          .put(
              new Identifier("WEIGHT_MEDIUM"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.WEIGHT_MEDIUM", true),
              })
          .put(
              new Identifier("REF_invokeInterface"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandleInfo.REF_invokeInterface", true),
              })
          .put(
              new Identifier("LogManager"),
              new Import[] {
                newImport("java.util.logging.LogManager", false),
              })
          .build();
}
