// Code generated by GenerateStdlib.java. DO NOT EDIT.
package com.nikodoko.javaimports.stdlib.internal.api.v8;

import static com.nikodoko.javaimports.stdlib.internal.Stdlib.newImport;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.common.Identifier;
import com.nikodoko.javaimports.common.Import;
import java.util.Map;

public class Java8StdlibChunk3 {
  static final Map<Identifier, Import[]> CLASSES =
      new ImmutableMap.Builder<Identifier, Import[]>()
          .put(
              new Identifier("SOAP_1_2_PROTOCOL"),
              new Import[] {
                newImport("javax.xml.soap.SOAPConstants.SOAP_1_2_PROTOCOL", true),
              })
          .put(
              new Identifier("DocumentListener"),
              new Import[] {
                newImport("javax.swing.event.DocumentListener", false),
              })
          .put(
              new Identifier("FieldNameHelper"),
              new Import[] {
                newImport("org.omg.CORBA.FieldNameHelper", false),
                newImport("org.omg.DynamicAny.FieldNameHelper", false),
              })
          .put(
              new Identifier("AttributeList"),
              new Import[] {
                newImport("javax.management.AttributeList", false),
                newImport("javax.swing.text.html.parser.AttributeList", false),
                newImport("org.xml.sax.AttributeList", false),
              })
          .put(
              new Identifier("PolicyFactoryOperations"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.PolicyFactoryOperations", false),
              })
          .put(
              new Identifier("UncheckedIOException"),
              new Import[] {
                newImport("java.io.UncheckedIOException", false),
              })
          .put(
              new Identifier("MAX_VALUE_FIELD"),
              new Import[] {
                newImport("javax.management.JMX.MAX_VALUE_FIELD", true),
              })
          .put(
              new Identifier("ITEM_FIRST"),
              new Import[] {
                newImport("java.awt.event.ItemEvent.ITEM_FIRST", true),
              })
          .put(
              new Identifier("DFN"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.DFN", true),
              })
          .put(
              new Identifier("A0"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.A0", true),
                newImport("javax.print.attribute.standard.MediaSize.ISO.A0", true),
              })
          .put(
              new Identifier("A1"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.A1", true),
                newImport("javax.print.attribute.standard.MediaSize.ISO.A1", true),
              })
          .put(
              new Identifier("beforeOffset"),
              new Import[] {
                newImport("java.awt.font.TextHitInfo.beforeOffset", true),
              })
          .put(
              new Identifier("A2"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.A2", true),
                newImport("javax.print.attribute.standard.MediaSize.ISO.A2", true),
              })
          .put(
              new Identifier("A3"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.A3", true),
                newImport("javax.print.attribute.standard.MediaSize.ISO.A3", true),
              })
          .put(
              new Identifier("A4"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.A4", true),
                newImport("javax.print.attribute.standard.MediaSize.ISO.A4", true),
              })
          .put(
              new Identifier("UNDERLINE_LOW_DASHED"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.UNDERLINE_LOW_DASHED", true),
              })
          .put(
              new Identifier("REMOVAL"),
              new Import[] {
                newImport("org.w3c.dom.events.MutationEvent.REMOVAL", true),
              })
          .put(
              new Identifier("A5"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.A5", true),
                newImport("javax.print.attribute.standard.MediaSize.ISO.A5", true),
              })
          .put(
              new Identifier("A6"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.A6", true),
                newImport("javax.print.attribute.standard.MediaSize.ISO.A6", true),
              })
          .put(
              new Identifier("PrintQualityType"),
              new Import[] {
                newImport("java.awt.PageAttributes.PrintQualityType", false),
              })
          .put(
              new Identifier("A7"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.A7", true),
                newImport("javax.print.attribute.standard.MediaSize.ISO.A7", true),
              })
          .put(
              new Identifier("SCROLLBARS_NONE"),
              new Import[] {
                newImport("java.awt.TextArea.SCROLLBARS_NONE", true),
              })
          .put(
              new Identifier("A8"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.A8", true),
                newImport("javax.print.attribute.standard.MediaSize.ISO.A8", true),
              })
          .put(
              new Identifier("A9"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.A9", true),
                newImport("javax.print.attribute.standard.MediaSize.ISO.A9", true),
              })
          .put(
              new Identifier("JobState"),
              new Import[] {
                newImport("javax.print.attribute.standard.JobState", false),
              })
          .put(
              new Identifier("AudioFormat"),
              new Import[] {
                newImport("javax.sound.sampled.AudioFormat", false),
              })
          .put(
              new Identifier("MethodHandleInfo"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandleInfo", false),
              })
          .put(
              new Identifier("JOB_FAILED"),
              new Import[] {
                newImport("javax.print.event.PrintJobEvent.JOB_FAILED", true),
              })
          .put(
              new Identifier("DGC"),
              new Import[] {
                newImport("java.rmi.dgc.DGC", false),
              })
          .put(
              new Identifier("AD"),
              new Import[] {
                newImport("java.util.GregorianCalendar.AD", true),
              })
          .put(
              new Identifier("AbstractButton"),
              new Import[] {
                newImport("javax.swing.AbstractButton", false),
              })
          .put(
              new Identifier("BasicEditorPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicEditorPaneUI", false),
              })
          .put(
              new Identifier("OptionPaneUI"),
              new Import[] {
                newImport("javax.swing.plaf.OptionPaneUI", false),
              })
          .put(
              new Identifier("KEY_STROKE_CONTROL"),
              new Import[] {
                newImport("java.awt.RenderingHints.KEY_STROKE_CONTROL", true),
              })
          .put(
              new Identifier("isEventDispatchThread"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.isEventDispatchThread", true),
              })
          .put(
              new Identifier("doLookup"),
              new Import[] {
                newImport("javax.naming.InitialContext.doLookup", true),
              })
          .put(
              new Identifier("AM"),
              new Import[] {
                newImport("java.util.Calendar.AM", true),
              })
          .put(
              new Identifier("DEFAULT_CARET_POLICY"),
              new Import[] {
                newImport("java.awt.font.TextLayout.DEFAULT_CARET_POLICY", true),
              })
          .put(
              new Identifier("B0"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.B0", true),
                newImport("javax.print.attribute.standard.MediaSize.ISO.B0", true),
                newImport("javax.print.attribute.standard.MediaSize.JIS.B0", true),
              })
          .put(
              new Identifier("B1"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.B1", true),
                newImport("javax.print.attribute.standard.MediaSize.ISO.B1", true),
                newImport("javax.print.attribute.standard.MediaSize.JIS.B1", true),
              })
          .put(
              new Identifier("IDENTITY"),
              new Import[] {
                newImport("java.awt.font.TransformAttribute.IDENTITY", true),
              })
          .put(
              new Identifier("B2"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.B2", true),
                newImport("javax.print.attribute.standard.MediaSize.ISO.B2", true),
                newImport("javax.print.attribute.standard.MediaSize.JIS.B2", true),
              })
          .put(
              new Identifier("ofSecondOfDay"),
              new Import[] {
                newImport("java.time.LocalTime.ofSecondOfDay", true),
              })
          .put(
              new Identifier("B3"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.B3", true),
                newImport("javax.print.attribute.standard.MediaSize.ISO.B3", true),
                newImport("javax.print.attribute.standard.MediaSize.JIS.B3", true),
              })
          .put(
              new Identifier("UID"),
              new Import[] {
                newImport("java.rmi.server.UID", false),
              })
          .put(
              new Identifier("ComboPopup"),
              new Import[] {
                newImport("javax.swing.plaf.basic.ComboPopup", false),
              })
          .put(
              new Identifier("B4"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.B4", true),
                newImport("javax.print.attribute.standard.MediaSize.ISO.B4", true),
                newImport("javax.print.attribute.standard.MediaSize.JIS.B4", true),
              })
          .put(
              new Identifier("B5"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.B5", true),
                newImport("javax.print.attribute.standard.MediaSize.ISO.B5", true),
                newImport("javax.print.attribute.standard.MediaSize.JIS.B5", true),
              })
          .put(
              new Identifier("MultiTextUI"),
              new Import[] {
                newImport("javax.swing.plaf.multi.MultiTextUI", false),
              })
          .put(
              new Identifier("B6"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.B6", true),
                newImport("javax.print.attribute.standard.MediaSize.ISO.B6", true),
                newImport("javax.print.attribute.standard.MediaSize.JIS.B6", true),
              })
          .put(
              new Identifier("AU"),
              new Import[] {
                newImport("javax.sound.sampled.AudioFileFormat.Type.AU", true),
              })
          .put(
              new Identifier("DELEGATE_NAME"),
              new Import[] {
                newImport("javax.management.MBeanServerDelegate.DELEGATE_NAME", true),
              })
          .put(
              new Identifier("JPasswordField"),
              new Import[] {
                newImport("javax.swing.JPasswordField", false),
              })
          .put(
              new Identifier("B7"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.B7", true),
                newImport("javax.print.attribute.standard.MediaSize.ISO.B7", true),
                newImport("javax.print.attribute.standard.MediaSize.JIS.B7", true),
              })
          .put(
              new Identifier("PRIVATE_USE_AREA"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.PRIVATE_USE_AREA", true),
              })
          .put(
              new Identifier("B8"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.B8", true),
                newImport("javax.print.attribute.standard.MediaSize.ISO.B8", true),
                newImport("javax.print.attribute.standard.MediaSize.JIS.B8", true),
              })
          .put(
              new Identifier("B9"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.B9", true),
                newImport("javax.print.attribute.standard.MediaSize.ISO.B9", true),
                newImport("javax.print.attribute.standard.MediaSize.JIS.B9", true),
              })
          .put(
              new Identifier("isRightMouseButton"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.isRightMouseButton", true),
              })
          .put(
              new Identifier("Readable"),
              new Import[] {
                newImport("java.lang.Readable", false),
              })
          .put(
              new Identifier("HttpCookie"),
              new Import[] {
                newImport("java.net.HttpCookie", false),
              })
          .put(
              new Identifier("isReadable"),
              new Import[] {
                newImport("java.nio.file.Files.isReadable", true),
              })
          .put(
              new Identifier("BadBinaryOpValueExpException"),
              new Import[] {
                newImport("javax.management.BadBinaryOpValueExpException", false),
              })
          .put(
              new Identifier("getTreeControlIcon"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalIconFactory.getTreeControlIcon", true),
              })
          .put(
              new Identifier("GENERAL_PUNCTUATION"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.GENERAL_PUNCTUATION", true),
              })
          .put(
              new Identifier("BeanContextServicesListener"),
              new Import[] {
                newImport("java.beans.beancontext.BeanContextServicesListener", false),
              })
          .put(
              new Identifier("JAXBPermission"),
              new Import[] {
                newImport("javax.xml.bind.JAXBPermission", false),
              })
          .put(
              new Identifier("PolicyHolder"),
              new Import[] {
                newImport("org.omg.CORBA.PolicyHolder", false),
              })
          .put(
              new Identifier("BasicArrowButton"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicArrowButton", false),
              })
          .put(
              new Identifier("tk_ushort"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind.tk_ushort", true),
              })
          .put(
              new Identifier("DirectColorModel"),
              new Import[] {
                newImport("java.awt.image.DirectColorModel", false),
              })
          .put(
              new Identifier("RAISED"),
              new Import[] {
                newImport("javax.swing.border.BevelBorder.RAISED", true),
                newImport("javax.swing.border.EtchedBorder.RAISED", true),
              })
          .put(
              new Identifier("ConcurrentNavigableMap"),
              new Import[] {
                newImport("java.util.concurrent.ConcurrentNavigableMap", false),
              })
          .put(
              new Identifier("selectBestTextFlavor"),
              new Import[] {
                newImport("java.awt.datatransfer.DataFlavor.selectBestTextFlavor", true),
              })
          .put(
              new Identifier("REF_MBEAN_NOT_REGISTERED"),
              new Import[] {
                newImport("javax.management.relation.RoleStatus.REF_MBEAN_NOT_REGISTERED", true),
              })
          .put(
              new Identifier("DecimalFormatSymbols"),
              new Import[] {
                newImport("java.text.DecimalFormatSymbols", false),
              })
          .put(
              new Identifier("getProxyClass"),
              new Import[] {
                newImport("java.lang.reflect.Proxy.getProxyClass", true),
              })
          .put(
              new Identifier("NamingEvent"),
              new Import[] {
                newImport("javax.naming.event.NamingEvent", false),
              })
          .put(
              new Identifier("getInternalFrameDefaultMenuIcon"),
              new Import[] {
                newImport(
                    "javax.swing.plaf.metal.MetalIconFactory.getInternalFrameDefaultMenuIcon",
                    true),
              })
          .put(
              new Identifier("icSigLuvData"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigLuvData", true),
              })
          .put(
              new Identifier("icSigBToA1Tag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigBToA1Tag", true),
              })
          .put(
              new Identifier("RuntimeMXBean"),
              new Import[] {
                newImport("java.lang.management.RuntimeMXBean", false),
              })
          .put(
              new Identifier("FormatStyle"),
              new Import[] {
                newImport("java.time.format.FormatStyle", false),
              })
          .put(
              new Identifier("MemoryUsage"),
              new Import[] {
                newImport("java.lang.management.MemoryUsage", false),
              })
          .put(
              new Identifier("SerializedLambda"),
              new Import[] {
                newImport("java.lang.invoke.SerializedLambda", false),
              })
          .put(
              new Identifier("FOREGROUND"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.FOREGROUND", true),
                newImport("javax.swing.plaf.synth.ColorType.FOREGROUND", true),
              })
          .put(
              new Identifier("FONT_CHANGE_BIGGER"),
              new Import[] {
                newImport("javax.swing.text.html.HTMLEditorKit.FONT_CHANGE_BIGGER", true),
              })
          .put(
              new Identifier("UTFDataFormatException"),
              new Import[] {
                newImport("java.io.UTFDataFormatException", false),
              })
          .put(
              new Identifier("ALLBITS"),
              new Import[] {
                newImport("java.awt.image.ImageObserver.ALLBITS", true),
              })
          .put(
              new Identifier("CompletionException"),
              new Import[] {
                newImport("java.util.concurrent.CompletionException", false),
              })
          .put(
              new Identifier("Event"),
              new Import[] {
                newImport("java.awt.Event", false), newImport("org.w3c.dom.events.Event", false),
              })
          .put(
              new Identifier("STRING"),
              new Import[] {
                newImport("javax.management.openmbean.SimpleType.STRING", true),
                newImport("javax.print.DocFlavor.STRING", false),
                newImport("javax.xml.xpath.XPathConstants.STRING", true),
              })
          .put(
              new Identifier("getDefaultHostnameVerifier"),
              new Import[] {
                newImport("javax.net.ssl.HttpsURLConnection.getDefaultHostnameVerifier", true),
              })
          .put(
              new Identifier("TEXT_HTML"),
              new Import[] {
                newImport("javax.print.DocFlavor.CHAR_ARRAY.TEXT_HTML", true),
                newImport("javax.print.DocFlavor.READER.TEXT_HTML", true),
                newImport("javax.print.DocFlavor.STRING.TEXT_HTML", true),
              })
          .put(
              new Identifier("SimpleJavaFileObject"),
              new Import[] {
                newImport("javax.tools.SimpleJavaFileObject", false),
              })
          .put(
              new Identifier("REF_CURSOR"),
              new Import[] {
                newImport("java.sql.Types.REF_CURSOR", true),
              })
          .put(
              new Identifier("QUARTER_OF_YEAR"),
              new Import[] {
                newImport("java.time.temporal.IsoFields.QUARTER_OF_YEAR", true),
              })
          .put(
              new Identifier("tickMinutes"),
              new Import[] {
                newImport("java.time.Clock.tickMinutes", true),
              })
          .put(
              new Identifier("TMNOFLAGS"),
              new Import[] {
                newImport("javax.transaction.xa.XAResource.TMNOFLAGS", true),
              })
          .put(
              new Identifier("DOWN_CYCLE_TRAVERSAL_KEYS"),
              new Import[] {
                newImport("java.awt.KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS", true),
              })
          .put(
              new Identifier("TYPE_NEAREST_NEIGHBOR"),
              new Import[] {
                newImport("java.awt.image.AffineTransformOp.TYPE_NEAREST_NEIGHBOR", true),
              })
          .put(
              new Identifier("JAXBSource"),
              new Import[] {
                newImport("javax.xml.bind.util.JAXBSource", false),
              })
          .put(
              new Identifier("PrintRequestAttributeSet"),
              new Import[] {
                newImport("javax.print.attribute.PrintRequestAttributeSet", false),
              })
          .put(
              new Identifier("UNSPECIFIED_EVENT_TYPE_ERR"),
              new Import[] {
                newImport("org.w3c.dom.events.EventException.UNSPECIFIED_EVENT_TYPE_ERR", true),
              })
          .put(
              new Identifier("unexportObject"),
              new Import[] {
                newImport("java.rmi.activation.Activatable.unexportObject", true),
                newImport("java.rmi.server.UnicastRemoteObject.unexportObject", true),
                newImport("javax.rmi.PortableRemoteObject.unexportObject", true),
                newImport("javax.rmi.CORBA.Util.unexportObject", true),
              })
          .put(
              new Identifier("FIELD_COUNT"),
              new Import[] {
                newImport("java.util.Calendar.FIELD_COUNT", true),
              })
          .put(
              new Identifier("SEVERITY_WARNING"),
              new Import[] {
                newImport("org.w3c.dom.DOMError.SEVERITY_WARNING", true),
              })
          .put(
              new Identifier("ENTITIES"),
              new Import[] {
                newImport("javax.swing.text.html.parser.DTDConstants.ENTITIES", true),
              })
          .put(
              new Identifier("WeekFields"),
              new Import[] {
                newImport("java.time.temporal.WeekFields", false),
              })
          .put(
              new Identifier("getMixer"),
              new Import[] {
                newImport("javax.sound.sampled.AudioSystem.getMixer", true),
              })
          .put(
              new Identifier("TextComponent"),
              new Import[] {
                newImport("java.awt.TextComponent", false),
              })
          .put(
              new Identifier("RETURN_GENERATED_KEYS"),
              new Import[] {
                newImport("java.sql.Statement.RETURN_GENERATED_KEYS", true),
              })
          .put(
              new Identifier("MalformedObjectNameException"),
              new Import[] {
                newImport("javax.management.MalformedObjectNameException", false),
              })
          .put(
              new Identifier("NUMBER"),
              new Import[] {
                newImport("javax.swing.text.html.parser.DTDConstants.NUMBER", true),
                newImport("javax.xml.xpath.XPathConstants.NUMBER", true),
              })
          .put(
              new Identifier("PrivilegedActionException"),
              new Import[] {
                newImport("java.security.PrivilegedActionException", false),
              })
          .put(
              new Identifier("TUESDAY"),
              new Import[] {
                newImport("java.util.Calendar.TUESDAY", true),
              })
          .put(
              new Identifier("PresentationDirection"),
              new Import[] {
                newImport("javax.print.attribute.standard.PresentationDirection", false),
              })
          .put(
              new Identifier("MOUSE_DOWN"),
              new Import[] {
                newImport("java.awt.Event.MOUSE_DOWN", true),
              })
          .put(
              new Identifier("ByteLookupTable"),
              new Import[] {
                newImport("java.awt.image.ByteLookupTable", false),
              })
          .put(
              new Identifier("NoSuchMethodError"),
              new Import[] {
                newImport("java.lang.NoSuchMethodError", false),
              })
          .put(
              new Identifier("MBeanServerForwarder"),
              new Import[] {
                newImport("javax.management.remote.MBeanServerForwarder", false),
              })
          .put(
              new Identifier("getDateTimeInstance"),
              new Import[] {
                newImport("java.text.DateFormat.getDateTimeInstance", true),
              })
          .put(
              new Identifier("EventListenerProxy"),
              new Import[] {
                newImport("java.util.EventListenerProxy", false),
              })
          .put(
              new Identifier("getLookAndFeelDefaults"),
              new Import[] {
                newImport("javax.swing.UIManager.getLookAndFeelDefaults", true),
              })
          .put(
              new Identifier("MEETEI_MAYEK"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.MEETEI_MAYEK", true),
              })
          .put(
              new Identifier("ECPublicKey"),
              new Import[] {
                newImport("java.security.interfaces.ECPublicKey", false),
              })
          .put(
              new Identifier("RUNTIME_ERROR"),
              new Import[] {
                newImport("javax.management.monitor.MonitorNotification.RUNTIME_ERROR", true),
              })
          .put(
              new Identifier("LIGATURES"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.LIGATURES", true),
              })
          .put(
              new Identifier("BeanContextServiceRevokedListener"),
              new Import[] {
                newImport("java.beans.beancontext.BeanContextServiceRevokedListener", false),
              })
          .put(
              new Identifier("AsyncHandler"),
              new Import[] {
                newImport("javax.xml.ws.AsyncHandler", false),
              })
          .put(
              new Identifier("getKeyText"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.getKeyText", true),
              })
          .put(
              new Identifier("REF_putField"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandleInfo.REF_putField", true),
              })
          .put(
              new Identifier("Time"),
              new Import[] {
                newImport("java.sql.Time", false),
              })
          .put(
              new Identifier("HTTP_VERSION"),
              new Import[] {
                newImport("java.net.HttpURLConnection.HTTP_VERSION", true),
              })
          .put(
              new Identifier("SPIN_BOX"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.SPIN_BOX", true),
              })
          .put(
              new Identifier("NameDynAnyPairHelper"),
              new Import[] {
                newImport("org.omg.DynamicAny.NameDynAnyPairHelper", false),
              })
          .put(
              new Identifier("showDialog"),
              new Import[] {
                newImport("javax.swing.JColorChooser.showDialog", true),
              })
          .put(
              new Identifier("DeflaterOutputStream"),
              new Import[] {
                newImport("java.util.zip.DeflaterOutputStream", false),
              })
          .put(
              new Identifier("PASSWORD_PROPERTY"),
              new Import[] {
                newImport("javax.xml.ws.BindingProvider.PASSWORD_PROPERTY", true),
              })
          .put(
              new Identifier("UncaughtExceptionHandler"),
              new Import[] {
                newImport("java.lang.Thread.UncaughtExceptionHandler", false),
              })
          .put(
              new Identifier("publicLookup"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandles.publicLookup", true),
              })
          .put(
              new Identifier("ThreadPolicyOperations"),
              new Import[] {
                newImport("org.omg.PortableServer.ThreadPolicyOperations", false),
              })
          .put(
              new Identifier("primaryOrder"),
              new Import[] {
                newImport("java.text.CollationElementIterator.primaryOrder", true),
              })
          .put(
              new Identifier("CHILD_POLICY_EMPTY"),
              new Import[] {
                newImport("javax.imageio.metadata.IIOMetadataFormat.CHILD_POLICY_EMPTY", true),
              })
          .put(
              new Identifier("IntPredicate"),
              new Import[] {
                newImport("java.util.function.IntPredicate", false),
              })
          .put(
              new Identifier("FileImageOutputStream"),
              new Import[] {
                newImport("javax.imageio.stream.FileImageOutputStream", false),
              })
          .put(
              new Identifier("TextSyntax"),
              new Import[] {
                newImport("javax.print.attribute.TextSyntax", false),
              })
          .put(
              new Identifier("JavaCompiler"),
              new Import[] {
                newImport("javax.tools.JavaCompiler", false),
              })
          .put(
              new Identifier("Flush3DBorder"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalBorders.Flush3DBorder", false),
              })
          .put(
              new Identifier("_COMPLETED_YES"),
              new Import[] {
                newImport("org.omg.CORBA.CompletionStatus._COMPLETED_YES", true),
              })
          .put(
              new Identifier("ByteArrayOutputStream"),
              new Import[] {
                newImport("java.io.ByteArrayOutputStream", false),
              })
          .put(
              new Identifier("REPORT"),
              new Import[] {
                newImport("java.nio.charset.CodingErrorAction.REPORT", true),
                newImport("javax.print.attribute.standard.Severity.REPORT", true),
              })
          .put(
              new Identifier("setComponent"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.setComponent", true),
              })
          .put(
              new Identifier("LATEST"),
              new Import[] {
                newImport("java.util.jar.Pack200.Packer.LATEST", true),
              })
          .put(
              new Identifier("CannotProceed"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextPackage.CannotProceed", false),
              })
          .put(
              new Identifier("TAG_NAME"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_NAME", true),
              })
          .put(
              new Identifier("MODAL"),
              new Import[] {
                newImport("javax.accessibility.AccessibleState.MODAL", true),
              })
          .put(
              new Identifier("RepaintManager"),
              new Import[] {
                newImport("javax.swing.RepaintManager", false),
              })
          .put(
              new Identifier("IllegalThreadStateException"),
              new Import[] {
                newImport("java.lang.IllegalThreadStateException", false),
              })
          .put(
              new Identifier("RequestProcessingPolicyOperations"),
              new Import[] {
                newImport("org.omg.PortableServer.RequestProcessingPolicyOperations", false),
              })
          .put(
              new Identifier("selectParagraphAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.selectParagraphAction", true),
              })
          .put(
              new Identifier("SOAPFault"),
              new Import[] {
                newImport("javax.xml.soap.SOAPFault", false),
              })
          .put(
              new Identifier("TEXT_TEXT"),
              new Import[] {
                newImport("java.awt.SystemColor.TEXT_TEXT", true),
              })
          .put(
              new Identifier("RANDOMPIXELORDER"),
              new Import[] {
                newImport("java.awt.image.ImageConsumer.RANDOMPIXELORDER", true),
              })
          .put(
              new Identifier("TemporalAccessor"),
              new Import[] {
                newImport("java.time.temporal.TemporalAccessor", false),
              })
          .put(
              new Identifier("mapEquivalents"),
              new Import[] {
                newImport("java.util.Locale.LanguageRange.mapEquivalents", true),
              })
          .put(
              new Identifier("WINDOW_ICONIFIED"),
              new Import[] {
                newImport("java.awt.event.WindowEvent.WINDOW_ICONIFIED", true),
              })
          .put(
              new Identifier("PropertyResourceBundle"),
              new Import[] {
                newImport("java.util.PropertyResourceBundle", false),
              })
          .put(
              new Identifier("MOUSE_UP"),
              new Import[] {
                newImport("java.awt.Event.MOUSE_UP", true),
              })
          .put(
              new Identifier("TABLE"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.TABLE", true),
                newImport("javax.swing.plaf.synth.Region.TABLE", true),
                newImport("javax.swing.text.html.HTML.Tag.TABLE", true),
              })
          .put(
              new Identifier("DERIVATION_UNION"),
              new Import[] {
                newImport("org.w3c.dom.TypeInfo.DERIVATION_UNION", true),
              })
          .put(
              new Identifier("floatToIntBits"),
              new Import[] {
                newImport("java.lang.Float.floatToIntBits", true),
              })
          .put(
              new Identifier("finalSubString"),
              new Import[] {
                newImport("javax.management.Query.finalSubString", true),
              })
          .put(
              new Identifier("getDTD"),
              new Import[] {
                newImport("javax.swing.text.html.parser.DTD.getDTD", true),
              })
          .put(
              new Identifier("MarginBorder"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicBorders.MarginBorder", false),
              })
          .put(
              new Identifier("addAuxiliaryLookAndFeel"),
              new Import[] {
                newImport("javax.swing.UIManager.addAuxiliaryLookAndFeel", true),
              })
          .put(
              new Identifier("SAXParser"),
              new Import[] {
                newImport("javax.xml.parsers.SAXParser", false),
              })
          .put(
              new Identifier("TYPE"),
              new Import[] {
                newImport("java.lang.Boolean.TYPE", true),
                newImport("java.lang.Byte.TYPE", true),
                newImport("java.lang.Character.TYPE", true),
                newImport("java.lang.Double.TYPE", true),
                newImport("java.lang.Float.TYPE", true),
                newImport("java.lang.Integer.TYPE", true),
                newImport("java.lang.Long.TYPE", true),
                newImport("java.lang.Short.TYPE", true),
                newImport("java.lang.Void.TYPE", true),
                newImport("javax.swing.text.html.HTML.Attribute.TYPE", true),
                newImport("javax.xml.crypto.dsig.Manifest.TYPE", true),
                newImport("javax.xml.crypto.dsig.SignatureProperties.TYPE", true),
                newImport("javax.xml.crypto.dsig.XMLObject.TYPE", true),
                newImport("javax.xml.crypto.dsig.keyinfo.PGPData.TYPE", true),
                newImport("javax.xml.crypto.dsig.keyinfo.X509Data.TYPE", true),
              })
          .put(
              new Identifier("ReentrantLock"),
              new Import[] {
                newImport("java.util.concurrent.locks.ReentrantLock", false),
              })
          .put(
              new Identifier("BasicCheckBoxMenuItemUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicCheckBoxMenuItemUI", false),
              })
          .put(
              new Identifier("getWhite"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalLookAndFeel.getWhite", true),
              })
          .put(
              new Identifier("isStrikeThrough"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.isStrikeThrough", true),
              })
          .put(
              new Identifier("SUPPORT_DTD"),
              new Import[] {
                newImport("javax.xml.stream.XMLInputFactory.SUPPORT_DTD", true),
              })
          .put(
              new Identifier("CodeSource"),
              new Import[] {
                newImport("java.security.CodeSource", false),
              })
          .put(
              new Identifier("TableColumn"),
              new Import[] {
                newImport("javax.swing.table.TableColumn", false),
              })
          .put(
              new Identifier("_MULTIPLE_ID"),
              new Import[] {
                newImport("org.omg.PortableServer.IdUniquenessPolicyValue._MULTIPLE_ID", true),
              })
          .put(
              new Identifier("getByInetAddress"),
              new Import[] {
                newImport("java.net.NetworkInterface.getByInetAddress", true),
              })
          .put(
              new Identifier("VISIBLE_ROW_COUNT_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JTree.VISIBLE_ROW_COUNT_PROPERTY", true),
              })
          .put(
              new Identifier("icSigPs2CRD3Tag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigPs2CRD3Tag", true),
              })
          .put(
              new Identifier("setProperty"),
              new Import[] {
                newImport("java.lang.System.setProperty", true),
                newImport("java.security.Security.setProperty", true),
              })
          .put(
              new Identifier("MIN_RADIX"),
              new Import[] {
                newImport("java.lang.Character.MIN_RADIX", true),
              })
          .put(
              new Identifier("STANDBY"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.STANDBY", true),
              })
          .put(
              new Identifier("SchemaFactoryLoader"),
              new Import[] {
                newImport("javax.xml.validation.SchemaFactoryLoader", false),
              })
          .put(
              new Identifier("AUX_RETURN"),
              new Import[] {
                newImport("javax.sound.sampled.FloatControl.Type.AUX_RETURN", true),
              })
          .put(
              new Identifier("putDTDHash"),
              new Import[] {
                newImport("javax.swing.text.html.parser.DTD.putDTDHash", true),
              })
          .put(
              new Identifier("AlgorithmParameterSpec"),
              new Import[] {
                newImport("java.security.spec.AlgorithmParameterSpec", false),
              })
          .put(
              new Identifier("LayerUI"),
              new Import[] {
                newImport("javax.swing.plaf.LayerUI", false),
              })
          .put(
              new Identifier("BASELINE_LEADING"),
              new Import[] {
                newImport("java.awt.GridBagConstraints.BASELINE_LEADING", true),
              })
          .put(
              new Identifier("NotContextException"),
              new Import[] {
                newImport("javax.naming.NotContextException", false),
              })
          .put(
              new Identifier("naturalOrder"),
              new Import[] {
                newImport("java.util.Comparator.naturalOrder", true),
              })
          .put(
              new Identifier("SecureCacheResponse"),
              new Import[] {
                newImport("java.net.SecureCacheResponse", false),
              })
          .put(
              new Identifier("ISO_A4_TRANSPARENT"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaName.ISO_A4_TRANSPARENT", true),
              })
          .put(
              new Identifier("ROOT_VISIBLE_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JTree.ROOT_VISIBLE_PROPERTY", true),
              })
          .put(
              new Identifier("parseBoolean"),
              new Import[] {
                newImport("java.lang.Boolean.parseBoolean", true),
                newImport("javax.xml.bind.DatatypeConverter.parseBoolean", true),
              })
          .put(
              new Identifier("COMMENTS"),
              new Import[] {
                newImport("java.util.regex.Pattern.COMMENTS", true),
              })
          .put(
              new Identifier("TYPE_GENERAL_SCALE"),
              new Import[] {
                newImport("java.awt.geom.AffineTransform.TYPE_GENERAL_SCALE", true),
              })
          .put(
              new Identifier("ByteOrder"),
              new Import[] {
                newImport("java.nio.ByteOrder", false),
              })
          .put(
              new Identifier("DataFlavor"),
              new Import[] {
                newImport("java.awt.datatransfer.DataFlavor", false),
              })
          .put(
              new Identifier("ObjectReferenceTemplateSeqHolder"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.ObjectReferenceTemplateSeqHolder", false),
              })
          .put(
              new Identifier("remainderUnsigned"),
              new Import[] {
                newImport("java.lang.Integer.remainderUnsigned", true),
                newImport("java.lang.Long.remainderUnsigned", true),
              })
          .put(
              new Identifier("ProviderNotFoundException"),
              new Import[] {
                newImport("java.nio.file.ProviderNotFoundException", false),
              })
          .put(
              new Identifier("LOWERED"),
              new Import[] {
                newImport("javax.swing.border.BevelBorder.LOWERED", true),
                newImport("javax.swing.border.EtchedBorder.LOWERED", true),
              })
          .put(
              new Identifier("getMenuForeground"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalLookAndFeel.getMenuForeground", true),
              })
          .put(
              new Identifier("identity"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandles.identity", true),
                newImport("java.util.function.DoubleUnaryOperator.identity", true),
                newImport("java.util.function.Function.identity", true),
                newImport("java.util.function.IntUnaryOperator.identity", true),
                newImport("java.util.function.LongUnaryOperator.identity", true),
                newImport("java.util.function.UnaryOperator.identity", true),
              })
          .put(
              new Identifier("WINDOW_EVENT_MASK"),
              new Import[] {
                newImport("java.awt.AWTEvent.WINDOW_EVENT_MASK", true),
              })
          .put(
              new Identifier("SYNTAX_ERR"),
              new Import[] {
                newImport("org.w3c.dom.DOMException.SYNTAX_ERR", true),
              })
          .put(
              new Identifier("RTFEditorKit"),
              new Import[] {
                newImport("javax.swing.text.rtf.RTFEditorKit", false),
              })
          .put(
              new Identifier("ImageReader"),
              new Import[] {
                newImport("javax.imageio.ImageReader", false),
              })
          .put(
              new Identifier("BORDER_WIDTH"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.BORDER_WIDTH", true),
              })
          .put(
              new Identifier("tk_alias"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind.tk_alias", true),
              })
          .put(
              new Identifier("VALUE_ARBITRARY"),
              new Import[] {
                newImport("javax.imageio.metadata.IIOMetadataFormat.VALUE_ARBITRARY", true),
              })
          .put(
              new Identifier("DesktopManager"),
              new Import[] {
                newImport("javax.swing.DesktopManager", false),
              })
          .put(
              new Identifier("LineNumberInputStream"),
              new Import[] {
                newImport("java.io.LineNumberInputStream", false),
              })
          .put(
              new Identifier("constructorModifiers"),
              new Import[] {
                newImport("java.lang.reflect.Modifier.constructorModifiers", true),
              })
          .put(
              new Identifier("KeyStoreException"),
              new Import[] {
                newImport("java.security.KeyStoreException", false),
              })
          .put(
              new Identifier("MODEL"),
              new Import[] {
                newImport("javax.swing.text.html.parser.DTDConstants.MODEL", true),
              })
          .put(
              new Identifier("getUIActionMap"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.getUIActionMap", true),
              })
          .put(
              new Identifier("LongToDoubleFunction"),
              new Import[] {
                newImport("java.util.function.LongToDoubleFunction", false),
              })
          .put(
              new Identifier("Graphics"),
              new Import[] {
                newImport("java.awt.Graphics", false),
              })
          .put(
              new Identifier("IllegalChannelGroupException"),
              new Import[] {
                newImport("java.nio.channels.IllegalChannelGroupException", false),
              })
          .put(
              new Identifier("STREAM_MAGIC"),
              new Import[] {
                newImport("java.io.ObjectStreamConstants.STREAM_MAGIC", true),
              })
          .put(
              new Identifier("EllipticCurve"),
              new Import[] {
                newImport("java.security.spec.EllipticCurve", false),
              })
          .put(
              new Identifier("exists"),
              new Import[] {
                newImport("java.nio.file.Files.exists", true),
              })
          .put(
              new Identifier("Tag"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag", false),
              })
          .put(
              new Identifier("INPUT_METHOD_FIRST"),
              new Import[] {
                newImport("java.awt.event.InputMethodEvent.INPUT_METHOD_FIRST", true),
              })
          .put(
              new Identifier("createSoftBevelBorder"),
              new Import[] {
                newImport("javax.swing.BorderFactory.createSoftBevelBorder", true),
              })
          .put(
              new Identifier("MEMBER_OF"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRelation.MEMBER_OF", true),
              })
          .put(
              new Identifier("Characters"),
              new Import[] {
                newImport("javax.xml.stream.events.Characters", false),
              })
          .put(
              new Identifier("EXTHDR"),
              new Import[] {
                newImport("java.util.jar.JarEntry.EXTHDR", true),
                newImport("java.util.jar.JarFile.EXTHDR", true),
                newImport("java.util.jar.JarInputStream.EXTHDR", true),
                newImport("java.util.jar.JarOutputStream.EXTHDR", true),
                newImport("java.util.zip.ZipEntry.EXTHDR", true),
                newImport("java.util.zip.ZipFile.EXTHDR", true),
                newImport("java.util.zip.ZipInputStream.EXTHDR", true),
                newImport("java.util.zip.ZipOutputStream.EXTHDR", true),
              })
          .put(
              new Identifier("TabStop"),
              new Import[] {
                newImport("javax.swing.text.TabStop", false),
              })
          .put(
              new Identifier("Cursor"),
              new Import[] {
                newImport("java.awt.Cursor", false),
              })
          .put(
              new Identifier("LinkedHashMap"),
              new Import[] {
                newImport("java.util.LinkedHashMap", false),
              })
          .put(
              new Identifier("loadKeymap"),
              new Import[] {
                newImport("javax.swing.text.JTextComponent.loadKeymap", true),
              })
          .put(
              new Identifier("getISOCountries"),
              new Import[] {
                newImport("java.util.Locale.getISOCountries", true),
              })
          .put(
              new Identifier("icHdrVersion"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icHdrVersion", true),
              })
          .put(
              new Identifier("TextField"),
              new Import[] {
                newImport("java.awt.TextField", false),
              })
          .put(
              new Identifier("GoodBreakWeight"),
              new Import[] {
                newImport("javax.swing.text.View.GoodBreakWeight", true),
              })
          .put(
              new Identifier("TYPE_MISMATCH_ERR"),
              new Import[] {
                newImport("org.w3c.dom.DOMException.TYPE_MISMATCH_ERR", true),
              })
          .put(
              new Identifier("LSOutput"),
              new Import[] {
                newImport("org.w3c.dom.ls.LSOutput", false),
              })
          .put(
              new Identifier("pageUpAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.pageUpAction", true),
              })
          .put(
              new Identifier("VK_COMMA"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_COMMA", true),
              })
          .put(
              new Identifier("HasControls"),
              new Import[] {
                newImport("javax.naming.ldap.HasControls", false),
              })
          .put(
              new Identifier("PrintJob"),
              new Import[] {
                newImport("java.awt.PrintJob", false),
              })
          .put(
              new Identifier("Resource"),
              new Import[] {
                newImport("javax.annotation.Resource", false),
              })
          .put(
              new Identifier("ISO_ZONED_DATE_TIME"),
              new Import[] {
                newImport("java.time.format.DateTimeFormatter.ISO_ZONED_DATE_TIME", true),
              })
          .put(
              new Identifier("MAX_EXPONENT"),
              new Import[] {
                newImport("java.lang.Double.MAX_EXPONENT", true),
                newImport("java.lang.Float.MAX_EXPONENT", true),
              })
          .put(
              new Identifier("NEGATIVE_SCROLL"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicSliderUI.NEGATIVE_SCROLL", true),
              })
          .put(
              new Identifier("StdACLuminance"),
              new Import[] {
                newImport("javax.imageio.plugins.jpeg.JPEGHuffmanTable.StdACLuminance", true),
              })
          .put(
              new Identifier("SAXResult"),
              new Import[] {
                newImport("javax.xml.transform.sax.SAXResult", false),
              })
          .put(
              new Identifier("MultiMenuBarUI"),
              new Import[] {
                newImport("javax.swing.plaf.multi.MultiMenuBarUI", false),
              })
          .put(
              new Identifier("VK_MODECHANGE"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_MODECHANGE", true),
              })
          .put(
              new Identifier("DIRECTIONALITY_SEGMENT_SEPARATOR"),
              new Import[] {
                newImport("java.lang.Character.DIRECTIONALITY_SEGMENT_SEPARATOR", true),
              })
          .put(
              new Identifier("MYANMAR_EXTENDED_A"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.MYANMAR_EXTENDED_A", true),
              })
          .put(
              new Identifier("Environment"),
              new Import[] {
                newImport("org.omg.CORBA.Environment", false),
              })
          .put(
              new Identifier("EMPTY_ENUMERATION"),
              new Import[] {
                newImport("javax.swing.tree.DefaultMutableTreeNode.EMPTY_ENUMERATION", true),
              })
          .put(
              new Identifier("CommandMap"),
              new Import[] {
                newImport("javax.activation.CommandMap", false),
              })
          .put(
              new Identifier("ISO_B4_ENVELOPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.ISO_B4_ENVELOPE", true),
              })
          .put(
              new Identifier("LARGE_SCALE"),
              new Import[] {
                newImport("javax.swing.plaf.nimbus.NimbusStyle.LARGE_SCALE", true),
              })
          .put(
              new Identifier("floorMod"),
              new Import[] {
                newImport("java.lang.Math.floorMod", true),
                newImport("java.lang.StrictMath.floorMod", true),
              })
          .put(
              new Identifier("RemoteObjectInvocationHandler"),
              new Import[] {
                newImport("java.rmi.server.RemoteObjectInvocationHandler", false),
              })
          .put(
              new Identifier("HORIZONTAL_SCROLLBAR_POLICY"),
              new Import[] {
                newImport("javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_POLICY", true),
              })
          .put(
              new Identifier("USEMAP"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.USEMAP", true),
              })
          .put(
              new Identifier("CharHolder"),
              new Import[] {
                newImport("org.omg.CORBA.CharHolder", false),
              })
          .put(
              new Identifier("Arc2D"),
              new Import[] {
                newImport("java.awt.geom.Arc2D", false),
              })
          .put(
              new Identifier("Source"),
              new Import[] {
                newImport("javax.xml.transform.Source", false),
              })
          .put(
              new Identifier("STANDARD_INPUT_TYPE"),
              new Import[] {
                newImport("javax.imageio.spi.ImageReaderSpi.STANDARD_INPUT_TYPE", true),
              })
          .put(
              new Identifier("INVITE_ENVELOPE"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.INVITE_ENVELOPE", true),
              })
          .put(
              new Identifier("RuntimeException"),
              new Import[] {
                newImport("java.lang.RuntimeException", false),
              })
          .put(
              new Identifier("FlavorTable"),
              new Import[] {
                newImport("java.awt.datatransfer.FlavorTable", false),
              })
          .put(
              new Identifier("TAG_MORT"),
              new Import[] {
                newImport("java.awt.font.OpenType.TAG_MORT", true),
              })
          .put(
              new Identifier("TYPE_DOUBLE"),
              new Import[] {
                newImport("java.awt.image.DataBuffer.TYPE_DOUBLE", true),
              })
          .put(
              new Identifier("UNSET"),
              new Import[] {
                newImport("javax.swing.Spring.UNSET", true),
              })
          .put(
              new Identifier("VK_AGAIN"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_AGAIN", true),
              })
          .put(
              new Identifier("UNSUPPORTED_EMPTY_COLLECTION"),
              new Import[] {
                newImport("java.security.Policy.UNSUPPORTED_EMPTY_COLLECTION", true),
              })
          .put(
              new Identifier("ofEpochDay"),
              new Import[] {
                newImport("java.time.LocalDate.ofEpochDay", true),
              })
          .put(
              new Identifier("NoContext"),
              new Import[] {
                newImport("org.omg.PortableServer.CurrentPackage.NoContext", false),
              })
          .put(
              new Identifier("MONGOLIAN"),
              new Import[] {
                newImport("java.awt.font.NumericShaper.MONGOLIAN", true),
                newImport("java.lang.Character.UnicodeBlock.MONGOLIAN", true),
              })
          .put(
              new Identifier("ISO_OFFSET_TIME"),
              new Import[] {
                newImport("java.time.format.DateTimeFormatter.ISO_OFFSET_TIME", true),
              })
          .put(
              new Identifier("CodeSets"),
              new Import[] {
                newImport("org.omg.IOP.CodeSets", false),
              })
          .put(
              new Identifier("endParagraphAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.endParagraphAction", true),
              })
          .put(
              new Identifier("Service"),
              new Import[] {
                newImport("java.security.Provider.Service", false),
                newImport("javax.xml.ws.Service", false),
              })
          .put(
              new Identifier("EntityResolver2"),
              new Import[] {
                newImport("org.xml.sax.ext.EntityResolver2", false),
              })
          .put(
              new Identifier("PERSIST"),
              new Import[] {
                newImport("javax.swing.JFormattedTextField.PERSIST", true),
              })
          .put(
              new Identifier("LongAccumulator"),
              new Import[] {
                newImport("java.util.concurrent.atomic.LongAccumulator", false),
              })
          .put(
              new Identifier("StyledEditorKit"),
              new Import[] {
                newImport("javax.swing.text.StyledEditorKit", false),
              })
          .put(
              new Identifier("VK_ACCEPT"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_ACCEPT", true),
              })
          .put(
              new Identifier("FeatureDescriptor"),
              new Import[] {
                newImport("java.beans.FeatureDescriptor", false),
              })
          .put(
              new Identifier("copyAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.copyAction", true),
              })
          .put(
              new Identifier("Future"),
              new Import[] {
                newImport("java.util.concurrent.Future", false),
              })
          .put(
              new Identifier("getContext"),
              new Import[] {
                newImport("java.security.AccessController.getContext", true),
              })
          .put(
              new Identifier("getFocusColor"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalLookAndFeel.getFocusColor", true),
              })
          .build();
}
