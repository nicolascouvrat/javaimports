// Code generated by GenerateStdlib.java. DO NOT EDIT.
package com.nikodoko.javaimports.stdlib.internal.api.v8;

import static com.nikodoko.javaimports.stdlib.internal.Stdlib.newImport;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.common.Identifier;
import com.nikodoko.javaimports.common.Import;
import java.util.Map;

public class Java8StdlibChunk0 {
  static final Map<Identifier, Import[]> CLASSES =
      new ImmutableMap.Builder<Identifier, Import[]>()
          .put(
              new Identifier("CipherOutputStream"),
              new Import[] {
                newImport("javax.crypto.CipherOutputStream", false),
              })
          .put(
              new Identifier("setSecurityManager"),
              new Import[] {
                newImport("java.lang.System.setSecurityManager", true),
              })
          .put(
              new Identifier("CurrencyNameProvider"),
              new Import[] {
                newImport("java.util.spi.CurrencyNameProvider", false),
              })
          .put(
              new Identifier("setStrikeThrough"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.setStrikeThrough", true),
              })
          .put(
              new Identifier("ArrayList"),
              new Import[] {
                newImport("java.util.ArrayList", false),
              })
          .put(
              new Identifier("OTHER_NUMBER"),
              new Import[] {
                newImport("java.lang.Character.OTHER_NUMBER", true),
              })
          .put(
              new Identifier("FRANCE"),
              new Import[] {
                newImport("java.util.Locale.FRANCE", true),
              })
          .put(
              new Identifier("deletePrevCharAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.deletePrevCharAction", true),
              })
          .put(
              new Identifier("LineEvent"),
              new Import[] {
                newImport("javax.sound.sampled.LineEvent", false),
              })
          .put(
              new Identifier("ThaiBuddhistEra"),
              new Import[] {
                newImport("java.time.chrono.ThaiBuddhistEra", false),
              })
          .put(
              new Identifier("INVALID_ACCESS_ERR"),
              new Import[] {
                newImport("org.w3c.dom.DOMException.INVALID_ACCESS_ERR", true),
              })
          .put(
              new Identifier("ParserAdapter"),
              new Import[] {
                newImport("org.xml.sax.helpers.ParserAdapter", false),
              })
          .put(
              new Identifier("YEAR"),
              new Import[] {
                newImport("java.text.DateFormat.Field.YEAR", true),
                newImport("java.util.Calendar.YEAR", true),
              })
          .put(
              new Identifier("isJavaIdentifierPart"),
              new Import[] {
                newImport("java.lang.Character.isJavaIdentifierPart", true),
              })
          .put(
              new Identifier("OPEN_TYPE_FIELD"),
              new Import[] {
                newImport("javax.management.JMX.OPEN_TYPE_FIELD", true),
              })
          .put(
              new Identifier("PrintServiceLookup"),
              new Import[] {
                newImport("javax.print.PrintServiceLookup", false),
              })
          .put(
              new Identifier("NOWRAP"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.NOWRAP", true),
              })
          .put(
              new Identifier("ResultSet"),
              new Import[] {
                newImport("java.sql.ResultSet", false),
              })
          .put(
              new Identifier("StreamCorruptedException"),
              new Import[] {
                newImport("java.io.StreamCorruptedException", false),
              })
          .put(
              new Identifier("ACTION_LINK"),
              new Import[] {
                newImport("java.awt.dnd.DnDConstants.ACTION_LINK", true),
              })
          .put(
              new Identifier("BasicTableHeaderUI"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicTableHeaderUI", false),
              })
          .put(
              new Identifier("collectArguments"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandles.collectArguments", true),
              })
          .put(
              new Identifier("EnumMap"),
              new Import[] {
                newImport("java.util.EnumMap", false),
              })
          .put(
              new Identifier("OPC_LIFE_OVER"),
              new Import[] {
                newImport("javax.print.attribute.standard.PrinterStateReason.OPC_LIFE_OVER", true),
              })
          .put(
              new Identifier("ColorSpaceType"),
              new Import[] {
                newImport("java.awt.MultipleGradientPaint.ColorSpaceType", false),
              })
          .put(
              new Identifier("ACTION_INSERT_BEFORE"),
              new Import[] {
                newImport("org.w3c.dom.ls.LSParser.ACTION_INSERT_BEFORE", true),
              })
          .put(
              new Identifier("VERTICAL_CENTER"),
              new Import[] {
                newImport("javax.swing.SpringLayout.VERTICAL_CENTER", true),
              })
          .put(
              new Identifier("MediaSizeName"),
              new Import[] {
                newImport("javax.print.attribute.standard.MediaSizeName", false),
              })
          .put(
              new Identifier("STOP"),
              new Import[] {
                newImport("javax.sound.midi.ShortMessage.STOP", true),
                newImport("javax.sound.sampled.LineEvent.Type.STOP", true),
              })
          .put(
              new Identifier("POPUP_MENU_SEPARATOR"),
              new Import[] {
                newImport("javax.swing.plaf.synth.Region.POPUP_MENU_SEPARATOR", true),
              })
          .put(
              new Identifier("newProxyInstance"),
              new Import[] {
                newImport("java.lang.reflect.Proxy.newProxyInstance", true),
                newImport("javax.management.MBeanServerInvocationHandler.newProxyInstance", true),
              })
          .put(
              new Identifier("TYPE_CMYK"),
              new Import[] {
                newImport("java.awt.color.ColorSpace.TYPE_CMYK", true),
              })
          .put(
              new Identifier("tk_boolean"),
              new Import[] {
                newImport("org.omg.CORBA.TCKind.tk_boolean", true),
              })
          .put(
              new Identifier("NegativeArraySizeException"),
              new Import[] {
                newImport("java.lang.NegativeArraySizeException", false),
              })
          .put(
              new Identifier("ptSegDist"),
              new Import[] {
                newImport("java.awt.geom.Line2D.ptSegDist", true),
              })
          .put(
              new Identifier("Customizer"),
              new Import[] {
                newImport("java.beans.Customizer", false),
              })
          .put(
              new Identifier("OfDouble"),
              new Import[] {
                newImport("java.util.PrimitiveIterator.OfDouble", false),
                newImport("java.util.Spliterator.OfDouble", false),
              })
          .put(
              new Identifier("TableModel"),
              new Import[] {
                newImport("javax.swing.table.TableModel", false),
              })
          .put(
              new Identifier("A"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.A", true),
                newImport("javax.print.attribute.standard.MediaSizeName.A", true),
                newImport("javax.print.attribute.standard.MediaSize.Engineering.A", true),
                newImport("javax.swing.text.html.HTML.Tag.A", true),
              })
          .put(
              new Identifier("TYPE_RGB"),
              new Import[] {
                newImport("java.awt.color.ColorSpace.TYPE_RGB", true),
              })
          .put(
              new Identifier("B"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.B", true),
                newImport("javax.print.attribute.standard.MediaSizeName.B", true),
                newImport("javax.print.attribute.standard.MediaSize.Engineering.B", true),
                newImport("javax.swing.text.html.HTML.Tag.B", true),
              })
          .put(
              new Identifier("IconElementName"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.IconElementName", true),
              })
          .put(
              new Identifier("C"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.C", true),
                newImport("javax.print.attribute.standard.MediaSizeName.C", true),
                newImport("javax.print.attribute.standard.MediaSize.Engineering.C", true),
              })
          .put(
              new Identifier("D"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.D", true),
                newImport("javax.print.attribute.standard.MediaSizeName.D", true),
                newImport("javax.print.attribute.standard.MediaSize.Engineering.D", true),
              })
          .put(
              new Identifier("E"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.E", true),
                newImport("java.lang.Math.E", true),
                newImport("java.lang.StrictMath.E", true),
                newImport("javax.print.attribute.standard.MediaSizeName.E", true),
                newImport("javax.print.attribute.standard.MediaSize.Engineering.E", true),
              })
          .put(
              new Identifier("LABELED_BY_PROPERTY"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRelation.LABELED_BY_PROPERTY", true),
              })
          .put(
              new Identifier("TextHitInfo"),
              new Import[] {
                newImport("java.awt.font.TextHitInfo", false),
              })
          .put(
              new Identifier("TC_MAX"),
              new Import[] {
                newImport("java.io.ObjectStreamConstants.TC_MAX", true),
              })
          .put(
              new Identifier("PROMPT"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.PROMPT", true),
              })
          .put(
              new Identifier("I"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.I", true),
              })
          .put(
              new Identifier("MultiViewportUI"),
              new Import[] {
                newImport("javax.swing.plaf.multi.MultiViewportUI", false),
              })
          .put(
              new Identifier("JAXBContext"),
              new Import[] {
                newImport("javax.xml.bind.JAXBContext", false),
              })
          .put(
              new Identifier("WebServiceRefs"),
              new Import[] {
                newImport("javax.xml.ws.WebServiceRefs", false),
              })
          .put(
              new Identifier("WINDOW_GAINED_FOCUS"),
              new Import[] {
                newImport("java.awt.event.WindowEvent.WINDOW_GAINED_FOCUS", true),
              })
          .put(
              new Identifier("Font"),
              new Import[] {
                newImport("java.awt.Font", false),
              })
          .put(
              new Identifier("N"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Attribute.N", true),
              })
          .put(
              new Identifier("RowSetInternal"),
              new Import[] {
                newImport("javax.sql.RowSetInternal", false),
              })
          .put(
              new Identifier("P"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.P", true),
              })
          .put(
              new Identifier("summarizingLong"),
              new Import[] {
                newImport("java.util.stream.Collectors.summarizingLong", true),
              })
          .put(
              new Identifier("USER_EXCEPTION"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.USER_EXCEPTION", false),
              })
          .put(
              new Identifier("S"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.S", true),
              })
          .put(
              new Identifier("readUTF"),
              new Import[] {
                newImport("java.io.DataInputStream.readUTF", true),
              })
          .put(
              new Identifier("U"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.U", true),
              })
          .put(
              new Identifier("CannotProceedException"),
              new Import[] {
                newImport("javax.naming.CannotProceedException", false),
              })
          .put(
              new Identifier("InvalidParameterSpecException"),
              new Import[] {
                newImport("java.security.spec.InvalidParameterSpecException", false),
              })
          .put(
              new Identifier("MATHEMATICAL_OPERATORS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.MATHEMATICAL_OPERATORS", true),
              })
          .put(
              new Identifier("Rdn"),
              new Import[] {
                newImport("javax.naming.ldap.Rdn", false),
              })
          .put(
              new Identifier("connect"),
              new Import[] {
                newImport("javax.management.remote.JMXConnectorFactory.connect", true),
                newImport("javax.rmi.PortableRemoteObject.connect", true),
              })
          .put(
              new Identifier("COMM_FAILURE"),
              new Import[] {
                newImport("org.omg.CORBA.COMM_FAILURE", false),
              })
          .put(
              new Identifier("HashDocAttributeSet"),
              new Import[] {
                newImport("javax.print.attribute.HashDocAttributeSet", false),
              })
          .put(
              new Identifier("SUPPORTED"),
              new Import[] {
                newImport("javax.print.attribute.standard.ColorSupported.SUPPORTED", true),
              })
          .put(
              new Identifier("SAAJResult"),
              new Import[] {
                newImport("javax.xml.soap.SAAJResult", false),
              })
          .put(
              new Identifier("Acl"),
              new Import[] {
                newImport("java.security.acl.Acl", false),
              })
          .put(
              new Identifier("POSITIVE_SCROLL"),
              new Import[] {
                newImport("javax.swing.plaf.basic.BasicSliderUI.POSITIVE_SCROLL", true),
              })
          .put(
              new Identifier("IllegalAccessError"),
              new Import[] {
                newImport("java.lang.IllegalAccessError", false),
              })
          .put(
              new Identifier("importedKeyRestrict"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.importedKeyRestrict", true),
              })
          .put(
              new Identifier("NoninvertibleTransformException"),
              new Import[] {
                newImport("java.awt.geom.NoninvertibleTransformException", false),
              })
          .put(
              new Identifier("Ref"),
              new Import[] {
                newImport("java.sql.Ref", false),
              })
          .put(
              new Identifier("PERMILLE"),
              new Import[] {
                newImport("java.text.NumberFormat.Field.PERMILLE", true),
              })
          .put(
              new Identifier("OPTION_TYPE_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JOptionPane.OPTION_TYPE_PROPERTY", true),
              })
          .put(
              new Identifier("ListModel"),
              new Import[] {
                newImport("javax.swing.ListModel", false),
              })
          .put(
              new Identifier("WSDL_DESCRIPTION"),
              new Import[] {
                newImport("javax.xml.ws.handler.MessageContext.WSDL_DESCRIPTION", true),
              })
          .put(
              new Identifier("NUM_COLORS"),
              new Import[] {
                newImport("java.awt.SystemColor.NUM_COLORS", true),
              })
          .put(
              new Identifier("unmodifiableSortedSet"),
              new Import[] {
                newImport("java.util.Collections.unmodifiableSortedSet", true),
              })
          .put(
              new Identifier("setBoolean"),
              new Import[] {
                newImport("java.lang.reflect.Array.setBoolean", true),
              })
          .put(
              new Identifier("getLineSpacing"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.getLineSpacing", true),
              })
          .put(
              new Identifier("emptyIterator"),
              new Import[] {
                newImport("java.util.Collections.emptyIterator", true),
              })
          .put(
              new Identifier("MonitorInfo"),
              new Import[] {
                newImport("java.lang.management.MonitorInfo", false),
              })
          .put(
              new Identifier("Attributes2Impl"),
              new Import[] {
                newImport("org.xml.sax.ext.Attributes2Impl", false),
              })
          .put(
              new Identifier("FOCUS_EVENT_MASK"),
              new Import[] {
                newImport("java.awt.AWTEvent.FOCUS_EVENT_MASK", true),
              })
          .put(
              new Identifier("SCALE_AREA_AVERAGING"),
              new Import[] {
                newImport("java.awt.Image.SCALE_AREA_AVERAGING", true),
              })
          .put(
              new Identifier("AnnotatedConstruct"),
              new Import[] {
                newImport("javax.lang.model.AnnotatedConstruct", false),
              })
          .put(
              new Identifier("ElementEdit"),
              new Import[] {
                newImport("javax.swing.text.AbstractDocument.ElementEdit", false),
              })
          .put(
              new Identifier("DOCUMENT_POSITION_PRECEDING"),
              new Import[] {
                newImport("org.w3c.dom.Node.DOCUMENT_POSITION_PRECEDING", true),
              })
          .put(
              new Identifier("empty"),
              new Import[] {
                newImport("java.util.Optional.empty", true),
                newImport("java.util.OptionalDouble.empty", true),
                newImport("java.util.OptionalInt.empty", true),
                newImport("java.util.OptionalLong.empty", true),
                newImport("java.util.stream.DoubleStream.empty", true),
                newImport("java.util.stream.IntStream.empty", true),
                newImport("java.util.stream.LongStream.empty", true),
                newImport("java.util.stream.Stream.empty", true),
              })
          .put(
              new Identifier("HandshakeCompletedEvent"),
              new Import[] {
                newImport("javax.net.ssl.HandshakeCompletedEvent", false),
              })
          .put(
              new Identifier("TRANSLUCENT"),
              new Import[] {
                newImport("java.awt.Transparency.TRANSLUCENT", true),
              })
          .put(
              new Identifier("FileSystem"),
              new Import[] {
                newImport("java.nio.file.FileSystem", false),
              })
          .put(
              new Identifier("AllPermission"),
              new Import[] {
                newImport("java.security.AllPermission", false),
              })
          .put(
              new Identifier("SINGLE_DOCUMENT"),
              new Import[] {
                newImport(
                    "javax.print.attribute.standard.MultipleDocumentHandling.SINGLE_DOCUMENT",
                    true),
              })
          .put(
              new Identifier("MetalCheckBoxIcon"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalCheckBoxIcon", false),
              })
          .put(
              new Identifier("SSLSocketFactory"),
              new Import[] {
                newImport("javax.net.ssl.SSLSocketFactory", false),
              })
          .put(
              new Identifier("ImplicitActivationPolicyOperations"),
              new Import[] {
                newImport("org.omg.PortableServer.ImplicitActivationPolicyOperations", false),
              })
          .put(
              new Identifier("DynAnySeqHelper"),
              new Import[] {
                newImport("org.omg.DynamicAny.DynAnySeqHelper", false),
              })
          .put(
              new Identifier("STRICT"),
              new Import[] {
                newImport("java.lang.reflect.Modifier.STRICT", true),
              })
          .put(
              new Identifier("SyncFactoryException"),
              new Import[] {
                newImport("javax.sql.rowset.spi.SyncFactoryException", false),
              })
          .put(
              new Identifier("CLASS_DISPLAY"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.CLASS_DISPLAY", true),
              })
          .put(
              new Identifier("TOGGLE_CLICK_COUNT_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JTree.TOGGLE_CLICK_COUNT_PROPERTY", true),
              })
          .put(
              new Identifier("getRadioButtonMenuItemIcon"),
              new Import[] {
                newImport(
                    "javax.swing.plaf.basic.BasicIconFactory.getRadioButtonMenuItemIcon", true),
                newImport(
                    "javax.swing.plaf.metal.MetalIconFactory.getRadioButtonMenuItemIcon", true),
              })
          .put(
              new Identifier("SimpleEntry"),
              new Import[] {
                newImport("java.util.AbstractMap.SimpleEntry", false),
              })
          .put(
              new Identifier("ACCESSIBLE_NAME_PROPERTY"),
              new Import[] {
                newImport("javax.accessibility.AccessibleContext.ACCESSIBLE_NAME_PROPERTY", true),
              })
          .put(
              new Identifier("HTTP"),
              new Import[] {
                newImport("javax.print.attribute.standard.ReferenceUriSchemesSupported.HTTP", true),
              })
          .put(
              new Identifier("UPPERCASE_LETTER"),
              new Import[] {
                newImport("java.lang.Character.UPPERCASE_LETTER", true),
              })
          .put(
              new Identifier("BACKGROUND_COLOR"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.Attribute.BACKGROUND_COLOR", true),
              })
          .put(
              new Identifier("RescaleOp"),
              new Import[] {
                newImport("java.awt.image.RescaleOp", false),
              })
          .put(
              new Identifier("getChar"),
              new Import[] {
                newImport("java.lang.reflect.Array.getChar", true),
              })
          .put(
              new Identifier("MouseInfo"),
              new Import[] {
                newImport("java.awt.MouseInfo", false),
              })
          .put(
              new Identifier("ENDTOT"),
              new Import[] {
                newImport("java.util.jar.JarEntry.ENDTOT", true),
                newImport("java.util.jar.JarFile.ENDTOT", true),
                newImport("java.util.jar.JarInputStream.ENDTOT", true),
                newImport("java.util.jar.JarOutputStream.ENDTOT", true),
                newImport("java.util.zip.ZipEntry.ENDTOT", true),
                newImport("java.util.zip.ZipFile.ENDTOT", true),
                newImport("java.util.zip.ZipInputStream.ENDTOT", true),
                newImport("java.util.zip.ZipOutputStream.ENDTOT", true),
              })
          .put(
              new Identifier("setDefaultLocale"),
              new Import[] {
                newImport("javax.swing.JComponent.setDefaultLocale", true),
              })
          .put(
              new Identifier("NOTATION"),
              new Import[] {
                newImport("javax.swing.text.html.parser.DTDConstants.NOTATION", true),
              })
          .put(
              new Identifier("icSigGrayTRCTag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigGrayTRCTag", true),
              })
          .put(
              new Identifier("reverseBytes"),
              new Import[] {
                newImport("java.lang.Character.reverseBytes", true),
                newImport("java.lang.Integer.reverseBytes", true),
                newImport("java.lang.Long.reverseBytes", true),
                newImport("java.lang.Short.reverseBytes", true),
              })
          .put(
              new Identifier("ROW_HEIGHT_PROPERTY"),
              new Import[] {
                newImport("javax.swing.JTree.ROW_HEIGHT_PROPERTY", true),
              })
          .put(
              new Identifier("RowId"),
              new Import[] {
                newImport("java.sql.RowId", false),
              })
          .put(
              new Identifier("Form"),
              new Import[] {
                newImport("java.text.Normalizer.Form", false),
              })
          .put(
              new Identifier("ObjectView"),
              new Import[] {
                newImport("javax.swing.text.html.ObjectView", false),
              })
          .put(
              new Identifier("AdapterNonExistentHelper"),
              new Import[] {
                newImport("org.omg.PortableServer.POAPackage.AdapterNonExistentHelper", false),
              })
          .put(
              new Identifier("LineNumberReader"),
              new Import[] {
                newImport("java.io.LineNumberReader", false),
              })
          .put(
              new Identifier("ObjectReferenceTemplateSeqHelper"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.ObjectReferenceTemplateSeqHelper", false),
              })
          .put(
              new Identifier("MidiFileFormat"),
              new Import[] {
                newImport("javax.sound.midi.MidiFileFormat", false),
              })
          .put(
              new Identifier("WebFault"),
              new Import[] {
                newImport("javax.xml.ws.WebFault", false),
              })
          .put(
              new Identifier("setAttribute"),
              new Import[] {
                newImport("java.nio.file.Files.setAttribute", true),
              })
          .put(
              new Identifier("MutableAttributeSet"),
              new Import[] {
                newImport("javax.swing.text.MutableAttributeSet", false),
              })
          .put(
              new Identifier("WebServicePermission"),
              new Import[] {
                newImport("javax.xml.ws.WebServicePermission", false),
              })
          .put(
              new Identifier("ORBInitInfoOperations"),
              new Import[] {
                newImport("org.omg.PortableInterceptor.ORBInitInfoOperations", false),
              })
          .put(
              new Identifier("provider"),
              new Import[] {
                newImport("java.nio.channels.spi.AsynchronousChannelProvider.provider", true),
                newImport("java.nio.channels.spi.SelectorProvider.provider", true),
                newImport("javax.xml.ws.spi.Provider.provider", true),
              })
          .put(
              new Identifier("SINGLE_THREAD_MODEL"),
              new Import[] {
                newImport("org.omg.PortableServer.ThreadPolicyValue.SINGLE_THREAD_MODEL", true),
              })
          .put(
              new Identifier("PROGRESS"),
              new Import[] {
                newImport("java.util.jar.Pack200.Packer.PROGRESS", true),
                newImport("java.util.jar.Pack200.Unpacker.PROGRESS", true),
              })
          .put(
              new Identifier("KeyboardFocusManager"),
              new Import[] {
                newImport("java.awt.KeyboardFocusManager", false),
              })
          .put(
              new Identifier("MEMORY_COLLECTION_THRESHOLD_EXCEEDED"),
              new Import[] {
                newImport(
                    "java.lang.management.MemoryNotificationInfo.MEMORY_COLLECTION_THRESHOLD_EXCEEDED",
                    true),
              })
          .put(
              new Identifier("IllegalFormatFlagsException"),
              new Import[] {
                newImport("java.util.IllegalFormatFlagsException", false),
              })
          .put(
              new Identifier("CONTENTS_CHANGED"),
              new Import[] {
                newImport("javax.swing.event.ListDataEvent.CONTENTS_CHANGED", true),
              })
          .put(
              new Identifier("COLOR_CHOOSER"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.COLOR_CHOOSER", true),
                newImport("javax.swing.plaf.synth.Region.COLOR_CHOOSER", true),
              })
          .put(
              new Identifier("FILENAME"),
              new Import[] {
                newImport("javax.script.ScriptEngine.FILENAME", true),
              })
          .put(
              new Identifier("FactoryConfigurationError"),
              new Import[] {
                newImport("javax.xml.parsers.FactoryConfigurationError", false),
                newImport("javax.xml.stream.FactoryConfigurationError", false),
              })
          .put(
              new Identifier("CodeSigner"),
              new Import[] {
                newImport("java.security.CodeSigner", false),
              })
          .put(
              new Identifier("ICON_COLOR_16x16"),
              new Import[] {
                newImport("java.beans.BeanInfo.ICON_COLOR_16x16", true),
              })
          .put(
              new Identifier("icSigBlueMatrixColumnTag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigBlueMatrixColumnTag", true),
              })
          .put(
              new Identifier("BIG"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.BIG", true),
              })
          .put(
              new Identifier("JComboBox"),
              new Import[] {
                newImport("javax.swing.JComboBox", false),
              })
          .put(
              new Identifier("KEY_TYPED"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.KEY_TYPED", true),
              })
          .put(
              new Identifier("Raster"),
              new Import[] {
                newImport("java.awt.image.Raster", false),
              })
          .put(
              new Identifier("methodModifiers"),
              new Import[] {
                newImport("java.lang.reflect.Modifier.methodModifiers", true),
              })
          .put(
              new Identifier("MEROITIC_HIEROGLYPHS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.MEROITIC_HIEROGLYPHS", true),
              })
          .put(
              new Identifier("BIT"),
              new Import[] {
                newImport("java.sql.Types.BIT", true),
              })
          .put(
              new Identifier("ENDCOM"),
              new Import[] {
                newImport("java.util.jar.JarEntry.ENDCOM", true),
                newImport("java.util.jar.JarFile.ENDCOM", true),
                newImport("java.util.jar.JarInputStream.ENDCOM", true),
                newImport("java.util.jar.JarOutputStream.ENDCOM", true),
                newImport("java.util.zip.ZipEntry.ENDCOM", true),
                newImport("java.util.zip.ZipFile.ENDCOM", true),
                newImport("java.util.zip.ZipInputStream.ENDCOM", true),
                newImport("java.util.zip.ZipOutputStream.ENDCOM", true),
              })
          .put(
              new Identifier("OAEPParameterSpec"),
              new Import[] {
                newImport("javax.crypto.spec.OAEPParameterSpec", false),
              })
          .put(
              new Identifier("ObjectName"),
              new Import[] {
                newImport("javax.management.ObjectName", false),
              })
          .put(
              new Identifier("MutableTreeNode"),
              new Import[] {
                newImport("javax.swing.tree.MutableTreeNode", false),
              })
          .put(
              new Identifier("NOT_FOUND_ERR"),
              new Import[] {
                newImport("org.w3c.dom.DOMException.NOT_FOUND_ERR", true),
              })
          .put(
              new Identifier("localTime"),
              new Import[] {
                newImport("java.time.temporal.TemporalQueries.localTime", true),
              })
          .put(
              new Identifier("SQLClientInfoException"),
              new Import[] {
                newImport("java.sql.SQLClientInfoException", false),
              })
          .put(
              new Identifier("SQLTransientConnectionException"),
              new Import[] {
                newImport("java.sql.SQLTransientConnectionException", false),
              })
          .put(
              new Identifier("ACTION"),
              new Import[] {
                newImport("javax.management.MBeanOperationInfo.ACTION", true),
                newImport("javax.swing.text.html.HTML.Attribute.ACTION", true),
              })
          .put(
              new Identifier("IOError"),
              new Import[] {
                newImport("java.io.IOError", false),
              })
          .put(
              new Identifier("selectionPreviousWordAction"),
              new Import[] {
                newImport("javax.swing.text.DefaultEditorKit.selectionPreviousWordAction", true),
              })
          .put(
              new Identifier("NOTE_ON"),
              new Import[] {
                newImport("javax.sound.midi.ShortMessage.NOTE_ON", true),
              })
          .put(
              new Identifier("guardWithTest"),
              new Import[] {
                newImport("java.lang.invoke.MethodHandles.guardWithTest", true),
              })
          .put(
              new Identifier("AlreadyBound"),
              new Import[] {
                newImport("org.omg.CosNaming.NamingContextPackage.AlreadyBound", false),
              })
          .put(
              new Identifier("RENDERABLE_IMAGE"),
              new Import[] {
                newImport("javax.print.DocFlavor.SERVICE_FORMATTED.RENDERABLE_IMAGE", true),
              })
          .put(
              new Identifier("icPerceptual"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icPerceptual", true),
              })
          .put(
              new Identifier("ARG_INOUT"),
              new Import[] {
                newImport("org.omg.CORBA.ARG_INOUT", false),
              })
          .put(
              new Identifier("TC_REFERENCE"),
              new Import[] {
                newImport("java.io.ObjectStreamConstants.TC_REFERENCE", true),
              })
          .put(
              new Identifier("procedureNullableUnknown"),
              new Import[] {
                newImport("java.sql.DatabaseMetaData.procedureNullableUnknown", true),
              })
          .put(
              new Identifier("VERTICAL_SPLIT"),
              new Import[] {
                newImport("javax.swing.JSplitPane.VERTICAL_SPLIT", true),
              })
          .put(
              new Identifier("ACTION_FIRST"),
              new Import[] {
                newImport("java.awt.event.ActionEvent.ACTION_FIRST", true),
              })
          .put(
              new Identifier("OctetSeqHolder"),
              new Import[] {
                newImport("org.omg.CORBA.OctetSeqHolder", false),
              })
          .put(
              new Identifier("LEGAL_VALUES_FIELD"),
              new Import[] {
                newImport("javax.management.JMX.LEGAL_VALUES_FIELD", true),
              })
          .put(
              new Identifier("AUTOSENSE"),
              new Import[] {
                newImport("javax.print.DocFlavor.BYTE_ARRAY.AUTOSENSE", true),
                newImport("javax.print.DocFlavor.INPUT_STREAM.AUTOSENSE", true),
                newImport("javax.print.DocFlavor.URL.AUTOSENSE", true),
              })
          .put(
              new Identifier("getAncestorNamed"),
              new Import[] {
                newImport("javax.swing.SwingUtilities.getAncestorNamed", true),
              })
          .put(
              new Identifier("PAUSED"),
              new Import[] {
                newImport("javax.print.attribute.standard.PrinterStateReason.PAUSED", true),
              })
          .put(
              new Identifier("MultipleGradientPaint"),
              new Import[] {
                newImport("java.awt.MultipleGradientPaint", false),
              })
          .put(
              new Identifier("javaJVMLocalObjectMimeType"),
              new Import[] {
                newImport("java.awt.datatransfer.DataFlavor.javaJVMLocalObjectMimeType", true),
              })
          .put(
              new Identifier("TypeVariable"),
              new Import[] {
                newImport("java.lang.reflect.TypeVariable", false),
                newImport("javax.lang.model.type.TypeVariable", false),
              })
          .put(
              new Identifier("KeyTab"),
              new Import[] {
                newImport("javax.security.auth.kerberos.KeyTab", false),
              })
          .put(
              new Identifier("GYEAR"),
              new Import[] {
                newImport("javax.xml.datatype.DatatypeConstants.GYEAR", true),
              })
          .put(
              new Identifier("SortingFocusTraversalPolicy"),
              new Import[] {
                newImport("javax.swing.SortingFocusTraversalPolicy", false),
              })
          .put(
              new Identifier("NCLOB"),
              new Import[] {
                newImport("java.sql.Types.NCLOB", true),
              })
          .put(
              new Identifier("constructorsIn"),
              new Import[] {
                newImport("javax.lang.model.util.ElementFilter.constructorsIn", true),
              })
          .put(
              new Identifier("W3C_XML_SCHEMA_INSTANCE_NS_URI"),
              new Import[] {
                newImport("javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI", true),
              })
          .put(
              new Identifier("ComponentInputMap"),
              new Import[] {
                newImport("javax.swing.ComponentInputMap", false),
              })
          .put(
              new Identifier("IllegalFormatCodePointException"),
              new Import[] {
                newImport("java.util.IllegalFormatCodePointException", false),
              })
          .put(
              new Identifier("ANCIENT_SYMBOLS"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.ANCIENT_SYMBOLS", true),
              })
          .put(
              new Identifier("DatatypeConfigurationException"),
              new Import[] {
                newImport("javax.xml.datatype.DatatypeConfigurationException", false),
              })
          .put(
              new Identifier("VK_SPACE"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_SPACE", true),
              })
          .put(
              new Identifier("LockInfo"),
              new Import[] {
                newImport("java.lang.management.LockInfo", false),
              })
          .put(
              new Identifier("hash"),
              new Import[] {
                newImport("java.util.Objects.hash", true),
              })
          .put(
              new Identifier("MOVE_CURSOR"),
              new Import[] {
                newImport("java.awt.Cursor.MOVE_CURSOR", true),
                newImport("java.awt.Frame.MOVE_CURSOR", true),
              })
          .put(
              new Identifier("ZipError"),
              new Import[] {
                newImport("java.util.zip.ZipError", false),
              })
          .put(
              new Identifier("pink"),
              new Import[] {
                newImport("java.awt.Color.pink", true),
              })
          .put(
              new Identifier("icHdrManufacturer"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icHdrManufacturer", true),
              })
          .put(
              new Identifier("HyperlinkEvent"),
              new Import[] {
                newImport("javax.swing.event.HyperlinkEvent", false),
              })
          .put(
              new Identifier("LOW_SURROGATES"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.LOW_SURROGATES", true),
              })
          .put(
              new Identifier("dk_Operation"),
              new Import[] {
                newImport("org.omg.CORBA.DefinitionKind.dk_Operation", true),
              })
          .put(
              new Identifier("SND"),
              new Import[] {
                newImport("javax.sound.sampled.AudioFileFormat.Type.SND", true),
              })
          .put(
              new Identifier("MAXIMIZED_HORIZ"),
              new Import[] {
                newImport("java.awt.Frame.MAXIMIZED_HORIZ", true),
              })
          .put(
              new Identifier("TemplatesHandler"),
              new Import[] {
                newImport("javax.xml.transform.sax.TemplatesHandler", false),
              })
          .put(
              new Identifier("SetOverrideType"),
              new Import[] {
                newImport("org.omg.CORBA.SetOverrideType", false),
              })
          .put(
              new Identifier("instantiate"),
              new Import[] {
                newImport("java.beans.Beans.instantiate", true),
              })
          .put(
              new Identifier("ImageTypeSpecifier"),
              new Import[] {
                newImport("javax.imageio.ImageTypeSpecifier", false),
              })
          .put(
              new Identifier("DATASOURCE_ROW_LOCK"),
              new Import[] {
                newImport("javax.sql.rowset.spi.SyncProvider.DATASOURCE_ROW_LOCK", true),
              })
          .put(
              new Identifier("CompletableFuture"),
              new Import[] {
                newImport("java.util.concurrent.CompletableFuture", false),
              })
          .put(
              new Identifier("BEFORE_FIRST_LINE"),
              new Import[] {
                newImport("java.awt.BorderLayout.BEFORE_FIRST_LINE", true),
              })
          .put(
              new Identifier("getWindowBackground"),
              new Import[] {
                newImport("javax.swing.plaf.metal.MetalLookAndFeel.getWindowBackground", true),
              })
          .put(
              new Identifier("STAPLE_BOTTOM_RIGHT"),
              new Import[] {
                newImport("javax.print.attribute.standard.Finishings.STAPLE_BOTTOM_RIGHT", true),
              })
          .put(
              new Identifier("ARGUMENT"),
              new Import[] {
                newImport("java.text.MessageFormat.Field.ARGUMENT", true),
              })
          .put(
              new Identifier("VK_DEAD_DIAERESIS"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_DEAD_DIAERESIS", true),
              })
          .put(
              new Identifier("InvalidRelationIdException"),
              new Import[] {
                newImport("javax.management.relation.InvalidRelationIdException", false),
              })
          .put(
              new Identifier("_missing_node"),
              new Import[] {
                newImport(
                    "org.omg.CosNaming.NamingContextPackage.NotFoundReason._missing_node", true),
              })
          .put(
              new Identifier("ServantAlreadyActive"),
              new Import[] {
                newImport("org.omg.PortableServer.POAPackage.ServantAlreadyActive", false),
              })
          .put(
              new Identifier("lookupPrintServices"),
              new Import[] {
                newImport("java.awt.print.PrinterJob.lookupPrintServices", true),
                newImport("javax.print.PrintServiceLookup.lookupPrintServices", true),
              })
          .put(
              new Identifier("DataBuffer"),
              new Import[] {
                newImport("java.awt.image.DataBuffer", false),
              })
          .put(
              new Identifier("SpaceAbove"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.SpaceAbove", true),
              })
          .put(
              new Identifier("RMIIIOPServerImpl"),
              new Import[] {
                newImport("javax.management.remote.rmi.RMIIIOPServerImpl", false),
              })
          .put(
              new Identifier("XA_RBOTHER"),
              new Import[] {
                newImport("javax.transaction.xa.XAException.XA_RBOTHER", true),
              })
          .put(
              new Identifier("IDEOGRAPHIC_DESCRIPTION_CHARACTERS"),
              new Import[] {
                newImport(
                    "java.lang.Character.UnicodeBlock.IDEOGRAPHIC_DESCRIPTION_CHARACTERS", true),
              })
          .put(
              new Identifier("LONGNVARCHAR"),
              new Import[] {
                newImport("java.sql.Types.LONGNVARCHAR", true),
              })
          .put(
              new Identifier("InflaterInputStream"),
              new Import[] {
                newImport("java.util.zip.InflaterInputStream", false),
              })
          .put(
              new Identifier("getDefaultCursor"),
              new Import[] {
                newImport("java.awt.Cursor.getDefaultCursor", true),
              })
          .put(
              new Identifier("CharacterCodingException"),
              new Import[] {
                newImport("java.nio.charset.CharacterCodingException", false),
              })
          .put(
              new Identifier("NOVEMBER"),
              new Import[] {
                newImport("java.util.Calendar.NOVEMBER", true),
                newImport("javax.xml.datatype.DatatypeConstants.NOVEMBER", true),
              })
          .put(
              new Identifier("FILE_CHOOSER"),
              new Import[] {
                newImport("javax.accessibility.AccessibleRole.FILE_CHOOSER", true),
                newImport("javax.swing.plaf.synth.Region.FILE_CHOOSER", true),
              })
          .put(
              new Identifier("MinguoDate"),
              new Import[] {
                newImport("java.time.chrono.MinguoDate", false),
              })
          .put(
              new Identifier("FailedLoginException"),
              new Import[] {
                newImport("javax.security.auth.login.FailedLoginException", false),
              })
          .put(
              new Identifier("disable"),
              new Import[] {
                newImport("java.lang.Compiler.disable", true),
              })
          .put(
              new Identifier("BufferedReader"),
              new Import[] {
                newImport("java.io.BufferedReader", false),
              })
          .put(
              new Identifier("BoxView"),
              new Import[] {
                newImport("javax.swing.text.BoxView", false),
              })
          .put(
              new Identifier("_ServantLocatorStub"),
              new Import[] {
                newImport("org.omg.PortableServer._ServantLocatorStub", false),
              })
          .put(
              new Identifier("SQLOutputImpl"),
              new Import[] {
                newImport("javax.sql.rowset.serial.SQLOutputImpl", false),
              })
          .put(
              new Identifier("getAllAttributeKeys"),
              new Import[] {
                newImport("javax.swing.text.html.CSS.getAllAttributeKeys", true),
                newImport("javax.swing.text.html.HTML.getAllAttributeKeys", true),
              })
          .put(
              new Identifier("DataBufferDouble"),
              new Import[] {
                newImport("java.awt.image.DataBufferDouble", false),
              })
          .put(
              new Identifier("DiscardOldestPolicy"),
              new Import[] {
                newImport("java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy", false),
              })
          .put(
              new Identifier("JLayer"),
              new Import[] {
                newImport("javax.swing.JLayer", false),
              })
          .put(
              new Identifier("ValidatorHandler"),
              new Import[] {
                newImport("javax.xml.validation.ValidatorHandler", false),
              })
          .put(
              new Identifier("StatementEvent"),
              new Import[] {
                newImport("javax.sql.StatementEvent", false),
              })
          .put(
              new Identifier("EventType"),
              new Import[] {
                newImport("javax.swing.event.DocumentEvent.EventType", false),
                newImport("javax.swing.event.HyperlinkEvent.EventType", false),
              })
          .put(
              new Identifier("VK_KP_RIGHT"),
              new Import[] {
                newImport("java.awt.event.KeyEvent.VK_KP_RIGHT", true),
              })
          .put(
              new Identifier("cos"),
              new Import[] {
                newImport("java.lang.Math.cos", true), newImport("java.lang.StrictMath.cos", true),
              })
          .put(
              new Identifier("expm1"),
              new Import[] {
                newImport("java.lang.Math.expm1", true),
                newImport("java.lang.StrictMath.expm1", true),
              })
          .put(
              new Identifier("HijrahChronology"),
              new Import[] {
                newImport("java.time.chrono.HijrahChronology", false),
              })
          .put(
              new Identifier("OUT_BOTTOM"),
              new Import[] {
                newImport("java.awt.geom.Rectangle2D.OUT_BOTTOM", true),
              })
          .put(
              new Identifier("getBundle"),
              new Import[] {
                newImport("java.util.ResourceBundle.getBundle", true),
              })
          .put(
              new Identifier("StringSelection"),
              new Import[] {
                newImport("java.awt.datatransfer.StringSelection", false),
              })
          .put(
              new Identifier("READ_WRITE"),
              new Import[] {
                newImport("java.nio.channels.FileChannel.MapMode.READ_WRITE", true),
              })
          .put(
              new Identifier("AdapterActivator"),
              new Import[] {
                newImport("org.omg.PortableServer.AdapterActivator", false),
              })
          .put(
              new Identifier("CONFIG"),
              new Import[] {
                newImport("java.util.logging.Level.CONFIG", true),
              })
          .put(
              new Identifier("Random"),
              new Import[] {
                newImport("java.util.Random", false),
              })
          .put(
              new Identifier("XMLSignature"),
              new Import[] {
                newImport("javax.xml.crypto.dsig.XMLSignature", false),
              })
          .put(
              new Identifier("_DISCARDING"),
              new Import[] {
                newImport("org.omg.PortableServer.POAManagerPackage.State._DISCARDING", true),
              })
          .put(
              new Identifier("SUBSTITUTION_PERMISSION"),
              new Import[] {
                newImport("java.io.ObjectStreamConstants.SUBSTITUTION_PERMISSION", true),
              })
          .put(
              new Identifier("LambdaConversionException"),
              new Import[] {
                newImport("java.lang.invoke.LambdaConversionException", false),
              })
          .put(
              new Identifier("TableCellEditor"),
              new Import[] {
                newImport("javax.swing.table.TableCellEditor", false),
              })
          .put(
              new Identifier("emptyNavigableMap"),
              new Import[] {
                newImport("java.util.Collections.emptyNavigableMap", true),
              })
          .put(
              new Identifier("NO_PERMISSION"),
              new Import[] {
                newImport("org.omg.CORBA.NO_PERMISSION", false),
              })
          .put(
              new Identifier("GridBagLayoutInfo"),
              new Import[] {
                newImport("java.awt.GridBagLayoutInfo", false),
              })
          .put(
              new Identifier("LayoutPath"),
              new Import[] {
                newImport("java.awt.font.LayoutPath", false),
              })
          .put(
              new Identifier("Inet4Address"),
              new Import[] {
                newImport("java.net.Inet4Address", false),
              })
          .put(
              new Identifier("C10"),
              new Import[] {
                newImport("java.awt.PageAttributes.MediaType.C10", true),
              })
          .put(
              new Identifier("icSigCalibrationDateTimeTag"),
              new Import[] {
                newImport("java.awt.color.ICC_Profile.icSigCalibrationDateTimeTag", true),
              })
          .put(
              new Identifier("javaFileListFlavor"),
              new Import[] {
                newImport("java.awt.datatransfer.DataFlavor.javaFileListFlavor", true),
              })
          .put(
              new Identifier("releaseMBeanServer"),
              new Import[] {
                newImport("javax.management.MBeanServerFactory.releaseMBeanServer", true),
              })
          .put(
              new Identifier("synchronizedNavigableSet"),
              new Import[] {
                newImport("java.util.Collections.synchronizedNavigableSet", true),
              })
          .put(
              new Identifier("SyncFactory"),
              new Import[] {
                newImport("javax.sql.rowset.spi.SyncFactory", false),
              })
          .put(
              new Identifier("HEBREW"),
              new Import[] {
                newImport("java.lang.Character.UnicodeBlock.HEBREW", true),
              })
          .put(
              new Identifier("ADDRESS"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.ADDRESS", true),
              })
          .put(
              new Identifier("PlatformManagedObject"),
              new Import[] {
                newImport("java.lang.management.PlatformManagedObject", false),
              })
          .put(
              new Identifier("WEIGHT_SEMIBOLD"),
              new Import[] {
                newImport("java.awt.font.TextAttribute.WEIGHT_SEMIBOLD", true),
              })
          .put(
              new Identifier("EncryptedPrivateKeyInfo"),
              new Import[] {
                newImport("javax.crypto.EncryptedPrivateKeyInfo", false),
              })
          .put(
              new Identifier("DefaultLoaderRepository"),
              new Import[] {
                newImport("javax.management.DefaultLoaderRepository", false),
                newImport("javax.management.loading.DefaultLoaderRepository", false),
              })
          .put(
              new Identifier("NON_RETAIN"),
              new Import[] {
                newImport("org.omg.PortableServer.ServantRetentionPolicyValue.NON_RETAIN", true),
              })
          .put(
              new Identifier("MidiUnavailableException"),
              new Import[] {
                newImport("javax.sound.midi.MidiUnavailableException", false),
              })
          .put(
              new Identifier("DuplicateFormatFlagsException"),
              new Import[] {
                newImport("java.util.DuplicateFormatFlagsException", false),
              })
          .put(
              new Identifier("ACTIVE"),
              new Import[] {
                newImport("javax.accessibility.AccessibleState.ACTIVE", true),
                newImport("org.omg.PortableInterceptor.ACTIVE", false),
                newImport("org.omg.PortableServer.POAManagerPackage.State.ACTIVE", true),
              })
          .put(
              new Identifier("SRC"),
              new Import[] {
                newImport("java.awt.AlphaComposite.SRC", true),
                newImport("javax.swing.text.html.HTML.Attribute.SRC", true),
              })
          .put(
              new Identifier("SQLFeatureNotSupportedException"),
              new Import[] {
                newImport("java.sql.SQLFeatureNotSupportedException", false),
              })
          .put(
              new Identifier("isUnderline"),
              new Import[] {
                newImport("javax.swing.text.StyleConstants.isUnderline", true),
              })
          .put(
              new Identifier("Semaphore"),
              new Import[] {
                newImport("java.util.concurrent.Semaphore", false),
              })
          .put(
              new Identifier("Any"),
              new Import[] {
                newImport("org.omg.CORBA.Any", false),
              })
          .put(
              new Identifier("compileClass"),
              new Import[] {
                newImport("java.lang.Compiler.compileClass", true),
              })
          .put(
              new Identifier("REPORTER"),
              new Import[] {
                newImport("javax.xml.stream.XMLInputFactory.REPORTER", true),
              })
          .put(
              new Identifier("Function"),
              new Import[] {
                newImport("java.util.function.Function", false),
              })
          .put(
              new Identifier("times"),
              new Import[] {
                newImport("javax.management.Query.times", true),
              })
          .put(
              new Identifier("getConfiguration"),
              new Import[] {
                newImport("javax.security.auth.login.Configuration.getConfiguration", true),
              })
          .put(
              new Identifier("getFileChooserListViewIcon"),
              new Import[] {
                newImport(
                    "javax.swing.plaf.metal.MetalIconFactory.getFileChooserListViewIcon", true),
              })
          .put(
              new Identifier("FOCUS_FIRST"),
              new Import[] {
                newImport("java.awt.event.FocusEvent.FOCUS_FIRST", true),
              })
          .put(
              new Identifier("STRIKE"),
              new Import[] {
                newImport("javax.swing.text.html.HTML.Tag.STRIKE", true),
              })
          .put(
              new Identifier("setRootFrame"),
              new Import[] {
                newImport("javax.swing.JOptionPane.setRootFrame", true),
              })
          .put(
              new Identifier("CS_PYCC"),
              new Import[] {
                newImport("java.awt.color.ColorSpace.CS_PYCC", true),
              })
          .put(
              new Identifier("OpenMBeanInfo"),
              new Import[] {
                newImport("javax.management.openmbean.OpenMBeanInfo", false),
              })
          .put(
              new Identifier("XADataSource"),
              new Import[] {
                newImport("javax.sql.XADataSource", false),
              })
          .build();
}
